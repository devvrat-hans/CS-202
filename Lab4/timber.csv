old_path,new_path,commit SHA,parent commit SHA,commit message,diff_hist,diff_myers,Discrepancy,Category
README.md,README.md,9795c1e676a7e5e4e0961b58f734d0b673c9b904,d2c507c741566f28396fc5e01a14b28ae23faa13,Quick LOLogo.,"@@ -1,5 +1,4 @@
-Timber
-======
+![Timber](logo.png)
 
 This is a logger with a small API, tag inference, and is injection friendly. Since the tags vary,
 it works really well when coupled with a log reader like [Pidcat][1].","@@ -1,5 +1,4 @@
-Timber
-======
+![Timber](logo.png)
 
 This is a logger with a small API, tag inference, and is injection friendly. Since the tags vary,
 it works really well when coupled with a log reader like [Pidcat][1].",False,readme
pom.xml,pom.xml,cb52b4bd6a358ce8078be9637e5b94000aa10e98,9795c1e676a7e5e4e0961b58f734d0b673c9b904,[maven-release-plugin] prepare release timber-parent-1.0.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.0.0-SNAPSHOT</version>
+  <version>1.0.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -38,7 +38,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-1.0.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.0.0-SNAPSHOT</version>
+  <version>1.0.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -38,7 +38,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-1.0.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,cb52b4bd6a358ce8078be9637e5b94000aa10e98,9795c1e676a7e5e4e0961b58f734d0b673c9b904,[maven-release-plugin] prepare release timber-parent-1.0.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
+    <version>1.0.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
+    <version>1.0.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,cb52b4bd6a358ce8078be9637e5b94000aa10e98,9795c1e676a7e5e4e0961b58f734d0b673c9b904,[maven-release-plugin] prepare release timber-parent-1.0.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
+    <version>1.0.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
+    <version>1.0.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,a41b03af4c25dabc89aca3876ae5cf18f1079fc0,cb52b4bd6a358ce8078be9637e5b94000aa10e98,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.0.0</version>
+  <version>1.0.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -38,7 +38,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-1.0.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.0.0</version>
+  <version>1.0.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -38,7 +38,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-1.0.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,a41b03af4c25dabc89aca3876ae5cf18f1079fc0,cb52b4bd6a358ce8078be9637e5b94000aa10e98,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.0</version>
+    <version>1.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.0</version>
+    <version>1.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,a41b03af4c25dabc89aca3876ae5cf18f1079fc0,cb52b4bd6a358ce8078be9637e5b94000aa10e98,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.0</version>
+    <version>1.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.0</version>
+    <version>1.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
README.md,README.md,9489330914c30001eb4df39923a7ff4b601e232a,a41b03af4c25dabc89aca3876ae5cf18f1079fc0,Or Gradle...,"@@ -37,6 +37,10 @@ Download [the latest JAR][2] or grab via Maven:
   <version>(insert latest version)</version>
 </dependency>
 ```
+or Gradle:
+```groovy
+compile 'com.jakewharton.timber:timber:1.0.+'
+```
 
 
 License","@@ -37,6 +37,10 @@ Download [the latest JAR][2] or grab via Maven:
   <version>(insert latest version)</version>
 </dependency>
 ```
+or Gradle:
+```groovy
+compile 'com.jakewharton.timber:timber:1.0.+'
+```
 
 
 License",False,readme
README.md,README.md,4948ee209993104218d554568e1b2b6f8b17aede,9489330914c30001eb4df39923a7ff4b601e232a,Add some words.,"@@ -22,7 +22,9 @@ Two easy steps:
  1. Figure out if you want `Timber.DEBUG` or `Timber.PROD` and bind it.
  2. Inject an instance of `Timber` everywhere you want to log.
 
-See the sample app in `timber-sample/` to see it in action.
+Check out the sample app in `timber-sample/` to see it in action. It uses [Dagger][3] and
+[Butter Knife][4] to make it the worlds smallest application with both dependency injection and
+view ""injection"".
 
 
 Download
@@ -64,3 +66,5 @@ License
 
  [1]: http://github.com/JakeWharton/pidcat/
  [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.jakewharton.timber&a=timber&v=LATEST
+ [3]: http://square.github.io/dagger/
+ [4]: http://jakewharton.github.io/butterknife/","@@ -22,7 +22,9 @@ Two easy steps:
  1. Figure out if you want `Timber.DEBUG` or `Timber.PROD` and bind it.
  2. Inject an instance of `Timber` everywhere you want to log.
 
-See the sample app in `timber-sample/` to see it in action.
+Check out the sample app in `timber-sample/` to see it in action. It uses [Dagger][3] and
+[Butter Knife][4] to make it the worlds smallest application with both dependency injection and
+view ""injection"".
 
 
 Download
@@ -64,3 +66,5 @@ License
 
  [1]: http://github.com/JakeWharton/pidcat/
  [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.jakewharton.timber&a=timber&v=LATEST
+ [3]: http://square.github.io/dagger/
+ [4]: http://jakewharton.github.io/butterknife/",False,readme
timber-sample/src/main/java/com/example/timber/ui/DemoActivity.java,timber-sample/src/main/java/com/example/timber/ui/DemoActivity.java,2039d230ddf3e5afecabd46bf1e4650f95fa277d,4948ee209993104218d554568e1b2b6f8b17aede,Rename layout to match class name.,"@@ -16,7 +16,7 @@ public class DemoActivity extends ExampleActivity {
 
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
-    setContentView(R.layout.simple_activity);
+    setContentView(R.layout.demo_activity);
   }
 
   @OnClick({ R.id.hello, R.id.hey, R.id.hi })","@@ -16,7 +16,7 @@ public class DemoActivity extends ExampleActivity {
 
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
-    setContentView(R.layout.simple_activity);
+    setContentView(R.layout.demo_activity);
   }
 
   @OnClick({ R.id.hello, R.id.hey, R.id.hi })",False,source
timber-sample/src/main/java/com/example/timber/ExampleActivity.java,timber-sample/src/main/java/com/example/timber/ExampleActivity.java,932cd99762df8776628874833ebaf3be2d467fab,2039d230ddf3e5afecabd46bf1e4650f95fa277d,Style stuff.,"@@ -4,10 +4,11 @@ import android.app.Activity;
 import android.os.Bundle;
 import butterknife.Views;
 
+/** Base activity which handles Dagger and Butter Knife injection. */
 public abstract class ExampleActivity extends Activity {
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
-    ExampleApp.inject(this);
+    ((ExampleApp) getApplication()).inject(this);
   }
 
   @Override public void setContentView(int layoutResID) {","@@ -4,10 +4,11 @@ import android.app.Activity;
 import android.os.Bundle;
 import butterknife.Views;
 
+/** Base activity which handles Dagger and Butter Knife injection. */
 public abstract class ExampleActivity extends Activity {
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
-    ExampleApp.inject(this);
+    ((ExampleApp) getApplication()).inject(this);
   }
 
   @Override public void setContentView(int layoutResID) {",False,source
timber-sample/src/main/java/com/example/timber/ExampleApp.java,timber-sample/src/main/java/com/example/timber/ExampleApp.java,932cd99762df8776628874833ebaf3be2d467fab,2039d230ddf3e5afecabd46bf1e4650f95fa277d,Style stuff.,"@@ -1,6 +1,5 @@
 package com.example.timber;
 
-import android.app.Activity;
 import android.app.Application;
 import dagger.ObjectGraph;
 
@@ -12,7 +11,7 @@ public class ExampleApp extends Application {
     objectGraph = ObjectGraph.create(new ExampleModule());
   }
 
-  public static void inject(Activity activity) {
-    ((ExampleApp) activity.getApplication()).objectGraph.inject(activity);
+  public void inject(Object thing) {
+    objectGraph.inject(thing);
   }
 }","@@ -1,6 +1,5 @@
 package com.example.timber;
 
-import android.app.Activity;
 import android.app.Application;
 import dagger.ObjectGraph;
 
@@ -12,7 +11,7 @@ public class ExampleApp extends Application {
     objectGraph = ObjectGraph.create(new ExampleModule());
   }
 
-  public static void inject(Activity activity) {
-    ((ExampleApp) activity.getApplication()).objectGraph.inject(activity);
+  public void inject(Object thing) {
+    objectGraph.inject(thing);
   }
 }",False,source
timber-sample/src/main/java/com/example/timber/ExampleModule.java,timber-sample/src/main/java/com/example/timber/ExampleModule.java,932cd99762df8776628874833ebaf3be2d467fab,2039d230ddf3e5afecabd46bf1e4650f95fa277d,Style stuff.,"@@ -9,7 +9,6 @@ import timber.log.Timber;
 @Module(injects = DemoActivity.class)
 public class ExampleModule {
   @Provides @Singleton Timber provideTimber() {
-    //noinspection ConstantConditions
     return BuildConfig.DEBUG ? Timber.DEBUG : Timber.PROD;
   }
 }","@@ -9,7 +9,6 @@ import timber.log.Timber;
 @Module(injects = DemoActivity.class)
 public class ExampleModule {
   @Provides @Singleton Timber provideTimber() {
-    //noinspection ConstantConditions
     return BuildConfig.DEBUG ? Timber.DEBUG : Timber.PROD;
   }
 }",False,source
checkstyle.xml,checkstyle.xml,efede4bdcb1687194d98c950571d59a5f251c9da,932cd99762df8776628874833ebaf3be2d467fab,Convert line endings from CRLF to LF.,"@@ -1,135 +1,135 @@
-<?xml version=""1.0""?>
-<!DOCTYPE module PUBLIC
-    ""-//Puppy Crawl//DTD Check Configuration 1.2//EN""
-    ""http://www.puppycrawl.com/dtds/configuration_1_2.dtd"">
-
-<module name=""Checker"">
-  <!--module name=""NewlineAtEndOfFile""/-->
-  <module name=""FileLength""/>
-  <module name=""FileTabCharacter""/>
-
-  <!-- Trailing spaces -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""\s+$""/>
-    <property name=""message"" value=""Line has trailing spaces.""/>
-  </module>
-
-  <!-- Space after 'for' and 'if' -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""^\s*(for|if)[^ ]""/>
-    <property name=""message"" value=""Space needed before opening parenthesis.""/>
-  </module>
-
-  <!-- For each spacing -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""^\s*for \(.*?([^ ]:|:[^ ])""/>
-    <property name=""message"" value=""Space needed around ':' character.""/>
-  </module>
-
-  <module name=""TreeWalker"">
-    <property name=""cacheFile"" value=""${checkstyle.cache.file}""/>
-
-    <!-- Checks for Javadoc comments.                     -->
-    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
-    <!--module name=""JavadocMethod""/-->
-    <!--module name=""JavadocType""/-->
-    <!--module name=""JavadocVariable""/-->
-    <!--module name=""JavadocStyle""/-->
-
-
-    <!-- Checks for Naming Conventions.                  -->
-    <!-- See http://checkstyle.sf.net/config_naming.html -->
-    <module name=""ConstantName""/>
-    <module name=""LocalFinalVariableName""/>
-    <module name=""LocalVariableName""/>
-    <module name=""MemberName""/>
-    <module name=""MethodName"">
-      <property name=""format"" value=""^[a-z][a-zA-Z0-9_]*$""/>
-    </module>
-    <module name=""PackageName""/>
-    <module name=""ParameterName""/>
-    <module name=""StaticVariableName""/>
-    <module name=""TypeName"">
-      <property name=""format"" value=""^[A-Z][a-zA-Z0-9_]*$""/>
-    </module>
-
-
-    <!-- Checks for imports                              -->
-    <!-- See http://checkstyle.sf.net/config_import.html -->
-    <module name=""AvoidStarImport""/>
-    <module name=""IllegalImport""/>
-    <module name=""RedundantImport""/>
-    <module name=""UnusedImports""/>
-
-
-    <!-- Checks for Size Violations.                    -->
-    <!-- See http://checkstyle.sf.net/config_sizes.html -->
-    <module name=""LineLength"">
-      <property name=""max"" value=""100""/>
-    </module>
-    <module name=""MethodLength""/>
-    <module name=""ParameterNumber""/>
-
-
-    <!-- Checks for whitespace                               -->
-    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
-    <module name=""GenericWhitespace""/>
-    <module name=""EmptyForIteratorPad""/>
-    <module name=""MethodParamPad""/>
-    <module name=""NoWhitespaceAfter""/>
-    <module name=""NoWhitespaceBefore""/>
-    <module name=""OperatorWrap""/>
-    <module name=""ParenPad""/>
-    <module name=""TypecastParenPad""/>
-    <module name=""WhitespaceAfter""/>
-    <module name=""WhitespaceAround""/>
-
-
-    <!-- Modifier Checks                                    -->
-    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
-    <!--module name=""ModifierOrder""/-->
-    <module name=""RedundantModifier""/>
-
-
-    <!-- Checks for blocks. You know, those {}'s         -->
-    <!-- See http://checkstyle.sf.net/config_blocks.html -->
-    <module name=""AvoidNestedBlocks""/>
-    <module name=""EmptyBlock""/>
-    <module name=""LeftCurly""/>
-    <module name=""NeedBraces""/>
-    <module name=""RightCurly""/>
-
-
-    <!-- Checks for common coding problems               -->
-    <!-- See http://checkstyle.sf.net/config_coding.html -->
-    <!--module name=""AvoidInlineConditionals""/-->
-    <module name=""CovariantEquals""/>
-    <module name=""EmptyStatement""/>
-    <module name=""EqualsAvoidNull""/>
-    <module name=""EqualsHashCode""/>
-    <!--<module name=""HiddenField""/>-->
-    <module name=""IllegalInstantiation""/>
-    <module name=""InnerAssignment""/>
-    <!--module name=""MagicNumber""/-->
-    <module name=""MissingSwitchDefault""/>
-    <module name=""RedundantThrows""/>
-    <module name=""SimplifyBooleanExpression""/>
-    <module name=""SimplifyBooleanReturn""/>
-
-    <!-- Checks for class design                         -->
-    <!-- See http://checkstyle.sf.net/config_design.html -->
-    <!--module name=""DesignForExtension""/-->
-    <!--module name=""FinalClass""/-->
-    <module name=""HideUtilityClassConstructor""/>
-    <module name=""InterfaceIsType""/>
-    <!--<module name=""VisibilityModifier""/>-->
-
-
-    <!-- Miscellaneous other checks.                   -->
-    <!-- See http://checkstyle.sf.net/config_misc.html -->
-    <module name=""ArrayTypeStyle""/>
-    <!--module name=""FinalParameters""/-->
-    <module name=""TodoComment""/>
-    <module name=""UpperEll""/>
-  </module>
-</module>
+<?xml version=""1.0""?>
+<!DOCTYPE module PUBLIC
+    ""-//Puppy Crawl//DTD Check Configuration 1.2//EN""
+    ""http://www.puppycrawl.com/dtds/configuration_1_2.dtd"">
+
+<module name=""Checker"">
+  <!--module name=""NewlineAtEndOfFile""/-->
+  <module name=""FileLength""/>
+  <module name=""FileTabCharacter""/>
+
+  <!-- Trailing spaces -->
+  <module name=""RegexpSingleline"">
+    <property name=""format"" value=""\s+$""/>
+    <property name=""message"" value=""Line has trailing spaces.""/>
+  </module>
+
+  <!-- Space after 'for' and 'if' -->
+  <module name=""RegexpSingleline"">
+    <property name=""format"" value=""^\s*(for|if)[^ ]""/>
+    <property name=""message"" value=""Space needed before opening parenthesis.""/>
+  </module>
+
+  <!-- For each spacing -->
+  <module name=""RegexpSingleline"">
+    <property name=""format"" value=""^\s*for \(.*?([^ ]:|:[^ ])""/>
+    <property name=""message"" value=""Space needed around ':' character.""/>
+  </module>
+
+  <module name=""TreeWalker"">
+    <property name=""cacheFile"" value=""${checkstyle.cache.file}""/>
+
+    <!-- Checks for Javadoc comments.                     -->
+    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
+    <!--module name=""JavadocMethod""/-->
+    <!--module name=""JavadocType""/-->
+    <!--module name=""JavadocVariable""/-->
+    <!--module name=""JavadocStyle""/-->
+
+
+    <!-- Checks for Naming Conventions.                  -->
+    <!-- See http://checkstyle.sf.net/config_naming.html -->
+    <module name=""ConstantName""/>
+    <module name=""LocalFinalVariableName""/>
+    <module name=""LocalVariableName""/>
+    <module name=""MemberName""/>
+    <module name=""MethodName"">
+      <property name=""format"" value=""^[a-z][a-zA-Z0-9_]*$""/>
+    </module>
+    <module name=""PackageName""/>
+    <module name=""ParameterName""/>
+    <module name=""StaticVariableName""/>
+    <module name=""TypeName"">
+      <property name=""format"" value=""^[A-Z][a-zA-Z0-9_]*$""/>
+    </module>
+
+
+    <!-- Checks for imports                              -->
+    <!-- See http://checkstyle.sf.net/config_import.html -->
+    <module name=""AvoidStarImport""/>
+    <module name=""IllegalImport""/>
+    <module name=""RedundantImport""/>
+    <module name=""UnusedImports""/>
+
+
+    <!-- Checks for Size Violations.                    -->
+    <!-- See http://checkstyle.sf.net/config_sizes.html -->
+    <module name=""LineLength"">
+      <property name=""max"" value=""100""/>
+    </module>
+    <module name=""MethodLength""/>
+    <module name=""ParameterNumber""/>
+
+
+    <!-- Checks for whitespace                               -->
+    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
+    <module name=""GenericWhitespace""/>
+    <module name=""EmptyForIteratorPad""/>
+    <module name=""MethodParamPad""/>
+    <module name=""NoWhitespaceAfter""/>
+    <module name=""NoWhitespaceBefore""/>
+    <module name=""OperatorWrap""/>
+    <module name=""ParenPad""/>
+    <module name=""TypecastParenPad""/>
+    <module name=""WhitespaceAfter""/>
+    <module name=""WhitespaceAround""/>
+
+
+    <!-- Modifier Checks                                    -->
+    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
+    <!--module name=""ModifierOrder""/-->
+    <module name=""RedundantModifier""/>
+
+
+    <!-- Checks for blocks. You know, those {}'s         -->
+    <!-- See http://checkstyle.sf.net/config_blocks.html -->
+    <module name=""AvoidNestedBlocks""/>
+    <module name=""EmptyBlock""/>
+    <module name=""LeftCurly""/>
+    <module name=""NeedBraces""/>
+    <module name=""RightCurly""/>
+
+
+    <!-- Checks for common coding problems               -->
+    <!-- See http://checkstyle.sf.net/config_coding.html -->
+    <!--module name=""AvoidInlineConditionals""/-->
+    <module name=""CovariantEquals""/>
+    <module name=""EmptyStatement""/>
+    <module name=""EqualsAvoidNull""/>
+    <module name=""EqualsHashCode""/>
+    <!--<module name=""HiddenField""/>-->
+    <module name=""IllegalInstantiation""/>
+    <module name=""InnerAssignment""/>
+    <!--module name=""MagicNumber""/-->
+    <module name=""MissingSwitchDefault""/>
+    <module name=""RedundantThrows""/>
+    <module name=""SimplifyBooleanExpression""/>
+    <module name=""SimplifyBooleanReturn""/>
+
+    <!-- Checks for class design                         -->
+    <!-- See http://checkstyle.sf.net/config_design.html -->
+    <!--module name=""DesignForExtension""/-->
+    <!--module name=""FinalClass""/-->
+    <module name=""HideUtilityClassConstructor""/>
+    <module name=""InterfaceIsType""/>
+    <!--<module name=""VisibilityModifier""/>-->
+
+
+    <!-- Miscellaneous other checks.                   -->
+    <!-- See http://checkstyle.sf.net/config_misc.html -->
+    <module name=""ArrayTypeStyle""/>
+    <!--module name=""FinalParameters""/-->
+    <module name=""TodoComment""/>
+    <module name=""UpperEll""/>
+  </module>
+</module>","@@ -1,135 +1,135 @@
-<?xml version=""1.0""?>
-<!DOCTYPE module PUBLIC
-    ""-//Puppy Crawl//DTD Check Configuration 1.2//EN""
-    ""http://www.puppycrawl.com/dtds/configuration_1_2.dtd"">
-
-<module name=""Checker"">
-  <!--module name=""NewlineAtEndOfFile""/-->
-  <module name=""FileLength""/>
-  <module name=""FileTabCharacter""/>
-
-  <!-- Trailing spaces -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""\s+$""/>
-    <property name=""message"" value=""Line has trailing spaces.""/>
-  </module>
-
-  <!-- Space after 'for' and 'if' -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""^\s*(for|if)[^ ]""/>
-    <property name=""message"" value=""Space needed before opening parenthesis.""/>
-  </module>
-
-  <!-- For each spacing -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""^\s*for \(.*?([^ ]:|:[^ ])""/>
-    <property name=""message"" value=""Space needed around ':' character.""/>
-  </module>
-
-  <module name=""TreeWalker"">
-    <property name=""cacheFile"" value=""${checkstyle.cache.file}""/>
-
-    <!-- Checks for Javadoc comments.                     -->
-    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
-    <!--module name=""JavadocMethod""/-->
-    <!--module name=""JavadocType""/-->
-    <!--module name=""JavadocVariable""/-->
-    <!--module name=""JavadocStyle""/-->
-
-
-    <!-- Checks for Naming Conventions.                  -->
-    <!-- See http://checkstyle.sf.net/config_naming.html -->
-    <module name=""ConstantName""/>
-    <module name=""LocalFinalVariableName""/>
-    <module name=""LocalVariableName""/>
-    <module name=""MemberName""/>
-    <module name=""MethodName"">
-      <property name=""format"" value=""^[a-z][a-zA-Z0-9_]*$""/>
-    </module>
-    <module name=""PackageName""/>
-    <module name=""ParameterName""/>
-    <module name=""StaticVariableName""/>
-    <module name=""TypeName"">
-      <property name=""format"" value=""^[A-Z][a-zA-Z0-9_]*$""/>
-    </module>
-
-
-    <!-- Checks for imports                              -->
-    <!-- See http://checkstyle.sf.net/config_import.html -->
-    <module name=""AvoidStarImport""/>
-    <module name=""IllegalImport""/>
-    <module name=""RedundantImport""/>
-    <module name=""UnusedImports""/>
-
-
-    <!-- Checks for Size Violations.                    -->
-    <!-- See http://checkstyle.sf.net/config_sizes.html -->
-    <module name=""LineLength"">
-      <property name=""max"" value=""100""/>
-    </module>
-    <module name=""MethodLength""/>
-    <module name=""ParameterNumber""/>
-
-
-    <!-- Checks for whitespace                               -->
-    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
-    <module name=""GenericWhitespace""/>
-    <module name=""EmptyForIteratorPad""/>
-    <module name=""MethodParamPad""/>
-    <module name=""NoWhitespaceAfter""/>
-    <module name=""NoWhitespaceBefore""/>
-    <module name=""OperatorWrap""/>
-    <module name=""ParenPad""/>
-    <module name=""TypecastParenPad""/>
-    <module name=""WhitespaceAfter""/>
-    <module name=""WhitespaceAround""/>
-
-
-    <!-- Modifier Checks                                    -->
-    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
-    <!--module name=""ModifierOrder""/-->
-    <module name=""RedundantModifier""/>
-
-
-    <!-- Checks for blocks. You know, those {}'s         -->
-    <!-- See http://checkstyle.sf.net/config_blocks.html -->
-    <module name=""AvoidNestedBlocks""/>
-    <module name=""EmptyBlock""/>
-    <module name=""LeftCurly""/>
-    <module name=""NeedBraces""/>
-    <module name=""RightCurly""/>
-
-
-    <!-- Checks for common coding problems               -->
-    <!-- See http://checkstyle.sf.net/config_coding.html -->
-    <!--module name=""AvoidInlineConditionals""/-->
-    <module name=""CovariantEquals""/>
-    <module name=""EmptyStatement""/>
-    <module name=""EqualsAvoidNull""/>
-    <module name=""EqualsHashCode""/>
-    <!--<module name=""HiddenField""/>-->
-    <module name=""IllegalInstantiation""/>
-    <module name=""InnerAssignment""/>
-    <!--module name=""MagicNumber""/-->
-    <module name=""MissingSwitchDefault""/>
-    <module name=""RedundantThrows""/>
-    <module name=""SimplifyBooleanExpression""/>
-    <module name=""SimplifyBooleanReturn""/>
-
-    <!-- Checks for class design                         -->
-    <!-- See http://checkstyle.sf.net/config_design.html -->
-    <!--module name=""DesignForExtension""/-->
-    <!--module name=""FinalClass""/-->
-    <module name=""HideUtilityClassConstructor""/>
-    <module name=""InterfaceIsType""/>
-    <!--<module name=""VisibilityModifier""/>-->
-
-
-    <!-- Miscellaneous other checks.                   -->
-    <!-- See http://checkstyle.sf.net/config_misc.html -->
-    <module name=""ArrayTypeStyle""/>
-    <!--module name=""FinalParameters""/-->
-    <module name=""TodoComment""/>
-    <module name=""UpperEll""/>
-  </module>
-</module>
+<?xml version=""1.0""?>
+<!DOCTYPE module PUBLIC
+    ""-//Puppy Crawl//DTD Check Configuration 1.2//EN""
+    ""http://www.puppycrawl.com/dtds/configuration_1_2.dtd"">
+
+<module name=""Checker"">
+  <!--module name=""NewlineAtEndOfFile""/-->
+  <module name=""FileLength""/>
+  <module name=""FileTabCharacter""/>
+
+  <!-- Trailing spaces -->
+  <module name=""RegexpSingleline"">
+    <property name=""format"" value=""\s+$""/>
+    <property name=""message"" value=""Line has trailing spaces.""/>
+  </module>
+
+  <!-- Space after 'for' and 'if' -->
+  <module name=""RegexpSingleline"">
+    <property name=""format"" value=""^\s*(for|if)[^ ]""/>
+    <property name=""message"" value=""Space needed before opening parenthesis.""/>
+  </module>
+
+  <!-- For each spacing -->
+  <module name=""RegexpSingleline"">
+    <property name=""format"" value=""^\s*for \(.*?([^ ]:|:[^ ])""/>
+    <property name=""message"" value=""Space needed around ':' character.""/>
+  </module>
+
+  <module name=""TreeWalker"">
+    <property name=""cacheFile"" value=""${checkstyle.cache.file}""/>
+
+    <!-- Checks for Javadoc comments.                     -->
+    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
+    <!--module name=""JavadocMethod""/-->
+    <!--module name=""JavadocType""/-->
+    <!--module name=""JavadocVariable""/-->
+    <!--module name=""JavadocStyle""/-->
+
+
+    <!-- Checks for Naming Conventions.                  -->
+    <!-- See http://checkstyle.sf.net/config_naming.html -->
+    <module name=""ConstantName""/>
+    <module name=""LocalFinalVariableName""/>
+    <module name=""LocalVariableName""/>
+    <module name=""MemberName""/>
+    <module name=""MethodName"">
+      <property name=""format"" value=""^[a-z][a-zA-Z0-9_]*$""/>
+    </module>
+    <module name=""PackageName""/>
+    <module name=""ParameterName""/>
+    <module name=""StaticVariableName""/>
+    <module name=""TypeName"">
+      <property name=""format"" value=""^[A-Z][a-zA-Z0-9_]*$""/>
+    </module>
+
+
+    <!-- Checks for imports                              -->
+    <!-- See http://checkstyle.sf.net/config_import.html -->
+    <module name=""AvoidStarImport""/>
+    <module name=""IllegalImport""/>
+    <module name=""RedundantImport""/>
+    <module name=""UnusedImports""/>
+
+
+    <!-- Checks for Size Violations.                    -->
+    <!-- See http://checkstyle.sf.net/config_sizes.html -->
+    <module name=""LineLength"">
+      <property name=""max"" value=""100""/>
+    </module>
+    <module name=""MethodLength""/>
+    <module name=""ParameterNumber""/>
+
+
+    <!-- Checks for whitespace                               -->
+    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
+    <module name=""GenericWhitespace""/>
+    <module name=""EmptyForIteratorPad""/>
+    <module name=""MethodParamPad""/>
+    <module name=""NoWhitespaceAfter""/>
+    <module name=""NoWhitespaceBefore""/>
+    <module name=""OperatorWrap""/>
+    <module name=""ParenPad""/>
+    <module name=""TypecastParenPad""/>
+    <module name=""WhitespaceAfter""/>
+    <module name=""WhitespaceAround""/>
+
+
+    <!-- Modifier Checks                                    -->
+    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
+    <!--module name=""ModifierOrder""/-->
+    <module name=""RedundantModifier""/>
+
+
+    <!-- Checks for blocks. You know, those {}'s         -->
+    <!-- See http://checkstyle.sf.net/config_blocks.html -->
+    <module name=""AvoidNestedBlocks""/>
+    <module name=""EmptyBlock""/>
+    <module name=""LeftCurly""/>
+    <module name=""NeedBraces""/>
+    <module name=""RightCurly""/>
+
+
+    <!-- Checks for common coding problems               -->
+    <!-- See http://checkstyle.sf.net/config_coding.html -->
+    <!--module name=""AvoidInlineConditionals""/-->
+    <module name=""CovariantEquals""/>
+    <module name=""EmptyStatement""/>
+    <module name=""EqualsAvoidNull""/>
+    <module name=""EqualsHashCode""/>
+    <!--<module name=""HiddenField""/>-->
+    <module name=""IllegalInstantiation""/>
+    <module name=""InnerAssignment""/>
+    <!--module name=""MagicNumber""/-->
+    <module name=""MissingSwitchDefault""/>
+    <module name=""RedundantThrows""/>
+    <module name=""SimplifyBooleanExpression""/>
+    <module name=""SimplifyBooleanReturn""/>
+
+    <!-- Checks for class design                         -->
+    <!-- See http://checkstyle.sf.net/config_design.html -->
+    <!--module name=""DesignForExtension""/-->
+    <!--module name=""FinalClass""/-->
+    <module name=""HideUtilityClassConstructor""/>
+    <module name=""InterfaceIsType""/>
+    <!--<module name=""VisibilityModifier""/>-->
+
+
+    <!-- Miscellaneous other checks.                   -->
+    <!-- See http://checkstyle.sf.net/config_misc.html -->
+    <module name=""ArrayTypeStyle""/>
+    <!--module name=""FinalParameters""/-->
+    <module name=""TodoComment""/>
+    <module name=""UpperEll""/>
+  </module>
+</module>",True,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,9cdf4eb079c36ba27dbdc96957b8cf8d1357799c,541cc614cc631f67333abded499ef0728ed89011,Uses Log.* for *(...) where *'s are equal,"@@ -41,7 +41,7 @@ public interface Timber {
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      Log.e(className(), String.format(message, args), t);
+      Log.d(className(), String.format(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
@@ -49,7 +49,7 @@ public interface Timber {
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      Log.e(className(), String.format(message, args), t);
+      Log.i(className(), String.format(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
@@ -57,7 +57,7 @@ public interface Timber {
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      Log.e(className(), String.format(message, args), t);
+      Log.w(className(), String.format(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {","@@ -41,7 +41,7 @@ public interface Timber {
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      Log.e(className(), String.format(message, args), t);
+      Log.d(className(), String.format(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
@@ -49,7 +49,7 @@ public interface Timber {
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      Log.e(className(), String.format(message, args), t);
+      Log.i(className(), String.format(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
@@ -57,7 +57,7 @@ public interface Timber {
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      Log.e(className(), String.format(message, args), t);
+      Log.w(className(), String.format(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {",False,source
CHANGELOG.md,CHANGELOG.md,6dcd4aee8b3f3fd044b71e9e47e19ba4683167a2,61d425108ea8dd52552c2449fc3b6e32077e9a20,Add 'tag'. Bump to 1.1.0.,"@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 1.1.0 *(2013-07-22)*
+----------------------------
+
+ * New: `tag` method allows specifying custom one-time tag.
+ * Fix: Exception-containing methods now log at the correct level.
+
+
 Version 1.0.0 *(2013-07-17)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 1.1.0 *(2013-07-22)*
+----------------------------
+
+ * New: `tag` method allows specifying custom one-time tag.
+ * Fix: Exception-containing methods now log at the correct level.
+
+
 Version 1.0.0 *(2013-07-17)*
 ----------------------------",False,other
README.md,README.md,6dcd4aee8b3f3fd044b71e9e47e19ba4683167a2,61d425108ea8dd52552c2449fc3b6e32077e9a20,Add 'tag'. Bump to 1.1.0.,"@@ -41,7 +41,7 @@ Download [the latest JAR][2] or grab via Maven:
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:1.0.+'
+compile 'com.jakewharton.timber:timber:1.1.+'
 ```","@@ -41,7 +41,7 @@ Download [the latest JAR][2] or grab via Maven:
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:1.0.+'
+compile 'com.jakewharton.timber:timber:1.1.+'
 ```",False,readme
pom.xml,pom.xml,6dcd4aee8b3f3fd044b71e9e47e19ba4683167a2,61d425108ea8dd52552c2449fc3b6e32077e9a20,Add 'tag'. Bump to 1.1.0.,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.0.1-SNAPSHOT</version>
+  <version>1.1.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.0.1-SNAPSHOT</version>
+  <version>1.1.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,6dcd4aee8b3f3fd044b71e9e47e19ba4683167a2,61d425108ea8dd52552c2449fc3b6e32077e9a20,Add 'tag'. Bump to 1.1.0.,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.1-SNAPSHOT</version>
+    <version>1.1.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.1-SNAPSHOT</version>
+    <version>1.1.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,6dcd4aee8b3f3fd044b71e9e47e19ba4683167a2,61d425108ea8dd52552c2449fc3b6e32077e9a20,Add 'tag'. Bump to 1.1.0.,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.1-SNAPSHOT</version>
+    <version>1.1.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.0.1-SNAPSHOT</version>
+    <version>1.1.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,6dcd4aee8b3f3fd044b71e9e47e19ba4683167a2,61d425108ea8dd52552c2449fc3b6e32077e9a20,Add 'tag'. Bump to 1.1.0.,"@@ -22,50 +22,64 @@ public interface Timber {
   void e(String message, Object... args);
   /** Log an error exception and a message with optional format args. */
   void e(Throwable t, String message, Object... args);
+  /** Set a one-time tag for use on the next logging call. */
+  Timber tag(String tag);
 
   /** A {@link Timber} for debug builds. Automatically infers the tag from the calling class. */
   Timber DEBUG = new Timber() {
     private final Pattern anonymousClass = Pattern.compile(""\\$\\d+$"");
+    private String nextTag;
 
-    private String className() {
-      String className = Thread.currentThread().getStackTrace()[4].getClassName();
-      Matcher m = anonymousClass.matcher(className);
+    private String getTag() {
+      String tag = nextTag;
+      if (tag != null) {
+        nextTag = null;
+        return tag;
+      }
+
+      tag = Thread.currentThread().getStackTrace()[4].getClassName();
+      Matcher m = anonymousClass.matcher(tag);
       if (m != null && m.find()) {
-        className = m.replaceAll("""");
+        tag = m.replaceAll("""");
       }
-      return className.substring(className.lastIndexOf('.') + 1);
+      return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
     @Override public void d(String message, Object... args) {
-      Log.d(className(), String.format(message, args));
+      Log.d(getTag(), String.format(message, args));
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      Log.d(className(), String.format(message, args), t);
+      Log.d(getTag(), String.format(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
-      Log.i(className(), String.format(message, args));
+      Log.i(getTag(), String.format(message, args));
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      Log.i(className(), String.format(message, args), t);
+      Log.i(getTag(), String.format(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
-      Log.w(className(), String.format(message, args));
+      Log.w(getTag(), String.format(message, args));
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      Log.w(className(), String.format(message, args), t);
+      Log.w(getTag(), String.format(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {
-      Log.e(className(), String.format(message, args));
+      Log.e(getTag(), String.format(message, args));
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      Log.e(className(), String.format(message, args), t);
+      Log.e(getTag(), String.format(message, args), t);
+    }
+
+    @Override public Timber tag(String tag) {
+      nextTag = tag;
+      return this;
     }
   };
 
@@ -94,5 +108,9 @@ public interface Timber {
 
     @Override public void e(Throwable t, String message, Object... args) {
     }
+
+    @Override public Timber tag(String tag) {
+      return this;
+    }
   };
 }","@@ -22,50 +22,64 @@ public interface Timber {
   void e(String message, Object... args);
   /** Log an error exception and a message with optional format args. */
   void e(Throwable t, String message, Object... args);
+  /** Set a one-time tag for use on the next logging call. */
+  Timber tag(String tag);
 
   /** A {@link Timber} for debug builds. Automatically infers the tag from the calling class. */
   Timber DEBUG = new Timber() {
     private final Pattern anonymousClass = Pattern.compile(""\\$\\d+$"");
+    private String nextTag;
 
-    private String className() {
-      String className = Thread.currentThread().getStackTrace()[4].getClassName();
-      Matcher m = anonymousClass.matcher(className);
+    private String getTag() {
+      String tag = nextTag;
+      if (tag != null) {
+        nextTag = null;
+        return tag;
+      }
+
+      tag = Thread.currentThread().getStackTrace()[4].getClassName();
+      Matcher m = anonymousClass.matcher(tag);
       if (m != null && m.find()) {
-        className = m.replaceAll("""");
+        tag = m.replaceAll("""");
       }
-      return className.substring(className.lastIndexOf('.') + 1);
+      return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
     @Override public void d(String message, Object... args) {
-      Log.d(className(), String.format(message, args));
+      Log.d(getTag(), String.format(message, args));
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      Log.d(className(), String.format(message, args), t);
+      Log.d(getTag(), String.format(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
-      Log.i(className(), String.format(message, args));
+      Log.i(getTag(), String.format(message, args));
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      Log.i(className(), String.format(message, args), t);
+      Log.i(getTag(), String.format(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
-      Log.w(className(), String.format(message, args));
+      Log.w(getTag(), String.format(message, args));
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      Log.w(className(), String.format(message, args), t);
+      Log.w(getTag(), String.format(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {
-      Log.e(className(), String.format(message, args));
+      Log.e(getTag(), String.format(message, args));
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      Log.e(className(), String.format(message, args), t);
+      Log.e(getTag(), String.format(message, args), t);
+    }
+
+    @Override public Timber tag(String tag) {
+      nextTag = tag;
+      return this;
     }
   };
 
@@ -94,5 +108,9 @@ public interface Timber {
 
     @Override public void e(Throwable t, String message, Object... args) {
     }
+
+    @Override public Timber tag(String tag) {
+      return this;
+    }
   };
 }",False,source
pom.xml,pom.xml,bf199f0eaee786174c4df6bdb8f5068f1ba158f9,6dcd4aee8b3f3fd044b71e9e47e19ba4683167a2,[maven-release-plugin] prepare release timber-parent-1.1.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.1.0-SNAPSHOT</version>
+  <version>1.1.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -38,7 +38,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-1.1.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.1.0-SNAPSHOT</version>
+  <version>1.1.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -38,7 +38,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-1.1.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,bf199f0eaee786174c4df6bdb8f5068f1ba158f9,6dcd4aee8b3f3fd044b71e9e47e19ba4683167a2,[maven-release-plugin] prepare release timber-parent-1.1.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.0-SNAPSHOT</version>
+    <version>1.1.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.0-SNAPSHOT</version>
+    <version>1.1.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,bf199f0eaee786174c4df6bdb8f5068f1ba158f9,6dcd4aee8b3f3fd044b71e9e47e19ba4683167a2,[maven-release-plugin] prepare release timber-parent-1.1.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.0-SNAPSHOT</version>
+    <version>1.1.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.0-SNAPSHOT</version>
+    <version>1.1.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,5a1cba27d1b3531dcac8d938dcf445092338ae86,bf199f0eaee786174c4df6bdb8f5068f1ba158f9,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.1.0</version>
+  <version>1.1.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -38,7 +38,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-1.1.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.1.0</version>
+  <version>1.1.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -38,7 +38,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-1.1.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,5a1cba27d1b3531dcac8d938dcf445092338ae86,bf199f0eaee786174c4df6bdb8f5068f1ba158f9,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.0</version>
+    <version>1.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.0</version>
+    <version>1.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,5a1cba27d1b3531dcac8d938dcf445092338ae86,bf199f0eaee786174c4df6bdb8f5068f1ba158f9,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.0</version>
+    <version>1.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.0</version>
+    <version>1.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,1d1751f94287d26dbeacf688cebdda38550720f8,5a1cba27d1b3531dcac8d938dcf445092338ae86,"Improve performance of stacktrace generation

Generating a new Throwable() is a quicker way of getting the current
stacktrace than examining by thread. Some benchmarks are posted on this
StackOverflow answer: http://stackoverflow.com/a/10625065/14302","@@ -37,7 +37,7 @@ public interface Timber {
         return tag;
       }
 
-      tag = Thread.currentThread().getStackTrace()[4].getClassName();
+      tag = new Throwable().getStackTrace()[3].getClassName();
       Matcher m = anonymousClass.matcher(tag);
       if (m != null && m.find()) {
         tag = m.replaceAll("""");","@@ -37,7 +37,7 @@ public interface Timber {
         return tag;
       }
 
-      tag = Thread.currentThread().getStackTrace()[4].getClassName();
+      tag = new Throwable().getStackTrace()[3].getClassName();
       Matcher m = anonymousClass.matcher(tag);
       if (m != null && m.find()) {
         tag = m.replaceAll("""");",False,source
CHANGELOG.md,CHANGELOG.md,8de4e5722ed1ad36b69553c1605335c45fe1d44a,162cc27803162848739876b1ec2a6a03c845b414,Rewrite to be more extensible.,"@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 2.0.0 *(2013-10-21)*
+----------------------------
+
+ * Logging API is now exposed as static methods on `Timber`. Behavior is added by installing `Tree`
+   instances for logging.
+
+
 Version 1.1.0 *(2013-07-22)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 2.0.0 *(2013-10-21)*
+----------------------------
+
+ * Logging API is now exposed as static methods on `Timber`. Behavior is added by installing `Tree`
+   instances for logging.
+
+
 Version 1.1.0 *(2013-07-22)*
 ----------------------------",False,other
README.md,README.md,8de4e5722ed1ad36b69553c1605335c45fe1d44a,162cc27803162848739876b1ec2a6a03c845b414,Rewrite to be more extensible.,"@@ -1,16 +1,19 @@
 ![Timber](logo.png)
 
-This is a logger with a small API, tag inference, and is injection friendly. Since the tags vary,
-it works really well when coupled with a log reader like [Pidcat][1].
+This is a logger with a small, extensible API which provides utility on top of Android's normal
+`Log` class.
 
 I copy this class into all the little apps I make. I'm tired of doing it. Now it's a library.
 
-It has two implementations: `Timber.DEBUG` and `Timber.PROD`.
+Behavior is added through `Tree` instances. You can install an instance by calling `Timber.plant`.
+Installation of `Tree`s should be done as early as possible. The `onCreate` of your application is
+the most logical choice.
 
-The debug implementation will automatically figure out which class it's being called from and use
-that as its tag. The API also does string formatting for you.
+The `DebugTree` implementation will automatically figure out from which class it's being called and
+use that class name as its tag. Since the tags vary, it works really well when coupled with a log
+reader like [Pidcat][1].
 
-The production implementation does nothing. Like, nothing. Every time you log in production, a
+There are no `Tree` implementations installed by default because every time you log in production, a
 puppy dies.
 
 
@@ -19,12 +22,10 @@ Usage
 
 Two easy steps:
 
- 1. Figure out if you want `Timber.DEBUG` or `Timber.PROD` and bind it.
- 2. Inject an instance of `Timber` everywhere you want to log.
+ 1. Install any `Tree` instances you want in the `onCreate` of your application class.
+ 2. Call `Timber`'s static methods everywhere throughout your app.
 
-Check out the sample app in `timber-sample/` to see it in action. It uses [Dagger][3] and
-[Butter Knife][4] to make it the worlds smallest application with both dependency injection and
-view ""injection"".
+Check out the sample app in `timber-sample/` to see it in action.
 
 
 Download
@@ -41,7 +42,7 @@ Download [the latest JAR][2] or grab via Maven:
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:1.1.+'
+compile 'com.jakewharton.timber:timber:2.0.+'
 ```","@@ -1,16 +1,19 @@
 ![Timber](logo.png)
 
-This is a logger with a small API, tag inference, and is injection friendly. Since the tags vary,
-it works really well when coupled with a log reader like [Pidcat][1].
+This is a logger with a small, extensible API which provides utility on top of Android's normal
+`Log` class.
 
 I copy this class into all the little apps I make. I'm tired of doing it. Now it's a library.
 
-It has two implementations: `Timber.DEBUG` and `Timber.PROD`.
+Behavior is added through `Tree` instances. You can install an instance by calling `Timber.plant`.
+Installation of `Tree`s should be done as early as possible. The `onCreate` of your application is
+the most logical choice.
 
-The debug implementation will automatically figure out which class it's being called from and use
-that as its tag. The API also does string formatting for you.
+The `DebugTree` implementation will automatically figure out from which class it's being called and
+use that class name as its tag. Since the tags vary, it works really well when coupled with a log
+reader like [Pidcat][1].
 
-The production implementation does nothing. Like, nothing. Every time you log in production, a
+There are no `Tree` implementations installed by default because every time you log in production, a
 puppy dies.
 
 
@@ -19,12 +22,10 @@ Usage
 
 Two easy steps:
 
- 1. Figure out if you want `Timber.DEBUG` or `Timber.PROD` and bind it.
- 2. Inject an instance of `Timber` everywhere you want to log.
+ 1. Install any `Tree` instances you want in the `onCreate` of your application class.
+ 2. Call `Timber`'s static methods everywhere throughout your app.
 
-Check out the sample app in `timber-sample/` to see it in action. It uses [Dagger][3] and
-[Butter Knife][4] to make it the worlds smallest application with both dependency injection and
-view ""injection"".
+Check out the sample app in `timber-sample/` to see it in action.
 
 
 Download
@@ -41,7 +42,7 @@ Download [the latest JAR][2] or grab via Maven:
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:1.1.+'
+compile 'com.jakewharton.timber:timber:2.0.+'
 ```",False,readme
pom.xml,pom.xml,8de4e5722ed1ad36b69553c1605335c45fe1d44a,162cc27803162848739876b1ec2a6a03c845b414,Rewrite to be more extensible.,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.1.1-SNAPSHOT</version>
+  <version>2.0.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -30,7 +30,6 @@
     <java.version>1.6</java.version>
     <android.version>4.1.1.4</android.version>
     <android.platform>16</android.platform>
-    <dagger.version>1.0.1</dagger.version>
     <butterknife.version>2.0.0</butterknife.version>
   </properties>
 
@@ -65,16 +64,6 @@
         <artifactId>butterknife</artifactId>
         <version>${butterknife.version}</version>
       </dependency>
-      <dependency>
-        <groupId>com.squareup.dagger</groupId>
-        <artifactId>dagger</artifactId>
-        <version>${dagger.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.squareup.dagger</groupId>
-        <artifactId>dagger-compiler</artifactId>
-        <version>${dagger.version}</version>
-      </dependency>
     </dependencies>
   </dependencyManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>1.1.1-SNAPSHOT</version>
+  <version>2.0.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -30,7 +30,6 @@
     <java.version>1.6</java.version>
     <android.version>4.1.1.4</android.version>
     <android.platform>16</android.platform>
-    <dagger.version>1.0.1</dagger.version>
     <butterknife.version>2.0.0</butterknife.version>
   </properties>
 
@@ -65,16 +64,6 @@
         <artifactId>butterknife</artifactId>
         <version>${butterknife.version}</version>
       </dependency>
-      <dependency>
-        <groupId>com.squareup.dagger</groupId>
-        <artifactId>dagger</artifactId>
-        <version>${dagger.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.squareup.dagger</groupId>
-        <artifactId>dagger-compiler</artifactId>
-        <version>${dagger.version}</version>
-      </dependency>
     </dependencies>
   </dependencyManagement>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,8de4e5722ed1ad36b69553c1605335c45fe1d44a,162cc27803162848739876b1ec2a6a03c845b414,Rewrite to be more extensible.,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.1-SNAPSHOT</version>
+    <version>2.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>
@@ -23,15 +23,6 @@
       <groupId>com.jakewharton</groupId>
       <artifactId>butterknife</artifactId>
     </dependency>
-    <dependency>
-      <groupId>com.squareup.dagger</groupId>
-      <artifactId>dagger</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup.dagger</groupId>
-      <artifactId>dagger-compiler</artifactId>
-      <scope>provided</scope>
-    </dependency>
 
     <dependency>
       <groupId>com.google.android</groupId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.1-SNAPSHOT</version>
+    <version>2.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>
@@ -23,15 +23,6 @@
       <groupId>com.jakewharton</groupId>
       <artifactId>butterknife</artifactId>
     </dependency>
-    <dependency>
-      <groupId>com.squareup.dagger</groupId>
-      <artifactId>dagger</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup.dagger</groupId>
-      <artifactId>dagger-compiler</artifactId>
-      <scope>provided</scope>
-    </dependency>
 
     <dependency>
       <groupId>com.google.android</groupId>",False,other
timber-sample/src/main/java/com/example/timber/ExampleActivity.java,,8de4e5722ed1ad36b69553c1605335c45fe1d44a,162cc27803162848739876b1ec2a6a03c845b414,Rewrite to be more extensible.,"@@ -1,18 +0,0 @@
-package com.example.timber;
-
-import android.app.Activity;
-import android.os.Bundle;
-import butterknife.Views;
-
-/** Base activity which handles Dagger and Butter Knife injection. */
-public abstract class ExampleActivity extends Activity {
-  @Override protected void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    ((ExampleApp) getApplication()).inject(this);
-  }
-
-  @Override public void setContentView(int layoutResID) {
-    super.setContentView(layoutResID);
-    Views.inject(this);
-  }
-}","@@ -1,18 +0,0 @@
-package com.example.timber;
-
-import android.app.Activity;
-import android.os.Bundle;
-import butterknife.Views;
-
-/** Base activity which handles Dagger and Butter Knife injection. */
-public abstract class ExampleActivity extends Activity {
-  @Override protected void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    ((ExampleApp) getApplication()).inject(this);
-  }
-
-  @Override public void setContentView(int layoutResID) {
-    super.setContentView(layoutResID);
-    Views.inject(this);
-  }
-}",False,source
timber-sample/src/main/java/com/example/timber/ExampleApp.java,timber-sample/src/main/java/com/example/timber/ExampleApp.java,8de4e5722ed1ad36b69553c1605335c45fe1d44a,162cc27803162848739876b1ec2a6a03c845b414,Rewrite to be more extensible.,"@@ -1,17 +1,39 @@
 package com.example.timber;
 
 import android.app.Application;
-import dagger.ObjectGraph;
+import timber.log.Timber;
 
-public class ExampleApp extends Application {
-  private ObjectGraph objectGraph;
+import static timber.log.Timber.DebugTree;
 
+public class ExampleApp extends Application {
   @Override public void onCreate() {
     super.onCreate();
-    objectGraph = ObjectGraph.create(new ExampleModule());
+
+    if (BuildConfig.DEBUG) {
+      Timber.plant(new DebugTree());
+    } else {
+      Timber.plant(new CrashReportingTree());
+    }
   }
 
-  public void inject(Object thing) {
-    objectGraph.inject(thing);
+  /** A tree which logs important information for crash reporting. */
+  private static class CrashReportingTree extends Timber.HollowTree {
+    @Override public void i(String message, Object... args) {
+      // TODO e.g., Crashlytics.log(String.format(message, args));
+    }
+
+    @Override public void i(Throwable t, String message, Object... args) {
+      i(message, args); // Just add to the log.
+    }
+
+    @Override public void e(String message, Object... args) {
+      i(""ERROR: "" + message, args); // Just add to the log.
+    }
+
+    @Override public void e(Throwable t, String message, Object... args) {
+      e(message, args);
+
+      // TODO e.g., Crashlytics.logException(t);
+    }
   }
 }","@@ -1,17 +1,39 @@
 package com.example.timber;
 
 import android.app.Application;
-import dagger.ObjectGraph;
+import timber.log.Timber;
 
-public class ExampleApp extends Application {
-  private ObjectGraph objectGraph;
+import static timber.log.Timber.DebugTree;
 
+public class ExampleApp extends Application {
   @Override public void onCreate() {
     super.onCreate();
-    objectGraph = ObjectGraph.create(new ExampleModule());
+
+    if (BuildConfig.DEBUG) {
+      Timber.plant(new DebugTree());
+    } else {
+      Timber.plant(new CrashReportingTree());
+    }
   }
 
-  public void inject(Object thing) {
-    objectGraph.inject(thing);
+  /** A tree which logs important information for crash reporting. */
+  private static class CrashReportingTree extends Timber.HollowTree {
+    @Override public void i(String message, Object... args) {
+      // TODO e.g., Crashlytics.log(String.format(message, args));
+    }
+
+    @Override public void i(Throwable t, String message, Object... args) {
+      i(message, args); // Just add to the log.
+    }
+
+    @Override public void e(String message, Object... args) {
+      i(""ERROR: "" + message, args); // Just add to the log.
+    }
+
+    @Override public void e(Throwable t, String message, Object... args) {
+      e(message, args);
+
+      // TODO e.g., Crashlytics.logException(t);
+    }
   }
 }",False,source
timber-sample/src/main/java/com/example/timber/ExampleModule.java,,8de4e5722ed1ad36b69553c1605335c45fe1d44a,162cc27803162848739876b1ec2a6a03c845b414,Rewrite to be more extensible.,"@@ -1,14 +0,0 @@
-package com.example.timber;
-
-import com.example.timber.ui.DemoActivity;
-import dagger.Module;
-import dagger.Provides;
-import javax.inject.Singleton;
-import timber.log.Timber;
-
-@Module(injects = DemoActivity.class)
-public class ExampleModule {
-  @Provides @Singleton Timber provideTimber() {
-    return BuildConfig.DEBUG ? Timber.DEBUG : Timber.PROD;
-  }
-}","@@ -1,14 +0,0 @@
-package com.example.timber;
-
-import com.example.timber.ui.DemoActivity;
-import dagger.Module;
-import dagger.Provides;
-import javax.inject.Singleton;
-import timber.log.Timber;
-
-@Module(injects = DemoActivity.class)
-public class ExampleModule {
-  @Provides @Singleton Timber provideTimber() {
-    return BuildConfig.DEBUG ? Timber.DEBUG : Timber.PROD;
-  }
-}",False,source
timber-sample/src/main/java/com/example/timber/ui/DemoActivity.java,timber-sample/src/main/java/com/example/timber/ui/DemoActivity.java,8de4e5722ed1ad36b69553c1605335c45fe1d44a,162cc27803162848739876b1ec2a6a03c845b414,Rewrite to be more extensible.,"@@ -1,27 +1,26 @@
 package com.example.timber.ui;
 
+import android.app.Activity;
 import android.os.Bundle;
 import android.widget.Button;
 import android.widget.Toast;
 import butterknife.OnClick;
-import com.example.timber.ExampleActivity;
+import butterknife.Views;
 import com.example.timber.R;
-import javax.inject.Inject;
 import timber.log.Timber;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
-public class DemoActivity extends ExampleActivity {
-  @Inject Timber timber;
-
+public class DemoActivity extends Activity {
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.demo_activity);
+    Views.inject(this);
   }
 
   @OnClick({ R.id.hello, R.id.hey, R.id.hi })
   public void greetingClicked(Button button) {
-    timber.i(""A button with ID %s was clicked to say '%s'."", button.getId(), button.getText());
+    Timber.i(""A button with ID %s was clicked to say '%s'."", button.getId(), button.getText());
     Toast.makeText(this, ""Check logcat for a greeting!"", LENGTH_SHORT).show();
   }
 }","@@ -1,27 +1,26 @@
 package com.example.timber.ui;
 
+import android.app.Activity;
 import android.os.Bundle;
 import android.widget.Button;
 import android.widget.Toast;
 import butterknife.OnClick;
-import com.example.timber.ExampleActivity;
+import butterknife.Views;
 import com.example.timber.R;
-import javax.inject.Inject;
 import timber.log.Timber;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
-public class DemoActivity extends ExampleActivity {
-  @Inject Timber timber;
-
+public class DemoActivity extends Activity {
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.demo_activity);
+    Views.inject(this);
   }
 
   @OnClick({ R.id.hello, R.id.hey, R.id.hi })
   public void greetingClicked(Button button) {
-    timber.i(""A button with ID %s was clicked to say '%s'."", button.getId(), button.getText());
+    Timber.i(""A button with ID %s was clicked to say '%s'."", button.getId(), button.getText());
     Toast.makeText(this, ""Check logcat for a greeting!"", LENGTH_SHORT).show();
   }
 }",False,source
timber/pom.xml,timber/pom.xml,8de4e5722ed1ad36b69553c1605335c45fe1d44a,162cc27803162848739876b1ec2a6a03c845b414,Rewrite to be more extensible.,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.1-SNAPSHOT</version>
+    <version>2.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>1.1.1-SNAPSHOT</version>
+    <version>2.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,8de4e5722ed1ad36b69553c1605335c45fe1d44a,162cc27803162848739876b1ec2a6a03c845b414,Rewrite to be more extensible.,"@@ -1,44 +1,113 @@
 package timber.log;
 
 import android.util.Log;
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 /** Logging for lazy people. */
-public interface Timber {
+public final class Timber {
   /** Log a debug message with optional format args. */
-  void d(String message, Object... args);
+  public static void d(String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.d(message, args);
+    }
+  }
+
   /** Log a debug exception and a message with optional format args. */
-  void d(Throwable t, String message, Object... args);
+  public static void d(Throwable t, String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.d(t, message, args);
+    }
+  }
+
   /** Log an info message with optional format args. */
-  void i(String message, Object... args);
+  public static void i(String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.i(message, args);
+    }
+  }
+
   /** Log an info exception and a message with optional format args. */
-  void i(Throwable t, String message, Object... args);
+  public static void i(Throwable t, String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.i(t, message, args);
+    }
+  }
+
   /** Log a warning message with optional format args. */
-  void w(String message, Object... args);
+  public static void w(String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.w(message, args);
+    }
+  }
+
   /** Log a warning exception and a message with optional format args. */
-  void w(Throwable t, String message, Object... args);
+  public static void w(Throwable t, String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.w(t, message, args);
+    }
+  }
+
   /** Log an error message with optional format args. */
-  void e(String message, Object... args);
+  public static void e(String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.e(message, args);
+    }
+  }
+
   /** Log an error exception and a message with optional format args. */
-  void e(Throwable t, String message, Object... args);
-  /** Set a one-time tag for use on the next logging call. */
-  Timber tag(String tag);
-
-  /** A {@link Timber} for debug builds. Automatically infers the tag from the calling class. */
-  Timber DEBUG = new Timber() {
-    private final Pattern anonymousClass = Pattern.compile(""\\$\\d+$"");
-    private String nextTag;
-
-    private String getTag() {
-      String tag = nextTag;
-      if (tag != null) {
-        nextTag = null;
-        return tag;
-      }
+  public static void e(Throwable t, String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.e(t, message, args);
+    }
+  }
 
-      tag = new Throwable().getStackTrace()[3].getClassName();
-      Matcher m = anonymousClass.matcher(tag);
+  /** Add a new logging tree. */
+  public static void plant(Tree tree) {
+    FOREST.add(tree);
+  }
+
+  private static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
+
+  private Timber() {
+  }
+
+  /** A facade for handling logging calls. Install instances via {@link #plant}. */
+  public interface Tree {
+    /** Log a debug message with optional format args. */
+    void d(String message, Object... args);
+
+    /** Log a debug exception and a message with optional format args. */
+    void d(Throwable t, String message, Object... args);
+
+    /** Log an info message with optional format args. */
+    void i(String message, Object... args);
+
+    /** Log an info exception and a message with optional format args. */
+    void i(Throwable t, String message, Object... args);
+
+    /** Log a warning message with optional format args. */
+    void w(String message, Object... args);
+
+    /** Log a warning exception and a message with optional format args. */
+    void w(Throwable t, String message, Object... args);
+
+    /** Log an error message with optional format args. */
+    void e(String message, Object... args);
+
+    /** Log an error exception and a message with optional format args. */
+    void e(Throwable t, String message, Object... args);
+  }
+
+  /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
+  public static class DebugTree implements Tree {
+    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
+
+    private static String createTag() {
+      String tag = new Throwable().getStackTrace()[3].getClassName();
+      Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m != null && m.find()) {
         tag = m.replaceAll("""");
       }
@@ -46,45 +115,40 @@ public interface Timber {
     }
 
     @Override public void d(String message, Object... args) {
-      Log.d(getTag(), String.format(message, args));
+      Log.d(createTag(), String.format(message, args));
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      Log.d(getTag(), String.format(message, args), t);
+      Log.d(createTag(), String.format(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
-      Log.i(getTag(), String.format(message, args));
+      Log.i(createTag(), String.format(message, args));
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      Log.i(getTag(), String.format(message, args), t);
+      Log.i(createTag(), String.format(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
-      Log.w(getTag(), String.format(message, args));
+      Log.w(createTag(), String.format(message, args));
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      Log.w(getTag(), String.format(message, args), t);
+      Log.w(createTag(), String.format(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {
-      Log.e(getTag(), String.format(message, args));
+      Log.e(createTag(), String.format(message, args));
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      Log.e(getTag(), String.format(message, args), t);
+      Log.e(createTag(), String.format(message, args), t);
     }
+  }
 
-    @Override public Timber tag(String tag) {
-      nextTag = tag;
-      return this;
-    }
-  };
-
-  /** A {@link Timber} for production builds. Is neither seen nor heard. */
-  Timber PROD = new Timber() {
+  /** A {@link Tree} which does nothing. Useful for extending. */
+  public static class HollowTree implements Tree {
     @Override public void d(String message, Object... args) {
     }
 
@@ -108,9 +172,5 @@ public interface Timber {
 
     @Override public void e(Throwable t, String message, Object... args) {
     }
-
-    @Override public Timber tag(String tag) {
-      return this;
-    }
-  };
+  }
 }","@@ -1,44 +1,113 @@
 package timber.log;
 
 import android.util.Log;
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 /** Logging for lazy people. */
-public interface Timber {
+public final class Timber {
   /** Log a debug message with optional format args. */
-  void d(String message, Object... args);
+  public static void d(String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.d(message, args);
+    }
+  }
+
   /** Log a debug exception and a message with optional format args. */
-  void d(Throwable t, String message, Object... args);
+  public static void d(Throwable t, String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.d(t, message, args);
+    }
+  }
+
   /** Log an info message with optional format args. */
-  void i(String message, Object... args);
+  public static void i(String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.i(message, args);
+    }
+  }
+
   /** Log an info exception and a message with optional format args. */
-  void i(Throwable t, String message, Object... args);
+  public static void i(Throwable t, String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.i(t, message, args);
+    }
+  }
+
   /** Log a warning message with optional format args. */
-  void w(String message, Object... args);
+  public static void w(String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.w(message, args);
+    }
+  }
+
   /** Log a warning exception and a message with optional format args. */
-  void w(Throwable t, String message, Object... args);
+  public static void w(Throwable t, String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.w(t, message, args);
+    }
+  }
+
   /** Log an error message with optional format args. */
-  void e(String message, Object... args);
+  public static void e(String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.e(message, args);
+    }
+  }
+
   /** Log an error exception and a message with optional format args. */
-  void e(Throwable t, String message, Object... args);
-  /** Set a one-time tag for use on the next logging call. */
-  Timber tag(String tag);
-
-  /** A {@link Timber} for debug builds. Automatically infers the tag from the calling class. */
-  Timber DEBUG = new Timber() {
-    private final Pattern anonymousClass = Pattern.compile(""\\$\\d+$"");
-    private String nextTag;
-
-    private String getTag() {
-      String tag = nextTag;
-      if (tag != null) {
-        nextTag = null;
-        return tag;
-      }
+  public static void e(Throwable t, String message, Object... args) {
+    for (Tree tree : FOREST) {
+      tree.e(t, message, args);
+    }
+  }
 
-      tag = new Throwable().getStackTrace()[3].getClassName();
-      Matcher m = anonymousClass.matcher(tag);
+  /** Add a new logging tree. */
+  public static void plant(Tree tree) {
+    FOREST.add(tree);
+  }
+
+  private static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
+
+  private Timber() {
+  }
+
+  /** A facade for handling logging calls. Install instances via {@link #plant}. */
+  public interface Tree {
+    /** Log a debug message with optional format args. */
+    void d(String message, Object... args);
+
+    /** Log a debug exception and a message with optional format args. */
+    void d(Throwable t, String message, Object... args);
+
+    /** Log an info message with optional format args. */
+    void i(String message, Object... args);
+
+    /** Log an info exception and a message with optional format args. */
+    void i(Throwable t, String message, Object... args);
+
+    /** Log a warning message with optional format args. */
+    void w(String message, Object... args);
+
+    /** Log a warning exception and a message with optional format args. */
+    void w(Throwable t, String message, Object... args);
+
+    /** Log an error message with optional format args. */
+    void e(String message, Object... args);
+
+    /** Log an error exception and a message with optional format args. */
+    void e(Throwable t, String message, Object... args);
+  }
+
+  /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
+  public static class DebugTree implements Tree {
+    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
+
+    private static String createTag() {
+      String tag = new Throwable().getStackTrace()[3].getClassName();
+      Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m != null && m.find()) {
         tag = m.replaceAll("""");
       }
@@ -46,45 +115,40 @@ public interface Timber {
     }
 
     @Override public void d(String message, Object... args) {
-      Log.d(getTag(), String.format(message, args));
+      Log.d(createTag(), String.format(message, args));
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      Log.d(getTag(), String.format(message, args), t);
+      Log.d(createTag(), String.format(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
-      Log.i(getTag(), String.format(message, args));
+      Log.i(createTag(), String.format(message, args));
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      Log.i(getTag(), String.format(message, args), t);
+      Log.i(createTag(), String.format(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
-      Log.w(getTag(), String.format(message, args));
+      Log.w(createTag(), String.format(message, args));
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      Log.w(getTag(), String.format(message, args), t);
+      Log.w(createTag(), String.format(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {
-      Log.e(getTag(), String.format(message, args));
+      Log.e(createTag(), String.format(message, args));
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      Log.e(getTag(), String.format(message, args), t);
+      Log.e(createTag(), String.format(message, args), t);
     }
+  }
 
-    @Override public Timber tag(String tag) {
-      nextTag = tag;
-      return this;
-    }
-  };
-
-  /** A {@link Timber} for production builds. Is neither seen nor heard. */
-  Timber PROD = new Timber() {
+  /** A {@link Tree} which does nothing. Useful for extending. */
+  public static class HollowTree implements Tree {
     @Override public void d(String message, Object... args) {
     }
 
@@ -108,9 +172,5 @@ public interface Timber {
 
     @Override public void e(Throwable t, String message, Object... args) {
     }
-
-    @Override public Timber tag(String tag) {
-      return this;
-    }
-  };
+  }
 }",False,source
pom.xml,pom.xml,643bd7c384fa5d454a62549962fa1d8cee31798b,512884a4e4057134078680551cb5bc3fd3b3e1b7,[maven-release-plugin] prepare release timber-parent-2.0.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.0.0-SNAPSHOT</version>
+  <version>2.0.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -37,7 +37,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.0.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.0.0-SNAPSHOT</version>
+  <version>2.0.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -37,7 +37,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.0.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,643bd7c384fa5d454a62549962fa1d8cee31798b,512884a4e4057134078680551cb5bc3fd3b3e1b7,[maven-release-plugin] prepare release timber-parent-2.0.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.0-SNAPSHOT</version>
+    <version>2.0.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.0-SNAPSHOT</version>
+    <version>2.0.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,643bd7c384fa5d454a62549962fa1d8cee31798b,512884a4e4057134078680551cb5bc3fd3b3e1b7,[maven-release-plugin] prepare release timber-parent-2.0.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.0-SNAPSHOT</version>
+    <version>2.0.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.0-SNAPSHOT</version>
+    <version>2.0.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,1c963dd6f0b2a0acdc1e93cb548f0c8dd6af53a2,643bd7c384fa5d454a62549962fa1d8cee31798b,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.0.0</version>
+  <version>2.0.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -37,7 +37,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.0.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.0.0</version>
+  <version>2.0.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -37,7 +37,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.0.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,1c963dd6f0b2a0acdc1e93cb548f0c8dd6af53a2,643bd7c384fa5d454a62549962fa1d8cee31798b,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.0</version>
+    <version>2.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.0</version>
+    <version>2.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,1c963dd6f0b2a0acdc1e93cb548f0c8dd6af53a2,643bd7c384fa5d454a62549962fa1d8cee31798b,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.0</version>
+    <version>2.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.0</version>
+    <version>2.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber-sample/src/main/java/com/example/timber/ui/DemoActivity.java,timber-sample/src/main/java/com/example/timber/ui/DemoActivity.java,8fa7c6bb067f017f1d00b51cd957664f3baaaff9,1c963dd6f0b2a0acdc1e93cb548f0c8dd6af53a2,"Adds support for TaggedTrees with example.

Adds support for TaggedTrees with example.

Adds braces to if.

Changes example.","@@ -16,6 +16,8 @@ public class DemoActivity extends Activity {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.demo_activity);
     Views.inject(this);
+    Timber.tag(""LifeCycles"");
+    Timber.d(""Activity Created"");
   }
 
   @OnClick({ R.id.hello, R.id.hey, R.id.hi })","@@ -16,6 +16,8 @@ public class DemoActivity extends Activity {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.demo_activity);
     Views.inject(this);
+    Timber.tag(""LifeCycles"");
+    Timber.d(""Activity Created"");
   }
 
   @OnClick({ R.id.hello, R.id.hey, R.id.hi })",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,8fa7c6bb067f017f1d00b51cd957664f3baaaff9,1c963dd6f0b2a0acdc1e93cb548f0c8dd6af53a2,"Adds support for TaggedTrees with example.

Adds support for TaggedTrees with example.

Adds braces to if.

Changes example.","@@ -1,6 +1,7 @@
 package timber.log;
 
 import android.util.Log;
+import android.util.SparseBooleanArray;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.regex.Matcher;
@@ -64,12 +65,23 @@ public final class Timber {
     }
   }
 
+  /** Set a one-time tag for use on the next logging call. */
+  public static void tag(String tag) {
+    for (int index = 0, size = TAGGED_TREES.size(); index < size; index++) {
+      ((TaggedTree) FOREST.get(TAGGED_TREES.keyAt(index))).tag(tag);
+    }
+  }
+
   /** Add a new logging tree. */
   public static void plant(Tree tree) {
+    if (tree instanceof TaggedTree) {
+      TAGGED_TREES.append(FOREST.size(), true);
+    }
     FOREST.add(tree);
   }
 
   private static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
+  private static final SparseBooleanArray TAGGED_TREES = new SparseBooleanArray();
 
   private Timber() {
   }
@@ -101,13 +113,27 @@ public final class Timber {
     void e(Throwable t, String message, Object... args);
   }
 
+  /** A facade for attaching tags to logging calls. Install instances via {@link #plant} */
+  public interface TaggedTree extends Tree {
+    /** Set a one-time tag for use on the next logging call. */
+    void tag(String tag);
+  }
+
   /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
-  public static class DebugTree implements Tree {
+  public static class DebugTree implements TaggedTree {
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
+    private String nextTag;
+
+    private String createTag() {
+      String tag = nextTag;
+      if (tag != null) {
+        nextTag = null;
+        return tag;
+      }
 
-    private static String createTag() {
-      String tag = new Throwable().getStackTrace()[3].getClassName();
+      tag = new Throwable().getStackTrace()[3].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
+      // TODO: IDE says m can never be null here, unnecessary null check?
       if (m != null && m.find()) {
         tag = m.replaceAll("""");
       }
@@ -145,6 +171,10 @@ public final class Timber {
     @Override public void e(Throwable t, String message, Object... args) {
       Log.e(createTag(), String.format(message, args), t);
     }
+
+    @Override public void tag(String tag) {
+      nextTag = tag;
+    }
   }
 
   /** A {@link Tree} which does nothing. Useful for extending. */","@@ -1,6 +1,7 @@
 package timber.log;
 
 import android.util.Log;
+import android.util.SparseBooleanArray;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.regex.Matcher;
@@ -64,12 +65,23 @@ public final class Timber {
     }
   }
 
+  /** Set a one-time tag for use on the next logging call. */
+  public static void tag(String tag) {
+    for (int index = 0, size = TAGGED_TREES.size(); index < size; index++) {
+      ((TaggedTree) FOREST.get(TAGGED_TREES.keyAt(index))).tag(tag);
+    }
+  }
+
   /** Add a new logging tree. */
   public static void plant(Tree tree) {
+    if (tree instanceof TaggedTree) {
+      TAGGED_TREES.append(FOREST.size(), true);
+    }
     FOREST.add(tree);
   }
 
   private static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
+  private static final SparseBooleanArray TAGGED_TREES = new SparseBooleanArray();
 
   private Timber() {
   }
@@ -101,13 +113,27 @@ public final class Timber {
     void e(Throwable t, String message, Object... args);
   }
 
+  /** A facade for attaching tags to logging calls. Install instances via {@link #plant} */
+  public interface TaggedTree extends Tree {
+    /** Set a one-time tag for use on the next logging call. */
+    void tag(String tag);
+  }
+
   /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
-  public static class DebugTree implements Tree {
+  public static class DebugTree implements TaggedTree {
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
+    private String nextTag;
+
+    private String createTag() {
+      String tag = nextTag;
+      if (tag != null) {
+        nextTag = null;
+        return tag;
+      }
 
-    private static String createTag() {
-      String tag = new Throwable().getStackTrace()[3].getClassName();
+      tag = new Throwable().getStackTrace()[3].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
+      // TODO: IDE says m can never be null here, unnecessary null check?
       if (m != null && m.find()) {
         tag = m.replaceAll("""");
       }
@@ -145,6 +171,10 @@ public final class Timber {
     @Override public void e(Throwable t, String message, Object... args) {
       Log.e(createTag(), String.format(message, args), t);
     }
+
+    @Override public void tag(String tag) {
+      nextTag = tag;
+    }
   }
 
   /** A {@link Tree} which does nothing. Useful for extending. */",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,47b5920bdd1231531e3b0d026b417a836d2e06a1,8fa7c6bb067f017f1d00b51cd957664f3baaaff9,Removes unnecessary null check.,"@@ -133,8 +133,7 @@ public final class Timber {
 
       tag = new Throwable().getStackTrace()[3].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
-      // TODO: IDE says m can never be null here, unnecessary null check?
-      if (m != null && m.find()) {
+      if (m.find()) {
         tag = m.replaceAll("""");
       }
       return tag.substring(tag.lastIndexOf('.') + 1);","@@ -133,8 +133,7 @@ public final class Timber {
 
       tag = new Throwable().getStackTrace()[3].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
-      // TODO: IDE says m can never be null here, unnecessary null check?
-      if (m != null && m.find()) {
+      if (m.find()) {
         tag = m.replaceAll("""");
       }
       return tag.substring(tag.lastIndexOf('.') + 1);",False,source
pom.xml,pom.xml,2124da409e1b28a7c1fe57e16b0d308710ac9bbe,7eb6a2c5386d45ebcb356d4e9744bb38d85a68ed,Allow chaining from the 'tag' method.,"@@ -31,6 +31,9 @@
     <android.version>4.1.1.4</android.version>
     <android.platform>16</android.platform>
     <butterknife.version>2.0.0</butterknife.version>
+    <junit.version>4.10</junit.version>
+    <robolectric.version>2.2</robolectric.version>
+    <fest.version>2.0M10</fest.version>
   </properties>
 
   <scm>
@@ -64,6 +67,21 @@
         <artifactId>butterknife</artifactId>
         <version>${butterknife.version}</version>
       </dependency>
+      <dependency>
+        <groupId>junit</groupId>
+        <artifactId>junit</artifactId>
+        <version>${junit.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.robolectric</groupId>
+        <artifactId>robolectric</artifactId>
+        <version>${robolectric.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.easytesting</groupId>
+        <artifactId>fest-assert-core</artifactId>
+        <version>${fest.version}</version>
+      </dependency>
     </dependencies>
   </dependencyManagement>","@@ -31,6 +31,9 @@
     <android.version>4.1.1.4</android.version>
     <android.platform>16</android.platform>
     <butterknife.version>2.0.0</butterknife.version>
+    <junit.version>4.10</junit.version>
+    <robolectric.version>2.2</robolectric.version>
+    <fest.version>2.0M10</fest.version>
   </properties>
 
   <scm>
@@ -64,6 +67,21 @@
         <artifactId>butterknife</artifactId>
         <version>${butterknife.version}</version>
       </dependency>
+      <dependency>
+        <groupId>junit</groupId>
+        <artifactId>junit</artifactId>
+        <version>${junit.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.robolectric</groupId>
+        <artifactId>robolectric</artifactId>
+        <version>${robolectric.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.easytesting</groupId>
+        <artifactId>fest-assert-core</artifactId>
+        <version>${fest.version}</version>
+      </dependency>
     </dependencies>
   </dependencyManagement>",False,other
timber/pom.xml,timber/pom.xml,2124da409e1b28a7c1fe57e16b0d308710ac9bbe,7eb6a2c5386d45ebcb356d4e9744bb38d85a68ed,Allow chaining from the 'tag' method.,"@@ -13,6 +13,22 @@
   <name>Timber</name>
 
   <dependencies>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.robolectric</groupId>
+      <artifactId>robolectric</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.easytesting</groupId>
+      <artifactId>fest-assert-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+
     <dependency>
       <groupId>com.google.android</groupId>
       <artifactId>android</artifactId>","@@ -13,6 +13,22 @@
   <name>Timber</name>
 
   <dependencies>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.robolectric</groupId>
+      <artifactId>robolectric</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.easytesting</groupId>
+      <artifactId>fest-assert-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+
     <dependency>
       <groupId>com.google.android</groupId>
       <artifactId>android</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,2124da409e1b28a7c1fe57e16b0d308710ac9bbe,7eb6a2c5386d45ebcb356d4e9744bb38d85a68ed,Allow chaining from the 'tag' method.,"@@ -11,65 +11,50 @@ import java.util.regex.Pattern;
 public final class Timber {
   /** Log a debug message with optional format args. */
   public static void d(String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.d(message, args);
-    }
+    TREE_OF_SOULS.d(message, args);
   }
 
   /** Log a debug exception and a message with optional format args. */
   public static void d(Throwable t, String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.d(t, message, args);
-    }
+    TREE_OF_SOULS.d(t, message, args);
   }
 
   /** Log an info message with optional format args. */
   public static void i(String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.i(message, args);
-    }
+    TREE_OF_SOULS.i(message, args);
   }
 
   /** Log an info exception and a message with optional format args. */
   public static void i(Throwable t, String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.i(t, message, args);
-    }
+    TREE_OF_SOULS.i(t, message, args);
   }
 
   /** Log a warning message with optional format args. */
   public static void w(String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.w(message, args);
-    }
+    TREE_OF_SOULS.w(message, args);
   }
 
   /** Log a warning exception and a message with optional format args. */
   public static void w(Throwable t, String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.w(t, message, args);
-    }
+    TREE_OF_SOULS.w(t, message, args);
   }
 
   /** Log an error message with optional format args. */
   public static void e(String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.e(message, args);
-    }
+    TREE_OF_SOULS.e(message, args);
   }
 
   /** Log an error exception and a message with optional format args. */
   public static void e(Throwable t, String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.e(t, message, args);
-    }
+    TREE_OF_SOULS.e(t, message, args);
   }
 
   /** Set a one-time tag for use on the next logging call. */
-  public static void tag(String tag) {
+  public static Tree tag(String tag) {
     for (int index = 0, size = TAGGED_TREES.size(); index < size; index++) {
       ((TaggedTree) FOREST.get(TAGGED_TREES.keyAt(index))).tag(tag);
     }
+    return TREE_OF_SOULS;
   }
 
   /** Add a new logging tree. */
@@ -80,8 +65,59 @@ public final class Timber {
     FOREST.add(tree);
   }
 
-  private static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
-  private static final SparseBooleanArray TAGGED_TREES = new SparseBooleanArray();
+  static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
+  static final SparseBooleanArray TAGGED_TREES = new SparseBooleanArray();
+
+  /** A {@link Tree} that delegates to all planted trees in the {@link #FOREST forest}. */
+  private static final Tree TREE_OF_SOULS = new Tree() {
+    @Override public void d(String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.d(message, args);
+      }
+    }
+
+    @Override public void d(Throwable t, String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.d(t, message, args);
+      }
+    }
+
+    @Override public void i(String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.i(message, args);
+      }
+    }
+
+    @Override public void i(Throwable t, String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.i(t, message, args);
+      }
+    }
+
+    @Override public void w(String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.w(message, args);
+      }
+    }
+
+    @Override public void w(Throwable t, String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.w(t, message, args);
+      }
+    }
+
+    @Override public void e(String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.e(message, args);
+      }
+    }
+
+    @Override public void e(Throwable t, String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.e(t, message, args);
+      }
+    }
+  };
 
   private Timber() {
   }
@@ -131,7 +167,7 @@ public final class Timber {
         return tag;
       }
 
-      tag = new Throwable().getStackTrace()[3].getClassName();
+      tag = new Throwable().getStackTrace()[4].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");","@@ -11,65 +11,50 @@ import java.util.regex.Pattern;
 public final class Timber {
   /** Log a debug message with optional format args. */
   public static void d(String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.d(message, args);
-    }
+    TREE_OF_SOULS.d(message, args);
   }
 
   /** Log a debug exception and a message with optional format args. */
   public static void d(Throwable t, String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.d(t, message, args);
-    }
+    TREE_OF_SOULS.d(t, message, args);
   }
 
   /** Log an info message with optional format args. */
   public static void i(String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.i(message, args);
-    }
+    TREE_OF_SOULS.i(message, args);
   }
 
   /** Log an info exception and a message with optional format args. */
   public static void i(Throwable t, String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.i(t, message, args);
-    }
+    TREE_OF_SOULS.i(t, message, args);
   }
 
   /** Log a warning message with optional format args. */
   public static void w(String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.w(message, args);
-    }
+    TREE_OF_SOULS.w(message, args);
   }
 
   /** Log a warning exception and a message with optional format args. */
   public static void w(Throwable t, String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.w(t, message, args);
-    }
+    TREE_OF_SOULS.w(t, message, args);
   }
 
   /** Log an error message with optional format args. */
   public static void e(String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.e(message, args);
-    }
+    TREE_OF_SOULS.e(message, args);
   }
 
   /** Log an error exception and a message with optional format args. */
   public static void e(Throwable t, String message, Object... args) {
-    for (Tree tree : FOREST) {
-      tree.e(t, message, args);
-    }
+    TREE_OF_SOULS.e(t, message, args);
   }
 
   /** Set a one-time tag for use on the next logging call. */
-  public static void tag(String tag) {
+  public static Tree tag(String tag) {
     for (int index = 0, size = TAGGED_TREES.size(); index < size; index++) {
       ((TaggedTree) FOREST.get(TAGGED_TREES.keyAt(index))).tag(tag);
     }
+    return TREE_OF_SOULS;
   }
 
   /** Add a new logging tree. */
@@ -80,8 +65,59 @@ public final class Timber {
     FOREST.add(tree);
   }
 
-  private static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
-  private static final SparseBooleanArray TAGGED_TREES = new SparseBooleanArray();
+  static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
+  static final SparseBooleanArray TAGGED_TREES = new SparseBooleanArray();
+
+  /** A {@link Tree} that delegates to all planted trees in the {@link #FOREST forest}. */
+  private static final Tree TREE_OF_SOULS = new Tree() {
+    @Override public void d(String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.d(message, args);
+      }
+    }
+
+    @Override public void d(Throwable t, String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.d(t, message, args);
+      }
+    }
+
+    @Override public void i(String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.i(message, args);
+      }
+    }
+
+    @Override public void i(Throwable t, String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.i(t, message, args);
+      }
+    }
+
+    @Override public void w(String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.w(message, args);
+      }
+    }
+
+    @Override public void w(Throwable t, String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.w(t, message, args);
+      }
+    }
+
+    @Override public void e(String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.e(message, args);
+      }
+    }
+
+    @Override public void e(Throwable t, String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.e(t, message, args);
+      }
+    }
+  };
 
   private Timber() {
   }
@@ -131,7 +167,7 @@ public final class Timber {
         return tag;
       }
 
-      tag = new Throwable().getStackTrace()[3].getClassName();
+      tag = new Throwable().getStackTrace()[4].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");",False,source
,timber/src/test/java/timber/log/TimberTest.java,2124da409e1b28a7c1fe57e16b0d308710ac9bbe,7eb6a2c5386d45ebcb356d4e9744bb38d85a68ed,Allow chaining from the 'tag' method.,"@@ -0,0 +1,49 @@
+package timber.log;
+
+import android.util.Log;
+import java.util.List;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLog;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.robolectric.shadows.ShadowLog.LogItem;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
+public class TimberTest {
+  @Before @After public void setUpAndTearDown() {
+    Timber.FOREST.clear();
+    Timber.TAGGED_TREES.clear();
+  }
+
+  @Test public void debugTagWorks() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.d(""Hello, world!"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.DEBUG);
+    assertThat(log.tag).isEqualTo(""TimberTest"");
+    assertThat(log.msg).isEqualTo(""Hello, world!"");
+    assertThat(log.throwable).isNull();
+  }
+
+  @Test public void customTagWorks() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.tag(""Custom"").d(""Hello, world!"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.DEBUG);
+    assertThat(log.tag).isEqualTo(""Custom"");
+    assertThat(log.msg).isEqualTo(""Hello, world!"");
+    assertThat(log.throwable).isNull();
+  }
+}","@@ -0,0 +1,49 @@
+package timber.log;
+
+import android.util.Log;
+import java.util.List;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLog;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.robolectric.shadows.ShadowLog.LogItem;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
+public class TimberTest {
+  @Before @After public void setUpAndTearDown() {
+    Timber.FOREST.clear();
+    Timber.TAGGED_TREES.clear();
+  }
+
+  @Test public void debugTagWorks() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.d(""Hello, world!"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.DEBUG);
+    assertThat(log.tag).isEqualTo(""TimberTest"");
+    assertThat(log.msg).isEqualTo(""Hello, world!"");
+    assertThat(log.throwable).isNull();
+  }
+
+  @Test public void customTagWorks() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.tag(""Custom"").d(""Hello, world!"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.DEBUG);
+    assertThat(log.tag).isEqualTo(""Custom"");
+    assertThat(log.msg).isEqualTo(""Hello, world!"");
+    assertThat(log.throwable).isNull();
+  }
+}",False,test
CHANGELOG.md,CHANGELOG.md,c5f12d0f0ebe263517f4d541b73952e7f5b33467,2124da409e1b28a7c1fe57e16b0d308710ac9bbe,Prepare version 2.1.0.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.1.0 *(2013-11-21)*
+----------------------------
+
+ * New: `tag` method allows specifying custom one-time tag. Redux!
+
+
 Version 2.0.0 *(2013-10-21)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.1.0 *(2013-11-21)*
+----------------------------
+
+ * New: `tag` method allows specifying custom one-time tag. Redux!
+
+
 Version 2.0.0 *(2013-10-21)*
 ----------------------------",False,other
pom.xml,pom.xml,c5f12d0f0ebe263517f4d541b73952e7f5b33467,2124da409e1b28a7c1fe57e16b0d308710ac9bbe,Prepare version 2.1.0.,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.0.1-SNAPSHOT</version>
+  <version>2.1.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.0.1-SNAPSHOT</version>
+  <version>2.1.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,c5f12d0f0ebe263517f4d541b73952e7f5b33467,2124da409e1b28a7c1fe57e16b0d308710ac9bbe,Prepare version 2.1.0.,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.1-SNAPSHOT</version>
+    <version>2.1.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.1-SNAPSHOT</version>
+    <version>2.1.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,c5f12d0f0ebe263517f4d541b73952e7f5b33467,2124da409e1b28a7c1fe57e16b0d308710ac9bbe,Prepare version 2.1.0.,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.1-SNAPSHOT</version>
+    <version>2.1.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.0.1-SNAPSHOT</version>
+    <version>2.1.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,079a791287ddc761b80466896e7b3f2f3d29f275,c5f12d0f0ebe263517f4d541b73952e7f5b33467,[maven-release-plugin] prepare release timber-parent-2.1.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.1.0-SNAPSHOT</version>
+  <version>2.1.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -40,7 +40,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.1.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.1.0-SNAPSHOT</version>
+  <version>2.1.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -40,7 +40,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.1.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,079a791287ddc761b80466896e7b3f2f3d29f275,c5f12d0f0ebe263517f4d541b73952e7f5b33467,[maven-release-plugin] prepare release timber-parent-2.1.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.0-SNAPSHOT</version>
+    <version>2.1.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.0-SNAPSHOT</version>
+    <version>2.1.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,079a791287ddc761b80466896e7b3f2f3d29f275,c5f12d0f0ebe263517f4d541b73952e7f5b33467,[maven-release-plugin] prepare release timber-parent-2.1.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.0-SNAPSHOT</version>
+    <version>2.1.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.0-SNAPSHOT</version>
+    <version>2.1.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,64515b60034e1573725a5b29bce4a5756eb89427,079a791287ddc761b80466896e7b3f2f3d29f275,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.1.0</version>
+  <version>2.1.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -40,7 +40,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.1.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.1.0</version>
+  <version>2.1.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -40,7 +40,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.1.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,64515b60034e1573725a5b29bce4a5756eb89427,079a791287ddc761b80466896e7b3f2f3d29f275,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.0</version>
+    <version>2.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.0</version>
+    <version>2.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,64515b60034e1573725a5b29bce4a5756eb89427,079a791287ddc761b80466896e7b3f2f3d29f275,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.0</version>
+    <version>2.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.0</version>
+    <version>2.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
,deploy_javadoc.sh,4f86b24ddbe933036f569bd88c1c2bdaa40c9628,64515b60034e1573725a5b29bce4a5756eb89427,Add javadoc deploy script.,"@@ -0,0 +1,41 @@
+#!/bin/bash
+
+set -ex
+
+REPO=""git@github.com:JakeWharton/timber.git""
+GROUP_ID=""com.jakewharton.timber""
+ARTIFACT_ID=""timber""
+
+DIR=temp-clone
+
+# Delete any existing temporary website clone
+rm -rf $DIR
+
+# Clone the current repo into temp folder
+git clone $REPO $DIR
+
+# Move working directory into temp folder
+cd $DIR
+
+# Checkout and track the gh-pages branch
+git checkout -t origin/gh-pages
+
+# Delete everything
+rm -rf *
+
+# Download the latest javadoc
+curl -L ""http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=LATEST&c=javadoc"" > javadoc.zip
+unzip javadoc.zip
+rm javadoc.zip
+
+# Stage all files in git and create a commit
+git add .
+git add -u
+git commit -m ""Website at $(date)""
+
+# Push the new files up to GitHub
+git push origin gh-pages
+
+# Delete our temp folder
+cd ..
+rm -rf $DIR","@@ -0,0 +1,41 @@
+#!/bin/bash
+
+set -ex
+
+REPO=""git@github.com:JakeWharton/timber.git""
+GROUP_ID=""com.jakewharton.timber""
+ARTIFACT_ID=""timber""
+
+DIR=temp-clone
+
+# Delete any existing temporary website clone
+rm -rf $DIR
+
+# Clone the current repo into temp folder
+git clone $REPO $DIR
+
+# Move working directory into temp folder
+cd $DIR
+
+# Checkout and track the gh-pages branch
+git checkout -t origin/gh-pages
+
+# Delete everything
+rm -rf *
+
+# Download the latest javadoc
+curl -L ""http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=LATEST&c=javadoc"" > javadoc.zip
+unzip javadoc.zip
+rm javadoc.zip
+
+# Stage all files in git and create a commit
+git add .
+git add -u
+git commit -m ""Website at $(date)""
+
+# Push the new files up to GitHub
+git push origin gh-pages
+
+# Delete our temp folder
+cd ..
+rm -rf $DIR",False,other
pom.xml,pom.xml,4a29a72e2196fa89ee59cd28e3d6766acf0f1a26,4f86b24ddbe933036f569bd88c1c2bdaa40c9628,"Implement Lint check

Will scan Java files for instances where Log.x is used rather than Timber.x
and presents them as warnings.","@@ -22,6 +22,7 @@
   <modules>
     <module>timber</module>
     <module>timber-sample</module>
+    <module>timber-lint</module>
   </modules>
 
   <properties>
@@ -34,6 +35,7 @@
     <junit.version>4.10</junit.version>
     <robolectric.version>2.2</robolectric.version>
     <fest.version>2.0M10</fest.version>
+    <lint.version>22.4.0</lint.version>
   </properties>
 
   <scm>
@@ -82,6 +84,11 @@
         <artifactId>fest-assert-core</artifactId>
         <version>${fest.version}</version>
       </dependency>
+      <dependency>
+        <groupId>com.android.tools.lint</groupId>
+        <artifactId>lint</artifactId>
+        <version>${lint.version}</version>
+      </dependency>
     </dependencies>
   </dependencyManagement>","@@ -22,6 +22,7 @@
   <modules>
     <module>timber</module>
     <module>timber-sample</module>
+    <module>timber-lint</module>
   </modules>
 
   <properties>
@@ -34,6 +35,7 @@
     <junit.version>4.10</junit.version>
     <robolectric.version>2.2</robolectric.version>
     <fest.version>2.0M10</fest.version>
+    <lint.version>22.4.0</lint.version>
   </properties>
 
   <scm>
@@ -82,6 +84,11 @@
         <artifactId>fest-assert-core</artifactId>
         <version>${fest.version}</version>
       </dependency>
+      <dependency>
+        <groupId>com.android.tools.lint</groupId>
+        <artifactId>lint</artifactId>
+        <version>${lint.version}</version>
+      </dependency>
     </dependencies>
   </dependencyManagement>",False,other
,timber-lint/pom.xml,4a29a72e2196fa89ee59cd28e3d6766acf0f1a26,4f86b24ddbe933036f569bd88c1c2bdaa40c9628,"Implement Lint check

Will scan Java files for instances where Log.x is used rather than Timber.x
and presents them as warnings.","@@ -0,0 +1,38 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.jakewharton.timber</groupId>
+    <artifactId>timber-parent</artifactId>
+    <version>2.1.1-SNAPSHOT</version>
+  </parent>
+
+  <artifactId>timber-lint</artifactId>
+  <name>Timber Lint</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.android.tools.lint</groupId>
+      <artifactId>lint</artifactId>
+      <scope>provided</scope>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-jar-plugin</artifactId>
+        <configuration>
+          <archive>
+            <manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>
+          </archive>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>","@@ -0,0 +1,38 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.jakewharton.timber</groupId>
+    <artifactId>timber-parent</artifactId>
+    <version>2.1.1-SNAPSHOT</version>
+  </parent>
+
+  <artifactId>timber-lint</artifactId>
+  <name>Timber Lint</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.android.tools.lint</groupId>
+      <artifactId>lint</artifactId>
+      <scope>provided</scope>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-jar-plugin</artifactId>
+        <configuration>
+          <archive>
+            <manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>
+          </archive>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>",False,other
,timber-lint/src/main/java/timber/lint/CallToLogNotTimberDetector.java,4a29a72e2196fa89ee59cd28e3d6766acf0f1a26,4f86b24ddbe933036f569bd88c1c2bdaa40c9628,"Implement Lint check

Will scan Java files for instances where Log.x is used rather than Timber.x
and presents them as warnings.","@@ -0,0 +1,41 @@
+package timber.lint;
+
+import com.android.tools.lint.detector.api.Category;
+import com.android.tools.lint.detector.api.Detector;
+import com.android.tools.lint.detector.api.Implementation;
+import com.android.tools.lint.detector.api.Issue;
+import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.Scope;
+import com.android.tools.lint.detector.api.Severity;
+
+import java.util.Arrays;
+import java.util.List;
+
+import lombok.ast.AstVisitor;
+import lombok.ast.MethodInvocation;
+
+public class CallToLogNotTimberDetector extends Detector implements Detector.JavaScanner {
+
+  @Override
+  public List<String> getApplicableMethodNames() {
+    return Arrays.asList(""d"", ""i"", ""w"", ""e"");
+  }
+
+  @Override
+  public void visitMethod(JavaContext context, AstVisitor visitor, MethodInvocation node) {
+    if (node.toString().startsWith(""Log."")) {
+      context.report(ISSUE, node, context.getLocation(node),
+          ""Using 'Log' instead of 'Timber'"", null);
+    }
+  }
+
+  public static final Issue ISSUE = Issue.create(
+      ""LogNotTimber"",
+      ""Logging call to Log instead of Timber"",
+      ""This check looks through all the logging calls for instances where the Android Log "" +
+          ""class was used instead of Timber."",
+      ""Since Timber is included in the project, it is likely that calls to Log should "" +
+          ""instead be going to Timber."",
+      Category.CORRECTNESS, 5, Severity.WARNING,
+      new Implementation(CallToLogNotTimberDetector.class, Scope.JAVA_FILE_SCOPE));
+}","@@ -0,0 +1,41 @@
+package timber.lint;
+
+import com.android.tools.lint.detector.api.Category;
+import com.android.tools.lint.detector.api.Detector;
+import com.android.tools.lint.detector.api.Implementation;
+import com.android.tools.lint.detector.api.Issue;
+import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.Scope;
+import com.android.tools.lint.detector.api.Severity;
+
+import java.util.Arrays;
+import java.util.List;
+
+import lombok.ast.AstVisitor;
+import lombok.ast.MethodInvocation;
+
+public class CallToLogNotTimberDetector extends Detector implements Detector.JavaScanner {
+
+  @Override
+  public List<String> getApplicableMethodNames() {
+    return Arrays.asList(""d"", ""i"", ""w"", ""e"");
+  }
+
+  @Override
+  public void visitMethod(JavaContext context, AstVisitor visitor, MethodInvocation node) {
+    if (node.toString().startsWith(""Log."")) {
+      context.report(ISSUE, node, context.getLocation(node),
+          ""Using 'Log' instead of 'Timber'"", null);
+    }
+  }
+
+  public static final Issue ISSUE = Issue.create(
+      ""LogNotTimber"",
+      ""Logging call to Log instead of Timber"",
+      ""This check looks through all the logging calls for instances where the Android Log "" +
+          ""class was used instead of Timber."",
+      ""Since Timber is included in the project, it is likely that calls to Log should "" +
+          ""instead be going to Timber."",
+      Category.CORRECTNESS, 5, Severity.WARNING,
+      new Implementation(CallToLogNotTimberDetector.class, Scope.JAVA_FILE_SCOPE));
+}",False,source
,timber-lint/src/main/java/timber/lint/IssueRegistry.java,4a29a72e2196fa89ee59cd28e3d6766acf0f1a26,4f86b24ddbe933036f569bd88c1c2bdaa40c9628,"Implement Lint check

Will scan Java files for instances where Log.x is used rather than Timber.x
and presents them as warnings.","@@ -0,0 +1,14 @@
+package timber.lint;
+
+import com.android.tools.lint.detector.api.Issue;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
+
+  @Override
+  public List<Issue> getIssues() {
+    return Arrays.asList(CallToLogNotTimberDetector.ISSUE);
+  }
+}","@@ -0,0 +1,14 @@
+package timber.lint;
+
+import com.android.tools.lint.detector.api.Issue;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
+
+  @Override
+  public List<Issue> getIssues() {
+    return Arrays.asList(CallToLogNotTimberDetector.ISSUE);
+  }
+}",False,source
,timber-lint/src/main/resources/META-INF/MANIFEST.MF,4a29a72e2196fa89ee59cd28e3d6766acf0f1a26,4f86b24ddbe933036f569bd88c1c2bdaa40c9628,"Implement Lint check

Will scan Java files for instances where Log.x is used rather than Timber.x
and presents them as warnings.","@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+Lint-Registry: timber.lint.IssueRegistry","@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+Lint-Registry: timber.lint.IssueRegistry",False,source
README.md,README.md,0e4d18f620772a74945cec0a2ce8f746ea5b4e55,4f86b24ddbe933036f569bd88c1c2bdaa40c9628,Latest is 2.1.0.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>(insert latest version)</version>
+  <version>2.1.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.0.+'
+compile 'com.jakewharton.timber:timber:2.1.+'
 ```","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>(insert latest version)</version>
+  <version>2.1.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.0.+'
+compile 'com.jakewharton.timber:timber:2.1.+'
 ```",False,readme
,.travis.yml,989704e8fdb4337f4d81140538272ee27e3e277a,0e4d18f620772a74945cec0a2ce8f746ea5b4e55,Add Travis CI build.,"@@ -0,0 +1,13 @@
+language: java
+
+jdk: oraclejdk7
+
+before_install:
+  - export TERM=dumb
+  - sudo apt-get install -qq libstdc++6:i386 lib32z1
+  - export COMPONENTS=build-tools-19.0.1,android-16,extra-android-m2repository
+  - curl -L https://raw.github.com/embarkmobile/android-sdk-installer/version-1/android-sdk-installer | bash /dev/stdin --install=$COMPONENTS
+  - source ~/.android-sdk-installer/env
+
+notifications:
+  email: false","@@ -0,0 +1,13 @@
+language: java
+
+jdk: oraclejdk7
+
+before_install:
+  - export TERM=dumb
+  - sudo apt-get install -qq libstdc++6:i386 lib32z1
+  - export COMPONENTS=build-tools-19.0.1,android-16,extra-android-m2repository
+  - curl -L https://raw.github.com/embarkmobile/android-sdk-installer/version-1/android-sdk-installer | bash /dev/stdin --install=$COMPONENTS
+  - source ~/.android-sdk-installer/env
+
+notifications:
+  email: false",False,other
pom.xml,pom.xml,989704e8fdb4337f4d81140538272ee27e3e277a,0e4d18f620772a74945cec0a2ce8f746ea5b4e55,Add Travis CI build.,"@@ -132,7 +132,7 @@
         <plugin>
           <groupId>com.jayway.maven.plugins.android.generation2</groupId>
           <artifactId>android-maven-plugin</artifactId>
-          <version>3.6.0</version>
+          <version>3.8.2</version>
           <configuration>
             <sdk>
               <platform>${android.platform}</platform>","@@ -132,7 +132,7 @@
         <plugin>
           <groupId>com.jayway.maven.plugins.android.generation2</groupId>
           <artifactId>android-maven-plugin</artifactId>
-          <version>3.6.0</version>
+          <version>3.8.2</version>
           <configuration>
             <sdk>
               <platform>${android.platform}</platform>",False,other
timber-lint/src/main/java/timber/lint/CallToLogNotTimberDetector.java,timber-lint/src/main/java/timber/lint/CallToLogNotTimberDetector.java,8076866b42eb120f26b54ff4907fae4ad48d0a13,308cdd6da5ed5d383d263f2eca500850bf59f1d2,Formatting stuffs. Getting build to pass checkstyle.,"@@ -14,28 +14,24 @@ import java.util.List;
 import lombok.ast.AstVisitor;
 import lombok.ast.MethodInvocation;
 
-public class CallToLogNotTimberDetector extends Detector implements Detector.JavaScanner {
-
-  @Override
-  public List<String> getApplicableMethodNames() {
+final class CallToLogNotTimberDetector extends Detector implements Detector.JavaScanner {
+  @Override public List<String> getApplicableMethodNames() {
     return Arrays.asList(""d"", ""i"", ""w"", ""e"");
   }
 
   @Override
   public void visitMethod(JavaContext context, AstVisitor visitor, MethodInvocation node) {
     if (node.toString().startsWith(""Log."")) {
-      context.report(ISSUE, node, context.getLocation(node),
-          ""Using 'Log' instead of 'Timber'"", null);
+      context.report(ISSUE, node, context.getLocation(node), ""Using 'Log' instead of 'Timber'"",
+          null);
     }
   }
 
-  public static final Issue ISSUE = Issue.create(
-      ""LogNotTimber"",
-      ""Logging call to Log instead of Timber"",
-      ""This check looks through all the logging calls for instances where the Android Log "" +
-          ""class was used instead of Timber."",
-      ""Since Timber is included in the project, it is likely that calls to Log should "" +
-          ""instead be going to Timber."",
-      Category.CORRECTNESS, 5, Severity.WARNING,
-      new Implementation(CallToLogNotTimberDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE =
+      Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
+          ""This check looks through all the logging calls for instances where the Android Log ""
+              + ""class was used instead of Timber."",
+          ""Since Timber is included in the project, it is likely that calls to Log should ""
+              + ""instead be going to Timber."", Category.CORRECTNESS, 5, Severity.WARNING,
+          new Implementation(CallToLogNotTimberDetector.class, Scope.JAVA_FILE_SCOPE));
 }","@@ -14,28 +14,24 @@ import java.util.List;
 import lombok.ast.AstVisitor;
 import lombok.ast.MethodInvocation;
 
-public class CallToLogNotTimberDetector extends Detector implements Detector.JavaScanner {
-
-  @Override
-  public List<String> getApplicableMethodNames() {
+final class CallToLogNotTimberDetector extends Detector implements Detector.JavaScanner {
+  @Override public List<String> getApplicableMethodNames() {
     return Arrays.asList(""d"", ""i"", ""w"", ""e"");
   }
 
   @Override
   public void visitMethod(JavaContext context, AstVisitor visitor, MethodInvocation node) {
     if (node.toString().startsWith(""Log."")) {
-      context.report(ISSUE, node, context.getLocation(node),
-          ""Using 'Log' instead of 'Timber'"", null);
+      context.report(ISSUE, node, context.getLocation(node), ""Using 'Log' instead of 'Timber'"",
+          null);
     }
   }
 
-  public static final Issue ISSUE = Issue.create(
-      ""LogNotTimber"",
-      ""Logging call to Log instead of Timber"",
-      ""This check looks through all the logging calls for instances where the Android Log "" +
-          ""class was used instead of Timber."",
-      ""Since Timber is included in the project, it is likely that calls to Log should "" +
-          ""instead be going to Timber."",
-      Category.CORRECTNESS, 5, Severity.WARNING,
-      new Implementation(CallToLogNotTimberDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE =
+      Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
+          ""This check looks through all the logging calls for instances where the Android Log ""
+              + ""class was used instead of Timber."",
+          ""Since Timber is included in the project, it is likely that calls to Log should ""
+              + ""instead be going to Timber."", Category.CORRECTNESS, 5, Severity.WARNING,
+          new Implementation(CallToLogNotTimberDetector.class, Scope.JAVA_FILE_SCOPE));
 }",False,source
timber-lint/src/main/java/timber/lint/IssueRegistry.java,timber-lint/src/main/java/timber/lint/IssueRegistry.java,8076866b42eb120f26b54ff4907fae4ad48d0a13,308cdd6da5ed5d383d263f2eca500850bf59f1d2,Formatting stuffs. Getting build to pass checkstyle.,"@@ -5,10 +5,8 @@ import com.android.tools.lint.detector.api.Issue;
 import java.util.Arrays;
 import java.util.List;
 
-public class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
-
-  @Override
-  public List<Issue> getIssues() {
+public final class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
+  @Override public List<Issue> getIssues() {
     return Arrays.asList(CallToLogNotTimberDetector.ISSUE);
   }
 }","@@ -5,10 +5,8 @@ import com.android.tools.lint.detector.api.Issue;
 import java.util.Arrays;
 import java.util.List;
 
-public class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
-
-  @Override
-  public List<Issue> getIssues() {
+public final class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
+  @Override public List<Issue> getIssues() {
     return Arrays.asList(CallToLogNotTimberDetector.ISSUE);
   }
 }",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,6d3312f62bd10bbfdd27a935c5f476b0e2b3b560,8076866b42eb120f26b54ff4907fae4ad48d0a13,"Added v() methods

The v() methods were missing from the Tree interface, but in some cases they
can be quite useful.","@@ -9,6 +9,16 @@ import java.util.regex.Pattern;
 
 /** Logging for lazy people. */
 public final class Timber {
+  /** Log a verbose message with optional format args. */
+  public static void v(String message, Object... args) {
+    TREE_OF_SOULS.v(message, args);
+  }
+
+  /** Log a verbose exception and a message with optional format args. */
+  public static void v(Throwable t, String message, Object... args) {
+    TREE_OF_SOULS.v(t, message, args);
+  }
+
   /** Log a debug message with optional format args. */
   public static void d(String message, Object... args) {
     TREE_OF_SOULS.d(message, args);
@@ -70,6 +80,18 @@ public final class Timber {
 
   /** A {@link Tree} that delegates to all planted trees in the {@link #FOREST forest}. */
   private static final Tree TREE_OF_SOULS = new Tree() {
+    @Override public void v(String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.v(message, args);
+      }
+    }
+
+    @Override public void v(Throwable t, String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.v(t, message, args);
+      }
+    }
+
     @Override public void d(String message, Object... args) {
       for (Tree tree : FOREST) {
         tree.d(message, args);
@@ -124,6 +146,12 @@ public final class Timber {
 
   /** A facade for handling logging calls. Install instances via {@link #plant}. */
   public interface Tree {
+    /** Log a verbose message with optional format args. */
+    void v(String message, Object... args);
+
+    /** Log a verbose exception and a message with optional format args. */
+    void v(Throwable t, String message, Object... args);
+
     /** Log a debug message with optional format args. */
     void d(String message, Object... args);
 
@@ -175,6 +203,14 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
+    @Override public void v(String message, Object... args) {
+      Log.v(createTag(), String.format(message, args));
+    }
+
+    @Override public void v(Throwable t, String message, Object... args) {
+      Log.v(createTag(), String.format(message, args), t);
+    }
+
     @Override public void d(String message, Object... args) {
       Log.d(createTag(), String.format(message, args));
     }
@@ -214,6 +250,12 @@ public final class Timber {
 
   /** A {@link Tree} which does nothing. Useful for extending. */
   public static class HollowTree implements Tree {
+    @Override public void v(String message, Object... args) {
+    }
+
+    @Override public void v(Throwable t, String message, Object... args) {
+    }
+
     @Override public void d(String message, Object... args) {
     }","@@ -9,6 +9,16 @@ import java.util.regex.Pattern;
 
 /** Logging for lazy people. */
 public final class Timber {
+  /** Log a verbose message with optional format args. */
+  public static void v(String message, Object... args) {
+    TREE_OF_SOULS.v(message, args);
+  }
+
+  /** Log a verbose exception and a message with optional format args. */
+  public static void v(Throwable t, String message, Object... args) {
+    TREE_OF_SOULS.v(t, message, args);
+  }
+
   /** Log a debug message with optional format args. */
   public static void d(String message, Object... args) {
     TREE_OF_SOULS.d(message, args);
@@ -70,6 +80,18 @@ public final class Timber {
 
   /** A {@link Tree} that delegates to all planted trees in the {@link #FOREST forest}. */
   private static final Tree TREE_OF_SOULS = new Tree() {
+    @Override public void v(String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.v(message, args);
+      }
+    }
+
+    @Override public void v(Throwable t, String message, Object... args) {
+      for (Tree tree : FOREST) {
+        tree.v(t, message, args);
+      }
+    }
+
     @Override public void d(String message, Object... args) {
       for (Tree tree : FOREST) {
         tree.d(message, args);
@@ -124,6 +146,12 @@ public final class Timber {
 
   /** A facade for handling logging calls. Install instances via {@link #plant}. */
   public interface Tree {
+    /** Log a verbose message with optional format args. */
+    void v(String message, Object... args);
+
+    /** Log a verbose exception and a message with optional format args. */
+    void v(Throwable t, String message, Object... args);
+
     /** Log a debug message with optional format args. */
     void d(String message, Object... args);
 
@@ -175,6 +203,14 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
+    @Override public void v(String message, Object... args) {
+      Log.v(createTag(), String.format(message, args));
+    }
+
+    @Override public void v(Throwable t, String message, Object... args) {
+      Log.v(createTag(), String.format(message, args), t);
+    }
+
     @Override public void d(String message, Object... args) {
       Log.d(createTag(), String.format(message, args));
     }
@@ -214,6 +250,12 @@ public final class Timber {
 
   /** A {@link Tree} which does nothing. Useful for extending. */
   public static class HollowTree implements Tree {
+    @Override public void v(String message, Object... args) {
+    }
+
+    @Override public void v(Throwable t, String message, Object... args) {
+    }
+
     @Override public void d(String message, Object... args) {
     }",False,source
CHANGELOG.md,CHANGELOG.md,aa5310885e6e822b975f8a16994ecbb32b52a3b9,c7f22db891b2485eae30f17ca7f3f70fb0d3ef2e,Prepare 2.2.0.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.2.0 *(2014-02-02)*
+----------------------------
+
+ * New: verbose log level added (`v()`).
+
+
 Version 2.1.0 *(2013-11-21)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.2.0 *(2014-02-02)*
+----------------------------
+
+ * New: verbose log level added (`v()`).
+
+
 Version 2.1.0 *(2013-11-21)*
 ----------------------------",False,other
README.md,README.md,aa5310885e6e822b975f8a16994ecbb32b52a3b9,c7f22db891b2485eae30f17ca7f3f70fb0d3ef2e,Prepare 2.2.0.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.1.0</version>
+  <version>2.2.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.1.+'
+compile 'com.jakewharton.timber:timber:2.2.+'
 ```","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.1.0</version>
+  <version>2.2.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.1.+'
+compile 'com.jakewharton.timber:timber:2.2.+'
 ```",False,readme
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,734d5e289dd34f98db76151941e2fd49d516cf9b,aa5310885e6e822b975f8a16994ecbb32b52a3b9,Make custom tags thread-safe.,"@@ -186,12 +186,12 @@ public final class Timber {
   /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
   public static class DebugTree implements TaggedTree {
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
-    private String nextTag;
+    private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<String>();
 
-    private String createTag() {
-      String tag = nextTag;
+    private static String createTag() {
+      String tag = NEXT_TAG.get();
       if (tag != null) {
-        nextTag = null;
+        NEXT_TAG.remove();
         return tag;
       }
 
@@ -244,7 +244,7 @@ public final class Timber {
     }
 
     @Override public void tag(String tag) {
-      nextTag = tag;
+      NEXT_TAG.set(tag);
     }
   }","@@ -186,12 +186,12 @@ public final class Timber {
   /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
   public static class DebugTree implements TaggedTree {
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
-    private String nextTag;
+    private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<String>();
 
-    private String createTag() {
-      String tag = nextTag;
+    private static String createTag() {
+      String tag = NEXT_TAG.get();
       if (tag != null) {
-        nextTag = null;
+        NEXT_TAG.remove();
         return tag;
       }
 
@@ -244,7 +244,7 @@ public final class Timber {
     }
 
     @Override public void tag(String tag) {
-      nextTag = tag;
+      NEXT_TAG.set(tag);
     }
   }",False,source
CHANGELOG.md,CHANGELOG.md,a21e6270e1b0ca208dcb84e0c9bb058e5d797ee1,734d5e289dd34f98db76151941e2fd49d516cf9b,Don't forget about our crazy new lint check.,"@@ -5,6 +5,7 @@ Version 2.2.0 *(2014-02-02)*
 ----------------------------
 
  * New: verbose log level added (`v()`).
+ * New: `timber-lint` module adds lint check to ensure you are calling `Timber` and not `Log`.
 
 
 Version 2.1.0 *(2013-11-21)*","@@ -5,6 +5,7 @@ Version 2.2.0 *(2014-02-02)*
 ----------------------------
 
  * New: verbose log level added (`v()`).
+ * New: `timber-lint` module adds lint check to ensure you are calling `Timber` and not `Log`.
 
 
 Version 2.1.0 *(2013-11-21)*",False,other
pom.xml,pom.xml,52657b6deac9af619eda938b1d6d87531790b64a,a21e6270e1b0ca208dcb84e0c9bb058e5d797ee1,[maven-release-plugin] prepare release timber-parent-2.2.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.1.1-SNAPSHOT</version>
+  <version>2.2.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.2.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.1.1-SNAPSHOT</version>
+  <version>2.2.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.2.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,52657b6deac9af619eda938b1d6d87531790b64a,a21e6270e1b0ca208dcb84e0c9bb058e5d797ee1,[maven-release-plugin] prepare release timber-parent-2.2.0,"@@ -1,14 +1,12 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 
-<project xmlns=""http://maven.apache.org/POM/4.0.0""
-         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
-         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.1-SNAPSHOT</version>
+    <version>2.2.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -1,14 +1,12 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 
-<project xmlns=""http://maven.apache.org/POM/4.0.0""
-         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
-         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.1-SNAPSHOT</version>
+    <version>2.2.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,52657b6deac9af619eda938b1d6d87531790b64a,a21e6270e1b0ca208dcb84e0c9bb058e5d797ee1,[maven-release-plugin] prepare release timber-parent-2.2.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.1-SNAPSHOT</version>
+    <version>2.2.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.1-SNAPSHOT</version>
+    <version>2.2.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,52657b6deac9af619eda938b1d6d87531790b64a,a21e6270e1b0ca208dcb84e0c9bb058e5d797ee1,[maven-release-plugin] prepare release timber-parent-2.2.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.1-SNAPSHOT</version>
+    <version>2.2.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.1.1-SNAPSHOT</version>
+    <version>2.2.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,fa88ee32662cf363574e651553abdc6127b99bae,52657b6deac9af619eda938b1d6d87531790b64a,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.0</version>
+  <version>2.2.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.2.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.0</version>
+  <version>2.2.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.2.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,fa88ee32662cf363574e651553abdc6127b99bae,52657b6deac9af619eda938b1d6d87531790b64a,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.0</version>
+    <version>2.2.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.0</version>
+    <version>2.2.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,fa88ee32662cf363574e651553abdc6127b99bae,52657b6deac9af619eda938b1d6d87531790b64a,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.0</version>
+    <version>2.2.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.0</version>
+    <version>2.2.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,fa88ee32662cf363574e651553abdc6127b99bae,52657b6deac9af619eda938b1d6d87531790b64a,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.0</version>
+    <version>2.2.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.0</version>
+    <version>2.2.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
CHANGELOG.md,CHANGELOG.md,da4080584784c06326ecf3858b9eaf150c387b40,fa88ee32662cf363574e651553abdc6127b99bae,Mention tag thread-safety.,"@@ -6,6 +6,7 @@ Version 2.2.0 *(2014-02-02)*
 
  * New: verbose log level added (`v()`).
  * New: `timber-lint` module adds lint check to ensure you are calling `Timber` and not `Log`.
+ * Fix: Specifying custom tags is now thread-safe.
 
 
 Version 2.1.0 *(2013-11-21)*","@@ -6,6 +6,7 @@ Version 2.2.0 *(2014-02-02)*
 
  * New: verbose log level added (`v()`).
  * New: `timber-lint` module adds lint check to ensure you are calling `Timber` and not `Log`.
+ * Fix: Specifying custom tags is now thread-safe.
 
 
 Version 2.1.0 *(2013-11-21)*",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,fabd9c1be8000ea61a1ed9cf1462684e927528e2,da4080584784c06326ecf3858b9eaf150c387b40,"If no varargs are supplied in DebugTree, treat it as a request to log the string without formatting","@@ -203,12 +203,17 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
+    /** If no varargs are supplied, treat it as a request to log the string without formatting */
+    private static String formatString(String message, Object... args) {
+      return args.length == 0 ? message : String.format(message, args);
+    }
+
     @Override public void v(String message, Object... args) {
-      Log.v(createTag(), String.format(message, args));
+      Log.v(createTag(), formatString(message, args));
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
-      Log.v(createTag(), String.format(message, args), t);
+      Log.v(createTag(), formatString(message, args), t);
     }
 
     @Override public void d(String message, Object... args) {
@@ -216,31 +221,31 @@ public final class Timber {
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      Log.d(createTag(), String.format(message, args), t);
+      Log.d(createTag(), formatString(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
-      Log.i(createTag(), String.format(message, args));
+      Log.i(createTag(), formatString(message, args));
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      Log.i(createTag(), String.format(message, args), t);
+      Log.i(createTag(), formatString(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
-      Log.w(createTag(), String.format(message, args));
+      Log.w(createTag(), formatString(message, args));
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      Log.w(createTag(), String.format(message, args), t);
+      Log.w(createTag(), formatString(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {
-      Log.e(createTag(), String.format(message, args));
+      Log.e(createTag(), formatString(message, args));
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      Log.e(createTag(), String.format(message, args), t);
+      Log.e(createTag(), formatString(message, args), t);
     }
 
     @Override public void tag(String tag) {","@@ -203,12 +203,17 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
+    /** If no varargs are supplied, treat it as a request to log the string without formatting */
+    private static String formatString(String message, Object... args) {
+      return args.length == 0 ? message : String.format(message, args);
+    }
+
     @Override public void v(String message, Object... args) {
-      Log.v(createTag(), String.format(message, args));
+      Log.v(createTag(), formatString(message, args));
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
-      Log.v(createTag(), String.format(message, args), t);
+      Log.v(createTag(), formatString(message, args), t);
     }
 
     @Override public void d(String message, Object... args) {
@@ -216,31 +221,31 @@ public final class Timber {
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      Log.d(createTag(), String.format(message, args), t);
+      Log.d(createTag(), formatString(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
-      Log.i(createTag(), String.format(message, args));
+      Log.i(createTag(), formatString(message, args));
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      Log.i(createTag(), String.format(message, args), t);
+      Log.i(createTag(), formatString(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
-      Log.w(createTag(), String.format(message, args));
+      Log.w(createTag(), formatString(message, args));
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      Log.w(createTag(), String.format(message, args), t);
+      Log.w(createTag(), formatString(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {
-      Log.e(createTag(), String.format(message, args));
+      Log.e(createTag(), formatString(message, args));
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      Log.e(createTag(), String.format(message, args), t);
+      Log.e(createTag(), formatString(message, args), t);
     }
 
     @Override public void tag(String tag) {",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,d8daf68887de4b66d148bbd6e237560e9189aeeb,fabd9c1be8000ea61a1ed9cf1462684e927528e2,Comment formatting,"@@ -203,8 +203,8 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
-    /** If no varargs are supplied, treat it as a request to log the string without formatting */
     private static String formatString(String message, Object... args) {
+      // If no varargs are supplied, treat it as a request to log the string without formatting
       return args.length == 0 ? message : String.format(message, args);
     }","@@ -203,8 +203,8 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
-    /** If no varargs are supplied, treat it as a request to log the string without formatting */
     private static String formatString(String message, Object... args) {
+      // If no varargs are supplied, treat it as a request to log the string without formatting
       return args.length == 0 ? message : String.format(message, args);
     }",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,847bd21720fde164615a3f01dc0474cbe0c8edd4,4b692cf85926a7ca5aef739c70a1715fec2bb874,Period.,"@@ -204,7 +204,7 @@ public final class Timber {
     }
 
     private static String formatString(String message, Object... args) {
-      // If no varargs are supplied, treat it as a request to log the string without formatting
+      // If no varargs are supplied, treat it as a request to log the string without formatting.
       return args.length == 0 ? message : String.format(message, args);
     }","@@ -204,7 +204,7 @@ public final class Timber {
     }
 
     private static String formatString(String message, Object... args) {
-      // If no varargs are supplied, treat it as a request to log the string without formatting
+      // If no varargs are supplied, treat it as a request to log the string without formatting.
       return args.length == 0 ? message : String.format(message, args);
     }",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,4c63a090c5e69bad290d4103801c3ca68c93f46f,847bd21720fde164615a3f01dc0474cbe0c8edd4,Test for format string without args.,"@@ -203,7 +203,7 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
-    private static String formatString(String message, Object... args) {
+    static String formatString(String message, Object... args) {
       // If no varargs are supplied, treat it as a request to log the string without formatting.
       return args.length == 0 ? message : String.format(message, args);
     }","@@ -203,7 +203,7 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
-    private static String formatString(String message, Object... args) {
+    static String formatString(String message, Object... args) {
       // If no varargs are supplied, treat it as a request to log the string without formatting.
       return args.length == 0 ? message : String.format(message, args);
     }",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,4c63a090c5e69bad290d4103801c3ca68c93f46f,847bd21720fde164615a3f01dc0474cbe0c8edd4,Test for format string without args.,"@@ -12,6 +12,7 @@ import org.robolectric.shadows.ShadowLog;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.robolectric.shadows.ShadowLog.LogItem;
+import static timber.log.Timber.DebugTree.formatString;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
@@ -21,6 +22,10 @@ public class TimberTest {
     Timber.TAGGED_TREES.clear();
   }
 
+  @Test public void noArgsDoesNotFormat() {
+    assertThat(formatString(""te%st"")).isSameAs(""te%st"");
+  }
+
   @Test public void debugTagWorks() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(""Hello, world!"");","@@ -12,6 +12,7 @@ import org.robolectric.shadows.ShadowLog;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.robolectric.shadows.ShadowLog.LogItem;
+import static timber.log.Timber.DebugTree.formatString;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
@@ -21,6 +22,10 @@ public class TimberTest {
     Timber.TAGGED_TREES.clear();
   }
 
+  @Test public void noArgsDoesNotFormat() {
+    assertThat(formatString(""te%st"")).isSameAs(""te%st"");
+  }
+
   @Test public void debugTagWorks() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(""Hello, world!"");",False,test
CHANGELOG.md,CHANGELOG.md,35ecec7ed617ce0869a964d33751c810ad287d43,4c63a090c5e69bad290d4103801c3ca68c93f46f,Prepare for 2.2.1.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.2.1 *(2014-02-11)*
+----------------------------
+
+ * Fix: Do not attempt to format log messages which do not have arguments.
+
+
 Version 2.2.0 *(2014-02-02)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.2.1 *(2014-02-11)*
+----------------------------
+
+ * Fix: Do not attempt to format log messages which do not have arguments.
+
+
 Version 2.2.0 *(2014-02-02)*
 ----------------------------",False,other
README.md,README.md,35ecec7ed617ce0869a964d33751c810ad287d43,4c63a090c5e69bad290d4103801c3ca68c93f46f,Prepare for 2.2.1.,"@@ -37,7 +37,7 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.2.0</version>
+  <version>2.2.1</version>
 </dependency>
 ```
 or Gradle:","@@ -37,7 +37,7 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.2.0</version>
+  <version>2.2.1</version>
 </dependency>
 ```
 or Gradle:",False,readme
pom.xml,pom.xml,b887ae4de433f5f21c6f03d78c806b63a0e020db,35ecec7ed617ce0869a964d33751c810ad287d43,[maven-release-plugin] prepare release timber-parent-2.2.1,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.1-SNAPSHOT</version>
+  <version>2.2.1</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.2.1</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.1-SNAPSHOT</version>
+  <version>2.2.1</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.2.1</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,b887ae4de433f5f21c6f03d78c806b63a0e020db,35ecec7ed617ce0869a964d33751c810ad287d43,[maven-release-plugin] prepare release timber-parent-2.2.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1-SNAPSHOT</version>
+    <version>2.2.1</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1-SNAPSHOT</version>
+    <version>2.2.1</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,b887ae4de433f5f21c6f03d78c806b63a0e020db,35ecec7ed617ce0869a964d33751c810ad287d43,[maven-release-plugin] prepare release timber-parent-2.2.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1-SNAPSHOT</version>
+    <version>2.2.1</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1-SNAPSHOT</version>
+    <version>2.2.1</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,b887ae4de433f5f21c6f03d78c806b63a0e020db,35ecec7ed617ce0869a964d33751c810ad287d43,[maven-release-plugin] prepare release timber-parent-2.2.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1-SNAPSHOT</version>
+    <version>2.2.1</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1-SNAPSHOT</version>
+    <version>2.2.1</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,1c90d9cc7da69e0d2803d695f38eaa3e43eded38,b887ae4de433f5f21c6f03d78c806b63a0e020db,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.1</version>
+  <version>2.2.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.2.1</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.1</version>
+  <version>2.2.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.2.1</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,1c90d9cc7da69e0d2803d695f38eaa3e43eded38,b887ae4de433f5f21c6f03d78c806b63a0e020db,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1</version>
+    <version>2.2.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1</version>
+    <version>2.2.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,1c90d9cc7da69e0d2803d695f38eaa3e43eded38,b887ae4de433f5f21c6f03d78c806b63a0e020db,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1</version>
+    <version>2.2.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1</version>
+    <version>2.2.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,1c90d9cc7da69e0d2803d695f38eaa3e43eded38,b887ae4de433f5f21c6f03d78c806b63a0e020db,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1</version>
+    <version>2.2.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.1</version>
+    <version>2.2.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,7a758bd5861dfce6691348a22f72288045ae0ca6,1c90d9cc7da69e0d2803d695f38eaa3e43eded38,"Use stringFormat on DebugTree.d(String message, Object... args) too","@@ -217,7 +217,7 @@ public final class Timber {
     }
 
     @Override public void d(String message, Object... args) {
-      Log.d(createTag(), String.format(message, args));
+      Log.d(createTag(), formatString(message, args));
     }
 
     @Override public void d(Throwable t, String message, Object... args) {","@@ -217,7 +217,7 @@ public final class Timber {
     }
 
     @Override public void d(String message, Object... args) {
-      Log.d(createTag(), String.format(message, args));
+      Log.d(createTag(), formatString(message, args));
     }
 
     @Override public void d(Throwable t, String message, Object... args) {",False,source
CHANGELOG.md,CHANGELOG.md,09ab9bec838a9a848ad2572c51ae43b9126255c8,893334c9eee9361ca890fca847d633863c6a28ff,Prepare version 2.2.2.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.2.2 *(2014-02-12)*
+----------------------------
+
+ * Fix: Include debug level in previous fix which avoids formatting messages with no arguments.
+
+
 Version 2.2.1 *(2014-02-11)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.2.2 *(2014-02-12)*
+----------------------------
+
+ * Fix: Include debug level in previous fix which avoids formatting messages with no arguments.
+
+
 Version 2.2.1 *(2014-02-11)*
 ----------------------------",False,other
README.md,README.md,09ab9bec838a9a848ad2572c51ae43b9126255c8,893334c9eee9361ca890fca847d633863c6a28ff,Prepare version 2.2.2.,"@@ -37,7 +37,7 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.2.1</version>
+  <version>2.2.2</version>
 </dependency>
 ```
 or Gradle:","@@ -37,7 +37,7 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.2.1</version>
+  <version>2.2.2</version>
 </dependency>
 ```
 or Gradle:",False,readme
pom.xml,pom.xml,8b111d29c4aab09eb3ed325653c22affc06f2ffe,09ab9bec838a9a848ad2572c51ae43b9126255c8,[maven-release-plugin] prepare release timber-parent-2.2.2,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.2-SNAPSHOT</version>
+  <version>2.2.2</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.2.2</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.2-SNAPSHOT</version>
+  <version>2.2.2</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.2.2</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,8b111d29c4aab09eb3ed325653c22affc06f2ffe,09ab9bec838a9a848ad2572c51ae43b9126255c8,[maven-release-plugin] prepare release timber-parent-2.2.2,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2-SNAPSHOT</version>
+    <version>2.2.2</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2-SNAPSHOT</version>
+    <version>2.2.2</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,8b111d29c4aab09eb3ed325653c22affc06f2ffe,09ab9bec838a9a848ad2572c51ae43b9126255c8,[maven-release-plugin] prepare release timber-parent-2.2.2,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2-SNAPSHOT</version>
+    <version>2.2.2</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2-SNAPSHOT</version>
+    <version>2.2.2</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,8b111d29c4aab09eb3ed325653c22affc06f2ffe,09ab9bec838a9a848ad2572c51ae43b9126255c8,[maven-release-plugin] prepare release timber-parent-2.2.2,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2-SNAPSHOT</version>
+    <version>2.2.2</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2-SNAPSHOT</version>
+    <version>2.2.2</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,ec67076d262bf2a436aa8b130f2a48c06593d05f,8b111d29c4aab09eb3ed325653c22affc06f2ffe,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.2</version>
+  <version>2.2.3-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.2.2</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.2</version>
+  <version>2.2.3-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.2.2</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,ec67076d262bf2a436aa8b130f2a48c06593d05f,8b111d29c4aab09eb3ed325653c22affc06f2ffe,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2</version>
+    <version>2.2.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2</version>
+    <version>2.2.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,ec67076d262bf2a436aa8b130f2a48c06593d05f,8b111d29c4aab09eb3ed325653c22affc06f2ffe,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2</version>
+    <version>2.2.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2</version>
+    <version>2.2.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,ec67076d262bf2a436aa8b130f2a48c06593d05f,8b111d29c4aab09eb3ed325653c22affc06f2ffe,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2</version>
+    <version>2.2.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.2</version>
+    <version>2.2.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,24936e21301bfa1244d331a1db5cfec45ad86ab5,ec67076d262bf2a436aa8b130f2a48c06593d05f,Allow logging of long messages,"@@ -195,7 +195,7 @@ public final class Timber {
         return tag;
       }
 
-      tag = new Throwable().getStackTrace()[4].getClassName();
+      tag = new Throwable().getStackTrace()[5].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");
@@ -209,43 +209,64 @@ public final class Timber {
     }
 
     @Override public void v(String message, Object... args) {
-      Log.v(createTag(), formatString(message, args));
+      throwShade(Log.VERBOSE, formatString(message, args), null);
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
-      Log.v(createTag(), formatString(message, args), t);
+      throwShade(Log.VERBOSE, formatString(message, args), t);
     }
 
     @Override public void d(String message, Object... args) {
-      Log.d(createTag(), formatString(message, args));
+      throwShade(Log.DEBUG, formatString(message, args), null);
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      Log.d(createTag(), formatString(message, args), t);
+      throwShade(Log.DEBUG, formatString(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
-      Log.i(createTag(), formatString(message, args));
+      throwShade(Log.INFO, formatString(message, args), null);
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      Log.i(createTag(), formatString(message, args), t);
+      throwShade(Log.INFO, formatString(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
-      Log.w(createTag(), formatString(message, args));
+      throwShade(Log.WARN, formatString(message, args), null);
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      Log.w(createTag(), formatString(message, args), t);
+      throwShade(Log.WARN, formatString(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {
-      Log.e(createTag(), formatString(message, args));
+      throwShade(Log.ERROR, formatString(message, args), null);
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      Log.e(createTag(), formatString(message, args), t);
+      throwShade(Log.ERROR, formatString(message, args), t);
+    }
+
+    private void throwShade(int priority, String message, Throwable t) {
+      if (message == null || message.length() == 0) {
+        return;
+      }
+      String tag = createTag();
+      if (t != null) {
+        message += ""\n"" + Log.getStackTraceString(t);
+      }
+      if (message.length() < 4000) {
+        Log.println(priority, tag, message);
+      } else {
+        // It's rare that the message will be this large, so we're ok with the perf hit of splitting
+        // and calling Log.println N times.  It's possible but unlikely that a single line will be
+        // longer than 4000 characters: we're explicitly ignoring this case here.
+        String[] lines = message.split(""\n"");
+        for (String line : lines) {
+          Log.println(priority, tag, line);
+        }
+      }
     }
 
     @Override public void tag(String tag) {","@@ -195,7 +195,7 @@ public final class Timber {
         return tag;
       }
 
-      tag = new Throwable().getStackTrace()[4].getClassName();
+      tag = new Throwable().getStackTrace()[5].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");
@@ -209,43 +209,64 @@ public final class Timber {
     }
 
     @Override public void v(String message, Object... args) {
-      Log.v(createTag(), formatString(message, args));
+      throwShade(Log.VERBOSE, formatString(message, args), null);
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
-      Log.v(createTag(), formatString(message, args), t);
+      throwShade(Log.VERBOSE, formatString(message, args), t);
     }
 
     @Override public void d(String message, Object... args) {
-      Log.d(createTag(), formatString(message, args));
+      throwShade(Log.DEBUG, formatString(message, args), null);
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      Log.d(createTag(), formatString(message, args), t);
+      throwShade(Log.DEBUG, formatString(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
-      Log.i(createTag(), formatString(message, args));
+      throwShade(Log.INFO, formatString(message, args), null);
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      Log.i(createTag(), formatString(message, args), t);
+      throwShade(Log.INFO, formatString(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
-      Log.w(createTag(), formatString(message, args));
+      throwShade(Log.WARN, formatString(message, args), null);
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      Log.w(createTag(), formatString(message, args), t);
+      throwShade(Log.WARN, formatString(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {
-      Log.e(createTag(), formatString(message, args));
+      throwShade(Log.ERROR, formatString(message, args), null);
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      Log.e(createTag(), formatString(message, args), t);
+      throwShade(Log.ERROR, formatString(message, args), t);
+    }
+
+    private void throwShade(int priority, String message, Throwable t) {
+      if (message == null || message.length() == 0) {
+        return;
+      }
+      String tag = createTag();
+      if (t != null) {
+        message += ""\n"" + Log.getStackTraceString(t);
+      }
+      if (message.length() < 4000) {
+        Log.println(priority, tag, message);
+      } else {
+        // It's rare that the message will be this large, so we're ok with the perf hit of splitting
+        // and calling Log.println N times.  It's possible but unlikely that a single line will be
+        // longer than 4000 characters: we're explicitly ignoring this case here.
+        String[] lines = message.split(""\n"");
+        for (String line : lines) {
+          Log.println(priority, tag, line);
+        }
+      }
     }
 
     @Override public void tag(String tag) {",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,24936e21301bfa1244d331a1db5cfec45ad86ab5,ec67076d262bf2a436aa8b130f2a48c06593d05f,Allow logging of long messages,"@@ -14,7 +14,7 @@ import static org.fest.assertions.api.Assertions.assertThat;
 import static org.robolectric.shadows.ShadowLog.LogItem;
 import static timber.log.Timber.DebugTree.formatString;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricTestRunner.class) //
 @Config(manifest = Config.NONE)
 public class TimberTest {
   @Before @After public void setUpAndTearDown() {
@@ -51,4 +51,20 @@ public class TimberTest {
     assertThat(log.msg).isEqualTo(""Hello, world!"");
     assertThat(log.throwable).isNull();
   }
+
+  @Test public void logWithExceptionHasCorrectTag() {
+    Timber.plant(new Timber.DebugTree());
+    NullPointerException datThrowable = new NullPointerException();
+    Timber.e(datThrowable, ""OMFG!"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.ERROR);
+    assertThat(log.tag).isEqualTo(""TimberTest"");
+    assertThat(log.msg).startsWith(""OMFG!"");
+    assertThat(log.msg).contains(""java.lang.NullPointerException"");
+    // We use a low-level primitive that Robolectric doesn't populate.
+    assertThat(log.throwable).isNull();
+  }
 }","@@ -14,7 +14,7 @@ import static org.fest.assertions.api.Assertions.assertThat;
 import static org.robolectric.shadows.ShadowLog.LogItem;
 import static timber.log.Timber.DebugTree.formatString;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricTestRunner.class) //
 @Config(manifest = Config.NONE)
 public class TimberTest {
   @Before @After public void setUpAndTearDown() {
@@ -51,4 +51,20 @@ public class TimberTest {
     assertThat(log.msg).isEqualTo(""Hello, world!"");
     assertThat(log.throwable).isNull();
   }
+
+  @Test public void logWithExceptionHasCorrectTag() {
+    Timber.plant(new Timber.DebugTree());
+    NullPointerException datThrowable = new NullPointerException();
+    Timber.e(datThrowable, ""OMFG!"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.ERROR);
+    assertThat(log.tag).isEqualTo(""TimberTest"");
+    assertThat(log.msg).startsWith(""OMFG!"");
+    assertThat(log.msg).contains(""java.lang.NullPointerException"");
+    // We use a low-level primitive that Robolectric doesn't populate.
+    assertThat(log.throwable).isNull();
+  }
 }",False,test
CHANGELOG.md,CHANGELOG.md,6a59804f2baa2cb0b7902bd9ed93587385c7cf61,e3939c0038c64b7762dda7f05bf39dd2603de51a,Prepare for 2.3.0.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.3.0 *(2014-05-21)*
+----------------------------
+
+ * New: Messages longer than 4000 characters will be split into multiple lines.
+
+
 Version 2.2.2 *(2014-02-12)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.3.0 *(2014-05-21)*
+----------------------------
+
+ * New: Messages longer than 4000 characters will be split into multiple lines.
+
+
 Version 2.2.2 *(2014-02-12)*
 ----------------------------",False,other
README.md,README.md,6a59804f2baa2cb0b7902bd9ed93587385c7cf61,e3939c0038c64b7762dda7f05bf39dd2603de51a,Prepare for 2.3.0.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.2.2</version>
+  <version>2.3.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.2.+'
+compile 'com.jakewharton.timber:timber:2.3.+'
 ```","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.2.2</version>
+  <version>2.3.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.2.+'
+compile 'com.jakewharton.timber:timber:2.3.+'
 ```",False,readme
pom.xml,pom.xml,8ebbac93ba0a4041817293633681fce7690b02f0,6a59804f2baa2cb0b7902bd9ed93587385c7cf61,[maven-release-plugin] prepare release timber-parent-2.3.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.3-SNAPSHOT</version>
+  <version>2.3.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.3.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.2.3-SNAPSHOT</version>
+  <version>2.3.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.3.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,8ebbac93ba0a4041817293633681fce7690b02f0,6a59804f2baa2cb0b7902bd9ed93587385c7cf61,[maven-release-plugin] prepare release timber-parent-2.3.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.3-SNAPSHOT</version>
+    <version>2.3.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.3-SNAPSHOT</version>
+    <version>2.3.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,8ebbac93ba0a4041817293633681fce7690b02f0,6a59804f2baa2cb0b7902bd9ed93587385c7cf61,[maven-release-plugin] prepare release timber-parent-2.3.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.3-SNAPSHOT</version>
+    <version>2.3.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.3-SNAPSHOT</version>
+    <version>2.3.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,8ebbac93ba0a4041817293633681fce7690b02f0,6a59804f2baa2cb0b7902bd9ed93587385c7cf61,[maven-release-plugin] prepare release timber-parent-2.3.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.3-SNAPSHOT</version>
+    <version>2.3.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.2.3-SNAPSHOT</version>
+    <version>2.3.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,e0c7f1874b412bb0d10fab93690542ef5fe6ffa8,8ebbac93ba0a4041817293633681fce7690b02f0,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.3.0</version>
+  <version>2.3.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.3.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.3.0</version>
+  <version>2.3.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.3.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,e0c7f1874b412bb0d10fab93690542ef5fe6ffa8,8ebbac93ba0a4041817293633681fce7690b02f0,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.0</version>
+    <version>2.3.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.0</version>
+    <version>2.3.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,e0c7f1874b412bb0d10fab93690542ef5fe6ffa8,8ebbac93ba0a4041817293633681fce7690b02f0,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.0</version>
+    <version>2.3.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.0</version>
+    <version>2.3.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,e0c7f1874b412bb0d10fab93690542ef5fe6ffa8,8ebbac93ba0a4041817293633681fce7690b02f0,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.0</version>
+    <version>2.3.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.0</version>
+    <version>2.3.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,be8b9ca0ae07b0685d2989dff6b3f9da96ce6582,e0c7f1874b412bb0d10fab93690542ef5fe6ffa8,"Add test for throwing from a Thread, make Proguard crash message better.","@@ -195,7 +195,12 @@ public final class Timber {
         return tag;
       }
 
-      tag = new Throwable().getStackTrace()[5].getClassName();
+      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
+      if (stackTrace.length < 6) {
+        throw new IllegalStateException(
+            ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
+      }
+      tag = stackTrace[5].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");","@@ -195,7 +195,12 @@ public final class Timber {
         return tag;
       }
 
-      tag = new Throwable().getStackTrace()[5].getClassName();
+      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
+      if (stackTrace.length < 6) {
+        throw new IllegalStateException(
+            ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
+      }
+      tag = stackTrace[5].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,be8b9ca0ae07b0685d2989dff6b3f9da96ce6582,e0c7f1874b412bb0d10fab93690542ef5fe6ffa8,"Add test for throwing from a Thread, make Proguard crash message better.","@@ -2,6 +2,7 @@ package timber.log;
 
 import android.util.Log;
 import java.util.List;
+import java.util.concurrent.CountDownLatch;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -57,13 +58,32 @@ public class TimberTest {
     NullPointerException datThrowable = new NullPointerException();
     Timber.e(datThrowable, ""OMFG!"");
 
+    assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
+  }
+
+  @Test
+  public void testLogExceptionFromSpawnedThread() throws Exception {
+    Timber.plant(new Timber.DebugTree());
+    final NullPointerException datThrowable = new NullPointerException();
+    final CountDownLatch latch = new CountDownLatch(1);
+    new Thread() {
+      @Override public void run() {
+        Timber.e(datThrowable, ""OMFG!"");
+        latch.countDown();
+      }
+    }.run();
+    latch.await();
+    assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
+  }
+
+  private static void assertExceptionLogged(String message, String exceptionClassname) {
     List<LogItem> logs = ShadowLog.getLogs();
     assertThat(logs).hasSize(1);
     LogItem log = logs.get(0);
     assertThat(log.type).isEqualTo(Log.ERROR);
     assertThat(log.tag).isEqualTo(""TimberTest"");
-    assertThat(log.msg).startsWith(""OMFG!"");
-    assertThat(log.msg).contains(""java.lang.NullPointerException"");
+    assertThat(log.msg).startsWith(message);
+    assertThat(log.msg).contains(exceptionClassname);
     // We use a low-level primitive that Robolectric doesn't populate.
     assertThat(log.throwable).isNull();
   }","@@ -2,6 +2,7 @@ package timber.log;
 
 import android.util.Log;
 import java.util.List;
+import java.util.concurrent.CountDownLatch;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -57,13 +58,32 @@ public class TimberTest {
     NullPointerException datThrowable = new NullPointerException();
     Timber.e(datThrowable, ""OMFG!"");
 
+    assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
+  }
+
+  @Test
+  public void testLogExceptionFromSpawnedThread() throws Exception {
+    Timber.plant(new Timber.DebugTree());
+    final NullPointerException datThrowable = new NullPointerException();
+    final CountDownLatch latch = new CountDownLatch(1);
+    new Thread() {
+      @Override public void run() {
+        Timber.e(datThrowable, ""OMFG!"");
+        latch.countDown();
+      }
+    }.run();
+    latch.await();
+    assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
+  }
+
+  private static void assertExceptionLogged(String message, String exceptionClassname) {
     List<LogItem> logs = ShadowLog.getLogs();
     assertThat(logs).hasSize(1);
     LogItem log = logs.get(0);
     assertThat(log.type).isEqualTo(Log.ERROR);
     assertThat(log.tag).isEqualTo(""TimberTest"");
-    assertThat(log.msg).startsWith(""OMFG!"");
-    assertThat(log.msg).contains(""java.lang.NullPointerException"");
+    assertThat(log.msg).startsWith(message);
+    assertThat(log.msg).contains(exceptionClassname);
     // We use a low-level primitive that Robolectric doesn't populate.
     assertThat(log.throwable).isNull();
   }",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,ec92b4d1ca637ea95c30b347be9f02a198bec0e6,e0c7f1874b412bb0d10fab93690542ef5fe6ffa8,Add uproot and uprootAll methods to removing trees.,"@@ -75,6 +75,24 @@ public final class Timber {
     FOREST.add(tree);
   }
 
+  /** Remove a planted tree. */
+  public static void uproot(Tree tree) {
+    for (int i = 0, size = FOREST.size(); i < size; i++) {
+      if (FOREST.get(i) == tree) {
+        TAGGED_TREES.delete(i);
+        FOREST.remove(i);
+        return;
+      }
+    }
+    throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
+  }
+
+  /** Remove all planted trees. */
+  public static void uprootAll() {
+    TAGGED_TREES.clear();
+    FOREST.clear();
+  }
+
   static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
   static final SparseBooleanArray TAGGED_TREES = new SparseBooleanArray();","@@ -75,6 +75,24 @@ public final class Timber {
     FOREST.add(tree);
   }
 
+  /** Remove a planted tree. */
+  public static void uproot(Tree tree) {
+    for (int i = 0, size = FOREST.size(); i < size; i++) {
+      if (FOREST.get(i) == tree) {
+        TAGGED_TREES.delete(i);
+        FOREST.remove(i);
+        return;
+      }
+    }
+    throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
+  }
+
+  /** Remove all planted trees. */
+  public static void uprootAll() {
+    TAGGED_TREES.clear();
+    FOREST.clear();
+  }
+
   static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
   static final SparseBooleanArray TAGGED_TREES = new SparseBooleanArray();",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,ec92b4d1ca637ea95c30b347be9f02a198bec0e6,e0c7f1874b412bb0d10fab93690542ef5fe6ffa8,Add uproot and uprootAll methods to removing trees.,"@@ -11,6 +11,7 @@ import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 import static org.robolectric.shadows.ShadowLog.LogItem;
 import static timber.log.Timber.DebugTree.formatString;
 
@@ -22,6 +23,46 @@ public class TimberTest {
     Timber.TAGGED_TREES.clear();
   }
 
+  @Test public void uprootThrowsIfMissing() {
+    try {
+      Timber.uproot(new Timber.DebugTree());
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessageStartingWith(""Cannot uproot tree which is not planted: "");
+    }
+  }
+
+  @Test public void uprootRemovesTree() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1);
+    Timber.plant(tree2);
+    Timber.d(""First"");
+    Timber.uproot(tree1);
+    Timber.d(""Second"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(3);
+    assertThat(logs.get(0).msg).isEqualTo(""First"");
+    assertThat(logs.get(1).msg).isEqualTo(""First"");
+    assertThat(logs.get(2).msg).isEqualTo(""Second"");
+  }
+
+  @Test public void uprootAllRemovesAll() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1);
+    Timber.plant(tree2);
+    Timber.d(""First"");
+    Timber.uprootAll();
+    Timber.d(""Second"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(2);
+    assertThat(logs.get(0).msg).isEqualTo(""First"");
+    assertThat(logs.get(1).msg).isEqualTo(""First"");
+  }
+
   @Test public void noArgsDoesNotFormat() {
     assertThat(formatString(""te%st"")).isSameAs(""te%st"");
   }","@@ -11,6 +11,7 @@ import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 import static org.robolectric.shadows.ShadowLog.LogItem;
 import static timber.log.Timber.DebugTree.formatString;
 
@@ -22,6 +23,46 @@ public class TimberTest {
     Timber.TAGGED_TREES.clear();
   }
 
+  @Test public void uprootThrowsIfMissing() {
+    try {
+      Timber.uproot(new Timber.DebugTree());
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessageStartingWith(""Cannot uproot tree which is not planted: "");
+    }
+  }
+
+  @Test public void uprootRemovesTree() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1);
+    Timber.plant(tree2);
+    Timber.d(""First"");
+    Timber.uproot(tree1);
+    Timber.d(""Second"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(3);
+    assertThat(logs.get(0).msg).isEqualTo(""First"");
+    assertThat(logs.get(1).msg).isEqualTo(""First"");
+    assertThat(logs.get(2).msg).isEqualTo(""Second"");
+  }
+
+  @Test public void uprootAllRemovesAll() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1);
+    Timber.plant(tree2);
+    Timber.d(""First"");
+    Timber.uprootAll();
+    Timber.d(""Second"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(2);
+    assertThat(logs.get(0).msg).isEqualTo(""First"");
+    assertThat(logs.get(1).msg).isEqualTo(""First"");
+  }
+
   @Test public void noArgsDoesNotFormat() {
     assertThat(formatString(""te%st"")).isSameAs(""te%st"");
   }",False,test
CHANGELOG.md,CHANGELOG.md,09c6ca584979c6e5d3265b15862802421c11980d,6bb92b02991a26c077de7831bbdea38e56dc7e69,Prepare version 2.4.0.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.4.0 *(2014-06-10)*
+----------------------------
+
+ * New: `uproot` and `uprootAll` methods allow removing trees.
+
+
 Version 2.3.0 *(2014-05-21)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.4.0 *(2014-06-10)*
+----------------------------
+
+ * New: `uproot` and `uprootAll` methods allow removing trees.
+
+
 Version 2.3.0 *(2014-05-21)*
 ----------------------------",False,other
README.md,README.md,09c6ca584979c6e5d3265b15862802421c11980d,6bb92b02991a26c077de7831bbdea38e56dc7e69,Prepare version 2.4.0.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.3.0</version>
+  <version>2.4.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.3.+'
+compile 'com.jakewharton.timber:timber:2.4.+'
 ```","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.3.0</version>
+  <version>2.4.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.3.+'
+compile 'com.jakewharton.timber:timber:2.4.+'
 ```",False,readme
pom.xml,pom.xml,6634fddd5f0bcf25de7f821610e8dce0d37e95e8,09c6ca584979c6e5d3265b15862802421c11980d,[maven-release-plugin] prepare release timber-parent-2.4.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.3.1-SNAPSHOT</version>
+  <version>2.4.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.4.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.3.1-SNAPSHOT</version>
+  <version>2.4.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.4.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,6634fddd5f0bcf25de7f821610e8dce0d37e95e8,09c6ca584979c6e5d3265b15862802421c11980d,[maven-release-plugin] prepare release timber-parent-2.4.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.1-SNAPSHOT</version>
+    <version>2.4.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.1-SNAPSHOT</version>
+    <version>2.4.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,6634fddd5f0bcf25de7f821610e8dce0d37e95e8,09c6ca584979c6e5d3265b15862802421c11980d,[maven-release-plugin] prepare release timber-parent-2.4.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.1-SNAPSHOT</version>
+    <version>2.4.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.1-SNAPSHOT</version>
+    <version>2.4.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,6634fddd5f0bcf25de7f821610e8dce0d37e95e8,09c6ca584979c6e5d3265b15862802421c11980d,[maven-release-plugin] prepare release timber-parent-2.4.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.1-SNAPSHOT</version>
+    <version>2.4.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.3.1-SNAPSHOT</version>
+    <version>2.4.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,04b4dae1f584f41b81a5ed0b9c71748dd41dbda6,6634fddd5f0bcf25de7f821610e8dce0d37e95e8,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.0</version>
+  <version>2.4.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.4.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.0</version>
+  <version>2.4.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.4.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,04b4dae1f584f41b81a5ed0b9c71748dd41dbda6,6634fddd5f0bcf25de7f821610e8dce0d37e95e8,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.0</version>
+    <version>2.4.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.0</version>
+    <version>2.4.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,04b4dae1f584f41b81a5ed0b9c71748dd41dbda6,6634fddd5f0bcf25de7f821610e8dce0d37e95e8,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.0</version>
+    <version>2.4.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.0</version>
+    <version>2.4.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,04b4dae1f584f41b81a5ed0b9c71748dd41dbda6,6634fddd5f0bcf25de7f821610e8dce0d37e95e8,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.0</version>
+    <version>2.4.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.0</version>
+    <version>2.4.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,2f31888ad5c5c1cdb0853b823e1503d854f66463,04b4dae1f584f41b81a5ed0b9c71748dd41dbda6,"Don't swallow log messages that are null, but have a throwable","@@ -273,12 +273,17 @@ public final class Timber {
 
     private void throwShade(int priority, String message, Throwable t) {
       if (message == null || message.length() == 0) {
-        return;
-      }
-      String tag = createTag();
-      if (t != null) {
+        if (t != null) {
+          message = Log.getStackTraceString(t);
+        } else {
+          // Swallow message if it's null and there's no throwable.
+          return;
+        }
+      } else if (t != null) {
         message += ""\n"" + Log.getStackTraceString(t);
       }
+
+      String tag = createTag();
       if (message.length() < 4000) {
         Log.println(priority, tag, message);
       } else {","@@ -273,12 +273,17 @@ public final class Timber {
 
     private void throwShade(int priority, String message, Throwable t) {
       if (message == null || message.length() == 0) {
-        return;
-      }
-      String tag = createTag();
-      if (t != null) {
+        if (t != null) {
+          message = Log.getStackTraceString(t);
+        } else {
+          // Swallow message if it's null and there's no throwable.
+          return;
+        }
+      } else if (t != null) {
         message += ""\n"" + Log.getStackTraceString(t);
       }
+
+      String tag = createTag();
       if (message.length() < 4000) {
         Log.println(priority, tag, message);
       } else {",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,2f31888ad5c5c1cdb0853b823e1503d854f66463,04b4dae1f584f41b81a5ed0b9c71748dd41dbda6,"Don't swallow log messages that are null, but have a throwable","@@ -102,8 +102,7 @@ public class TimberTest {
     assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
   }
 
-  @Test
-  public void testLogExceptionFromSpawnedThread() throws Exception {
+  @Test public void testLogExceptionFromSpawnedThread() throws Exception {
     Timber.plant(new Timber.DebugTree());
     final NullPointerException datThrowable = new NullPointerException();
     final CountDownLatch latch = new CountDownLatch(1);
@@ -117,6 +116,22 @@ public class TimberTest {
     assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
   }
 
+  @Test public void testLogNullMessageWithThrowable() throws Exception {
+    Timber.plant(new Timber.DebugTree());
+    final NullPointerException datThrowable = new NullPointerException();
+    Timber.e(datThrowable, null);
+
+    assertExceptionLogged("""", ""java.lang.NullPointerException"");
+  }
+
+  @Test public void testLogNullMessageWithoutThrowable() throws Exception {
+    Timber.plant(new Timber.DebugTree());
+    Timber.d(null);
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(0);
+  }
+
   private static void assertExceptionLogged(String message, String exceptionClassname) {
     List<LogItem> logs = ShadowLog.getLogs();
     assertThat(logs).hasSize(1);","@@ -102,8 +102,7 @@ public class TimberTest {
     assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
   }
 
-  @Test
-  public void testLogExceptionFromSpawnedThread() throws Exception {
+  @Test public void testLogExceptionFromSpawnedThread() throws Exception {
     Timber.plant(new Timber.DebugTree());
     final NullPointerException datThrowable = new NullPointerException();
     final CountDownLatch latch = new CountDownLatch(1);
@@ -117,6 +116,22 @@ public class TimberTest {
     assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
   }
 
+  @Test public void testLogNullMessageWithThrowable() throws Exception {
+    Timber.plant(new Timber.DebugTree());
+    final NullPointerException datThrowable = new NullPointerException();
+    Timber.e(datThrowable, null);
+
+    assertExceptionLogged("""", ""java.lang.NullPointerException"");
+  }
+
+  @Test public void testLogNullMessageWithoutThrowable() throws Exception {
+    Timber.plant(new Timber.DebugTree());
+    Timber.d(null);
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(0);
+  }
+
   private static void assertExceptionLogged(String message, String exceptionClassname) {
     List<LogItem> logs = ShadowLog.getLogs();
     assertThat(logs).hasSize(1);",False,test
CHANGELOG.md,CHANGELOG.md,3799c42a4ac221410f0ac10412eba1810d05eefc,1180c008dce2143033f30ae6b7c5dc1db9052b13,Prepare version 2.4.1.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.4.1 *(2014-06-19)*
+----------------------------
+
+ * Fix: Calls with no message but a `Throwable` are now correctly logged.
+
+
 Version 2.4.0 *(2014-06-10)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.4.1 *(2014-06-19)*
+----------------------------
+
+ * Fix: Calls with no message but a `Throwable` are now correctly logged.
+
+
 Version 2.4.0 *(2014-06-10)*
 ----------------------------",False,other
README.md,README.md,3799c42a4ac221410f0ac10412eba1810d05eefc,1180c008dce2143033f30ae6b7c5dc1db9052b13,Prepare version 2.4.1.,"@@ -37,7 +37,7 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.4.0</version>
+  <version>2.4.1</version>
 </dependency>
 ```
 or Gradle:","@@ -37,7 +37,7 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.4.0</version>
+  <version>2.4.1</version>
 </dependency>
 ```
 or Gradle:",False,readme
pom.xml,pom.xml,86416d5260ad0d209ebb85c3483c831deb750c29,3799c42a4ac221410f0ac10412eba1810d05eefc,[maven-release-plugin] prepare release timber-parent-2.4.1,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.1-SNAPSHOT</version>
+  <version>2.4.1</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.4.1</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.1-SNAPSHOT</version>
+  <version>2.4.1</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.4.1</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,86416d5260ad0d209ebb85c3483c831deb750c29,3799c42a4ac221410f0ac10412eba1810d05eefc,[maven-release-plugin] prepare release timber-parent-2.4.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1-SNAPSHOT</version>
+    <version>2.4.1</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1-SNAPSHOT</version>
+    <version>2.4.1</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,86416d5260ad0d209ebb85c3483c831deb750c29,3799c42a4ac221410f0ac10412eba1810d05eefc,[maven-release-plugin] prepare release timber-parent-2.4.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1-SNAPSHOT</version>
+    <version>2.4.1</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1-SNAPSHOT</version>
+    <version>2.4.1</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,86416d5260ad0d209ebb85c3483c831deb750c29,3799c42a4ac221410f0ac10412eba1810d05eefc,[maven-release-plugin] prepare release timber-parent-2.4.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1-SNAPSHOT</version>
+    <version>2.4.1</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1-SNAPSHOT</version>
+    <version>2.4.1</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,58604dc0b596e37e7e8540891e06dfc0e07bb98b,86416d5260ad0d209ebb85c3483c831deb750c29,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.1</version>
+  <version>2.4.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.4.1</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.1</version>
+  <version>2.4.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.4.1</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,58604dc0b596e37e7e8540891e06dfc0e07bb98b,86416d5260ad0d209ebb85c3483c831deb750c29,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1</version>
+    <version>2.4.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1</version>
+    <version>2.4.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,58604dc0b596e37e7e8540891e06dfc0e07bb98b,86416d5260ad0d209ebb85c3483c831deb750c29,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1</version>
+    <version>2.4.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1</version>
+    <version>2.4.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,58604dc0b596e37e7e8540891e06dfc0e07bb98b,86416d5260ad0d209ebb85c3483c831deb750c29,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1</version>
+    <version>2.4.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.1</version>
+    <version>2.4.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
.travis.yml,.travis.yml,41bc18a4d7272028fc72048bf7a4d315e980d4b6,58604dc0b596e37e7e8540891e06dfc0e07bb98b,Update to Android worker.,"@@ -1,13 +1,19 @@
-language: java
+language: android
 
-jdk: oraclejdk7
+jdk:
+ - oraclejdk7
+ - oraclejdk8
 
-before_install:
-  - export TERM=dumb
-  - sudo apt-get install -qq libstdc++6:i386 lib32z1
-  - export COMPONENTS=build-tools-19.0.1,android-16,extra-android-m2repository
-  - curl -L https://raw.github.com/embarkmobile/android-sdk-installer/version-1/android-sdk-installer | bash /dev/stdin --install=$COMPONENTS
-  - source ~/.android-sdk-installer/env
+android:
+  components:
+    - build-tools-20.0.0
+    - android-16
+  licenses:
+    - android-sdk-license-5be876d5
+
+branches:
+  except:
+    - gh-pages
 
 notifications:
   email: false","@@ -1,13 +1,19 @@
-language: java
+language: android
 
-jdk: oraclejdk7
+jdk:
+ - oraclejdk7
+ - oraclejdk8
 
-before_install:
-  - export TERM=dumb
-  - sudo apt-get install -qq libstdc++6:i386 lib32z1
-  - export COMPONENTS=build-tools-19.0.1,android-16,extra-android-m2repository
-  - curl -L https://raw.github.com/embarkmobile/android-sdk-installer/version-1/android-sdk-installer | bash /dev/stdin --install=$COMPONENTS
-  - source ~/.android-sdk-installer/env
+android:
+  components:
+    - build-tools-20.0.0
+    - android-16
+  licenses:
+    - android-sdk-license-5be876d5
+
+branches:
+  except:
+    - gh-pages
 
 notifications:
   email: false",False,other
checkstyle.xml,checkstyle.xml,b0f03bee10f39588b3b582b3d1f326049e417dab,04d2426e61e1918eaf1a1d43595fee09960e2b97,Stop wasting an iterator allocation on every log invocation.,"@@ -16,7 +16,7 @@
 
   <!-- Space after 'for' and 'if' -->
   <module name=""RegexpSingleline"">
-    <property name=""format"" value=""^\s*(for|if)[^ ]""/>
+    <property name=""format"" value=""^\s*(for|if)\(""/>
     <property name=""message"" value=""Space needed before opening parenthesis.""/>
   </module>","@@ -16,7 +16,7 @@
 
   <!-- Space after 'for' and 'if' -->
   <module name=""RegexpSingleline"">
-    <property name=""format"" value=""^\s*(for|if)[^ ]""/>
+    <property name=""format"" value=""^\s*(for|if)\(""/>
     <property name=""message"" value=""Space needed before opening parenthesis.""/>
   </module>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,b0f03bee10f39588b3b582b3d1f326049e417dab,04d2426e61e1918eaf1a1d43595fee09960e2b97,Stop wasting an iterator allocation on every log invocation.,"@@ -99,62 +99,82 @@ public final class Timber {
   /** A {@link Tree} that delegates to all planted trees in the {@link #FOREST forest}. */
   private static final Tree TREE_OF_SOULS = new Tree() {
     @Override public void v(String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.v(message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = FOREST.size(); i < count; i++) {
+        forest.get(i).v(message, args);
       }
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.v(t, message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).v(t, message, args);
       }
     }
 
     @Override public void d(String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.d(message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).d(message, args);
       }
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.d(t, message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).d(t, message, args);
       }
     }
 
     @Override public void i(String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.i(message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).i(message, args);
       }
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.i(t, message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).i(t, message, args);
       }
     }
 
     @Override public void w(String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.w(message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).w(message, args);
       }
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.w(t, message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).w(t, message, args);
       }
     }
 
     @Override public void e(String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.e(message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).e(message, args);
       }
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.e(t, message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).e(t, message, args);
       }
     }
   };","@@ -99,62 +99,82 @@ public final class Timber {
   /** A {@link Tree} that delegates to all planted trees in the {@link #FOREST forest}. */
   private static final Tree TREE_OF_SOULS = new Tree() {
     @Override public void v(String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.v(message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = FOREST.size(); i < count; i++) {
+        forest.get(i).v(message, args);
       }
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.v(t, message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).v(t, message, args);
       }
     }
 
     @Override public void d(String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.d(message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).d(message, args);
       }
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.d(t, message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).d(t, message, args);
       }
     }
 
     @Override public void i(String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.i(message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).i(message, args);
       }
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.i(t, message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).i(t, message, args);
       }
     }
 
     @Override public void w(String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.w(message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).w(message, args);
       }
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.w(t, message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).w(t, message, args);
       }
     }
 
     @Override public void e(String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.e(message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).e(message, args);
       }
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      for (Tree tree : FOREST) {
-        tree.e(t, message, args);
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).e(t, message, args);
       }
     }
   };",False,source
CHANGELOG.md,CHANGELOG.md,3fd4d55123ef6a10df520753005b715f0dfb9e76,b0f03bee10f39588b3b582b3d1f326049e417dab,Prepare version 2.4.2.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.4.2 *(2014-11-07)*
+----------------------------
+
+ * Eliminate heap allocation when dispatching log calls.
+
+
 Version 2.4.1 *(2014-06-19)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.4.2 *(2014-11-07)*
+----------------------------
+
+ * Eliminate heap allocation when dispatching log calls.
+
+
 Version 2.4.1 *(2014-06-19)*
 ----------------------------",False,other
README.md,README.md,3fd4d55123ef6a10df520753005b715f0dfb9e76,b0f03bee10f39588b3b582b3d1f326049e417dab,Prepare version 2.4.2.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.4.1</version>
+  <version>2.4.2</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.4.+'
+compile 'com.jakewharton.timber:timber:2.4.2'
 ```","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.4.1</version>
+  <version>2.4.2</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.4.+'
+compile 'com.jakewharton.timber:timber:2.4.2'
 ```",False,readme
pom.xml,pom.xml,b999a2bde6f0c425893817202c6baa7113222b46,3fd4d55123ef6a10df520753005b715f0dfb9e76,[maven-release-plugin] prepare release timber-parent-2.4.2,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.2-SNAPSHOT</version>
+  <version>2.4.2</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.4.2</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.2-SNAPSHOT</version>
+  <version>2.4.2</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.4.2</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,b999a2bde6f0c425893817202c6baa7113222b46,3fd4d55123ef6a10df520753005b715f0dfb9e76,[maven-release-plugin] prepare release timber-parent-2.4.2,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2-SNAPSHOT</version>
+    <version>2.4.2</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2-SNAPSHOT</version>
+    <version>2.4.2</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,b999a2bde6f0c425893817202c6baa7113222b46,3fd4d55123ef6a10df520753005b715f0dfb9e76,[maven-release-plugin] prepare release timber-parent-2.4.2,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2-SNAPSHOT</version>
+    <version>2.4.2</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2-SNAPSHOT</version>
+    <version>2.4.2</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,b999a2bde6f0c425893817202c6baa7113222b46,3fd4d55123ef6a10df520753005b715f0dfb9e76,[maven-release-plugin] prepare release timber-parent-2.4.2,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2-SNAPSHOT</version>
+    <version>2.4.2</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2-SNAPSHOT</version>
+    <version>2.4.2</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,96d54a958b5d297b44f3b47b127008c78c801aae,b999a2bde6f0c425893817202c6baa7113222b46,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.2</version>
+  <version>2.4.3-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.4.2</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.2</version>
+  <version>2.4.3-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.4.2</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,96d54a958b5d297b44f3b47b127008c78c801aae,b999a2bde6f0c425893817202c6baa7113222b46,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2</version>
+    <version>2.4.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2</version>
+    <version>2.4.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,96d54a958b5d297b44f3b47b127008c78c801aae,b999a2bde6f0c425893817202c6baa7113222b46,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2</version>
+    <version>2.4.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2</version>
+    <version>2.4.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,96d54a958b5d297b44f3b47b127008c78c801aae,b999a2bde6f0c425893817202c6baa7113222b46,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2</version>
+    <version>2.4.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.2</version>
+    <version>2.4.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,081b33d257fcd144c36d80adb301e02cb23f2c48,96d54a958b5d297b44f3b47b127008c78c801aae,Oops. Missed one...,"@@ -101,7 +101,7 @@ public final class Timber {
     @Override public void v(String message, Object... args) {
       List<Tree> forest = FOREST;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = FOREST.size(); i < count; i++) {
+      for (int i = 0, count = forest.size(); i < count; i++) {
         forest.get(i).v(message, args);
       }
     }","@@ -101,7 +101,7 @@ public final class Timber {
     @Override public void v(String message, Object... args) {
       List<Tree> forest = FOREST;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = FOREST.size(); i < count; i++) {
+      for (int i = 0, count = forest.size(); i < count; i++) {
         forest.get(i).v(message, args);
       }
     }",False,source
CHANGELOG.md,CHANGELOG.md,f33e5a081e695c463fef082076bf8dafe21fed6a,081b33d257fcd144c36d80adb301e02cb23f2c48,Expose Timber itself as Tree instance.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.5.0 *(2014-11-08)*
+----------------------------
+
+ * New: `Timber.asTree()` exposes functionality as a `Tree` instance rather than static methods.
+
+
 Version 2.4.2 *(2014-11-07)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.5.0 *(2014-11-08)*
+----------------------------
+
+ * New: `Timber.asTree()` exposes functionality as a `Tree` instance rather than static methods.
+
+
 Version 2.4.2 *(2014-11-07)*
 ----------------------------",False,other
README.md,README.md,f33e5a081e695c463fef082076bf8dafe21fed6a,081b33d257fcd144c36d80adb301e02cb23f2c48,Expose Timber itself as Tree instance.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.4.2</version>
+  <version>2.5.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.4.2'
+compile 'com.jakewharton.timber:timber:2.5.0'
 ```","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.4.2</version>
+  <version>2.5.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.4.2'
+compile 'com.jakewharton.timber:timber:2.5.0'
 ```",False,readme
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,f33e5a081e695c463fef082076bf8dafe21fed6a,081b33d257fcd144c36d80adb301e02cb23f2c48,Expose Timber itself as Tree instance.,"@@ -59,6 +59,14 @@ public final class Timber {
     TREE_OF_SOULS.e(t, message, args);
   }
 
+  /**
+   * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
+   * instance rather than using static methods or to facilitate testing.
+   */
+  public static Tree asTree() {
+    return TREE_OF_SOULS;
+  }
+
   /** Set a one-time tag for use on the next logging call. */
   public static Tree tag(String tag) {
     for (int index = 0, size = TAGGED_TREES.size(); index < size; index++) {
@@ -69,6 +77,9 @@ public final class Timber {
 
   /** Add a new logging tree. */
   public static void plant(Tree tree) {
+    if (tree == TREE_OF_SOULS) {
+      throw new IllegalArgumentException(""Cannot plant Timber into itself."");
+    }
     if (tree instanceof TaggedTree) {
       TAGGED_TREES.append(FOREST.size(), true);
     }","@@ -59,6 +59,14 @@ public final class Timber {
     TREE_OF_SOULS.e(t, message, args);
   }
 
+  /**
+   * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
+   * instance rather than using static methods or to facilitate testing.
+   */
+  public static Tree asTree() {
+    return TREE_OF_SOULS;
+  }
+
   /** Set a one-time tag for use on the next logging call. */
   public static Tree tag(String tag) {
     for (int index = 0, size = TAGGED_TREES.size(); index < size; index++) {
@@ -69,6 +77,9 @@ public final class Timber {
 
   /** Add a new logging tree. */
   public static void plant(Tree tree) {
+    if (tree == TREE_OF_SOULS) {
+      throw new IllegalArgumentException(""Cannot plant Timber into itself."");
+    }
     if (tree instanceof TaggedTree) {
       TAGGED_TREES.append(FOREST.size(), true);
     }",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,f33e5a081e695c463fef082076bf8dafe21fed6a,081b33d257fcd144c36d80adb301e02cb23f2c48,Expose Timber itself as Tree instance.,"@@ -24,6 +24,16 @@ public class TimberTest {
     Timber.TAGGED_TREES.clear();
   }
 
+  @Test public void recursion() {
+    Timber.Tree timber = Timber.asTree();
+    try {
+      Timber.plant(timber);
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(""Cannot plant Timber into itself."");
+    }
+  }
+
   @Test public void uprootThrowsIfMissing() {
     try {
       Timber.uproot(new Timber.DebugTree());","@@ -24,6 +24,16 @@ public class TimberTest {
     Timber.TAGGED_TREES.clear();
   }
 
+  @Test public void recursion() {
+    Timber.Tree timber = Timber.asTree();
+    try {
+      Timber.plant(timber);
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(""Cannot plant Timber into itself."");
+    }
+  }
+
   @Test public void uprootThrowsIfMissing() {
     try {
       Timber.uproot(new Timber.DebugTree());",False,test
pom.xml,pom.xml,a49f584bfd2ad0a4bfe18f40f07a346540814d20,f33e5a081e695c463fef082076bf8dafe21fed6a,[maven-release-plugin] prepare release timber-parent-2.5.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.3-SNAPSHOT</version>
+  <version>2.5.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.5.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.4.3-SNAPSHOT</version>
+  <version>2.5.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.5.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,a49f584bfd2ad0a4bfe18f40f07a346540814d20,f33e5a081e695c463fef082076bf8dafe21fed6a,[maven-release-plugin] prepare release timber-parent-2.5.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.3-SNAPSHOT</version>
+    <version>2.5.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.3-SNAPSHOT</version>
+    <version>2.5.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,a49f584bfd2ad0a4bfe18f40f07a346540814d20,f33e5a081e695c463fef082076bf8dafe21fed6a,[maven-release-plugin] prepare release timber-parent-2.5.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.3-SNAPSHOT</version>
+    <version>2.5.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.3-SNAPSHOT</version>
+    <version>2.5.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,a49f584bfd2ad0a4bfe18f40f07a346540814d20,f33e5a081e695c463fef082076bf8dafe21fed6a,[maven-release-plugin] prepare release timber-parent-2.5.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.3-SNAPSHOT</version>
+    <version>2.5.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.4.3-SNAPSHOT</version>
+    <version>2.5.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,dd94a22799ecf512a658c5cafcc2e67647fa07a9,a49f584bfd2ad0a4bfe18f40f07a346540814d20,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.5.0</version>
+  <version>2.5.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.5.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.5.0</version>
+  <version>2.5.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.5.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,dd94a22799ecf512a658c5cafcc2e67647fa07a9,a49f584bfd2ad0a4bfe18f40f07a346540814d20,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.0</version>
+    <version>2.5.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.0</version>
+    <version>2.5.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,dd94a22799ecf512a658c5cafcc2e67647fa07a9,a49f584bfd2ad0a4bfe18f40f07a346540814d20,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.0</version>
+    <version>2.5.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.0</version>
+    <version>2.5.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,dd94a22799ecf512a658c5cafcc2e67647fa07a9,a49f584bfd2ad0a4bfe18f40f07a346540814d20,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.0</version>
+    <version>2.5.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.0</version>
+    <version>2.5.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
,.buildscript/deploy_snapshot.sh,d19bdc9628565d92499facd3c274bd10c93b19bd,dd94a22799ecf512a658c5cafcc2e67647fa07a9,Auto-deploy snapshots from Travis CI to Sonatype.,"@@ -0,0 +1,26 @@
+#!/bin/bash
+#
+# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo.
+#
+# Adapted from https://coderwall.com/p/9b_lfq and
+# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/
+
+SLUG=""JakeWharton/timber""
+JDK=""oraclejdk8""
+BRANCH=""master""
+
+set -e
+
+if [ ""$TRAVIS_REPO_SLUG"" != ""$SLUG"" ]; then
+  echo ""Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.""
+elif [ ""$TRAVIS_JDK_VERSION"" != ""$JDK"" ]; then
+  echo ""Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.""
+elif [ ""$TRAVIS_PULL_REQUEST"" != ""false"" ]; then
+  echo ""Skipping snapshot deployment: was pull request.""
+elif [ ""$TRAVIS_BRANCH"" != ""$BRANCH"" ]; then
+  echo ""Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.""
+else
+  echo ""Deploying snapshot...""
+  mvn clean source:jar javadoc:jar deploy --settings="".buildscript/settings.xml"" -Dmaven.test.skip=true
+  echo ""Snapshot deployed!""
+fi","@@ -0,0 +1,26 @@
+#!/bin/bash
+#
+# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo.
+#
+# Adapted from https://coderwall.com/p/9b_lfq and
+# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/
+
+SLUG=""JakeWharton/timber""
+JDK=""oraclejdk8""
+BRANCH=""master""
+
+set -e
+
+if [ ""$TRAVIS_REPO_SLUG"" != ""$SLUG"" ]; then
+  echo ""Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.""
+elif [ ""$TRAVIS_JDK_VERSION"" != ""$JDK"" ]; then
+  echo ""Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.""
+elif [ ""$TRAVIS_PULL_REQUEST"" != ""false"" ]; then
+  echo ""Skipping snapshot deployment: was pull request.""
+elif [ ""$TRAVIS_BRANCH"" != ""$BRANCH"" ]; then
+  echo ""Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.""
+else
+  echo ""Deploying snapshot...""
+  mvn clean source:jar javadoc:jar deploy --settings="".buildscript/settings.xml"" -Dmaven.test.skip=true
+  echo ""Snapshot deployed!""
+fi",False,other
,.buildscript/settings.xml,d19bdc9628565d92499facd3c274bd10c93b19bd,dd94a22799ecf512a658c5cafcc2e67647fa07a9,Auto-deploy snapshots from Travis CI to Sonatype.,"@@ -0,0 +1,9 @@
+<settings>
+  <servers>
+    <server>
+      <id>sonatype-nexus-snapshots</id>
+      <username>${env.CI_DEPLOY_USERNAME}</username>
+      <password>${env.CI_DEPLOY_PASSWORD}</password>
+    </server>
+  </servers>
+</settings>","@@ -0,0 +1,9 @@
+<settings>
+  <servers>
+    <server>
+      <id>sonatype-nexus-snapshots</id>
+      <username>${env.CI_DEPLOY_USERNAME}</username>
+      <password>${env.CI_DEPLOY_PASSWORD}</password>
+    </server>
+  </servers>
+</settings>",False,other
.travis.yml,.travis.yml,d19bdc9628565d92499facd3c274bd10c93b19bd,dd94a22799ecf512a658c5cafcc2e67647fa07a9,Auto-deploy snapshots from Travis CI to Sonatype.,"@@ -1,9 +1,5 @@
 language: android
 
-jdk:
- - oraclejdk7
- - oraclejdk8
-
 android:
   components:
     - build-tools-20.0.0
@@ -11,9 +7,27 @@ android:
   licenses:
     - android-sdk-license-5be876d5
 
+jdk:
+  - oraclejdk7
+  - oraclejdk8
+
+after_success:
+  - .buildscript/deploy_snapshot.sh
+
+env:
+  global:
+    - secure: ""hT/3yXtmkxtS8Px8Xm0mauH7TuZyrEjqhyZWCjn4Z/ZzjVWQBU/10NmQL16Jc7VDpmbhyIum2OL7UqFpgjmvnuPJgLYPJZPryLXY32hoqtleYrNuszRnpjpsyGpX6ZqDqdcmZe3fiCW08kt7oOsjpwekaOMsfodGTn5+Yt+ks30=""
+    - secure: ""EzFLgBs60RTVY3q5LIKbzhk/ja1Tv2TpleStnyJtxJd5xFHjRMLxwl1Q2rXvn7ql6tCuFSDNPUaeHHVL18Nqc9wbeOYKpEJtyG8n4cUIuCT5GAVyW1L3L1m5BOAXD09Qcha233hl9b3hjEKla3RmKDqzAfJBU4+M7rLhkvbpuUo=""
+
 branches:
   except:
     - gh-pages
 
 notifications:
   email: false
+
+sudo: false
+
+cache:
+  directories:
+    - $HOME/.m2","@@ -1,9 +1,5 @@
 language: android
 
-jdk:
- - oraclejdk7
- - oraclejdk8
-
 android:
   components:
     - build-tools-20.0.0
@@ -11,9 +7,27 @@ android:
   licenses:
     - android-sdk-license-5be876d5
 
+jdk:
+  - oraclejdk7
+  - oraclejdk8
+
+after_success:
+  - .buildscript/deploy_snapshot.sh
+
+env:
+  global:
+    - secure: ""hT/3yXtmkxtS8Px8Xm0mauH7TuZyrEjqhyZWCjn4Z/ZzjVWQBU/10NmQL16Jc7VDpmbhyIum2OL7UqFpgjmvnuPJgLYPJZPryLXY32hoqtleYrNuszRnpjpsyGpX6ZqDqdcmZe3fiCW08kt7oOsjpwekaOMsfodGTn5+Yt+ks30=""
+    - secure: ""EzFLgBs60RTVY3q5LIKbzhk/ja1Tv2TpleStnyJtxJd5xFHjRMLxwl1Q2rXvn7ql6tCuFSDNPUaeHHVL18Nqc9wbeOYKpEJtyG8n4cUIuCT5GAVyW1L3L1m5BOAXD09Qcha233hl9b3hjEKla3RmKDqzAfJBU4+M7rLhkvbpuUo=""
+
 branches:
   except:
     - gh-pages
 
 notifications:
   email: false
+
+sudo: false
+
+cache:
+  directories:
+    - $HOME/.m2",False,other
README.md,README.md,d19bdc9628565d92499facd3c274bd10c93b19bd,dd94a22799ecf512a658c5cafcc2e67647fa07a9,Auto-deploy snapshots from Travis CI to Sonatype.,"@@ -45,6 +45,8 @@ or Gradle:
 compile 'com.jakewharton.timber:timber:2.5.0'
 ```
 
+Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
+
 
 License
 -------
@@ -66,6 +68,7 @@ License
 
 
  [1]: http://github.com/JakeWharton/pidcat/
- [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.jakewharton.timber&a=timber&v=LATEST
+ [2]: https://search.maven.org/remote_content?g=com.jakewharton.timber&a=timber&v=LATEST
  [3]: http://square.github.io/dagger/
  [4]: http://jakewharton.github.io/butterknife/
+ [snap]: https://oss.sonatype.org/content/repositories/snapshots/","@@ -45,6 +45,8 @@ or Gradle:
 compile 'com.jakewharton.timber:timber:2.5.0'
 ```
 
+Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
+
 
 License
 -------
@@ -66,6 +68,7 @@ License
 
 
  [1]: http://github.com/JakeWharton/pidcat/
- [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.jakewharton.timber&a=timber&v=LATEST
+ [2]: https://search.maven.org/remote_content?g=com.jakewharton.timber&a=timber&v=LATEST
  [3]: http://square.github.io/dagger/
  [4]: http://jakewharton.github.io/butterknife/
+ [snap]: https://oss.sonatype.org/content/repositories/snapshots/",False,readme
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,bf8baec38394baab6da6f440bbcf5a0ac9d3c18d,d307207c4e0219c3c4b61e4ca4efecf4a8ed3e85,"Chunk by line, then max log line length.","@@ -234,6 +234,7 @@ public final class Timber {
 
   /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
   public static class DebugTree implements TaggedTree {
+    private static final int MAX_LOG_LENGTH = 4000;
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
     private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<String>();
 
@@ -315,16 +316,21 @@ public final class Timber {
       }
 
       String tag = createTag();
-      if (message.length() < 4000) {
+
+      if (message.length() < MAX_LOG_LENGTH) {
         Log.println(priority, tag, message);
-      } else {
-        // It's rare that the message will be this large, so we're ok with the perf hit of splitting
-        // and calling Log.println N times.  It's possible but unlikely that a single line will be
-        // longer than 4000 characters: we're explicitly ignoring this case here.
-        String[] lines = message.split(""\n"");
-        for (String line : lines) {
-          Log.println(priority, tag, line);
-        }
+        return;
+      }
+
+      // Split by line, then ensure each line can fit into Log's maximum length.
+      for (int i = 0, length = message.length(); i < length; i++) {
+        int newline = message.indexOf('\n', i);
+        newline = newline != -1 ? newline : length;
+        do {
+          int end = Math.min(newline, i + MAX_LOG_LENGTH);
+          Log.println(priority, tag, message.substring(i, end));
+          i = end;
+        } while (i < newline);
       }
     }","@@ -234,6 +234,7 @@ public final class Timber {
 
   /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
   public static class DebugTree implements TaggedTree {
+    private static final int MAX_LOG_LENGTH = 4000;
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
     private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<String>();
 
@@ -315,16 +316,21 @@ public final class Timber {
       }
 
       String tag = createTag();
-      if (message.length() < 4000) {
+
+      if (message.length() < MAX_LOG_LENGTH) {
         Log.println(priority, tag, message);
-      } else {
-        // It's rare that the message will be this large, so we're ok with the perf hit of splitting
-        // and calling Log.println N times.  It's possible but unlikely that a single line will be
-        // longer than 4000 characters: we're explicitly ignoring this case here.
-        String[] lines = message.split(""\n"");
-        for (String line : lines) {
-          Log.println(priority, tag, line);
-        }
+        return;
+      }
+
+      // Split by line, then ensure each line can fit into Log's maximum length.
+      for (int i = 0, length = message.length(); i < length; i++) {
+        int newline = message.indexOf('\n', i);
+        newline = newline != -1 ? newline : length;
+        do {
+          int end = Math.min(newline, i + MAX_LOG_LENGTH);
+          Log.println(priority, tag, message.substring(i, end));
+          i = end;
+        } while (i < newline);
       }
     }",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,bf8baec38394baab6da6f440bbcf5a0ac9d3c18d,d307207c4e0219c3c4b61e4ca4efecf4a8ed3e85,"Chunk by line, then max log line length.","@@ -1,6 +1,7 @@
 package timber.log;
 
 import android.util.Log;
+import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import org.junit.After;
@@ -134,6 +135,18 @@ public class TimberTest {
     assertExceptionLogged("""", ""java.lang.NullPointerException"");
   }
 
+  @Test public void chunkAcrossNewlinesAndLimit() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.d(repeat('a', 3000) + '\n' + repeat('b', 6000) + '\n' + repeat('c', 3000));
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(4);
+    assertThat(logs.get(0).msg).isEqualTo(repeat('a', 3000));
+    assertThat(logs.get(1).msg).isEqualTo(repeat('b', 4000));
+    assertThat(logs.get(2).msg).isEqualTo(repeat('b', 2000));
+    assertThat(logs.get(3).msg).isEqualTo(repeat('c', 3000));
+  }
+
   @Test public void testLogNullMessageWithoutThrowable() throws Exception {
     Timber.plant(new Timber.DebugTree());
     Timber.d(null);
@@ -153,4 +166,10 @@ public class TimberTest {
     // We use a low-level primitive that Robolectric doesn't populate.
     assertThat(log.throwable).isNull();
   }
+
+  private static String repeat(char c, int number) {
+    char[] data = new char[number];
+    Arrays.fill(data, c);
+    return new String(data);
+  }
 }","@@ -1,6 +1,7 @@
 package timber.log;
 
 import android.util.Log;
+import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import org.junit.After;
@@ -134,6 +135,18 @@ public class TimberTest {
     assertExceptionLogged("""", ""java.lang.NullPointerException"");
   }
 
+  @Test public void chunkAcrossNewlinesAndLimit() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.d(repeat('a', 3000) + '\n' + repeat('b', 6000) + '\n' + repeat('c', 3000));
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(4);
+    assertThat(logs.get(0).msg).isEqualTo(repeat('a', 3000));
+    assertThat(logs.get(1).msg).isEqualTo(repeat('b', 4000));
+    assertThat(logs.get(2).msg).isEqualTo(repeat('b', 2000));
+    assertThat(logs.get(3).msg).isEqualTo(repeat('c', 3000));
+  }
+
   @Test public void testLogNullMessageWithoutThrowable() throws Exception {
     Timber.plant(new Timber.DebugTree());
     Timber.d(null);
@@ -153,4 +166,10 @@ public class TimberTest {
     // We use a low-level primitive that Robolectric doesn't populate.
     assertThat(log.throwable).isNull();
   }
+
+  private static String repeat(char c, int number) {
+    char[] data = new char[number];
+    Arrays.fill(data, c);
+    return new String(data);
+  }
 }",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,851c9c8a5b74aac0a01e61eca5167c547f65423e,bf8baec38394baab6da6f440bbcf5a0ac9d3c18d,Throw an exception if trying to plant a null tree,"@@ -77,6 +77,9 @@ public final class Timber {
 
   /** Add a new logging tree. */
   public static void plant(Tree tree) {
+    if (tree == null) {
+      throw new NullPointerException(""tree == null"");
+    }
     if (tree == TREE_OF_SOULS) {
       throw new IllegalArgumentException(""Cannot plant Timber into itself."");
     }","@@ -77,6 +77,9 @@ public final class Timber {
 
   /** Add a new logging tree. */
   public static void plant(Tree tree) {
+    if (tree == null) {
+      throw new NullPointerException(""tree == null"");
+    }
     if (tree == TREE_OF_SOULS) {
       throw new IllegalArgumentException(""Cannot plant Timber into itself."");
     }",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,851c9c8a5b74aac0a01e61eca5167c547f65423e,bf8baec38394baab6da6f440bbcf5a0ac9d3c18d,Throw an exception if trying to plant a null tree,"@@ -35,6 +35,15 @@ public class TimberTest {
     }
   }
 
+  @Test public void nullTree() {
+    try {
+      Timber.plant(null);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessage(""tree == null"");
+    }
+  }
+
   @Test public void uprootThrowsIfMissing() {
     try {
       Timber.uproot(new Timber.DebugTree());","@@ -35,6 +35,15 @@ public class TimberTest {
     }
   }
 
+  @Test public void nullTree() {
+    try {
+      Timber.plant(null);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessage(""tree == null"");
+    }
+  }
+
   @Test public void uprootThrowsIfMissing() {
     try {
       Timber.uproot(new Timber.DebugTree());",False,test
CHANGELOG.md,CHANGELOG.md,62f7a4b1da029bee4397cee88e1a5b5f72e7301f,e64b9a9a5a42399b8704a63ddfbceae81eaf897f,Prepare version 2.5.1.,"@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 2.5.1 *(2015-01-19)*
+----------------------------
+
+ * Fix: Properly split lines which contain both newlines and are over 4000 characters.
+ * Explicitly forbid `null` tree instances.
+
+
 Version 2.5.0 *(2014-11-08)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 2.5.1 *(2015-01-19)*
+----------------------------
+
+ * Fix: Properly split lines which contain both newlines and are over 4000 characters.
+ * Explicitly forbid `null` tree instances.
+
+
 Version 2.5.0 *(2014-11-08)*
 ----------------------------",False,other
README.md,README.md,62f7a4b1da029bee4397cee88e1a5b5f72e7301f,e64b9a9a5a42399b8704a63ddfbceae81eaf897f,Prepare version 2.5.1.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.5.0</version>
+  <version>2.5.1</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.5.0'
+compile 'com.jakewharton.timber:timber:2.5.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.5.0</version>
+  <version>2.5.1</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.5.0'
+compile 'com.jakewharton.timber:timber:2.5.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
pom.xml,pom.xml,a202c3a3b183d6c6e9c7c2ac75a1345c9db7f7d9,62f7a4b1da029bee4397cee88e1a5b5f72e7301f,"Win the lottery! Or, fix Maven classpath hell on the first guess.","@@ -137,9 +137,9 @@
     <pluginManagement>
       <plugins>
         <plugin>
-          <groupId>com.jayway.maven.plugins.android.generation2</groupId>
+          <groupId>com.simpligility.maven.plugins</groupId>
           <artifactId>android-maven-plugin</artifactId>
-          <version>3.8.2</version>
+          <version>4.1.0</version>
           <configuration>
             <sdk>
               <platform>${android.platform}</platform>","@@ -137,9 +137,9 @@
     <pluginManagement>
       <plugins>
         <plugin>
-          <groupId>com.jayway.maven.plugins.android.generation2</groupId>
+          <groupId>com.simpligility.maven.plugins</groupId>
           <artifactId>android-maven-plugin</artifactId>
-          <version>3.8.2</version>
+          <version>4.1.0</version>
           <configuration>
             <sdk>
               <platform>${android.platform}</platform>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,a202c3a3b183d6c6e9c7c2ac75a1345c9db7f7d9,62f7a4b1da029bee4397cee88e1a5b5f72e7301f,"Win the lottery! Or, fix Maven classpath hell on the first guess.","@@ -34,7 +34,7 @@
   <build>
     <plugins>
       <plugin>
-        <groupId>com.jayway.maven.plugins.android.generation2</groupId>
+        <groupId>com.simpligility.maven.plugins</groupId>
         <artifactId>android-maven-plugin</artifactId>
         <extensions>true</extensions>
       </plugin>","@@ -34,7 +34,7 @@
   <build>
     <plugins>
       <plugin>
-        <groupId>com.jayway.maven.plugins.android.generation2</groupId>
+        <groupId>com.simpligility.maven.plugins</groupId>
         <artifactId>android-maven-plugin</artifactId>
         <extensions>true</extensions>
       </plugin>",False,other
pom.xml,pom.xml,ca35ae6749f1a80321dcb065cac483adadd9b896,a202c3a3b183d6c6e9c7c2ac75a1345c9db7f7d9,[maven-release-plugin] prepare release timber-parent-2.5.1,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.5.1-SNAPSHOT</version>
+  <version>2.5.1</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.5.1</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.5.1-SNAPSHOT</version>
+  <version>2.5.1</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.5.1</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,ca35ae6749f1a80321dcb065cac483adadd9b896,a202c3a3b183d6c6e9c7c2ac75a1345c9db7f7d9,[maven-release-plugin] prepare release timber-parent-2.5.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1-SNAPSHOT</version>
+    <version>2.5.1</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1-SNAPSHOT</version>
+    <version>2.5.1</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,ca35ae6749f1a80321dcb065cac483adadd9b896,a202c3a3b183d6c6e9c7c2ac75a1345c9db7f7d9,[maven-release-plugin] prepare release timber-parent-2.5.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1-SNAPSHOT</version>
+    <version>2.5.1</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1-SNAPSHOT</version>
+    <version>2.5.1</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,ca35ae6749f1a80321dcb065cac483adadd9b896,a202c3a3b183d6c6e9c7c2ac75a1345c9db7f7d9,[maven-release-plugin] prepare release timber-parent-2.5.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1-SNAPSHOT</version>
+    <version>2.5.1</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1-SNAPSHOT</version>
+    <version>2.5.1</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,834601b4fc567c11a157bad40ef68c51ed971968,ca35ae6749f1a80321dcb065cac483adadd9b896,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.5.1</version>
+  <version>2.5.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.5.1</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.5.1</version>
+  <version>2.5.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.5.1</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,834601b4fc567c11a157bad40ef68c51ed971968,ca35ae6749f1a80321dcb065cac483adadd9b896,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1</version>
+    <version>2.5.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1</version>
+    <version>2.5.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,834601b4fc567c11a157bad40ef68c51ed971968,ca35ae6749f1a80321dcb065cac483adadd9b896,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1</version>
+    <version>2.5.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1</version>
+    <version>2.5.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,834601b4fc567c11a157bad40ef68c51ed971968,ca35ae6749f1a80321dcb065cac483adadd9b896,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1</version>
+    <version>2.5.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.1</version>
+    <version>2.5.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,adb08ebe6c0e3830f51f0056287ca0f9a7d4cbcc,834601b4fc567c11a157bad40ef68c51ed971968,Allow overriding tag creation. Provide access to explicit next tag.,"@@ -241,19 +241,37 @@ public final class Timber {
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
     private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<String>();
 
-    private static String createTag() {
+    /**
+     * Returns an explicitly set tag for the next log message or {@code null}. Calling this method
+     * clears any set tag so it may only be called once.
+     */
+    protected String nextTag() {
       String tag = NEXT_TAG.get();
       if (tag != null) {
         NEXT_TAG.remove();
+      }
+      return tag;
+    }
+
+    /**
+     * Creates a tag for a log message.
+     * <p>
+     * By default this method will check {@link #nextTag()} for an explicit tag. If there is no
+     * explicit tag, the class name of the caller will be used by inspecting the stack trace of the
+     * current thread.
+     */
+    protected String createTag() {
+      String tag = nextTag();
+      if (tag != null) {
         return tag;
       }
 
-      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
-      if (stackTrace.length < 6) {
+      StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
+      if (stackTrace.length < 7) {
         throw new IllegalStateException(
             ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
       }
-      tag = stackTrace[5].getClassName();
+      tag = stackTrace[6].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");","@@ -241,19 +241,37 @@ public final class Timber {
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
     private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<String>();
 
-    private static String createTag() {
+    /**
+     * Returns an explicitly set tag for the next log message or {@code null}. Calling this method
+     * clears any set tag so it may only be called once.
+     */
+    protected String nextTag() {
       String tag = NEXT_TAG.get();
       if (tag != null) {
         NEXT_TAG.remove();
+      }
+      return tag;
+    }
+
+    /**
+     * Creates a tag for a log message.
+     * <p>
+     * By default this method will check {@link #nextTag()} for an explicit tag. If there is no
+     * explicit tag, the class name of the caller will be used by inspecting the stack trace of the
+     * current thread.
+     */
+    protected String createTag() {
+      String tag = nextTag();
+      if (tag != null) {
         return tag;
       }
 
-      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
-      if (stackTrace.length < 6) {
+      StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
+      if (stackTrace.length < 7) {
         throw new IllegalStateException(
             ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
       }
-      tag = stackTrace[5].getClassName();
+      tag = stackTrace[6].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,adb08ebe6c0e3830f51f0056287ca0f9a7d4cbcc,834601b4fc567c11a157bad40ef68c51ed971968,Allow overriding tag creation. Provide access to explicit next tag.,"@@ -4,6 +4,7 @@ import android.util.Log;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -88,7 +89,7 @@ public class TimberTest {
     assertThat(formatString(""te%st"")).isSameAs(""te%st"");
   }
 
-  @Test public void debugTagWorks() {
+  @Test public void debugTreeTagGeneration() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(""Hello, world!"");
 
@@ -101,7 +102,7 @@ public class TimberTest {
     assertThat(log.throwable).isNull();
   }
 
-  @Test public void customTagWorks() {
+  @Test public void debugTreeCustomTag() {
     Timber.plant(new Timber.DebugTree());
     Timber.tag(""Custom"").d(""Hello, world!"");
 
@@ -114,6 +115,36 @@ public class TimberTest {
     assertThat(log.throwable).isNull();
   }
 
+  @Test public void debugTreeCustomTagCreation() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected String createTag() {
+        return ""Override"";
+      }
+    });
+    Timber.d(""Hello, world!"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.DEBUG);
+    assertThat(log.tag).isEqualTo(""Override"");
+    assertThat(log.msg).isEqualTo(""Hello, world!"");
+    assertThat(log.throwable).isNull();
+  }
+
+  @Test public void debugTreeCustomTagCreationCanUseNextTag() {
+    final AtomicReference<String> nextTagRef = new AtomicReference<String>();
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected String createTag() {
+        nextTagRef.set(nextTag());
+        return ""Override"";
+      }
+    });
+    Timber.tag(""Custom"").d(""Hello, world!"");
+
+    assertThat(nextTagRef.get()).isEqualTo(""Custom"");
+  }
+
   @Test public void logWithExceptionHasCorrectTag() {
     Timber.plant(new Timber.DebugTree());
     NullPointerException datThrowable = new NullPointerException();","@@ -4,6 +4,7 @@ import android.util.Log;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -88,7 +89,7 @@ public class TimberTest {
     assertThat(formatString(""te%st"")).isSameAs(""te%st"");
   }
 
-  @Test public void debugTagWorks() {
+  @Test public void debugTreeTagGeneration() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(""Hello, world!"");
 
@@ -101,7 +102,7 @@ public class TimberTest {
     assertThat(log.throwable).isNull();
   }
 
-  @Test public void customTagWorks() {
+  @Test public void debugTreeCustomTag() {
     Timber.plant(new Timber.DebugTree());
     Timber.tag(""Custom"").d(""Hello, world!"");
 
@@ -114,6 +115,36 @@ public class TimberTest {
     assertThat(log.throwable).isNull();
   }
 
+  @Test public void debugTreeCustomTagCreation() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected String createTag() {
+        return ""Override"";
+      }
+    });
+    Timber.d(""Hello, world!"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.DEBUG);
+    assertThat(log.tag).isEqualTo(""Override"");
+    assertThat(log.msg).isEqualTo(""Hello, world!"");
+    assertThat(log.throwable).isNull();
+  }
+
+  @Test public void debugTreeCustomTagCreationCanUseNextTag() {
+    final AtomicReference<String> nextTagRef = new AtomicReference<String>();
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected String createTag() {
+        nextTagRef.set(nextTag());
+        return ""Override"";
+      }
+    });
+    Timber.tag(""Custom"").d(""Hello, world!"");
+
+    assertThat(nextTagRef.get()).isEqualTo(""Custom"");
+  }
+
   @Test public void logWithExceptionHasCorrectTag() {
     Timber.plant(new Timber.DebugTree());
     NullPointerException datThrowable = new NullPointerException();",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,767bc845e2ce98aeb054c07887897dd7d4dbabc3,f73e05ab5dfc3cff69e475b818bf62f8d610f8e5,Next tag method should be final.,"@@ -245,7 +245,7 @@ public final class Timber {
      * Returns an explicitly set tag for the next log message or {@code null}. Calling this method
      * clears any set tag so it may only be called once.
      */
-    protected String nextTag() {
+    protected final String nextTag() {
       String tag = NEXT_TAG.get();
       if (tag != null) {
         NEXT_TAG.remove();","@@ -245,7 +245,7 @@ public final class Timber {
      * Returns an explicitly set tag for the next log message or {@code null}. Calling this method
      * clears any set tag so it may only be called once.
      */
-    protected String nextTag() {
+    protected final String nextTag() {
       String tag = NEXT_TAG.get();
       if (tag != null) {
         NEXT_TAG.remove();",False,source
CHANGELOG.md,CHANGELOG.md,c175d0dd79c07bcf032eee0466ec6349f7f54639,767bc845e2ce98aeb054c07887897dd7d4dbabc3,Prepare version 2.6.0.,"@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 2.6.0 *(2015-02-17)*
+----------------------------
+
+ * New: `DebugTree` subclasses can now override `createTag()` to specify log tags. `nextTag()` is
+   also accessible for querying if an explicit tag was set.
+
+
 Version 2.5.1 *(2015-01-19)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 2.6.0 *(2015-02-17)*
+----------------------------
+
+ * New: `DebugTree` subclasses can now override `createTag()` to specify log tags. `nextTag()` is
+   also accessible for querying if an explicit tag was set.
+
+
 Version 2.5.1 *(2015-01-19)*
 ----------------------------",False,other
README.md,README.md,c175d0dd79c07bcf032eee0466ec6349f7f54639,767bc845e2ce98aeb054c07887897dd7d4dbabc3,Prepare version 2.6.0.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.5.1</version>
+  <version>2.6.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.5.1'
+compile 'com.jakewharton.timber:timber:2.6.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.5.1</version>
+  <version>2.6.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.5.1'
+compile 'com.jakewharton.timber:timber:2.6.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
pom.xml,pom.xml,d2b199e547d3a53c8423fc58e82f7ca1889b14ec,c175d0dd79c07bcf032eee0466ec6349f7f54639,[maven-release-plugin] prepare release timber-parent-2.6.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.5.2-SNAPSHOT</version>
+  <version>2.6.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.6.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.5.2-SNAPSHOT</version>
+  <version>2.6.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.6.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,d2b199e547d3a53c8423fc58e82f7ca1889b14ec,c175d0dd79c07bcf032eee0466ec6349f7f54639,[maven-release-plugin] prepare release timber-parent-2.6.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.2-SNAPSHOT</version>
+    <version>2.6.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.2-SNAPSHOT</version>
+    <version>2.6.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,d2b199e547d3a53c8423fc58e82f7ca1889b14ec,c175d0dd79c07bcf032eee0466ec6349f7f54639,[maven-release-plugin] prepare release timber-parent-2.6.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.2-SNAPSHOT</version>
+    <version>2.6.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.2-SNAPSHOT</version>
+    <version>2.6.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,d2b199e547d3a53c8423fc58e82f7ca1889b14ec,c175d0dd79c07bcf032eee0466ec6349f7f54639,[maven-release-plugin] prepare release timber-parent-2.6.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.2-SNAPSHOT</version>
+    <version>2.6.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.5.2-SNAPSHOT</version>
+    <version>2.6.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,114f673d463f38d020b1b60acf9a213b10ba997f,d2b199e547d3a53c8423fc58e82f7ca1889b14ec,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.6.0</version>
+  <version>2.6.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.6.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.6.0</version>
+  <version>2.6.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.6.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,114f673d463f38d020b1b60acf9a213b10ba997f,d2b199e547d3a53c8423fc58e82f7ca1889b14ec,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.0</version>
+    <version>2.6.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.0</version>
+    <version>2.6.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,114f673d463f38d020b1b60acf9a213b10ba997f,d2b199e547d3a53c8423fc58e82f7ca1889b14ec,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.0</version>
+    <version>2.6.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.0</version>
+    <version>2.6.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,114f673d463f38d020b1b60acf9a213b10ba997f,d2b199e547d3a53c8423fc58e82f7ca1889b14ec,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.0</version>
+    <version>2.6.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.0</version>
+    <version>2.6.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,3c1e5e01ef8aa6ead2c3f14408428ab4497f94d4,114f673d463f38d020b1b60acf9a213b10ba997f,Switch to black-box testing the format behavior.,"@@ -279,49 +279,49 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
-    static String formatString(String message, Object... args) {
+    private static String maybeFormat(String message, Object... args) {
       // If no varargs are supplied, treat it as a request to log the string without formatting.
       return args.length == 0 ? message : String.format(message, args);
     }
 
     @Override public void v(String message, Object... args) {
-      throwShade(Log.VERBOSE, formatString(message, args), null);
+      throwShade(Log.VERBOSE, maybeFormat(message, args), null);
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
-      throwShade(Log.VERBOSE, formatString(message, args), t);
+      throwShade(Log.VERBOSE, maybeFormat(message, args), t);
     }
 
     @Override public void d(String message, Object... args) {
-      throwShade(Log.DEBUG, formatString(message, args), null);
+      throwShade(Log.DEBUG, maybeFormat(message, args), null);
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      throwShade(Log.DEBUG, formatString(message, args), t);
+      throwShade(Log.DEBUG, maybeFormat(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
-      throwShade(Log.INFO, formatString(message, args), null);
+      throwShade(Log.INFO, maybeFormat(message, args), null);
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      throwShade(Log.INFO, formatString(message, args), t);
+      throwShade(Log.INFO, maybeFormat(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
-      throwShade(Log.WARN, formatString(message, args), null);
+      throwShade(Log.WARN, maybeFormat(message, args), null);
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      throwShade(Log.WARN, formatString(message, args), t);
+      throwShade(Log.WARN, maybeFormat(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {
-      throwShade(Log.ERROR, formatString(message, args), null);
+      throwShade(Log.ERROR, maybeFormat(message, args), null);
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      throwShade(Log.ERROR, formatString(message, args), t);
+      throwShade(Log.ERROR, maybeFormat(message, args), t);
     }
 
     private void throwShade(int priority, String message, Throwable t) {","@@ -279,49 +279,49 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
-    static String formatString(String message, Object... args) {
+    private static String maybeFormat(String message, Object... args) {
       // If no varargs are supplied, treat it as a request to log the string without formatting.
       return args.length == 0 ? message : String.format(message, args);
     }
 
     @Override public void v(String message, Object... args) {
-      throwShade(Log.VERBOSE, formatString(message, args), null);
+      throwShade(Log.VERBOSE, maybeFormat(message, args), null);
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
-      throwShade(Log.VERBOSE, formatString(message, args), t);
+      throwShade(Log.VERBOSE, maybeFormat(message, args), t);
     }
 
     @Override public void d(String message, Object... args) {
-      throwShade(Log.DEBUG, formatString(message, args), null);
+      throwShade(Log.DEBUG, maybeFormat(message, args), null);
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      throwShade(Log.DEBUG, formatString(message, args), t);
+      throwShade(Log.DEBUG, maybeFormat(message, args), t);
     }
 
     @Override public void i(String message, Object... args) {
-      throwShade(Log.INFO, formatString(message, args), null);
+      throwShade(Log.INFO, maybeFormat(message, args), null);
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      throwShade(Log.INFO, formatString(message, args), t);
+      throwShade(Log.INFO, maybeFormat(message, args), t);
     }
 
     @Override public void w(String message, Object... args) {
-      throwShade(Log.WARN, formatString(message, args), null);
+      throwShade(Log.WARN, maybeFormat(message, args), null);
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      throwShade(Log.WARN, formatString(message, args), t);
+      throwShade(Log.WARN, maybeFormat(message, args), t);
     }
 
     @Override public void e(String message, Object... args) {
-      throwShade(Log.ERROR, formatString(message, args), null);
+      throwShade(Log.ERROR, maybeFormat(message, args), null);
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      throwShade(Log.ERROR, formatString(message, args), t);
+      throwShade(Log.ERROR, maybeFormat(message, args), t);
     }
 
     private void throwShade(int priority, String message, Throwable t) {",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,3c1e5e01ef8aa6ead2c3f14408428ab4497f94d4,114f673d463f38d020b1b60acf9a213b10ba997f,Switch to black-box testing the format behavior.,"@@ -16,7 +16,6 @@ import org.robolectric.shadows.ShadowLog;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.robolectric.shadows.ShadowLog.LogItem;
-import static timber.log.Timber.DebugTree.formatString;
 
 @RunWith(RobolectricTestRunner.class) //
 @Config(manifest = Config.NONE)
@@ -86,7 +85,16 @@ public class TimberTest {
   }
 
   @Test public void noArgsDoesNotFormat() {
-    assertThat(formatString(""te%st"")).isSameAs(""te%st"");
+    Timber.plant(new Timber.DebugTree());
+    Timber.d(""te%st"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.DEBUG);
+    assertThat(log.tag).isEqualTo(""TimberTest"");
+    assertThat(log.msg).isEqualTo(""te%st"");
+    assertThat(log.throwable).isNull();
   }
 
   @Test public void debugTreeTagGeneration() {","@@ -16,7 +16,6 @@ import org.robolectric.shadows.ShadowLog;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.robolectric.shadows.ShadowLog.LogItem;
-import static timber.log.Timber.DebugTree.formatString;
 
 @RunWith(RobolectricTestRunner.class) //
 @Config(manifest = Config.NONE)
@@ -86,7 +85,16 @@ public class TimberTest {
   }
 
   @Test public void noArgsDoesNotFormat() {
-    assertThat(formatString(""te%st"")).isSameAs(""te%st"");
+    Timber.plant(new Timber.DebugTree());
+    Timber.d(""te%st"");
+
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.DEBUG);
+    assertThat(log.tag).isEqualTo(""TimberTest"");
+    assertThat(log.msg).isEqualTo(""te%st"");
+    assertThat(log.throwable).isNull();
   }
 
   @Test public void debugTreeTagGeneration() {",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,951b7dcd3f959cdb02992793480028578ebff46b,530ee32f8ca9d0ff6161236e9ff7f01ea0d7bf84,Warning about calling super.,"@@ -259,6 +259,9 @@ public final class Timber {
      * By default this method will check {@link #nextTag()} for an explicit tag. If there is no
      * explicit tag, the class name of the caller will be used by inspecting the stack trace of the
      * current thread.
+     * <p>
+     * Note: Do not call {@code super.createTag()} if you override this method. It will produce
+     * incorrect results.
      */
     protected String createTag() {
       String tag = nextTag();","@@ -259,6 +259,9 @@ public final class Timber {
      * By default this method will check {@link #nextTag()} for an explicit tag. If there is no
      * explicit tag, the class name of the caller will be used by inspecting the stack trace of the
      * current thread.
+     * <p>
+     * Note: Do not call {@code super.createTag()} if you override this method. It will produce
+     * incorrect results.
      */
     protected String createTag() {
       String tag = nextTag();",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,c5ee6af4e8e71fba5a5500b449381f388acf5a93,951b7dcd3f959cdb02992793480028578ebff46b,Better control flow for empty logs.,"@@ -329,12 +329,10 @@ public final class Timber {
 
     private void throwShade(int priority, String message, Throwable t) {
       if (message == null || message.length() == 0) {
-        if (t != null) {
-          message = Log.getStackTraceString(t);
-        } else {
-          // Swallow message if it's null and there's no throwable.
-          return;
+        if (t == null) {
+          return; // Swallow message if it's null and there's no throwable.
         }
+        message = Log.getStackTraceString(t);
       } else if (t != null) {
         message += ""\n"" + Log.getStackTraceString(t);
       }","@@ -329,12 +329,10 @@ public final class Timber {
 
     private void throwShade(int priority, String message, Throwable t) {
       if (message == null || message.length() == 0) {
-        if (t != null) {
-          message = Log.getStackTraceString(t);
-        } else {
-          // Swallow message if it's null and there's no throwable.
-          return;
+        if (t == null) {
+          return; // Swallow message if it's null and there's no throwable.
         }
+        message = Log.getStackTraceString(t);
       } else if (t != null) {
         message += ""\n"" + Log.getStackTraceString(t);
       }",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,b82832156990d5b89f6d7081ea441967fb976a17,c5ee6af4e8e71fba5a5500b449381f388acf5a93,Fix some bad test declarations.,"@@ -153,7 +153,7 @@ public class TimberTest {
     assertThat(nextTagRef.get()).isEqualTo(""Custom"");
   }
 
-  @Test public void logWithExceptionHasCorrectTag() {
+  @Test public void messageWithException() {
     Timber.plant(new Timber.DebugTree());
     NullPointerException datThrowable = new NullPointerException();
     Timber.e(datThrowable, ""OMFG!"");
@@ -161,7 +161,7 @@ public class TimberTest {
     assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
   }
 
-  @Test public void testLogExceptionFromSpawnedThread() throws Exception {
+  @Test public void exceptionFromSpawnedThread() throws InterruptedException {
     Timber.plant(new Timber.DebugTree());
     final NullPointerException datThrowable = new NullPointerException();
     final CountDownLatch latch = new CountDownLatch(1);
@@ -175,7 +175,7 @@ public class TimberTest {
     assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
   }
 
-  @Test public void testLogNullMessageWithThrowable() throws Exception {
+  @Test public void nullMessageWithThrowable() {
     Timber.plant(new Timber.DebugTree());
     final NullPointerException datThrowable = new NullPointerException();
     Timber.e(datThrowable, null);
@@ -195,7 +195,7 @@ public class TimberTest {
     assertThat(logs.get(3).msg).isEqualTo(repeat('c', 3000));
   }
 
-  @Test public void testLogNullMessageWithoutThrowable() throws Exception {
+  @Test public void nullMessageWithoutThrowable() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(null);","@@ -153,7 +153,7 @@ public class TimberTest {
     assertThat(nextTagRef.get()).isEqualTo(""Custom"");
   }
 
-  @Test public void logWithExceptionHasCorrectTag() {
+  @Test public void messageWithException() {
     Timber.plant(new Timber.DebugTree());
     NullPointerException datThrowable = new NullPointerException();
     Timber.e(datThrowable, ""OMFG!"");
@@ -161,7 +161,7 @@ public class TimberTest {
     assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
   }
 
-  @Test public void testLogExceptionFromSpawnedThread() throws Exception {
+  @Test public void exceptionFromSpawnedThread() throws InterruptedException {
     Timber.plant(new Timber.DebugTree());
     final NullPointerException datThrowable = new NullPointerException();
     final CountDownLatch latch = new CountDownLatch(1);
@@ -175,7 +175,7 @@ public class TimberTest {
     assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
   }
 
-  @Test public void testLogNullMessageWithThrowable() throws Exception {
+  @Test public void nullMessageWithThrowable() {
     Timber.plant(new Timber.DebugTree());
     final NullPointerException datThrowable = new NullPointerException();
     Timber.e(datThrowable, null);
@@ -195,7 +195,7 @@ public class TimberTest {
     assertThat(logs.get(3).msg).isEqualTo(repeat('c', 3000));
   }
 
-  @Test public void testLogNullMessageWithoutThrowable() throws Exception {
+  @Test public void nullMessageWithoutThrowable() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(null);",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,77e99f8f41762359bc397e3af6f0d8b5f692c3db,b82832156990d5b89f6d7081ea441967fb976a17,"Provide a callback for logging a message on a DebugTree.

This allows planting the tree for the tag behavior but redirecting the logs elsewhere. This also forbids extending the actual logging methods on this tree.","@@ -287,43 +287,43 @@ public final class Timber {
       return args.length == 0 ? message : String.format(message, args);
     }
 
-    @Override public void v(String message, Object... args) {
+    @Override public final void v(String message, Object... args) {
       throwShade(Log.VERBOSE, maybeFormat(message, args), null);
     }
 
-    @Override public void v(Throwable t, String message, Object... args) {
+    @Override public final void v(Throwable t, String message, Object... args) {
       throwShade(Log.VERBOSE, maybeFormat(message, args), t);
     }
 
-    @Override public void d(String message, Object... args) {
+    @Override public final void d(String message, Object... args) {
       throwShade(Log.DEBUG, maybeFormat(message, args), null);
     }
 
-    @Override public void d(Throwable t, String message, Object... args) {
+    @Override public final void d(Throwable t, String message, Object... args) {
       throwShade(Log.DEBUG, maybeFormat(message, args), t);
     }
 
-    @Override public void i(String message, Object... args) {
+    @Override public final void i(String message, Object... args) {
       throwShade(Log.INFO, maybeFormat(message, args), null);
     }
 
-    @Override public void i(Throwable t, String message, Object... args) {
+    @Override public final void i(Throwable t, String message, Object... args) {
       throwShade(Log.INFO, maybeFormat(message, args), t);
     }
 
-    @Override public void w(String message, Object... args) {
+    @Override public final void w(String message, Object... args) {
       throwShade(Log.WARN, maybeFormat(message, args), null);
     }
 
-    @Override public void w(Throwable t, String message, Object... args) {
+    @Override public final void w(Throwable t, String message, Object... args) {
       throwShade(Log.WARN, maybeFormat(message, args), t);
     }
 
-    @Override public void e(String message, Object... args) {
+    @Override public final void e(String message, Object... args) {
       throwShade(Log.ERROR, maybeFormat(message, args), null);
     }
 
-    @Override public void e(Throwable t, String message, Object... args) {
+    @Override public final void e(Throwable t, String message, Object... args) {
       throwShade(Log.ERROR, maybeFormat(message, args), t);
     }
 
@@ -338,7 +338,11 @@ public final class Timber {
       }
 
       String tag = createTag();
+      logMessage(priority, tag, message);
+    }
 
+    /** Log a message! */
+    protected void logMessage(int priority, String tag, String message) {
       if (message.length() < MAX_LOG_LENGTH) {
         Log.println(priority, tag, message);
         return;","@@ -287,43 +287,43 @@ public final class Timber {
       return args.length == 0 ? message : String.format(message, args);
     }
 
-    @Override public void v(String message, Object... args) {
+    @Override public final void v(String message, Object... args) {
       throwShade(Log.VERBOSE, maybeFormat(message, args), null);
     }
 
-    @Override public void v(Throwable t, String message, Object... args) {
+    @Override public final void v(Throwable t, String message, Object... args) {
       throwShade(Log.VERBOSE, maybeFormat(message, args), t);
     }
 
-    @Override public void d(String message, Object... args) {
+    @Override public final void d(String message, Object... args) {
       throwShade(Log.DEBUG, maybeFormat(message, args), null);
     }
 
-    @Override public void d(Throwable t, String message, Object... args) {
+    @Override public final void d(Throwable t, String message, Object... args) {
       throwShade(Log.DEBUG, maybeFormat(message, args), t);
     }
 
-    @Override public void i(String message, Object... args) {
+    @Override public final void i(String message, Object... args) {
       throwShade(Log.INFO, maybeFormat(message, args), null);
     }
 
-    @Override public void i(Throwable t, String message, Object... args) {
+    @Override public final void i(Throwable t, String message, Object... args) {
       throwShade(Log.INFO, maybeFormat(message, args), t);
     }
 
-    @Override public void w(String message, Object... args) {
+    @Override public final void w(String message, Object... args) {
       throwShade(Log.WARN, maybeFormat(message, args), null);
     }
 
-    @Override public void w(Throwable t, String message, Object... args) {
+    @Override public final void w(Throwable t, String message, Object... args) {
       throwShade(Log.WARN, maybeFormat(message, args), t);
     }
 
-    @Override public void e(String message, Object... args) {
+    @Override public final void e(String message, Object... args) {
       throwShade(Log.ERROR, maybeFormat(message, args), null);
     }
 
-    @Override public void e(Throwable t, String message, Object... args) {
+    @Override public final void e(Throwable t, String message, Object... args) {
       throwShade(Log.ERROR, maybeFormat(message, args), t);
     }
 
@@ -338,7 +338,11 @@ public final class Timber {
       }
 
       String tag = createTag();
+      logMessage(priority, tag, message);
+    }
 
+    /** Log a message! */
+    protected void logMessage(int priority, String tag, String message) {
       if (message.length() < MAX_LOG_LENGTH) {
         Log.println(priority, tag, message);
         return;",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,77e99f8f41762359bc397e3af6f0d8b5f692c3db,b82832156990d5b89f6d7081ea441967fb976a17,"Provide a callback for logging a message on a DebugTree.

This allows planting the tree for the tag behavior but redirecting the logs elsewhere. This also forbids extending the actual logging methods on this tree.","@@ -1,6 +1,7 @@
 package timber.log;
 
 import android.util.Log;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
@@ -203,6 +204,38 @@ public class TimberTest {
     assertThat(logs).hasSize(0);
   }
 
+  @Test public void logMessageCallback() {
+    final List<String> logs = new ArrayList<String>();
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected void logMessage(int priority, String tag, String message) {
+        logs.add(priority + "" "" + tag + "" "" + message);
+      }
+    });
+
+    Timber.v(""Verbose"");
+    Timber.tag(""Custom"").v(""Verbose"");
+    Timber.d(""Debug"");
+    Timber.tag(""Custom"").d(""Debug"");
+    Timber.i(""Info"");
+    Timber.tag(""Custom"").i(""Info"");
+    Timber.w(""Warn"");
+    Timber.tag(""Custom"").w(""Warn"");
+    Timber.e(""Error"");
+    Timber.tag(""Custom"").e(""Error"");
+
+    assertThat(logs).containsExactly( //
+        ""2 TimberTest Verbose"", //
+        ""2 Custom Verbose"", //
+        ""3 TimberTest Debug"", //
+        ""3 Custom Debug"", //
+        ""4 TimberTest Info"", //
+        ""4 Custom Info"", //
+        ""5 TimberTest Warn"", //
+        ""5 Custom Warn"", //
+        ""6 TimberTest Error"", //
+        ""6 Custom Error"");
+  }
+
   private static void assertExceptionLogged(String message, String exceptionClassname) {
     List<LogItem> logs = ShadowLog.getLogs();
     assertThat(logs).hasSize(1);","@@ -1,6 +1,7 @@
 package timber.log;
 
 import android.util.Log;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
@@ -203,6 +204,38 @@ public class TimberTest {
     assertThat(logs).hasSize(0);
   }
 
+  @Test public void logMessageCallback() {
+    final List<String> logs = new ArrayList<String>();
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected void logMessage(int priority, String tag, String message) {
+        logs.add(priority + "" "" + tag + "" "" + message);
+      }
+    });
+
+    Timber.v(""Verbose"");
+    Timber.tag(""Custom"").v(""Verbose"");
+    Timber.d(""Debug"");
+    Timber.tag(""Custom"").d(""Debug"");
+    Timber.i(""Info"");
+    Timber.tag(""Custom"").i(""Info"");
+    Timber.w(""Warn"");
+    Timber.tag(""Custom"").w(""Warn"");
+    Timber.e(""Error"");
+    Timber.tag(""Custom"").e(""Error"");
+
+    assertThat(logs).containsExactly( //
+        ""2 TimberTest Verbose"", //
+        ""2 Custom Verbose"", //
+        ""3 TimberTest Debug"", //
+        ""3 Custom Debug"", //
+        ""4 TimberTest Info"", //
+        ""4 Custom Info"", //
+        ""5 TimberTest Warn"", //
+        ""5 Custom Warn"", //
+        ""6 TimberTest Error"", //
+        ""6 Custom Error"");
+  }
+
   private static void assertExceptionLogged(String message, String exceptionClassname) {
     List<LogItem> logs = ShadowLog.getLogs();
     assertThat(logs).hasSize(1);",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,3387059f0741fd491d53d4b9a3716c1e7d751094,b82832156990d5b89f6d7081ea441967fb976a17,Move tag method to where it's used. Prevent subclass overriding.,"@@ -241,6 +241,10 @@ public final class Timber {
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
     private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<String>();
 
+    @Override public final void tag(String tag) {
+      NEXT_TAG.set(tag);
+    }
+
     /**
      * Returns an explicitly set tag for the next log message or {@code null}. Calling this method
      * clears any set tag so it may only be called once.
@@ -355,10 +359,6 @@ public final class Timber {
         } while (i < newline);
       }
     }
-
-    @Override public void tag(String tag) {
-      NEXT_TAG.set(tag);
-    }
   }
 
   /** A {@link Tree} which does nothing. Useful for extending. */","@@ -241,6 +241,10 @@ public final class Timber {
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
     private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<String>();
 
+    @Override public final void tag(String tag) {
+      NEXT_TAG.set(tag);
+    }
+
     /**
      * Returns an explicitly set tag for the next log message or {@code null}. Calling this method
      * clears any set tag so it may only be called once.
@@ -355,10 +359,6 @@ public final class Timber {
         } while (i < newline);
       }
     }
-
-    @Override public void tag(String tag) {
-      NEXT_TAG.set(tag);
-    }
   }
 
   /** A {@link Tree} which does nothing. Useful for extending. */",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,ca8e897e5846e4249f935e77bd3e3ef6bf5531d2,0c1ecdc023eeaa5c2b5ec7daac4fa9b775c244c6,Prevent reflective instantiation by masochists.,"@@ -194,6 +194,7 @@ public final class Timber {
   };
 
   private Timber() {
+    throw new AssertionError(""No instances."");
   }
 
   /** A facade for handling logging calls. Install instances via {@link #plant}. */","@@ -194,6 +194,7 @@ public final class Timber {
   };
 
   private Timber() {
+    throw new AssertionError(""No instances."");
   }
 
   /** A facade for handling logging calls. Install instances via {@link #plant}. */",False,source
CHANGELOG.md,CHANGELOG.md,a8c67aa341cfcf81637510be9fa275663530e9e2,ca8e897e5846e4249f935e77bd3e3ef6bf5531d2,Prepare version 2.7.0.,"@@ -1,6 +1,14 @@
 Change Log
 ==========
 
+Version 2.7.0 *(2015-02-17)*
+----------------------------
+
+ * New: `DebugTree` subclasses can now override `logMessage` for access to the priority, tag, and
+   entire message for every log.
+ * Fix: Prevent overriding `Tree` and `TaggedTree` methods on `DebugTree`.
+
+
 Version 2.6.0 *(2015-02-17)*
 ----------------------------","@@ -1,6 +1,14 @@
 Change Log
 ==========
 
+Version 2.7.0 *(2015-02-17)*
+----------------------------
+
+ * New: `DebugTree` subclasses can now override `logMessage` for access to the priority, tag, and
+   entire message for every log.
+ * Fix: Prevent overriding `Tree` and `TaggedTree` methods on `DebugTree`.
+
+
 Version 2.6.0 *(2015-02-17)*
 ----------------------------",False,other
README.md,README.md,a8c67aa341cfcf81637510be9fa275663530e9e2,ca8e897e5846e4249f935e77bd3e3ef6bf5531d2,Prepare version 2.7.0.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.6.0</version>
+  <version>2.7.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.6.0'
+compile 'com.jakewharton.timber:timber:2.7.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.6.0</version>
+  <version>2.7.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.6.0'
+compile 'com.jakewharton.timber:timber:2.7.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
pom.xml,pom.xml,9de594e0754ee2233e5bf72bd27e37018b9eb8ef,a8c67aa341cfcf81637510be9fa275663530e9e2,[maven-release-plugin] prepare release timber-parent-2.7.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.6.1-SNAPSHOT</version>
+  <version>2.7.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.7.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.6.1-SNAPSHOT</version>
+  <version>2.7.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.7.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,9de594e0754ee2233e5bf72bd27e37018b9eb8ef,a8c67aa341cfcf81637510be9fa275663530e9e2,[maven-release-plugin] prepare release timber-parent-2.7.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,9de594e0754ee2233e5bf72bd27e37018b9eb8ef,a8c67aa341cfcf81637510be9fa275663530e9e2,[maven-release-plugin] prepare release timber-parent-2.7.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,9de594e0754ee2233e5bf72bd27e37018b9eb8ef,a8c67aa341cfcf81637510be9fa275663530e9e2,[maven-release-plugin] prepare release timber-parent-2.7.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,c37de81dee600d992f5b9c3e4a8137a0ff0f1cc0,9de594e0754ee2233e5bf72bd27e37018b9eb8ef,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.7.0</version>
+  <version>2.7.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.7.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.7.0</version>
+  <version>2.7.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.7.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,c37de81dee600d992f5b9c3e4a8137a0ff0f1cc0,9de594e0754ee2233e5bf72bd27e37018b9eb8ef,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.0</version>
+    <version>2.7.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.0</version>
+    <version>2.7.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,c37de81dee600d992f5b9c3e4a8137a0ff0f1cc0,9de594e0754ee2233e5bf72bd27e37018b9eb8ef,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.0</version>
+    <version>2.7.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.0</version>
+    <version>2.7.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,c37de81dee600d992f5b9c3e4a8137a0ff0f1cc0,9de594e0754ee2233e5bf72bd27e37018b9eb8ef,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.0</version>
+    <version>2.7.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.0</version>
+    <version>2.7.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,9360d22452704c906128a86e93a42cf0228dda71,c37de81dee600d992f5b9c3e4a8137a0ff0f1cc0,Switch back to Throwable to ensure consistent traces.,"@@ -274,12 +274,14 @@ public final class Timber {
         return tag;
       }
 
-      StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
-      if (stackTrace.length < 7) {
+      // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
+      // because Robolectric runs them on the JVM but on Android the elements are different.
+      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
+      if (stackTrace.length < 6) {
         throw new IllegalStateException(
             ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
       }
-      tag = stackTrace[6].getClassName();
+      tag = stackTrace[5].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");","@@ -274,12 +274,14 @@ public final class Timber {
         return tag;
       }
 
-      StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
-      if (stackTrace.length < 7) {
+      // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
+      // because Robolectric runs them on the JVM but on Android the elements are different.
+      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
+      if (stackTrace.length < 6) {
         throw new IllegalStateException(
             ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
       }
-      tag = stackTrace[6].getClassName();
+      tag = stackTrace[5].getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");",False,source
CHANGELOG.md,CHANGELOG.md,da58150f85c6f6eaef3d84b0223378b316de5342,9360d22452704c906128a86e93a42cf0228dda71,Prepare for version 2.7.1.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.7.1 *(2015-02-17)*
+----------------------------
+
+ * Fix: Switch method of getting calling class to be consistent across API levels.
+
+
 Version 2.7.0 *(2015-02-17)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 2.7.1 *(2015-02-17)*
+----------------------------
+
+ * Fix: Switch method of getting calling class to be consistent across API levels.
+
+
 Version 2.7.0 *(2015-02-17)*
 ----------------------------",False,other
README.md,README.md,da58150f85c6f6eaef3d84b0223378b316de5342,9360d22452704c906128a86e93a42cf0228dda71,Prepare for version 2.7.1.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.7.0</version>
+  <version>2.7.1</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.7.0'
+compile 'com.jakewharton.timber:timber:2.7.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.7.0</version>
+  <version>2.7.1</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.7.0'
+compile 'com.jakewharton.timber:timber:2.7.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
pom.xml,pom.xml,71fdf23db2e9b4ef6bb4995655df8899e527b361,da58150f85c6f6eaef3d84b0223378b316de5342,[maven-release-plugin] prepare release timber-parent-2.7.1,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.7.1-SNAPSHOT</version>
+  <version>2.7.1</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.7.1</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.7.1-SNAPSHOT</version>
+  <version>2.7.1</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-2.7.1</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,71fdf23db2e9b4ef6bb4995655df8899e527b361,da58150f85c6f6eaef3d84b0223378b316de5342,[maven-release-plugin] prepare release timber-parent-2.7.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1-SNAPSHOT</version>
+    <version>2.7.1</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1-SNAPSHOT</version>
+    <version>2.7.1</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,71fdf23db2e9b4ef6bb4995655df8899e527b361,da58150f85c6f6eaef3d84b0223378b316de5342,[maven-release-plugin] prepare release timber-parent-2.7.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1-SNAPSHOT</version>
+    <version>2.7.1</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1-SNAPSHOT</version>
+    <version>2.7.1</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,71fdf23db2e9b4ef6bb4995655df8899e527b361,da58150f85c6f6eaef3d84b0223378b316de5342,[maven-release-plugin] prepare release timber-parent-2.7.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1-SNAPSHOT</version>
+    <version>2.7.1</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1-SNAPSHOT</version>
+    <version>2.7.1</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,0f0d713fe1be4f685ec683b445e44f763b848736,71fdf23db2e9b4ef6bb4995655df8899e527b361,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.7.1</version>
+  <version>2.7.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.7.1</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.7.1</version>
+  <version>2.7.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-2.7.1</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,0f0d713fe1be4f685ec683b445e44f763b848736,71fdf23db2e9b4ef6bb4995655df8899e527b361,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1</version>
+    <version>2.7.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1</version>
+    <version>2.7.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,0f0d713fe1be4f685ec683b445e44f763b848736,71fdf23db2e9b4ef6bb4995655df8899e527b361,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1</version>
+    <version>2.7.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1</version>
+    <version>2.7.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,0f0d713fe1be4f685ec683b445e44f763b848736,71fdf23db2e9b4ef6bb4995655df8899e527b361,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1</version>
+    <version>2.7.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.1</version>
+    <version>2.7.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,494f014737ab16f7ebf2078a00bd98372f06bc35,0f0d713fe1be4f685ec683b445e44f763b848736,Add additional Lint checks and update to latest version.,"@@ -35,7 +35,7 @@
     <junit.version>4.10</junit.version>
     <robolectric.version>2.2</robolectric.version>
     <fest.version>2.0M10</fest.version>
-    <lint.version>22.4.0</lint.version>
+    <lint.version>24.1.2</lint.version>
   </properties>
 
   <scm>","@@ -35,7 +35,7 @@
     <junit.version>4.10</junit.version>
     <robolectric.version>2.2</robolectric.version>
     <fest.version>2.0M10</fest.version>
-    <lint.version>22.4.0</lint.version>
+    <lint.version>24.1.2</lint.version>
   </properties>
 
   <scm>",False,other
timber-lint/src/main/java/timber/lint/CallToLogNotTimberDetector.java,,494f014737ab16f7ebf2078a00bd98372f06bc35,0f0d713fe1be4f685ec683b445e44f763b848736,Add additional Lint checks and update to latest version.,"@@ -1,37 +0,0 @@
-package timber.lint;
-
-import com.android.tools.lint.detector.api.Category;
-import com.android.tools.lint.detector.api.Detector;
-import com.android.tools.lint.detector.api.Implementation;
-import com.android.tools.lint.detector.api.Issue;
-import com.android.tools.lint.detector.api.JavaContext;
-import com.android.tools.lint.detector.api.Scope;
-import com.android.tools.lint.detector.api.Severity;
-
-import java.util.Arrays;
-import java.util.List;
-
-import lombok.ast.AstVisitor;
-import lombok.ast.MethodInvocation;
-
-final class CallToLogNotTimberDetector extends Detector implements Detector.JavaScanner {
-  @Override public List<String> getApplicableMethodNames() {
-    return Arrays.asList(""d"", ""i"", ""w"", ""e"");
-  }
-
-  @Override
-  public void visitMethod(JavaContext context, AstVisitor visitor, MethodInvocation node) {
-    if (node.toString().startsWith(""Log."")) {
-      context.report(ISSUE, node, context.getLocation(node), ""Using 'Log' instead of 'Timber'"",
-          null);
-    }
-  }
-
-  public static final Issue ISSUE =
-      Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
-          ""This check looks through all the logging calls for instances where the Android Log ""
-              + ""class was used instead of Timber."",
-          ""Since Timber is included in the project, it is likely that calls to Log should ""
-              + ""instead be going to Timber."", Category.CORRECTNESS, 5, Severity.WARNING,
-          new Implementation(CallToLogNotTimberDetector.class, Scope.JAVA_FILE_SCOPE));
-}","@@ -1,37 +0,0 @@
-package timber.lint;
-
-import com.android.tools.lint.detector.api.Category;
-import com.android.tools.lint.detector.api.Detector;
-import com.android.tools.lint.detector.api.Implementation;
-import com.android.tools.lint.detector.api.Issue;
-import com.android.tools.lint.detector.api.JavaContext;
-import com.android.tools.lint.detector.api.Scope;
-import com.android.tools.lint.detector.api.Severity;
-
-import java.util.Arrays;
-import java.util.List;
-
-import lombok.ast.AstVisitor;
-import lombok.ast.MethodInvocation;
-
-final class CallToLogNotTimberDetector extends Detector implements Detector.JavaScanner {
-  @Override public List<String> getApplicableMethodNames() {
-    return Arrays.asList(""d"", ""i"", ""w"", ""e"");
-  }
-
-  @Override
-  public void visitMethod(JavaContext context, AstVisitor visitor, MethodInvocation node) {
-    if (node.toString().startsWith(""Log."")) {
-      context.report(ISSUE, node, context.getLocation(node), ""Using 'Log' instead of 'Timber'"",
-          null);
-    }
-  }
-
-  public static final Issue ISSUE =
-      Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
-          ""This check looks through all the logging calls for instances where the Android Log ""
-              + ""class was used instead of Timber."",
-          ""Since Timber is included in the project, it is likely that calls to Log should ""
-              + ""instead be going to Timber."", Category.CORRECTNESS, 5, Severity.WARNING,
-          new Implementation(CallToLogNotTimberDetector.class, Scope.JAVA_FILE_SCOPE));
-}",False,source
timber-lint/src/main/java/timber/lint/IssueRegistry.java,timber-lint/src/main/java/timber/lint/IssueRegistry.java,494f014737ab16f7ebf2078a00bd98372f06bc35,0f0d713fe1be4f685ec683b445e44f763b848736,Add additional Lint checks and update to latest version.,"@@ -7,6 +7,11 @@ import java.util.List;
 
 public final class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
   @Override public List<Issue> getIssues() {
-    return Arrays.asList(CallToLogNotTimberDetector.ISSUE);
+    return Arrays.asList(WrongTimberUsageDetector.ISSUE_LOG,
+        WrongTimberUsageDetector.ISSUE_ARG_COUNT,
+        WrongTimberUsageDetector.ISSUE_ARG_TYPES,
+        WrongTimberUsageDetector.ISSUE_BINARY,
+        WrongTimberUsageDetector.ISSUE_FORMAT,
+        WrongTimberUsageDetector.ISSUE_THROWABLE);
   }
 }","@@ -7,6 +7,11 @@ import java.util.List;
 
 public final class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
   @Override public List<Issue> getIssues() {
-    return Arrays.asList(CallToLogNotTimberDetector.ISSUE);
+    return Arrays.asList(WrongTimberUsageDetector.ISSUE_LOG,
+        WrongTimberUsageDetector.ISSUE_ARG_COUNT,
+        WrongTimberUsageDetector.ISSUE_ARG_TYPES,
+        WrongTimberUsageDetector.ISSUE_BINARY,
+        WrongTimberUsageDetector.ISSUE_FORMAT,
+        WrongTimberUsageDetector.ISSUE_THROWABLE);
   }
 }",False,source
,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,494f014737ab16f7ebf2078a00bd98372f06bc35,0f0d713fe1be4f685ec683b445e44f763b848736,Add additional Lint checks and update to latest version.,"@@ -0,0 +1,510 @@
+package timber.lint;
+
+import com.android.annotations.NonNull;
+import com.android.annotations.Nullable;
+import com.android.tools.lint.checks.StringFormatDetector;
+import com.android.tools.lint.client.api.JavaParser;
+import com.android.tools.lint.detector.api.Category;
+import com.android.tools.lint.detector.api.ClassContext;
+import com.android.tools.lint.detector.api.Detector;
+import com.android.tools.lint.detector.api.Implementation;
+import com.android.tools.lint.detector.api.Issue;
+import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.Scope;
+import com.android.tools.lint.detector.api.Severity;
+import com.android.tools.lint.detector.api.Speed;
+import lombok.ast.AstVisitor;
+import lombok.ast.BinaryExpression;
+import lombok.ast.BinaryOperator;
+import lombok.ast.BooleanLiteral;
+import lombok.ast.CharLiteral;
+import lombok.ast.Expression;
+import lombok.ast.ExpressionStatement;
+import lombok.ast.FloatingPointLiteral;
+import lombok.ast.If;
+import lombok.ast.InlineIfExpression;
+import lombok.ast.IntegralLiteral;
+import lombok.ast.MethodInvocation;
+import lombok.ast.Node;
+import lombok.ast.NullLiteral;
+import lombok.ast.StrictListAccessor;
+import lombok.ast.StringLiteral;
+import lombok.ast.VariableReference;
+import org.objectweb.asm.tree.ClassNode;
+import org.objectweb.asm.tree.MethodInsnNode;
+import org.objectweb.asm.tree.MethodNode;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import java.util.regex.Matcher;
+
+import static com.android.SdkConstants.GET_STRING_METHOD;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_CHAR;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_DOUBLE;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_FLOAT;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_INT;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_LONG;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_NULL;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
+
+final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner {
+  @NonNull @Override public Speed getSpeed() {
+    return Speed.NORMAL;
+  }
+
+  @Override public List<String> getApplicableCallNames() {
+    return Arrays.asList(""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
+  }
+
+  @Override public List<String> getApplicableMethodNames() {
+    return Arrays.asList(""format"", ""v"", ""d"", ""i"", ""w"", ""e"");
+  }
+
+  @Override public void checkCall(@NonNull ClassContext context, @NonNull ClassNode classNode,
+      @NonNull MethodNode method, @NonNull MethodInsnNode call) {
+    String owner = call.owner;
+    if (owner.startsWith(""android/util/Log"")) {
+      context.report(ISSUE_LOG, method, call, context.getLocation(call),
+          ""Using 'Log' instead of 'Timber'"");
+    }
+  }
+
+  @Override public void visitMethod(@NonNull JavaContext context, AstVisitor visitor,
+      @NonNull MethodInvocation node) {
+    String methodName = node.astName().getDescription();
+    if (""format"".equals(methodName)) {
+      if (!(node.astOperand() instanceof VariableReference)) {
+        return;
+      }
+      VariableReference ref = (VariableReference) node.astOperand();
+      if (!""String"".equals(ref.astIdentifier().astValue())) {
+        return;
+      }
+      // Found a String.format call
+      // Look outside to see if we inside of a Timber call
+      Node current = node.getParent();
+      while (current != null && !(current instanceof ExpressionStatement)) {
+        current = current.getParent();
+      }
+      if (current == null) {
+        return;
+      }
+      ExpressionStatement statement = (ExpressionStatement) current;
+      if (!statement.toString().startsWith(""Timber."")) {
+        return;
+      }
+      context.report(ISSUE_FORMAT, node, context.getLocation(node),
+          ""Using 'String#format' inside of 'Timber'"");
+    } else {
+      if (node.astOperand() instanceof VariableReference) {
+        VariableReference ref = (VariableReference) node.astOperand();
+        if (!""Timber"".equals(ref.astIdentifier().astValue())) {
+          return;
+        }
+        checkThrowablePosition(context, node);
+        checkArguments(context, node);
+      }
+    }
+  }
+
+  private static void checkArguments(JavaContext context, MethodInvocation node) {
+    StrictListAccessor<Expression, MethodInvocation> astArguments = node.astArguments();
+    Iterator<Expression> iterator = astArguments.iterator();
+    if (!iterator.hasNext()) {
+      return;
+    }
+    int startIndexOfArguments = 1;
+    Expression formatStringArg = iterator.next();
+    if (formatStringArg instanceof VariableReference) {
+      if (isSubclassOf(context, (VariableReference) formatStringArg, Throwable.class)) {
+        formatStringArg = iterator.next();
+        startIndexOfArguments++;
+      }
+    }
+
+    String formatString = findLiteralValue(context, formatStringArg);
+    // We passed for example a method call
+    if (formatString == null) {
+      return;
+    }
+    int argumentCount = getFormatArgumentCount(formatString);
+    int passedArgCount = astArguments.size() - startIndexOfArguments;
+    if (argumentCount < passedArgCount) {
+      context.report(ISSUE_ARG_COUNT, node, context.getLocation(node), String.format(
+              ""Wrong argument count, format string `%1$s` requires ""
+                  + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+              passedArgCount));
+      return;
+    }
+
+    if (argumentCount == 0) {
+      return;
+    }
+
+    List<String> types = getStringArgumentTypes(formatString);
+    Expression argument = null;
+    boolean valid;
+    for (int i = 0; i < types.size(); i++) {
+      String formatType = types.get(i);
+      if (iterator.hasNext()) {
+        argument = iterator.next();
+      } else {
+        context.report(ISSUE_ARG_COUNT, node, context.getLocation(node), String.format(
+                ""Wrong argument count, format string `%1$s` requires ""
+                    + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+                passedArgCount));
+      }
+
+      char last = formatType.charAt(formatType.length() - 1);
+      if (formatType.length() >= 2
+          && Character.toLowerCase(formatType.charAt(formatType.length() - 2)) == 't') {
+        // Date time conversion.
+        // TODO
+        continue;
+      }
+      Class type = getType(context, argument);
+      if (type != null) {
+        switch (last) {
+          case 'b':
+          case 'B':
+            valid = type == Boolean.TYPE;
+            break;
+          case 'x':
+          case 'X':
+          case 'd':
+          case 'o':
+          case 'e':
+          case 'E':
+          case 'f':
+          case 'g':
+          case 'G':
+          case 'a':
+          case 'A':
+            valid = type == Integer.TYPE
+                || type == Float.TYPE
+                || type == Double.TYPE
+                || type == Long.TYPE
+                || type == Byte.TYPE
+                || type == Short.TYPE;
+            break;
+          case 'c':
+          case 'C':
+            valid = type == Character.TYPE;
+            break;
+          case 'h':
+          case 'H':
+          case 's':
+          case 'S':
+            valid = type != Boolean.TYPE && !Number.class.isAssignableFrom(type);
+            break;
+          default:
+            valid = true;
+        }
+        if (!valid) {
+          String message = String.format(""Wrong argument type for formatting argument '#%1$d' ""
+                  + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                  + ""(argument #%5$d in method call)"", i, formatString, formatType,
+              type.getSimpleName(), startIndexOfArguments + i + 1);
+          context.report(ISSUE_ARG_TYPES, node, context.getLocation(argument), message);
+        }
+      }
+    }
+  }
+
+  private static Class<?> getType(JavaContext context, Expression expression) {
+    if (expression == null) {
+      return null;
+    }
+
+    if (expression instanceof MethodInvocation) {
+      MethodInvocation method = (MethodInvocation) expression;
+      String methodName = method.astName().astValue();
+      if (methodName.equals(GET_STRING_METHOD)) {
+        return String.class;
+      }
+    } else if (expression instanceof StringLiteral) {
+      return String.class;
+    } else if (expression instanceof IntegralLiteral) {
+      return Integer.TYPE;
+    } else if (expression instanceof FloatingPointLiteral) {
+      return Float.TYPE;
+    } else if (expression instanceof CharLiteral) {
+      return Character.TYPE;
+    } else if (expression instanceof BooleanLiteral) {
+      return Boolean.TYPE;
+    } else if (expression instanceof NullLiteral) {
+      return Object.class;
+    }
+
+    if (context != null) {
+      JavaParser.TypeDescriptor type = context.getType(expression);
+      if (type != null) {
+        Class<?> typeClass = getTypeClass(type);
+        if (typeClass != null) {
+          return typeClass;
+        } else {
+          return Object.class;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private static Class<?> getTypeClass(@Nullable JavaParser.TypeDescriptor type) {
+    if (type != null) {
+      return getTypeClass(type.getName());
+    }
+    return null;
+  }
+
+  private static Class<?> getTypeClass(@Nullable String typeClassName) {
+    if (typeClassName == null) {
+      return null;
+    } else if (typeClassName.equals(TYPE_STRING) || ""String"".equals(typeClassName)) {
+      return String.class;
+    } else if (typeClassName.equals(TYPE_INT)) {
+      return Integer.TYPE;
+    } else if (typeClassName.equals(TYPE_BOOLEAN)) {
+      return Boolean.TYPE;
+    } else if (typeClassName.equals(TYPE_NULL)) {
+      return Object.class;
+    } else if (typeClassName.equals(TYPE_LONG)) {
+      return Long.TYPE;
+    } else if (typeClassName.equals(TYPE_FLOAT)) {
+      return Float.TYPE;
+    } else if (typeClassName.equals(TYPE_DOUBLE)) {
+      return Double.TYPE;
+    } else if (typeClassName.equals(TYPE_CHAR)) {
+      return Character.TYPE;
+    } else if (""BigDecimal"".equals(typeClassName) || ""java.math.BigDecimal"".equals(typeClassName)) {
+      return Float.TYPE;
+    } else if (""BigInteger"".equals(typeClassName) || ""java.math.BigInteger"".equals(typeClassName)) {
+      return Integer.TYPE;
+    } else if (typeClassName.equals(TYPE_OBJECT)) {
+      return null;
+    } else if (typeClassName.startsWith(""java.lang."")) {
+      if (""java.lang.Integer"".equals(typeClassName)
+          || ""java.lang.Short"".equals(typeClassName)
+          || ""java.lang.Byte"".equals(typeClassName)
+          || ""java.lang.Long"".equals(typeClassName)) {
+        return Integer.TYPE;
+      } else if (""java.lang.Float"".equals(typeClassName) || ""java.lang.Double"".equals(
+          typeClassName)) {
+        return Float.TYPE;
+      } else {
+        return null;
+      }
+    } else if (typeClassName.equals(TYPE_BYTE)) {
+      return Byte.TYPE;
+    } else if (typeClassName.equals(TYPE_SHORT)) {
+      return Short.TYPE;
+    } else {
+      return null;
+    }
+  }
+
+  private static boolean isSubclassOf(JavaContext context, VariableReference variableReference,
+      Class clazz) {
+    JavaParser.ResolvedNode resolved = context.resolve(variableReference);
+    if (resolved instanceof JavaParser.ResolvedVariable) {
+      JavaParser.ResolvedVariable resolvedVariable = (JavaParser.ResolvedVariable) resolved;
+      JavaParser.ResolvedClass typeClass = resolvedVariable.getType().getTypeClass();
+      return (typeClass != null && typeClass.isSubclassOf(clazz.getName(), false));
+    }
+    return false;
+  }
+
+  private static List<String> getStringArgumentTypes(String formatString) {
+    List<String> types = new ArrayList<String>();
+    Matcher matcher = StringFormatDetector.FORMAT.matcher(formatString);
+    int index = 0;
+    int prevIndex = 0;
+    while (true) {
+      if (matcher.find(index)) {
+        int matchStart = matcher.start();
+        while (prevIndex < matchStart) {
+          char c = formatString.charAt(prevIndex);
+          if (c == '\\') {
+            prevIndex++;
+          }
+          prevIndex++;
+        }
+        if (prevIndex > matchStart) {
+          index = prevIndex;
+          continue;
+        }
+
+        index = matcher.end();
+        String str = formatString.substring(matchStart, matcher.end());
+        if (""%%"".equals(str) || ""%n"".equals(str)) {
+          continue;
+        }
+        types.add(matcher.group(6));
+      } else {
+        break;
+      }
+    }
+    return types;
+  }
+
+  private static String findLiteralValue(@NonNull JavaContext context, @NonNull Node argument) {
+    if (argument instanceof StringLiteral) {
+      return ((StringLiteral) argument).astValue();
+    } else if (argument instanceof BinaryExpression) {
+      BinaryExpression expression = (BinaryExpression) argument;
+      if (expression.astOperator() == BinaryOperator.PLUS) {
+        String left = findLiteralValue(context, expression.astLeft());
+        String right = findLiteralValue(context, expression.astRight());
+        if (left != null && right != null) {
+          return left + right;
+        }
+      }
+    } else {
+      JavaParser.ResolvedNode resolved = context.resolve(argument);
+      if (resolved instanceof JavaParser.ResolvedField) {
+        JavaParser.ResolvedField field = (JavaParser.ResolvedField) resolved;
+        Object value = field.getValue();
+        if (value instanceof String) {
+          return (String) value;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private static int getFormatArgumentCount(@NonNull String s) {
+    Matcher matcher = StringFormatDetector.FORMAT.matcher(s);
+    int index = 0;
+    int prevIndex = 0;
+    int nextNumber = 1;
+    int max = 0;
+    while (true) {
+      if (matcher.find(index)) {
+        String value = matcher.group(6);
+        if (""%"".equals(value) || ""n"".equals(value)) {
+          index = matcher.end();
+          continue;
+        }
+        int matchStart = matcher.start();
+        for (; prevIndex < matchStart; prevIndex++) {
+          char c = s.charAt(prevIndex);
+          if (c == '\\') {
+            prevIndex++;
+          }
+        }
+        if (prevIndex > matchStart) {
+          index = prevIndex;
+          continue;
+        }
+
+        int number;
+        String numberString = matcher.group(1);
+        if (numberString != null) {
+          // Strip off trailing $
+          numberString = numberString.substring(0, numberString.length() - 1);
+          number = Integer.parseInt(numberString);
+          nextNumber = number + 1;
+        } else {
+          number = nextNumber++;
+        }
+        if (number > max) {
+          max = number;
+        }
+        index = matcher.end();
+      } else {
+        break;
+      }
+    }
+
+    return max;
+  }
+
+  private static void checkThrowablePosition(JavaContext context, MethodInvocation node) {
+    int index = 0;
+    for (Node argument : node.astArguments()) {
+      if (checkNode(context, node, argument)) {
+        break;
+      }
+      if (argument instanceof VariableReference) {
+        VariableReference variableReference = (VariableReference) argument;
+        if (isSubclassOf(context, variableReference, Throwable.class) && index > 0) {
+          context.report(ISSUE_THROWABLE, node, context.getLocation(node),
+              ""Throwable should be first argument"");
+        }
+      }
+      index++;
+    }
+  }
+
+  private static boolean checkNode(JavaContext context, MethodInvocation node, Node argument) {
+    if (argument instanceof BinaryExpression) {
+      context.report(ISSUE_BINARY, node, context.getLocation(argument),
+          ""Replace String concatenation with Timber's string formatting"");
+      return true;
+    } else if (argument instanceof If || argument instanceof InlineIfExpression) {
+      return checkConditionalUsage(context, node, argument);
+    }
+    return false;
+  }
+
+  private static boolean checkConditionalUsage(JavaContext context, MethodInvocation node,
+      Node arg) {
+    Node thenStatement;
+    Node elseStatement;
+    if (arg instanceof If) {
+      If ifArg = (If) arg;
+      thenStatement = ifArg.astStatement();
+      elseStatement = ifArg.astElseStatement();
+    } else if (arg instanceof InlineIfExpression) {
+      InlineIfExpression inlineIfArg = (InlineIfExpression) arg;
+      thenStatement = inlineIfArg.astIfFalse();
+      elseStatement = inlineIfArg.astIfTrue();
+    } else {
+      return false;
+    }
+    if (checkNode(context, node, thenStatement)) {
+      return false;
+    }
+    return checkNode(context, node, elseStatement);
+  }
+
+  public static final Issue ISSUE_LOG =
+      Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
+          ""Since Timber is included in the project, it is likely that calls to Log should instead""
+              + "" be going to Timber."", Category.MESSAGES, 5, Severity.WARNING,
+          new Implementation(WrongTimberUsageDetector.class, Scope.CLASS_FILE_SCOPE));
+  public static final Issue ISSUE_FORMAT =
+      Issue.create(""StringFormatInTimber"", ""Logging call with Timber contains String#format()"",
+          ""Since Timber handles String.format automatically, you may not use String#format()."",
+          Category.MESSAGES, 5, Severity.WARNING,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_THROWABLE =
+      Issue.create(""ThrowableNotAtBeginning"", ""Exception in Timber not at the beginning"",
+          ""In Timber you have to pass a Throwable at the beginning of the call."", Category.MESSAGES,
+          5, Severity.WARNING,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_BINARY =
+      Issue.create(""BinaryOperationInTimber"", ""Use String#format()"",
+          ""Since Timber handles String#format() automatically, use this instead of String""
+              + "" concatenation."", Category.MESSAGES, 5, Severity.WARNING,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_ARG_COUNT =
+      Issue.create(""TimberArgCount"", ""Formatting argument types incomplete or inconsistent"",
+          ""When a formatted string takes arguments, you need to pass at least that amount of""
+              + "" arguments to the formatting call."", Category.MESSAGES, 9, Severity.ERROR,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_ARG_TYPES =
+      Issue.create(""TimberArgTypes"", ""Formatting string doesn't match passed arguments"",
+          ""The argument types that you specified in your formatting string does not match the types""
+              + "" of the arguments that you passed to your formatting call."", Category.MESSAGES, 9,
+          Severity.ERROR,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+}","@@ -0,0 +1,510 @@
+package timber.lint;
+
+import com.android.annotations.NonNull;
+import com.android.annotations.Nullable;
+import com.android.tools.lint.checks.StringFormatDetector;
+import com.android.tools.lint.client.api.JavaParser;
+import com.android.tools.lint.detector.api.Category;
+import com.android.tools.lint.detector.api.ClassContext;
+import com.android.tools.lint.detector.api.Detector;
+import com.android.tools.lint.detector.api.Implementation;
+import com.android.tools.lint.detector.api.Issue;
+import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.Scope;
+import com.android.tools.lint.detector.api.Severity;
+import com.android.tools.lint.detector.api.Speed;
+import lombok.ast.AstVisitor;
+import lombok.ast.BinaryExpression;
+import lombok.ast.BinaryOperator;
+import lombok.ast.BooleanLiteral;
+import lombok.ast.CharLiteral;
+import lombok.ast.Expression;
+import lombok.ast.ExpressionStatement;
+import lombok.ast.FloatingPointLiteral;
+import lombok.ast.If;
+import lombok.ast.InlineIfExpression;
+import lombok.ast.IntegralLiteral;
+import lombok.ast.MethodInvocation;
+import lombok.ast.Node;
+import lombok.ast.NullLiteral;
+import lombok.ast.StrictListAccessor;
+import lombok.ast.StringLiteral;
+import lombok.ast.VariableReference;
+import org.objectweb.asm.tree.ClassNode;
+import org.objectweb.asm.tree.MethodInsnNode;
+import org.objectweb.asm.tree.MethodNode;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import java.util.regex.Matcher;
+
+import static com.android.SdkConstants.GET_STRING_METHOD;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_CHAR;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_DOUBLE;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_FLOAT;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_INT;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_LONG;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_NULL;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
+import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
+
+final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner {
+  @NonNull @Override public Speed getSpeed() {
+    return Speed.NORMAL;
+  }
+
+  @Override public List<String> getApplicableCallNames() {
+    return Arrays.asList(""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
+  }
+
+  @Override public List<String> getApplicableMethodNames() {
+    return Arrays.asList(""format"", ""v"", ""d"", ""i"", ""w"", ""e"");
+  }
+
+  @Override public void checkCall(@NonNull ClassContext context, @NonNull ClassNode classNode,
+      @NonNull MethodNode method, @NonNull MethodInsnNode call) {
+    String owner = call.owner;
+    if (owner.startsWith(""android/util/Log"")) {
+      context.report(ISSUE_LOG, method, call, context.getLocation(call),
+          ""Using 'Log' instead of 'Timber'"");
+    }
+  }
+
+  @Override public void visitMethod(@NonNull JavaContext context, AstVisitor visitor,
+      @NonNull MethodInvocation node) {
+    String methodName = node.astName().getDescription();
+    if (""format"".equals(methodName)) {
+      if (!(node.astOperand() instanceof VariableReference)) {
+        return;
+      }
+      VariableReference ref = (VariableReference) node.astOperand();
+      if (!""String"".equals(ref.astIdentifier().astValue())) {
+        return;
+      }
+      // Found a String.format call
+      // Look outside to see if we inside of a Timber call
+      Node current = node.getParent();
+      while (current != null && !(current instanceof ExpressionStatement)) {
+        current = current.getParent();
+      }
+      if (current == null) {
+        return;
+      }
+      ExpressionStatement statement = (ExpressionStatement) current;
+      if (!statement.toString().startsWith(""Timber."")) {
+        return;
+      }
+      context.report(ISSUE_FORMAT, node, context.getLocation(node),
+          ""Using 'String#format' inside of 'Timber'"");
+    } else {
+      if (node.astOperand() instanceof VariableReference) {
+        VariableReference ref = (VariableReference) node.astOperand();
+        if (!""Timber"".equals(ref.astIdentifier().astValue())) {
+          return;
+        }
+        checkThrowablePosition(context, node);
+        checkArguments(context, node);
+      }
+    }
+  }
+
+  private static void checkArguments(JavaContext context, MethodInvocation node) {
+    StrictListAccessor<Expression, MethodInvocation> astArguments = node.astArguments();
+    Iterator<Expression> iterator = astArguments.iterator();
+    if (!iterator.hasNext()) {
+      return;
+    }
+    int startIndexOfArguments = 1;
+    Expression formatStringArg = iterator.next();
+    if (formatStringArg instanceof VariableReference) {
+      if (isSubclassOf(context, (VariableReference) formatStringArg, Throwable.class)) {
+        formatStringArg = iterator.next();
+        startIndexOfArguments++;
+      }
+    }
+
+    String formatString = findLiteralValue(context, formatStringArg);
+    // We passed for example a method call
+    if (formatString == null) {
+      return;
+    }
+    int argumentCount = getFormatArgumentCount(formatString);
+    int passedArgCount = astArguments.size() - startIndexOfArguments;
+    if (argumentCount < passedArgCount) {
+      context.report(ISSUE_ARG_COUNT, node, context.getLocation(node), String.format(
+              ""Wrong argument count, format string `%1$s` requires ""
+                  + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+              passedArgCount));
+      return;
+    }
+
+    if (argumentCount == 0) {
+      return;
+    }
+
+    List<String> types = getStringArgumentTypes(formatString);
+    Expression argument = null;
+    boolean valid;
+    for (int i = 0; i < types.size(); i++) {
+      String formatType = types.get(i);
+      if (iterator.hasNext()) {
+        argument = iterator.next();
+      } else {
+        context.report(ISSUE_ARG_COUNT, node, context.getLocation(node), String.format(
+                ""Wrong argument count, format string `%1$s` requires ""
+                    + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+                passedArgCount));
+      }
+
+      char last = formatType.charAt(formatType.length() - 1);
+      if (formatType.length() >= 2
+          && Character.toLowerCase(formatType.charAt(formatType.length() - 2)) == 't') {
+        // Date time conversion.
+        // TODO
+        continue;
+      }
+      Class type = getType(context, argument);
+      if (type != null) {
+        switch (last) {
+          case 'b':
+          case 'B':
+            valid = type == Boolean.TYPE;
+            break;
+          case 'x':
+          case 'X':
+          case 'd':
+          case 'o':
+          case 'e':
+          case 'E':
+          case 'f':
+          case 'g':
+          case 'G':
+          case 'a':
+          case 'A':
+            valid = type == Integer.TYPE
+                || type == Float.TYPE
+                || type == Double.TYPE
+                || type == Long.TYPE
+                || type == Byte.TYPE
+                || type == Short.TYPE;
+            break;
+          case 'c':
+          case 'C':
+            valid = type == Character.TYPE;
+            break;
+          case 'h':
+          case 'H':
+          case 's':
+          case 'S':
+            valid = type != Boolean.TYPE && !Number.class.isAssignableFrom(type);
+            break;
+          default:
+            valid = true;
+        }
+        if (!valid) {
+          String message = String.format(""Wrong argument type for formatting argument '#%1$d' ""
+                  + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                  + ""(argument #%5$d in method call)"", i, formatString, formatType,
+              type.getSimpleName(), startIndexOfArguments + i + 1);
+          context.report(ISSUE_ARG_TYPES, node, context.getLocation(argument), message);
+        }
+      }
+    }
+  }
+
+  private static Class<?> getType(JavaContext context, Expression expression) {
+    if (expression == null) {
+      return null;
+    }
+
+    if (expression instanceof MethodInvocation) {
+      MethodInvocation method = (MethodInvocation) expression;
+      String methodName = method.astName().astValue();
+      if (methodName.equals(GET_STRING_METHOD)) {
+        return String.class;
+      }
+    } else if (expression instanceof StringLiteral) {
+      return String.class;
+    } else if (expression instanceof IntegralLiteral) {
+      return Integer.TYPE;
+    } else if (expression instanceof FloatingPointLiteral) {
+      return Float.TYPE;
+    } else if (expression instanceof CharLiteral) {
+      return Character.TYPE;
+    } else if (expression instanceof BooleanLiteral) {
+      return Boolean.TYPE;
+    } else if (expression instanceof NullLiteral) {
+      return Object.class;
+    }
+
+    if (context != null) {
+      JavaParser.TypeDescriptor type = context.getType(expression);
+      if (type != null) {
+        Class<?> typeClass = getTypeClass(type);
+        if (typeClass != null) {
+          return typeClass;
+        } else {
+          return Object.class;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private static Class<?> getTypeClass(@Nullable JavaParser.TypeDescriptor type) {
+    if (type != null) {
+      return getTypeClass(type.getName());
+    }
+    return null;
+  }
+
+  private static Class<?> getTypeClass(@Nullable String typeClassName) {
+    if (typeClassName == null) {
+      return null;
+    } else if (typeClassName.equals(TYPE_STRING) || ""String"".equals(typeClassName)) {
+      return String.class;
+    } else if (typeClassName.equals(TYPE_INT)) {
+      return Integer.TYPE;
+    } else if (typeClassName.equals(TYPE_BOOLEAN)) {
+      return Boolean.TYPE;
+    } else if (typeClassName.equals(TYPE_NULL)) {
+      return Object.class;
+    } else if (typeClassName.equals(TYPE_LONG)) {
+      return Long.TYPE;
+    } else if (typeClassName.equals(TYPE_FLOAT)) {
+      return Float.TYPE;
+    } else if (typeClassName.equals(TYPE_DOUBLE)) {
+      return Double.TYPE;
+    } else if (typeClassName.equals(TYPE_CHAR)) {
+      return Character.TYPE;
+    } else if (""BigDecimal"".equals(typeClassName) || ""java.math.BigDecimal"".equals(typeClassName)) {
+      return Float.TYPE;
+    } else if (""BigInteger"".equals(typeClassName) || ""java.math.BigInteger"".equals(typeClassName)) {
+      return Integer.TYPE;
+    } else if (typeClassName.equals(TYPE_OBJECT)) {
+      return null;
+    } else if (typeClassName.startsWith(""java.lang."")) {
+      if (""java.lang.Integer"".equals(typeClassName)
+          || ""java.lang.Short"".equals(typeClassName)
+          || ""java.lang.Byte"".equals(typeClassName)
+          || ""java.lang.Long"".equals(typeClassName)) {
+        return Integer.TYPE;
+      } else if (""java.lang.Float"".equals(typeClassName) || ""java.lang.Double"".equals(
+          typeClassName)) {
+        return Float.TYPE;
+      } else {
+        return null;
+      }
+    } else if (typeClassName.equals(TYPE_BYTE)) {
+      return Byte.TYPE;
+    } else if (typeClassName.equals(TYPE_SHORT)) {
+      return Short.TYPE;
+    } else {
+      return null;
+    }
+  }
+
+  private static boolean isSubclassOf(JavaContext context, VariableReference variableReference,
+      Class clazz) {
+    JavaParser.ResolvedNode resolved = context.resolve(variableReference);
+    if (resolved instanceof JavaParser.ResolvedVariable) {
+      JavaParser.ResolvedVariable resolvedVariable = (JavaParser.ResolvedVariable) resolved;
+      JavaParser.ResolvedClass typeClass = resolvedVariable.getType().getTypeClass();
+      return (typeClass != null && typeClass.isSubclassOf(clazz.getName(), false));
+    }
+    return false;
+  }
+
+  private static List<String> getStringArgumentTypes(String formatString) {
+    List<String> types = new ArrayList<String>();
+    Matcher matcher = StringFormatDetector.FORMAT.matcher(formatString);
+    int index = 0;
+    int prevIndex = 0;
+    while (true) {
+      if (matcher.find(index)) {
+        int matchStart = matcher.start();
+        while (prevIndex < matchStart) {
+          char c = formatString.charAt(prevIndex);
+          if (c == '\\') {
+            prevIndex++;
+          }
+          prevIndex++;
+        }
+        if (prevIndex > matchStart) {
+          index = prevIndex;
+          continue;
+        }
+
+        index = matcher.end();
+        String str = formatString.substring(matchStart, matcher.end());
+        if (""%%"".equals(str) || ""%n"".equals(str)) {
+          continue;
+        }
+        types.add(matcher.group(6));
+      } else {
+        break;
+      }
+    }
+    return types;
+  }
+
+  private static String findLiteralValue(@NonNull JavaContext context, @NonNull Node argument) {
+    if (argument instanceof StringLiteral) {
+      return ((StringLiteral) argument).astValue();
+    } else if (argument instanceof BinaryExpression) {
+      BinaryExpression expression = (BinaryExpression) argument;
+      if (expression.astOperator() == BinaryOperator.PLUS) {
+        String left = findLiteralValue(context, expression.astLeft());
+        String right = findLiteralValue(context, expression.astRight());
+        if (left != null && right != null) {
+          return left + right;
+        }
+      }
+    } else {
+      JavaParser.ResolvedNode resolved = context.resolve(argument);
+      if (resolved instanceof JavaParser.ResolvedField) {
+        JavaParser.ResolvedField field = (JavaParser.ResolvedField) resolved;
+        Object value = field.getValue();
+        if (value instanceof String) {
+          return (String) value;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private static int getFormatArgumentCount(@NonNull String s) {
+    Matcher matcher = StringFormatDetector.FORMAT.matcher(s);
+    int index = 0;
+    int prevIndex = 0;
+    int nextNumber = 1;
+    int max = 0;
+    while (true) {
+      if (matcher.find(index)) {
+        String value = matcher.group(6);
+        if (""%"".equals(value) || ""n"".equals(value)) {
+          index = matcher.end();
+          continue;
+        }
+        int matchStart = matcher.start();
+        for (; prevIndex < matchStart; prevIndex++) {
+          char c = s.charAt(prevIndex);
+          if (c == '\\') {
+            prevIndex++;
+          }
+        }
+        if (prevIndex > matchStart) {
+          index = prevIndex;
+          continue;
+        }
+
+        int number;
+        String numberString = matcher.group(1);
+        if (numberString != null) {
+          // Strip off trailing $
+          numberString = numberString.substring(0, numberString.length() - 1);
+          number = Integer.parseInt(numberString);
+          nextNumber = number + 1;
+        } else {
+          number = nextNumber++;
+        }
+        if (number > max) {
+          max = number;
+        }
+        index = matcher.end();
+      } else {
+        break;
+      }
+    }
+
+    return max;
+  }
+
+  private static void checkThrowablePosition(JavaContext context, MethodInvocation node) {
+    int index = 0;
+    for (Node argument : node.astArguments()) {
+      if (checkNode(context, node, argument)) {
+        break;
+      }
+      if (argument instanceof VariableReference) {
+        VariableReference variableReference = (VariableReference) argument;
+        if (isSubclassOf(context, variableReference, Throwable.class) && index > 0) {
+          context.report(ISSUE_THROWABLE, node, context.getLocation(node),
+              ""Throwable should be first argument"");
+        }
+      }
+      index++;
+    }
+  }
+
+  private static boolean checkNode(JavaContext context, MethodInvocation node, Node argument) {
+    if (argument instanceof BinaryExpression) {
+      context.report(ISSUE_BINARY, node, context.getLocation(argument),
+          ""Replace String concatenation with Timber's string formatting"");
+      return true;
+    } else if (argument instanceof If || argument instanceof InlineIfExpression) {
+      return checkConditionalUsage(context, node, argument);
+    }
+    return false;
+  }
+
+  private static boolean checkConditionalUsage(JavaContext context, MethodInvocation node,
+      Node arg) {
+    Node thenStatement;
+    Node elseStatement;
+    if (arg instanceof If) {
+      If ifArg = (If) arg;
+      thenStatement = ifArg.astStatement();
+      elseStatement = ifArg.astElseStatement();
+    } else if (arg instanceof InlineIfExpression) {
+      InlineIfExpression inlineIfArg = (InlineIfExpression) arg;
+      thenStatement = inlineIfArg.astIfFalse();
+      elseStatement = inlineIfArg.astIfTrue();
+    } else {
+      return false;
+    }
+    if (checkNode(context, node, thenStatement)) {
+      return false;
+    }
+    return checkNode(context, node, elseStatement);
+  }
+
+  public static final Issue ISSUE_LOG =
+      Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
+          ""Since Timber is included in the project, it is likely that calls to Log should instead""
+              + "" be going to Timber."", Category.MESSAGES, 5, Severity.WARNING,
+          new Implementation(WrongTimberUsageDetector.class, Scope.CLASS_FILE_SCOPE));
+  public static final Issue ISSUE_FORMAT =
+      Issue.create(""StringFormatInTimber"", ""Logging call with Timber contains String#format()"",
+          ""Since Timber handles String.format automatically, you may not use String#format()."",
+          Category.MESSAGES, 5, Severity.WARNING,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_THROWABLE =
+      Issue.create(""ThrowableNotAtBeginning"", ""Exception in Timber not at the beginning"",
+          ""In Timber you have to pass a Throwable at the beginning of the call."", Category.MESSAGES,
+          5, Severity.WARNING,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_BINARY =
+      Issue.create(""BinaryOperationInTimber"", ""Use String#format()"",
+          ""Since Timber handles String#format() automatically, use this instead of String""
+              + "" concatenation."", Category.MESSAGES, 5, Severity.WARNING,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_ARG_COUNT =
+      Issue.create(""TimberArgCount"", ""Formatting argument types incomplete or inconsistent"",
+          ""When a formatted string takes arguments, you need to pass at least that amount of""
+              + "" arguments to the formatting call."", Category.MESSAGES, 9, Severity.ERROR,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_ARG_TYPES =
+      Issue.create(""TimberArgTypes"", ""Formatting string doesn't match passed arguments"",
+          ""The argument types that you specified in your formatting string does not match the types""
+              + "" of the arguments that you passed to your formatting call."", Category.MESSAGES, 9,
+          Severity.ERROR,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+}",False,source
timber-lint/src/main/java/timber/lint/IssueRegistry.java,timber-lint/src/main/java/timber/lint/IssueRegistry.java,420724dafe18b04fdef8bc02e88b105646511305,b2475ba7227b8705589d7669efbaeb8e326be78f,Add lint check for tag length,"@@ -12,6 +12,7 @@ public final class IssueRegistry extends com.android.tools.lint.client.api.Issue
         WrongTimberUsageDetector.ISSUE_ARG_TYPES,
         WrongTimberUsageDetector.ISSUE_BINARY,
         WrongTimberUsageDetector.ISSUE_FORMAT,
-        WrongTimberUsageDetector.ISSUE_THROWABLE);
+        WrongTimberUsageDetector.ISSUE_THROWABLE,
+        WrongTimberUsageDetector.ISSUE_TAG_LENGTH);
   }
 }","@@ -12,6 +12,7 @@ public final class IssueRegistry extends com.android.tools.lint.client.api.Issue
         WrongTimberUsageDetector.ISSUE_ARG_TYPES,
         WrongTimberUsageDetector.ISSUE_BINARY,
         WrongTimberUsageDetector.ISSUE_FORMAT,
-        WrongTimberUsageDetector.ISSUE_THROWABLE);
+        WrongTimberUsageDetector.ISSUE_THROWABLE,
+        WrongTimberUsageDetector.ISSUE_TAG_LENGTH);
   }
 }",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,420724dafe18b04fdef8bc02e88b105646511305,b2475ba7227b8705589d7669efbaeb8e326be78f,Add lint check for tag length,"@@ -53,7 +53,8 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 
-final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner {
+public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner,
+    Detector.ClassScanner {
   @NonNull @Override public Speed getSpeed() {
     return Speed.NORMAL;
   }
@@ -63,7 +64,7 @@ final class WrongTimberUsageDetector extends Detector implements Detector.JavaSc
   }
 
   @Override public List<String> getApplicableMethodNames() {
-    return Arrays.asList(""format"", ""v"", ""d"", ""i"", ""w"", ""e"");
+    return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"");
   }
 
   @Override public void checkCall(@NonNull ClassContext context, @NonNull ClassNode classNode,
@@ -101,6 +102,15 @@ final class WrongTimberUsageDetector extends Detector implements Detector.JavaSc
       }
       context.report(ISSUE_FORMAT, node, context.getLocation(node),
           ""Using 'String#format' inside of 'Timber'"");
+    } else if (""tag"".equals(methodName)) {
+      Node argument = node.astArguments().iterator().next();
+      String tag = findLiteralValue(context, argument);
+      if (tag.length() > 23) {
+        String message = String.format(
+            ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
+            tag.length(), tag);
+        context.report(ISSUE_TAG_LENGTH, node, context.getLocation(node), message);
+      }
     } else {
       if (node.astOperand() instanceof VariableReference) {
         VariableReference ref = (VariableReference) node.astOperand();
@@ -507,4 +517,8 @@ final class WrongTimberUsageDetector extends Detector implements Detector.JavaSc
               + "" of the arguments that you passed to your formatting call."", Category.MESSAGES, 9,
           Severity.ERROR,
           new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_TAG_LENGTH =
+      Issue.create(""TimberTagLength"", ""Too Long Log Tags"", ""Log tags are only allowed to be at most""
+              + "" 23 tag characters long."", Category.CORRECTNESS, 5, Severity.ERROR,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
 }","@@ -53,7 +53,8 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 
-final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner {
+public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner,
+    Detector.ClassScanner {
   @NonNull @Override public Speed getSpeed() {
     return Speed.NORMAL;
   }
@@ -63,7 +64,7 @@ final class WrongTimberUsageDetector extends Detector implements Detector.JavaSc
   }
 
   @Override public List<String> getApplicableMethodNames() {
-    return Arrays.asList(""format"", ""v"", ""d"", ""i"", ""w"", ""e"");
+    return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"");
   }
 
   @Override public void checkCall(@NonNull ClassContext context, @NonNull ClassNode classNode,
@@ -101,6 +102,15 @@ final class WrongTimberUsageDetector extends Detector implements Detector.JavaSc
       }
       context.report(ISSUE_FORMAT, node, context.getLocation(node),
           ""Using 'String#format' inside of 'Timber'"");
+    } else if (""tag"".equals(methodName)) {
+      Node argument = node.astArguments().iterator().next();
+      String tag = findLiteralValue(context, argument);
+      if (tag.length() > 23) {
+        String message = String.format(
+            ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
+            tag.length(), tag);
+        context.report(ISSUE_TAG_LENGTH, node, context.getLocation(node), message);
+      }
     } else {
       if (node.astOperand() instanceof VariableReference) {
         VariableReference ref = (VariableReference) node.astOperand();
@@ -507,4 +517,8 @@ final class WrongTimberUsageDetector extends Detector implements Detector.JavaSc
               + "" of the arguments that you passed to your formatting call."", Category.MESSAGES, 9,
           Severity.ERROR,
           new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_TAG_LENGTH =
+      Issue.create(""TimberTagLength"", ""Too Long Log Tags"", ""Log tags are only allowed to be at most""
+              + "" 23 tag characters long."", Category.CORRECTNESS, 5, Severity.ERROR,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
 }",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,954f46afc0ea049b485c6c3ad9c3af781892f144,b7fdd097230b59360d5e11b3375280138f16c2dc,"added wft method, issue #32","@@ -64,7 +64,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   }
 
   @Override public List<String> getApplicableMethodNames() {
-    return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"");
+    return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
   }
 
   @Override public void checkCall(@NonNull ClassContext context, @NonNull ClassNode classNode,","@@ -64,7 +64,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   }
 
   @Override public List<String> getApplicableMethodNames() {
-    return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"");
+    return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
   }
 
   @Override public void checkCall(@NonNull ClassContext context, @NonNull ClassNode classNode,",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,954f46afc0ea049b485c6c3ad9c3af781892f144,b7fdd097230b59360d5e11b3375280138f16c2dc,"added wft method, issue #32","@@ -59,6 +59,16 @@ public final class Timber {
     TREE_OF_SOULS.e(t, message, args);
   }
 
+  /** Log an assert message with optional format args. */
+  public static void wtf(String message, Object... args) {
+    TREE_OF_SOULS.wtf(message, args);
+  }
+
+  /** Log an assert exception and a message with optional format args. */
+  public static void wtf(Throwable t, String message, Object... args) {
+    TREE_OF_SOULS.wtf(t, message, args);
+  }
+
   /**
    * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
    * instance rather than using static methods or to facilitate testing.
@@ -191,6 +201,22 @@ public final class Timber {
         forest.get(i).e(t, message, args);
       }
     }
+
+    @Override public void wtf(String message, Object... args) {
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).wtf(message, args);
+      }
+    }
+
+    @Override public void wtf(Throwable t, String message, Object... args) {
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).wtf(t, message, args);
+      }
+    }
   };
 
   private Timber() {
@@ -228,6 +254,12 @@ public final class Timber {
 
     /** Log an error exception and a message with optional format args. */
     void e(Throwable t, String message, Object... args);
+
+    /** Log an assert message with optional format args. */
+    void wtf(String message, Object... args);
+
+    /** Log an assert exception and a message with optional format args. */
+    void wtf(Throwable t, String message, Object... args);
   }
 
   /** A facade for attaching tags to logging calls. Install instances via {@link #plant} */
@@ -334,6 +366,14 @@ public final class Timber {
       throwShade(Log.ERROR, maybeFormat(message, args), t);
     }
 
+    @Override public final void wtf(String message, Object... args) {
+      throwShade(Log.ASSERT, maybeFormat(message, args), null);
+    }
+
+    @Override public final void wtf(Throwable t, String message, Object... args) {
+      throwShade(Log.ASSERT, maybeFormat(message, args), t);
+    }
+
     private void throwShade(int priority, String message, Throwable t) {
       if (message == null || message.length() == 0) {
         if (t == null) {
@@ -351,7 +391,11 @@ public final class Timber {
     /** Log a message! */
     protected void logMessage(int priority, String tag, String message) {
       if (message.length() < MAX_LOG_LENGTH) {
-        Log.println(priority, tag, message);
+        if (priority == Log.ASSERT) {
+          Log.wtf(tag, message);
+        } else {
+          Log.println(priority, tag, message);
+        }
         return;
       }
 
@@ -361,7 +405,12 @@ public final class Timber {
         newline = newline != -1 ? newline : length;
         do {
           int end = Math.min(newline, i + MAX_LOG_LENGTH);
-          Log.println(priority, tag, message.substring(i, end));
+          String part = message.substring(i, end);
+          if (priority == Log.ASSERT) {
+            Log.wtf(tag, part);
+          } else {
+            Log.println(priority, tag, part);
+          }
           i = end;
         } while (i < newline);
       }
@@ -399,5 +448,11 @@ public final class Timber {
 
     @Override public void e(Throwable t, String message, Object... args) {
     }
+
+    @Override public void wtf(String message, Object... args) {
+    }
+
+    @Override public void wtf(Throwable t, String message, Object... args) {
+    }
   }
 }","@@ -59,6 +59,16 @@ public final class Timber {
     TREE_OF_SOULS.e(t, message, args);
   }
 
+  /** Log an assert message with optional format args. */
+  public static void wtf(String message, Object... args) {
+    TREE_OF_SOULS.wtf(message, args);
+  }
+
+  /** Log an assert exception and a message with optional format args. */
+  public static void wtf(Throwable t, String message, Object... args) {
+    TREE_OF_SOULS.wtf(t, message, args);
+  }
+
   /**
    * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
    * instance rather than using static methods or to facilitate testing.
@@ -191,6 +201,22 @@ public final class Timber {
         forest.get(i).e(t, message, args);
       }
     }
+
+    @Override public void wtf(String message, Object... args) {
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).wtf(message, args);
+      }
+    }
+
+    @Override public void wtf(Throwable t, String message, Object... args) {
+      List<Tree> forest = FOREST;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.size(); i < count; i++) {
+        forest.get(i).wtf(t, message, args);
+      }
+    }
   };
 
   private Timber() {
@@ -228,6 +254,12 @@ public final class Timber {
 
     /** Log an error exception and a message with optional format args. */
     void e(Throwable t, String message, Object... args);
+
+    /** Log an assert message with optional format args. */
+    void wtf(String message, Object... args);
+
+    /** Log an assert exception and a message with optional format args. */
+    void wtf(Throwable t, String message, Object... args);
   }
 
   /** A facade for attaching tags to logging calls. Install instances via {@link #plant} */
@@ -334,6 +366,14 @@ public final class Timber {
       throwShade(Log.ERROR, maybeFormat(message, args), t);
     }
 
+    @Override public final void wtf(String message, Object... args) {
+      throwShade(Log.ASSERT, maybeFormat(message, args), null);
+    }
+
+    @Override public final void wtf(Throwable t, String message, Object... args) {
+      throwShade(Log.ASSERT, maybeFormat(message, args), t);
+    }
+
     private void throwShade(int priority, String message, Throwable t) {
       if (message == null || message.length() == 0) {
         if (t == null) {
@@ -351,7 +391,11 @@ public final class Timber {
     /** Log a message! */
     protected void logMessage(int priority, String tag, String message) {
       if (message.length() < MAX_LOG_LENGTH) {
-        Log.println(priority, tag, message);
+        if (priority == Log.ASSERT) {
+          Log.wtf(tag, message);
+        } else {
+          Log.println(priority, tag, message);
+        }
         return;
       }
 
@@ -361,7 +405,12 @@ public final class Timber {
         newline = newline != -1 ? newline : length;
         do {
           int end = Math.min(newline, i + MAX_LOG_LENGTH);
-          Log.println(priority, tag, message.substring(i, end));
+          String part = message.substring(i, end);
+          if (priority == Log.ASSERT) {
+            Log.wtf(tag, part);
+          } else {
+            Log.println(priority, tag, part);
+          }
           i = end;
         } while (i < newline);
       }
@@ -399,5 +448,11 @@ public final class Timber {
 
     @Override public void e(Throwable t, String message, Object... args) {
     }
+
+    @Override public void wtf(String message, Object... args) {
+    }
+
+    @Override public void wtf(Throwable t, String message, Object... args) {
+    }
   }
 }",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,954f46afc0ea049b485c6c3ad9c3af781892f144,b7fdd097230b59360d5e11b3375280138f16c2dc,"added wft method, issue #32","@@ -222,6 +222,8 @@ public class TimberTest {
     Timber.tag(""Custom"").w(""Warn"");
     Timber.e(""Error"");
     Timber.tag(""Custom"").e(""Error"");
+    Timber.wtf(""Assert"");
+    Timber.tag(""Custom"").wtf(""Assert"");
 
     assertThat(logs).containsExactly( //
         ""2 TimberTest Verbose"", //
@@ -233,7 +235,9 @@ public class TimberTest {
         ""5 TimberTest Warn"", //
         ""5 Custom Warn"", //
         ""6 TimberTest Error"", //
-        ""6 Custom Error"");
+        ""6 Custom Error"",
+        ""7 TimberTest Assert"",
+        ""7 Custom Assert"");
   }
 
   private static void assertExceptionLogged(String message, String exceptionClassname) {","@@ -222,6 +222,8 @@ public class TimberTest {
     Timber.tag(""Custom"").w(""Warn"");
     Timber.e(""Error"");
     Timber.tag(""Custom"").e(""Error"");
+    Timber.wtf(""Assert"");
+    Timber.tag(""Custom"").wtf(""Assert"");
 
     assertThat(logs).containsExactly( //
         ""2 TimberTest Verbose"", //
@@ -233,7 +235,9 @@ public class TimberTest {
         ""5 TimberTest Warn"", //
         ""5 Custom Warn"", //
         ""6 TimberTest Error"", //
-        ""6 Custom Error"");
+        ""6 Custom Error"",
+        ""7 TimberTest Assert"",
+        ""7 Custom Assert"");
   }
 
   private static void assertExceptionLogged(String message, String exceptionClassname) {",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,88a508f0d86e14cd7f6b59fdef726b448411d23b,954f46afc0ea049b485c6c3ad9c3af781892f144,Add hook to alter stack element created tag.,"@@ -271,21 +271,22 @@ public final class Timber {
   /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
   public static class DebugTree implements TaggedTree {
     private static final int MAX_LOG_LENGTH = 4000;
+    private static final int CALL_STACK_INDEX = 5; // Changes require major version bump!!!
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
-    private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<String>();
+    private static final ThreadLocal<String> EXPLICIT_TAG = new ThreadLocal<String>();
 
     @Override public final void tag(String tag) {
-      NEXT_TAG.set(tag);
+      EXPLICIT_TAG.set(tag);
     }
 
     /**
      * Returns an explicitly set tag for the next log message or {@code null}. Calling this method
      * clears any set tag so it may only be called once.
      */
-    protected final String nextTag() {
-      String tag = NEXT_TAG.get();
+    protected final String readExplicitTag() {
+      String tag = EXPLICIT_TAG.get();
       if (tag != null) {
-        NEXT_TAG.remove();
+        EXPLICIT_TAG.remove();
       }
       return tag;
     }
@@ -293,15 +294,15 @@ public final class Timber {
     /**
      * Creates a tag for a log message.
      * <p>
-     * By default this method will check {@link #nextTag()} for an explicit tag. If there is no
-     * explicit tag, the class name of the caller will be used by inspecting the stack trace of the
-     * current thread.
+     * By default this method will first check for an {@linkplain #readExplicitTag() explicit tag}.
+     * If none is found, a tag will be {@linkplain #createStackElementTag(StackTraceElement)
+     * created} by looking at the call stack elements.
      * <p>
-     * Note: Do not call {@code super.createTag()} if you override this method. It will produce
+     * Note: Do not call {@code super.getTag()} if you override this method. It will produce
      * incorrect results.
      */
-    protected String createTag() {
-      String tag = nextTag();
+    protected String getTag() {
+      String tag = readExplicitTag();
       if (tag != null) {
         return tag;
       }
@@ -309,11 +310,22 @@ public final class Timber {
       // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
       // because Robolectric runs them on the JVM but on Android the elements are different.
       StackTraceElement[] stackTrace = new Throwable().getStackTrace();
-      if (stackTrace.length < 6) {
+      if (stackTrace.length <= CALL_STACK_INDEX) {
         throw new IllegalStateException(
             ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
       }
-      tag = stackTrace[5].getClassName();
+      return createStackElementTag(stackTrace[CALL_STACK_INDEX]);
+    }
+
+    /**
+     * Extract the tag which should be used for the message from the {@code element}. By default
+     * this will use the class name without any anonymous class suffixes (e.g., {@code Foo$1}
+     * becomes {@code Foo}).
+     * <p>
+     * Note: This will not be called if a {@linkplain #tag(String) manual tag} was specified.
+     */
+    protected String createStackElementTag(StackTraceElement element) {
+      String tag = element.getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");
@@ -384,7 +396,7 @@ public final class Timber {
         message += ""\n"" + Log.getStackTraceString(t);
       }
 
-      String tag = createTag();
+      String tag = getTag();
       logMessage(priority, tag, message);
     }","@@ -271,21 +271,22 @@ public final class Timber {
   /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
   public static class DebugTree implements TaggedTree {
     private static final int MAX_LOG_LENGTH = 4000;
+    private static final int CALL_STACK_INDEX = 5; // Changes require major version bump!!!
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
-    private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<String>();
+    private static final ThreadLocal<String> EXPLICIT_TAG = new ThreadLocal<String>();
 
     @Override public final void tag(String tag) {
-      NEXT_TAG.set(tag);
+      EXPLICIT_TAG.set(tag);
     }
 
     /**
      * Returns an explicitly set tag for the next log message or {@code null}. Calling this method
      * clears any set tag so it may only be called once.
      */
-    protected final String nextTag() {
-      String tag = NEXT_TAG.get();
+    protected final String readExplicitTag() {
+      String tag = EXPLICIT_TAG.get();
       if (tag != null) {
-        NEXT_TAG.remove();
+        EXPLICIT_TAG.remove();
       }
       return tag;
     }
@@ -293,15 +294,15 @@ public final class Timber {
     /**
      * Creates a tag for a log message.
      * <p>
-     * By default this method will check {@link #nextTag()} for an explicit tag. If there is no
-     * explicit tag, the class name of the caller will be used by inspecting the stack trace of the
-     * current thread.
+     * By default this method will first check for an {@linkplain #readExplicitTag() explicit tag}.
+     * If none is found, a tag will be {@linkplain #createStackElementTag(StackTraceElement)
+     * created} by looking at the call stack elements.
      * <p>
-     * Note: Do not call {@code super.createTag()} if you override this method. It will produce
+     * Note: Do not call {@code super.getTag()} if you override this method. It will produce
      * incorrect results.
      */
-    protected String createTag() {
-      String tag = nextTag();
+    protected String getTag() {
+      String tag = readExplicitTag();
       if (tag != null) {
         return tag;
       }
@@ -309,11 +310,22 @@ public final class Timber {
       // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
       // because Robolectric runs them on the JVM but on Android the elements are different.
       StackTraceElement[] stackTrace = new Throwable().getStackTrace();
-      if (stackTrace.length < 6) {
+      if (stackTrace.length <= CALL_STACK_INDEX) {
         throw new IllegalStateException(
             ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
       }
-      tag = stackTrace[5].getClassName();
+      return createStackElementTag(stackTrace[CALL_STACK_INDEX]);
+    }
+
+    /**
+     * Extract the tag which should be used for the message from the {@code element}. By default
+     * this will use the class name without any anonymous class suffixes (e.g., {@code Foo$1}
+     * becomes {@code Foo}).
+     * <p>
+     * Note: This will not be called if a {@linkplain #tag(String) manual tag} was specified.
+     */
+    protected String createStackElementTag(StackTraceElement element) {
+      String tag = element.getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
         tag = m.replaceAll("""");
@@ -384,7 +396,7 @@ public final class Timber {
         message += ""\n"" + Log.getStackTraceString(t);
       }
 
-      String tag = createTag();
+      String tag = getTag();
       logMessage(priority, tag, message);
     }",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,88a508f0d86e14cd7f6b59fdef726b448411d23b,954f46afc0ea049b485c6c3ad9c3af781892f144,Add hook to alter stack element created tag.,"@@ -126,7 +126,7 @@ public class TimberTest {
 
   @Test public void debugTreeCustomTagCreation() {
     Timber.plant(new Timber.DebugTree() {
-      @Override protected String createTag() {
+      @Override protected String getTag() {
         return ""Override"";
       }
     });
@@ -141,17 +141,34 @@ public class TimberTest {
     assertThat(log.throwable).isNull();
   }
 
-  @Test public void debugTreeCustomTagCreationCanUseNextTag() {
-    final AtomicReference<String> nextTagRef = new AtomicReference<String>();
+  @Test public void debugTreeCustomTagCreationCanUseExplicitTag() {
+    final AtomicReference<String> explicitTagRef = new AtomicReference<String>();
     Timber.plant(new Timber.DebugTree() {
-      @Override protected String createTag() {
-        nextTagRef.set(nextTag());
+      @Override protected String getTag() {
+        explicitTagRef.set(readExplicitTag());
         return ""Override"";
       }
     });
     Timber.tag(""Custom"").d(""Hello, world!"");
 
-    assertThat(nextTagRef.get()).isEqualTo(""Custom"");
+    assertThat(explicitTagRef.get()).isEqualTo(""Custom"");
+  }
+
+  @Test public void debugTreeCanAlterCreatedTag() {
+    final AtomicReference<String> tagRef = new AtomicReference<String>();
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected String createStackElementTag(StackTraceElement element) {
+        return super.createStackElementTag(element) + ':' + element.getLineNumber();
+      }
+
+      @Override protected void logMessage(int priority, String tag, String message) {
+        tagRef.set(tag);
+      }
+    });
+
+    Timber.d(""Test"");
+
+    assertThat(tagRef.get()).isEqualTo(""TimberTest:169"");
   }
 
   @Test public void messageWithException() {","@@ -126,7 +126,7 @@ public class TimberTest {
 
   @Test public void debugTreeCustomTagCreation() {
     Timber.plant(new Timber.DebugTree() {
-      @Override protected String createTag() {
+      @Override protected String getTag() {
         return ""Override"";
       }
     });
@@ -141,17 +141,34 @@ public class TimberTest {
     assertThat(log.throwable).isNull();
   }
 
-  @Test public void debugTreeCustomTagCreationCanUseNextTag() {
-    final AtomicReference<String> nextTagRef = new AtomicReference<String>();
+  @Test public void debugTreeCustomTagCreationCanUseExplicitTag() {
+    final AtomicReference<String> explicitTagRef = new AtomicReference<String>();
     Timber.plant(new Timber.DebugTree() {
-      @Override protected String createTag() {
-        nextTagRef.set(nextTag());
+      @Override protected String getTag() {
+        explicitTagRef.set(readExplicitTag());
         return ""Override"";
       }
     });
     Timber.tag(""Custom"").d(""Hello, world!"");
 
-    assertThat(nextTagRef.get()).isEqualTo(""Custom"");
+    assertThat(explicitTagRef.get()).isEqualTo(""Custom"");
+  }
+
+  @Test public void debugTreeCanAlterCreatedTag() {
+    final AtomicReference<String> tagRef = new AtomicReference<String>();
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected String createStackElementTag(StackTraceElement element) {
+        return super.createStackElementTag(element) + ':' + element.getLineNumber();
+      }
+
+      @Override protected void logMessage(int priority, String tag, String message) {
+        tagRef.set(tag);
+      }
+    });
+
+    Timber.d(""Test"");
+
+    assertThat(tagRef.get()).isEqualTo(""TimberTest:169"");
   }
 
   @Test public void messageWithException() {",False,test
pom.xml,pom.xml,7a95f20b8cfbaa5477adbb24af8ba0e97ce559d2,88a508f0d86e14cd7f6b59fdef726b448411d23b,"Major architectural changes... for a single-class logging library.

* All trees are now taggable.
* Provide a single method through which all level-specific methods log.
* Eliminate the need for HollowTree.","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.7.2-SNAPSHOT</version>
+  <version>3.0.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>2.7.2-SNAPSHOT</version>
+  <version>3.0.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,7a95f20b8cfbaa5477adbb24af8ba0e97ce559d2,88a508f0d86e14cd7f6b59fdef726b448411d23b,"Major architectural changes... for a single-class logging library.

* All trees are now taggable.
* Provide a single method through which all level-specific methods log.
* Eliminate the need for HollowTree.","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.2-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.2-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,7a95f20b8cfbaa5477adbb24af8ba0e97ce559d2,88a508f0d86e14cd7f6b59fdef726b448411d23b,"Major architectural changes... for a single-class logging library.

* All trees are now taggable.
* Provide a single method through which all level-specific methods log.
* Eliminate the need for HollowTree.","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.2-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.2-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber-sample/src/main/java/com/example/timber/ExampleApp.java,timber-sample/src/main/java/com/example/timber/ExampleApp.java,7a95f20b8cfbaa5477adbb24af8ba0e97ce559d2,88a508f0d86e14cd7f6b59fdef726b448411d23b,"Major architectural changes... for a single-class logging library.

* All trees are now taggable.
* Provide a single method through which all level-specific methods log.
* Eliminate the need for HollowTree.","@@ -1,6 +1,7 @@
 package com.example.timber;
 
 import android.app.Application;
+import android.util.Log;
 import timber.log.Timber;
 
 import static timber.log.Timber.DebugTree;
@@ -17,23 +18,21 @@ public class ExampleApp extends Application {
   }
 
   /** A tree which logs important information for crash reporting. */
-  private static class CrashReportingTree extends Timber.HollowTree {
-    @Override public void i(String message, Object... args) {
-      // TODO e.g., Crashlytics.log(String.format(message, args));
-    }
-
-    @Override public void i(Throwable t, String message, Object... args) {
-      i(message, args); // Just add to the log.
-    }
-
-    @Override public void e(String message, Object... args) {
-      i(""ERROR: "" + message, args); // Just add to the log.
-    }
-
-    @Override public void e(Throwable t, String message, Object... args) {
-      e(message, args);
-
-      // TODO e.g., Crashlytics.logException(t);
+  private static class CrashReportingTree extends Timber.Tree {
+    @Override protected void log(int priority, String tag, String message, Throwable t) {
+      if (priority == Log.VERBOSE || priority == Log.DEBUG) {
+        return;
+      }
+
+      FakeCrashLibrary.log(priority, tag, message);
+
+      if (t != null) {
+        if (priority == Log.ERROR) {
+          FakeCrashLibrary.logError(t);
+        } else if (priority == Log.WARN) {
+          FakeCrashLibrary.logWarning(t);
+        }
+      }
     }
   }
 }","@@ -1,6 +1,7 @@
 package com.example.timber;
 
 import android.app.Application;
+import android.util.Log;
 import timber.log.Timber;
 
 import static timber.log.Timber.DebugTree;
@@ -17,23 +18,21 @@ public class ExampleApp extends Application {
   }
 
   /** A tree which logs important information for crash reporting. */
-  private static class CrashReportingTree extends Timber.HollowTree {
-    @Override public void i(String message, Object... args) {
-      // TODO e.g., Crashlytics.log(String.format(message, args));
-    }
-
-    @Override public void i(Throwable t, String message, Object... args) {
-      i(message, args); // Just add to the log.
-    }
-
-    @Override public void e(String message, Object... args) {
-      i(""ERROR: "" + message, args); // Just add to the log.
-    }
-
-    @Override public void e(Throwable t, String message, Object... args) {
-      e(message, args);
-
-      // TODO e.g., Crashlytics.logException(t);
+  private static class CrashReportingTree extends Timber.Tree {
+    @Override protected void log(int priority, String tag, String message, Throwable t) {
+      if (priority == Log.VERBOSE || priority == Log.DEBUG) {
+        return;
+      }
+
+      FakeCrashLibrary.log(priority, tag, message);
+
+      if (t != null) {
+        if (priority == Log.ERROR) {
+          FakeCrashLibrary.logError(t);
+        } else if (priority == Log.WARN) {
+          FakeCrashLibrary.logWarning(t);
+        }
+      }
     }
   }
 }",False,source
,timber-sample/src/main/java/com/example/timber/FakeCrashLibrary.java,7a95f20b8cfbaa5477adbb24af8ba0e97ce559d2,88a508f0d86e14cd7f6b59fdef726b448411d23b,"Major architectural changes... for a single-class logging library.

* All trees are now taggable.
* Provide a single method through which all level-specific methods log.
* Eliminate the need for HollowTree.","@@ -0,0 +1,20 @@
+package com.example.timber;
+
+/** Not a real crash reporting library! */
+public final class FakeCrashLibrary {
+  public static void log(int priority, String tag, String message) {
+    // TODO add log entry to circular buffer.
+  }
+
+  public static void logWarning(Throwable t) {
+    // TODO report non-fatal warning.
+  }
+
+  public static void logError(Throwable t) {
+    // TODO report non-fatal error.
+  }
+
+  private FakeCrashLibrary() {
+    throw new AssertionError(""No instances."");
+  }
+}","@@ -0,0 +1,20 @@
+package com.example.timber;
+
+/** Not a real crash reporting library! */
+public final class FakeCrashLibrary {
+  public static void log(int priority, String tag, String message) {
+    // TODO add log entry to circular buffer.
+  }
+
+  public static void logWarning(Throwable t) {
+    // TODO report non-fatal warning.
+  }
+
+  public static void logError(Throwable t) {
+    // TODO report non-fatal error.
+  }
+
+  private FakeCrashLibrary() {
+    throw new AssertionError(""No instances."");
+  }
+}",False,source
timber/pom.xml,timber/pom.xml,7a95f20b8cfbaa5477adbb24af8ba0e97ce559d2,88a508f0d86e14cd7f6b59fdef726b448411d23b,"Major architectural changes... for a single-class logging library.

* All trees are now taggable.
* Provide a single method through which all level-specific methods log.
* Eliminate the need for HollowTree.","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.2-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>2.7.2-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,7a95f20b8cfbaa5477adbb24af8ba0e97ce559d2,88a508f0d86e14cd7f6b59fdef726b448411d23b,"Major architectural changes... for a single-class logging library.

* All trees are now taggable.
* Provide a single method through which all level-specific methods log.
* Eliminate the need for HollowTree.","@@ -1,7 +1,6 @@
 package timber.log;
 
 import android.util.Log;
-import android.util.SparseBooleanArray;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.regex.Matcher;
@@ -79,8 +78,10 @@ public final class Timber {
 
   /** Set a one-time tag for use on the next logging call. */
   public static Tree tag(String tag) {
-    for (int index = 0, size = TAGGED_TREES.size(); index < size; index++) {
-      ((TaggedTree) FOREST.get(TAGGED_TREES.keyAt(index))).tag(tag);
+    List<Tree> forest = FOREST;
+    //noinspection ForLoopReplaceableByForEach
+    for (int i = 0, count = forest.size(); i < count; i++) {
+      forest.get(i).explicitTag.set(tag);
     }
     return TREE_OF_SOULS;
   }
@@ -93,34 +94,24 @@ public final class Timber {
     if (tree == TREE_OF_SOULS) {
       throw new IllegalArgumentException(""Cannot plant Timber into itself."");
     }
-    if (tree instanceof TaggedTree) {
-      TAGGED_TREES.append(FOREST.size(), true);
-    }
     FOREST.add(tree);
   }
 
   /** Remove a planted tree. */
   public static void uproot(Tree tree) {
-    for (int i = 0, size = FOREST.size(); i < size; i++) {
-      if (FOREST.get(i) == tree) {
-        TAGGED_TREES.delete(i);
-        FOREST.remove(i);
-        return;
-      }
+    if (!FOREST.remove(tree)) {
+      throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
     }
-    throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
   }
 
   /** Remove all planted trees. */
   public static void uprootAll() {
-    TAGGED_TREES.clear();
     FOREST.clear();
   }
 
-  static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
-  static final SparseBooleanArray TAGGED_TREES = new SparseBooleanArray();
+  private static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
 
-  /** A {@link Tree} that delegates to all planted trees in the {@link #FOREST forest}. */
+  /** A {@link Tree} that delegates to all planted trees in the {@linkplain #FOREST forest}. */
   private static final Tree TREE_OF_SOULS = new Tree() {
     @Override public void v(String message, Object... args) {
       List<Tree> forest = FOREST;
@@ -217,105 +208,123 @@ public final class Timber {
         forest.get(i).wtf(t, message, args);
       }
     }
+
+    @Override protected void log(int priority, String tag, String message, Throwable t) {
+      throw new AssertionError(""Missing override for log method."");
+    }
   };
 
   private Timber() {
     throw new AssertionError(""No instances."");
   }
 
-  /** A facade for handling logging calls. Install instances via {@link #plant}. */
-  public interface Tree {
+  /** A facade for handling logging calls. Install instances via {@link #plant Timber.plant()}. */
+  public static abstract class Tree {
+    private final ThreadLocal<String> explicitTag = new ThreadLocal<String>();
+
+    String getTag() {
+      String tag = explicitTag.get();
+      if (tag != null) {
+        explicitTag.remove();
+      }
+      return tag;
+    }
+
     /** Log a verbose message with optional format args. */
-    void v(String message, Object... args);
+    public void v(String message, Object... args) {
+      prepareLog(Log.VERBOSE, null, message, args);
+    }
 
     /** Log a verbose exception and a message with optional format args. */
-    void v(Throwable t, String message, Object... args);
+    public void v(Throwable t, String message, Object... args) {
+      prepareLog(Log.VERBOSE, t, message, args);
+    }
 
     /** Log a debug message with optional format args. */
-    void d(String message, Object... args);
+    public void d(String message, Object... args) {
+      prepareLog(Log.DEBUG, null, message, args);
+    }
 
     /** Log a debug exception and a message with optional format args. */
-    void d(Throwable t, String message, Object... args);
+    public void d(Throwable t, String message, Object... args) {
+      prepareLog(Log.DEBUG, t, message, args);
+    }
 
     /** Log an info message with optional format args. */
-    void i(String message, Object... args);
+    public void i(String message, Object... args) {
+      prepareLog(Log.INFO, null, message, args);
+    }
 
     /** Log an info exception and a message with optional format args. */
-    void i(Throwable t, String message, Object... args);
+    public void i(Throwable t, String message, Object... args) {
+      prepareLog(Log.INFO, t, message, args);
+    }
 
     /** Log a warning message with optional format args. */
-    void w(String message, Object... args);
+    public void w(String message, Object... args) {
+      prepareLog(Log.WARN, null, message, args);
+    }
 
     /** Log a warning exception and a message with optional format args. */
-    void w(Throwable t, String message, Object... args);
+    public void w(Throwable t, String message, Object... args) {
+      prepareLog(Log.WARN, t, message, args);
+    }
 
     /** Log an error message with optional format args. */
-    void e(String message, Object... args);
+    public void e(String message, Object... args) {
+      prepareLog(Log.ERROR, null, message, args);
+    }
 
     /** Log an error exception and a message with optional format args. */
-    void e(Throwable t, String message, Object... args);
+    public void e(Throwable t, String message, Object... args) {
+      prepareLog(Log.ERROR, t, message, args);
+    }
 
     /** Log an assert message with optional format args. */
-    void wtf(String message, Object... args);
+    public void wtf(String message, Object... args) {
+      prepareLog(Log.ASSERT, null, message, args);
+    }
 
     /** Log an assert exception and a message with optional format args. */
-    void wtf(Throwable t, String message, Object... args);
-  }
-
-  /** A facade for attaching tags to logging calls. Install instances via {@link #plant} */
-  public interface TaggedTree extends Tree {
-    /** Set a one-time tag for use on the next logging call. */
-    void tag(String tag);
-  }
-
-  /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
-  public static class DebugTree implements TaggedTree {
-    private static final int MAX_LOG_LENGTH = 4000;
-    private static final int CALL_STACK_INDEX = 5; // Changes require major version bump!!!
-    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
-    private static final ThreadLocal<String> EXPLICIT_TAG = new ThreadLocal<String>();
-
-    @Override public final void tag(String tag) {
-      EXPLICIT_TAG.set(tag);
+    public void wtf(Throwable t, String message, Object... args) {
+      prepareLog(Log.ASSERT, t, message, args);
     }
 
-    /**
-     * Returns an explicitly set tag for the next log message or {@code null}. Calling this method
-     * clears any set tag so it may only be called once.
-     */
-    protected final String readExplicitTag() {
-      String tag = EXPLICIT_TAG.get();
-      if (tag != null) {
-        EXPLICIT_TAG.remove();
+    private void prepareLog(int priority, Throwable t, String message, Object... args) {
+      if (message != null && message.length() == 0) {
+        message = null;
       }
-      return tag;
+      if (message == null) {
+        if (t == null) {
+          return; // Swallow message if it's null and there's no throwable.
+        }
+        message = Log.getStackTraceString(t);
+      } else if (t != null) {
+        if (args.length > 0) {
+          message = String.format(message, args);
+        }
+        message += ""\n"" + Log.getStackTraceString(t);
+      }
+
+      log(priority, getTag(), message, t);
     }
 
     /**
-     * Creates a tag for a log message.
-     * <p>
-     * By default this method will first check for an {@linkplain #readExplicitTag() explicit tag}.
-     * If none is found, a tag will be {@linkplain #createStackElementTag(StackTraceElement)
-     * created} by looking at the call stack elements.
-     * <p>
-     * Note: Do not call {@code super.getTag()} if you override this method. It will produce
-     * incorrect results.
+     * Write a log message to its destination. Called for all level-specific methods by default.
+     *
+     * @param priority Log level. See {@link Log} for constants.
+     * @param tag Explicit or inferred tag. May be {@code null}.
+     * @param message Formatted log message. May be {@code null}, but then {@code t} will not be.
+     * @param t Accompanying exceptions. May be {@code null}, but then {@code message} will not be.
      */
-    protected String getTag() {
-      String tag = readExplicitTag();
-      if (tag != null) {
-        return tag;
-      }
+    protected abstract void log(int priority, String tag, String message, Throwable t);
+  }
 
-      // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
-      // because Robolectric runs them on the JVM but on Android the elements are different.
-      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
-      if (stackTrace.length <= CALL_STACK_INDEX) {
-        throw new IllegalStateException(
-            ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
-      }
-      return createStackElementTag(stackTrace[CALL_STACK_INDEX]);
-    }
+  /** A {@link Tree Tree} for debug builds. Automatically infers the tag from the calling class. */
+  public static class DebugTree extends Tree {
+    private static final int MAX_LOG_LENGTH = 4000;
+    private static final int CALL_STACK_INDEX = 5;
+    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
 
     /**
      * Extract the tag which should be used for the message from the {@code element}. By default
@@ -333,75 +342,30 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
-    private static String maybeFormat(String message, Object... args) {
-      // If no varargs are supplied, treat it as a request to log the string without formatting.
-      return args.length == 0 ? message : String.format(message, args);
-    }
-
-    @Override public final void v(String message, Object... args) {
-      throwShade(Log.VERBOSE, maybeFormat(message, args), null);
-    }
-
-    @Override public final void v(Throwable t, String message, Object... args) {
-      throwShade(Log.VERBOSE, maybeFormat(message, args), t);
-    }
-
-    @Override public final void d(String message, Object... args) {
-      throwShade(Log.DEBUG, maybeFormat(message, args), null);
-    }
-
-    @Override public final void d(Throwable t, String message, Object... args) {
-      throwShade(Log.DEBUG, maybeFormat(message, args), t);
-    }
-
-    @Override public final void i(String message, Object... args) {
-      throwShade(Log.INFO, maybeFormat(message, args), null);
-    }
-
-    @Override public final void i(Throwable t, String message, Object... args) {
-      throwShade(Log.INFO, maybeFormat(message, args), t);
-    }
-
-    @Override public final void w(String message, Object... args) {
-      throwShade(Log.WARN, maybeFormat(message, args), null);
-    }
-
-    @Override public final void w(Throwable t, String message, Object... args) {
-      throwShade(Log.WARN, maybeFormat(message, args), t);
-    }
-
-    @Override public final void e(String message, Object... args) {
-      throwShade(Log.ERROR, maybeFormat(message, args), null);
-    }
-
-    @Override public final void e(Throwable t, String message, Object... args) {
-      throwShade(Log.ERROR, maybeFormat(message, args), t);
-    }
-
-    @Override public final void wtf(String message, Object... args) {
-      throwShade(Log.ASSERT, maybeFormat(message, args), null);
-    }
-
-    @Override public final void wtf(Throwable t, String message, Object... args) {
-      throwShade(Log.ASSERT, maybeFormat(message, args), t);
-    }
-
-    private void throwShade(int priority, String message, Throwable t) {
-      if (message == null || message.length() == 0) {
-        if (t == null) {
-          return; // Swallow message if it's null and there's no throwable.
-        }
-        message = Log.getStackTraceString(t);
-      } else if (t != null) {
-        message += ""\n"" + Log.getStackTraceString(t);
+    @Override final String getTag() {
+      String tag = super.getTag();
+      if (tag != null) {
+        return tag;
       }
 
-      String tag = getTag();
-      logMessage(priority, tag, message);
+      // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
+      // because Robolectric runs them on the JVM but on Android the elements are different.
+      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
+      if (stackTrace.length <= CALL_STACK_INDEX) {
+        throw new IllegalStateException(
+            ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
+      }
+      return createStackElementTag(stackTrace[CALL_STACK_INDEX]);
     }
 
-    /** Log a message! */
-    protected void logMessage(int priority, String tag, String message) {
+    /**
+     * Break up {@code message} into maximum-length chunks (if needed) and send to either
+     * {@link Log#println(int, String, String) Log.println()} or
+     * {@link Log#wtf(String, String) Log.wtf()} for logging.
+     *
+     * {@inheritDoc}
+     */
+    @Override protected void log(int priority, String tag, String message, Throwable t) {
       if (message.length() < MAX_LOG_LENGTH) {
         if (priority == Log.ASSERT) {
           Log.wtf(tag, message);
@@ -428,43 +392,4 @@ public final class Timber {
       }
     }
   }
-
-  /** A {@link Tree} which does nothing. Useful for extending. */
-  public static class HollowTree implements Tree {
-    @Override public void v(String message, Object... args) {
-    }
-
-    @Override public void v(Throwable t, String message, Object... args) {
-    }
-
-    @Override public void d(String message, Object... args) {
-    }
-
-    @Override public void d(Throwable t, String message, Object... args) {
-    }
-
-    @Override public void i(String message, Object... args) {
-    }
-
-    @Override public void i(Throwable t, String message, Object... args) {
-    }
-
-    @Override public void w(String message, Object... args) {
-    }
-
-    @Override public void w(Throwable t, String message, Object... args) {
-    }
-
-    @Override public void e(String message, Object... args) {
-    }
-
-    @Override public void e(Throwable t, String message, Object... args) {
-    }
-
-    @Override public void wtf(String message, Object... args) {
-    }
-
-    @Override public void wtf(Throwable t, String message, Object... args) {
-    }
-  }
 }","@@ -1,7 +1,6 @@
 package timber.log;
 
 import android.util.Log;
-import android.util.SparseBooleanArray;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.regex.Matcher;
@@ -79,8 +78,10 @@ public final class Timber {
 
   /** Set a one-time tag for use on the next logging call. */
   public static Tree tag(String tag) {
-    for (int index = 0, size = TAGGED_TREES.size(); index < size; index++) {
-      ((TaggedTree) FOREST.get(TAGGED_TREES.keyAt(index))).tag(tag);
+    List<Tree> forest = FOREST;
+    //noinspection ForLoopReplaceableByForEach
+    for (int i = 0, count = forest.size(); i < count; i++) {
+      forest.get(i).explicitTag.set(tag);
     }
     return TREE_OF_SOULS;
   }
@@ -93,34 +94,24 @@ public final class Timber {
     if (tree == TREE_OF_SOULS) {
       throw new IllegalArgumentException(""Cannot plant Timber into itself."");
     }
-    if (tree instanceof TaggedTree) {
-      TAGGED_TREES.append(FOREST.size(), true);
-    }
     FOREST.add(tree);
   }
 
   /** Remove a planted tree. */
   public static void uproot(Tree tree) {
-    for (int i = 0, size = FOREST.size(); i < size; i++) {
-      if (FOREST.get(i) == tree) {
-        TAGGED_TREES.delete(i);
-        FOREST.remove(i);
-        return;
-      }
+    if (!FOREST.remove(tree)) {
+      throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
     }
-    throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
   }
 
   /** Remove all planted trees. */
   public static void uprootAll() {
-    TAGGED_TREES.clear();
     FOREST.clear();
   }
 
-  static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
-  static final SparseBooleanArray TAGGED_TREES = new SparseBooleanArray();
+  private static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
 
-  /** A {@link Tree} that delegates to all planted trees in the {@link #FOREST forest}. */
+  /** A {@link Tree} that delegates to all planted trees in the {@linkplain #FOREST forest}. */
   private static final Tree TREE_OF_SOULS = new Tree() {
     @Override public void v(String message, Object... args) {
       List<Tree> forest = FOREST;
@@ -217,105 +208,123 @@ public final class Timber {
         forest.get(i).wtf(t, message, args);
       }
     }
+
+    @Override protected void log(int priority, String tag, String message, Throwable t) {
+      throw new AssertionError(""Missing override for log method."");
+    }
   };
 
   private Timber() {
     throw new AssertionError(""No instances."");
   }
 
-  /** A facade for handling logging calls. Install instances via {@link #plant}. */
-  public interface Tree {
+  /** A facade for handling logging calls. Install instances via {@link #plant Timber.plant()}. */
+  public static abstract class Tree {
+    private final ThreadLocal<String> explicitTag = new ThreadLocal<String>();
+
+    String getTag() {
+      String tag = explicitTag.get();
+      if (tag != null) {
+        explicitTag.remove();
+      }
+      return tag;
+    }
+
     /** Log a verbose message with optional format args. */
-    void v(String message, Object... args);
+    public void v(String message, Object... args) {
+      prepareLog(Log.VERBOSE, null, message, args);
+    }
 
     /** Log a verbose exception and a message with optional format args. */
-    void v(Throwable t, String message, Object... args);
+    public void v(Throwable t, String message, Object... args) {
+      prepareLog(Log.VERBOSE, t, message, args);
+    }
 
     /** Log a debug message with optional format args. */
-    void d(String message, Object... args);
+    public void d(String message, Object... args) {
+      prepareLog(Log.DEBUG, null, message, args);
+    }
 
     /** Log a debug exception and a message with optional format args. */
-    void d(Throwable t, String message, Object... args);
+    public void d(Throwable t, String message, Object... args) {
+      prepareLog(Log.DEBUG, t, message, args);
+    }
 
     /** Log an info message with optional format args. */
-    void i(String message, Object... args);
+    public void i(String message, Object... args) {
+      prepareLog(Log.INFO, null, message, args);
+    }
 
     /** Log an info exception and a message with optional format args. */
-    void i(Throwable t, String message, Object... args);
+    public void i(Throwable t, String message, Object... args) {
+      prepareLog(Log.INFO, t, message, args);
+    }
 
     /** Log a warning message with optional format args. */
-    void w(String message, Object... args);
+    public void w(String message, Object... args) {
+      prepareLog(Log.WARN, null, message, args);
+    }
 
     /** Log a warning exception and a message with optional format args. */
-    void w(Throwable t, String message, Object... args);
+    public void w(Throwable t, String message, Object... args) {
+      prepareLog(Log.WARN, t, message, args);
+    }
 
     /** Log an error message with optional format args. */
-    void e(String message, Object... args);
+    public void e(String message, Object... args) {
+      prepareLog(Log.ERROR, null, message, args);
+    }
 
     /** Log an error exception and a message with optional format args. */
-    void e(Throwable t, String message, Object... args);
+    public void e(Throwable t, String message, Object... args) {
+      prepareLog(Log.ERROR, t, message, args);
+    }
 
     /** Log an assert message with optional format args. */
-    void wtf(String message, Object... args);
+    public void wtf(String message, Object... args) {
+      prepareLog(Log.ASSERT, null, message, args);
+    }
 
     /** Log an assert exception and a message with optional format args. */
-    void wtf(Throwable t, String message, Object... args);
-  }
-
-  /** A facade for attaching tags to logging calls. Install instances via {@link #plant} */
-  public interface TaggedTree extends Tree {
-    /** Set a one-time tag for use on the next logging call. */
-    void tag(String tag);
-  }
-
-  /** A {@link Tree} for debug builds. Automatically infers the tag from the calling class. */
-  public static class DebugTree implements TaggedTree {
-    private static final int MAX_LOG_LENGTH = 4000;
-    private static final int CALL_STACK_INDEX = 5; // Changes require major version bump!!!
-    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
-    private static final ThreadLocal<String> EXPLICIT_TAG = new ThreadLocal<String>();
-
-    @Override public final void tag(String tag) {
-      EXPLICIT_TAG.set(tag);
+    public void wtf(Throwable t, String message, Object... args) {
+      prepareLog(Log.ASSERT, t, message, args);
     }
 
-    /**
-     * Returns an explicitly set tag for the next log message or {@code null}. Calling this method
-     * clears any set tag so it may only be called once.
-     */
-    protected final String readExplicitTag() {
-      String tag = EXPLICIT_TAG.get();
-      if (tag != null) {
-        EXPLICIT_TAG.remove();
+    private void prepareLog(int priority, Throwable t, String message, Object... args) {
+      if (message != null && message.length() == 0) {
+        message = null;
       }
-      return tag;
+      if (message == null) {
+        if (t == null) {
+          return; // Swallow message if it's null and there's no throwable.
+        }
+        message = Log.getStackTraceString(t);
+      } else if (t != null) {
+        if (args.length > 0) {
+          message = String.format(message, args);
+        }
+        message += ""\n"" + Log.getStackTraceString(t);
+      }
+
+      log(priority, getTag(), message, t);
     }
 
     /**
-     * Creates a tag for a log message.
-     * <p>
-     * By default this method will first check for an {@linkplain #readExplicitTag() explicit tag}.
-     * If none is found, a tag will be {@linkplain #createStackElementTag(StackTraceElement)
-     * created} by looking at the call stack elements.
-     * <p>
-     * Note: Do not call {@code super.getTag()} if you override this method. It will produce
-     * incorrect results.
+     * Write a log message to its destination. Called for all level-specific methods by default.
+     *
+     * @param priority Log level. See {@link Log} for constants.
+     * @param tag Explicit or inferred tag. May be {@code null}.
+     * @param message Formatted log message. May be {@code null}, but then {@code t} will not be.
+     * @param t Accompanying exceptions. May be {@code null}, but then {@code message} will not be.
      */
-    protected String getTag() {
-      String tag = readExplicitTag();
-      if (tag != null) {
-        return tag;
-      }
+    protected abstract void log(int priority, String tag, String message, Throwable t);
+  }
 
-      // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
-      // because Robolectric runs them on the JVM but on Android the elements are different.
-      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
-      if (stackTrace.length <= CALL_STACK_INDEX) {
-        throw new IllegalStateException(
-            ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
-      }
-      return createStackElementTag(stackTrace[CALL_STACK_INDEX]);
-    }
+  /** A {@link Tree Tree} for debug builds. Automatically infers the tag from the calling class. */
+  public static class DebugTree extends Tree {
+    private static final int MAX_LOG_LENGTH = 4000;
+    private static final int CALL_STACK_INDEX = 5;
+    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
 
     /**
      * Extract the tag which should be used for the message from the {@code element}. By default
@@ -333,75 +342,30 @@ public final class Timber {
       return tag.substring(tag.lastIndexOf('.') + 1);
     }
 
-    private static String maybeFormat(String message, Object... args) {
-      // If no varargs are supplied, treat it as a request to log the string without formatting.
-      return args.length == 0 ? message : String.format(message, args);
-    }
-
-    @Override public final void v(String message, Object... args) {
-      throwShade(Log.VERBOSE, maybeFormat(message, args), null);
-    }
-
-    @Override public final void v(Throwable t, String message, Object... args) {
-      throwShade(Log.VERBOSE, maybeFormat(message, args), t);
-    }
-
-    @Override public final void d(String message, Object... args) {
-      throwShade(Log.DEBUG, maybeFormat(message, args), null);
-    }
-
-    @Override public final void d(Throwable t, String message, Object... args) {
-      throwShade(Log.DEBUG, maybeFormat(message, args), t);
-    }
-
-    @Override public final void i(String message, Object... args) {
-      throwShade(Log.INFO, maybeFormat(message, args), null);
-    }
-
-    @Override public final void i(Throwable t, String message, Object... args) {
-      throwShade(Log.INFO, maybeFormat(message, args), t);
-    }
-
-    @Override public final void w(String message, Object... args) {
-      throwShade(Log.WARN, maybeFormat(message, args), null);
-    }
-
-    @Override public final void w(Throwable t, String message, Object... args) {
-      throwShade(Log.WARN, maybeFormat(message, args), t);
-    }
-
-    @Override public final void e(String message, Object... args) {
-      throwShade(Log.ERROR, maybeFormat(message, args), null);
-    }
-
-    @Override public final void e(Throwable t, String message, Object... args) {
-      throwShade(Log.ERROR, maybeFormat(message, args), t);
-    }
-
-    @Override public final void wtf(String message, Object... args) {
-      throwShade(Log.ASSERT, maybeFormat(message, args), null);
-    }
-
-    @Override public final void wtf(Throwable t, String message, Object... args) {
-      throwShade(Log.ASSERT, maybeFormat(message, args), t);
-    }
-
-    private void throwShade(int priority, String message, Throwable t) {
-      if (message == null || message.length() == 0) {
-        if (t == null) {
-          return; // Swallow message if it's null and there's no throwable.
-        }
-        message = Log.getStackTraceString(t);
-      } else if (t != null) {
-        message += ""\n"" + Log.getStackTraceString(t);
+    @Override final String getTag() {
+      String tag = super.getTag();
+      if (tag != null) {
+        return tag;
       }
 
-      String tag = getTag();
-      logMessage(priority, tag, message);
+      // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
+      // because Robolectric runs them on the JVM but on Android the elements are different.
+      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
+      if (stackTrace.length <= CALL_STACK_INDEX) {
+        throw new IllegalStateException(
+            ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
+      }
+      return createStackElementTag(stackTrace[CALL_STACK_INDEX]);
     }
 
-    /** Log a message! */
-    protected void logMessage(int priority, String tag, String message) {
+    /**
+     * Break up {@code message} into maximum-length chunks (if needed) and send to either
+     * {@link Log#println(int, String, String) Log.println()} or
+     * {@link Log#wtf(String, String) Log.wtf()} for logging.
+     *
+     * {@inheritDoc}
+     */
+    @Override protected void log(int priority, String tag, String message, Throwable t) {
       if (message.length() < MAX_LOG_LENGTH) {
         if (priority == Log.ASSERT) {
           Log.wtf(tag, message);
@@ -428,43 +392,4 @@ public final class Timber {
       }
     }
   }
-
-  /** A {@link Tree} which does nothing. Useful for extending. */
-  public static class HollowTree implements Tree {
-    @Override public void v(String message, Object... args) {
-    }
-
-    @Override public void v(Throwable t, String message, Object... args) {
-    }
-
-    @Override public void d(String message, Object... args) {
-    }
-
-    @Override public void d(Throwable t, String message, Object... args) {
-    }
-
-    @Override public void i(String message, Object... args) {
-    }
-
-    @Override public void i(Throwable t, String message, Object... args) {
-    }
-
-    @Override public void w(String message, Object... args) {
-    }
-
-    @Override public void w(Throwable t, String message, Object... args) {
-    }
-
-    @Override public void e(String message, Object... args) {
-    }
-
-    @Override public void e(Throwable t, String message, Object... args) {
-    }
-
-    @Override public void wtf(String message, Object... args) {
-    }
-
-    @Override public void wtf(Throwable t, String message, Object... args) {
-    }
-  }
 }",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,7a95f20b8cfbaa5477adbb24af8ba0e97ce559d2,88a508f0d86e14cd7f6b59fdef726b448411d23b,"Major architectural changes... for a single-class logging library.

* All trees are now taggable.
* Provide a single method through which all level-specific methods log.
* Eliminate the need for HollowTree.","@@ -5,7 +5,6 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -22,8 +21,7 @@ import static org.robolectric.shadows.ShadowLog.LogItem;
 @Config(manifest = Config.NONE)
 public class TimberTest {
   @Before @After public void setUpAndTearDown() {
-    Timber.FOREST.clear();
-    Timber.TAGGED_TREES.clear();
+    Timber.uprootAll();
   }
 
   @Test public void recursion() {
@@ -124,51 +122,22 @@ public class TimberTest {
     assertThat(log.throwable).isNull();
   }
 
-  @Test public void debugTreeCustomTagCreation() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected String getTag() {
-        return ""Override"";
-      }
-    });
-    Timber.d(""Hello, world!"");
-
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.DEBUG);
-    assertThat(log.tag).isEqualTo(""Override"");
-    assertThat(log.msg).isEqualTo(""Hello, world!"");
-    assertThat(log.throwable).isNull();
-  }
-
-  @Test public void debugTreeCustomTagCreationCanUseExplicitTag() {
-    final AtomicReference<String> explicitTagRef = new AtomicReference<String>();
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected String getTag() {
-        explicitTagRef.set(readExplicitTag());
-        return ""Override"";
-      }
-    });
-    Timber.tag(""Custom"").d(""Hello, world!"");
-
-    assertThat(explicitTagRef.get()).isEqualTo(""Custom"");
-  }
-
   @Test public void debugTreeCanAlterCreatedTag() {
-    final AtomicReference<String> tagRef = new AtomicReference<String>();
     Timber.plant(new Timber.DebugTree() {
       @Override protected String createStackElementTag(StackTraceElement element) {
         return super.createStackElementTag(element) + ':' + element.getLineNumber();
       }
-
-      @Override protected void logMessage(int priority, String tag, String message) {
-        tagRef.set(tag);
-      }
     });
 
     Timber.d(""Test"");
 
-    assertThat(tagRef.get()).isEqualTo(""TimberTest:169"");
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.DEBUG);
+    assertThat(log.tag).isEqualTo(""TimberTest:132"");
+    assertThat(log.msg).isEqualTo(""Test"");
+    assertThat(log.throwable).isNull();
   }
 
   @Test public void messageWithException() {
@@ -224,7 +193,7 @@ public class TimberTest {
   @Test public void logMessageCallback() {
     final List<String> logs = new ArrayList<String>();
     Timber.plant(new Timber.DebugTree() {
-      @Override protected void logMessage(int priority, String tag, String message) {
+      @Override protected void log(int priority, String tag, String message, Throwable t) {
         logs.add(priority + "" "" + tag + "" "" + message);
       }
     });","@@ -5,7 +5,6 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -22,8 +21,7 @@ import static org.robolectric.shadows.ShadowLog.LogItem;
 @Config(manifest = Config.NONE)
 public class TimberTest {
   @Before @After public void setUpAndTearDown() {
-    Timber.FOREST.clear();
-    Timber.TAGGED_TREES.clear();
+    Timber.uprootAll();
   }
 
   @Test public void recursion() {
@@ -124,51 +122,22 @@ public class TimberTest {
     assertThat(log.throwable).isNull();
   }
 
-  @Test public void debugTreeCustomTagCreation() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected String getTag() {
-        return ""Override"";
-      }
-    });
-    Timber.d(""Hello, world!"");
-
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.DEBUG);
-    assertThat(log.tag).isEqualTo(""Override"");
-    assertThat(log.msg).isEqualTo(""Hello, world!"");
-    assertThat(log.throwable).isNull();
-  }
-
-  @Test public void debugTreeCustomTagCreationCanUseExplicitTag() {
-    final AtomicReference<String> explicitTagRef = new AtomicReference<String>();
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected String getTag() {
-        explicitTagRef.set(readExplicitTag());
-        return ""Override"";
-      }
-    });
-    Timber.tag(""Custom"").d(""Hello, world!"");
-
-    assertThat(explicitTagRef.get()).isEqualTo(""Custom"");
-  }
-
   @Test public void debugTreeCanAlterCreatedTag() {
-    final AtomicReference<String> tagRef = new AtomicReference<String>();
     Timber.plant(new Timber.DebugTree() {
       @Override protected String createStackElementTag(StackTraceElement element) {
         return super.createStackElementTag(element) + ':' + element.getLineNumber();
       }
-
-      @Override protected void logMessage(int priority, String tag, String message) {
-        tagRef.set(tag);
-      }
     });
 
     Timber.d(""Test"");
 
-    assertThat(tagRef.get()).isEqualTo(""TimberTest:169"");
+    List<LogItem> logs = ShadowLog.getLogs();
+    assertThat(logs).hasSize(1);
+    LogItem log = logs.get(0);
+    assertThat(log.type).isEqualTo(Log.DEBUG);
+    assertThat(log.tag).isEqualTo(""TimberTest:132"");
+    assertThat(log.msg).isEqualTo(""Test"");
+    assertThat(log.throwable).isNull();
   }
 
   @Test public void messageWithException() {
@@ -224,7 +193,7 @@ public class TimberTest {
   @Test public void logMessageCallback() {
     final List<String> logs = new ArrayList<String>();
     Timber.plant(new Timber.DebugTree() {
-      @Override protected void logMessage(int priority, String tag, String message) {
+      @Override protected void log(int priority, String tag, String message, Throwable t) {
         logs.add(priority + "" "" + tag + "" "" + message);
       }
     });",False,test
CHANGELOG.md,CHANGELOG.md,02c463d879f8f7de0ec632d0136854f5e38b510c,dd65715f0277fa1a832067a540bd36038e7e2528,Prepare version 3.0.0.,"@@ -1,6 +1,20 @@
 Change Log
 ==========
 
+Version 3.0.0 *(2015-04-16)*
+----------------------------
+
+ * New: `Tree` and `DebugTree` APIs are much more extensible requiring only a single method to
+   override.
+ * New: `DebugTree` exposes `createStackElementTag` method for overriding to customize the
+   reflection-based tag creation (for example, such as to add a line number).
+ * WTF: Support for `wtf` log level.
+ * `HollowTree` has been removed as it is no longer needed. Just extend `Tree`.
+ * `TaggedTree` has been removed and its functionality folded into `Tree`. All `Tree` instances
+   will receive any tags specified by a call to `tag`.
+ * Fix: Multiple planted `DebugTree`s now each correctly received tags set from a call to `tag`.
+
+
 Version 2.7.1 *(2015-02-17)*
 ----------------------------","@@ -1,6 +1,20 @@
 Change Log
 ==========
 
+Version 3.0.0 *(2015-04-16)*
+----------------------------
+
+ * New: `Tree` and `DebugTree` APIs are much more extensible requiring only a single method to
+   override.
+ * New: `DebugTree` exposes `createStackElementTag` method for overriding to customize the
+   reflection-based tag creation (for example, such as to add a line number).
+ * WTF: Support for `wtf` log level.
+ * `HollowTree` has been removed as it is no longer needed. Just extend `Tree`.
+ * `TaggedTree` has been removed and its functionality folded into `Tree`. All `Tree` instances
+   will receive any tags specified by a call to `tag`.
+ * Fix: Multiple planted `DebugTree`s now each correctly received tags set from a call to `tag`.
+
+
 Version 2.7.1 *(2015-02-17)*
 ----------------------------",False,other
README.md,README.md,02c463d879f8f7de0ec632d0136854f5e38b510c,dd65715f0277fa1a832067a540bd36038e7e2528,Prepare version 3.0.0.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.7.1</version>
+  <version>3.0.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.7.1'
+compile 'com.jakewharton.timber:timber:3.0.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>2.7.1</version>
+  <version>3.0.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:2.7.1'
+compile 'com.jakewharton.timber:timber:3.0.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
pom.xml,pom.xml,62725e1f191e36b9bcfdf9d1c38f2f04a38628a9,02c463d879f8f7de0ec632d0136854f5e38b510c,[maven-release-plugin] prepare release timber-parent-3.0.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.0-SNAPSHOT</version>
+  <version>3.0.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-3.0.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.0-SNAPSHOT</version>
+  <version>3.0.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-3.0.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,62725e1f191e36b9bcfdf9d1c38f2f04a38628a9,02c463d879f8f7de0ec632d0136854f5e38b510c,[maven-release-plugin] prepare release timber-parent-3.0.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0-SNAPSHOT</version>
+    <version>3.0.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0-SNAPSHOT</version>
+    <version>3.0.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,62725e1f191e36b9bcfdf9d1c38f2f04a38628a9,02c463d879f8f7de0ec632d0136854f5e38b510c,[maven-release-plugin] prepare release timber-parent-3.0.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0-SNAPSHOT</version>
+    <version>3.0.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0-SNAPSHOT</version>
+    <version>3.0.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,62725e1f191e36b9bcfdf9d1c38f2f04a38628a9,02c463d879f8f7de0ec632d0136854f5e38b510c,[maven-release-plugin] prepare release timber-parent-3.0.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0-SNAPSHOT</version>
+    <version>3.0.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0-SNAPSHOT</version>
+    <version>3.0.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,e880b667dfad52e7958463d575d8a141df19f255,62725e1f191e36b9bcfdf9d1c38f2f04a38628a9,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.0</version>
+  <version>3.0.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-3.0.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.0</version>
+  <version>3.0.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-3.0.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,e880b667dfad52e7958463d575d8a141df19f255,62725e1f191e36b9bcfdf9d1c38f2f04a38628a9,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0</version>
+    <version>3.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0</version>
+    <version>3.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,e880b667dfad52e7958463d575d8a141df19f255,62725e1f191e36b9bcfdf9d1c38f2f04a38628a9,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0</version>
+    <version>3.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0</version>
+    <version>3.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,e880b667dfad52e7958463d575d8a141df19f255,62725e1f191e36b9bcfdf9d1c38f2f04a38628a9,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0</version>
+    <version>3.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.0</version>
+    <version>3.0.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
CHANGELOG.md,CHANGELOG.md,470bfd2c90f58b8192a6e40486142778a113edfd,e880b667dfad52e7958463d575d8a141df19f255,"Ensure string formatting always happens when needed.

Prepare version 3.0.1.","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 3.0.1 *(2015-04-17)*
+----------------------------
+
+ * Fix: String formatting is now always applied when arguments are present. Previously it would
+   only trigger when an exception was included.
+
+
 Version 3.0.0 *(2015-04-16)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 3.0.1 *(2015-04-17)*
+----------------------------
+
+ * Fix: String formatting is now always applied when arguments are present. Previously it would
+   only trigger when an exception was included.
+
+
 Version 3.0.0 *(2015-04-16)*
 ----------------------------",False,other
README.md,README.md,470bfd2c90f58b8192a6e40486142778a113edfd,e880b667dfad52e7958463d575d8a141df19f255,"Ensure string formatting always happens when needed.

Prepare version 3.0.1.","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>3.0.0</version>
+  <version>3.0.1</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:3.0.0'
+compile 'com.jakewharton.timber:timber:3.0.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>3.0.0</version>
+  <version>3.0.1</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:3.0.0'
+compile 'com.jakewharton.timber:timber:3.0.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,470bfd2c90f58b8192a6e40486142778a113edfd,e880b667dfad52e7958463d575d8a141df19f255,"Ensure string formatting always happens when needed.

Prepare version 3.0.1.","@@ -299,11 +299,13 @@ public final class Timber {
           return; // Swallow message if it's null and there's no throwable.
         }
         message = Log.getStackTraceString(t);
-      } else if (t != null) {
+      } else {
         if (args.length > 0) {
           message = String.format(message, args);
         }
-        message += ""\n"" + Log.getStackTraceString(t);
+        if (t != null) {
+          message += ""\n"" + Log.getStackTraceString(t);
+        }
       }
 
       log(priority, getTag(), message, t);","@@ -299,11 +299,13 @@ public final class Timber {
           return; // Swallow message if it's null and there's no throwable.
         }
         message = Log.getStackTraceString(t);
-      } else if (t != null) {
+      } else {
         if (args.length > 0) {
           message = String.format(message, args);
         }
-        message += ""\n"" + Log.getStackTraceString(t);
+        if (t != null) {
+          message += ""\n"" + Log.getStackTraceString(t);
+        }
       }
 
       log(priority, getTag(), message, t);",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,470bfd2c90f58b8192a6e40486142778a113edfd,e880b667dfad52e7958463d575d8a141df19f255,"Ensure string formatting always happens when needed.

Prepare version 3.0.1.","@@ -61,11 +61,11 @@ public class TimberTest {
     Timber.uproot(tree1);
     Timber.d(""Second"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(3);
-    assertThat(logs.get(0).msg).isEqualTo(""First"");
-    assertThat(logs.get(1).msg).isEqualTo(""First"");
-    assertThat(logs.get(2).msg).isEqualTo(""Second"");
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""Second"")
+        .hasNoMoreMessages();
   }
 
   @Test public void uprootAllRemovesAll() {
@@ -77,49 +77,37 @@ public class TimberTest {
     Timber.uprootAll();
     Timber.d(""Second"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(2);
-    assertThat(logs.get(0).msg).isEqualTo(""First"");
-    assertThat(logs.get(1).msg).isEqualTo(""First"");
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasNoMoreMessages();
   }
 
   @Test public void noArgsDoesNotFormat() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(""te%st"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.DEBUG);
-    assertThat(log.tag).isEqualTo(""TimberTest"");
-    assertThat(log.msg).isEqualTo(""te%st"");
-    assertThat(log.throwable).isNull();
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""te%st"")
+        .hasNoMoreMessages();
   }
 
   @Test public void debugTreeTagGeneration() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(""Hello, world!"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.DEBUG);
-    assertThat(log.tag).isEqualTo(""TimberTest"");
-    assertThat(log.msg).isEqualTo(""Hello, world!"");
-    assertThat(log.throwable).isNull();
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasNoMoreMessages();
   }
 
   @Test public void debugTreeCustomTag() {
     Timber.plant(new Timber.DebugTree());
     Timber.tag(""Custom"").d(""Hello, world!"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.DEBUG);
-    assertThat(log.tag).isEqualTo(""Custom"");
-    assertThat(log.msg).isEqualTo(""Hello, world!"");
-    assertThat(log.throwable).isNull();
+    assertLog()
+        .hasDebugMessage(""Custom"", ""Hello, world!"")
+        .hasNoMoreMessages();
   }
 
   @Test public void debugTreeCanAlterCreatedTag() {
@@ -131,13 +119,9 @@ public class TimberTest {
 
     Timber.d(""Test"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.DEBUG);
-    assertThat(log.tag).isEqualTo(""TimberTest:132"");
-    assertThat(log.msg).isEqualTo(""Test"");
-    assertThat(log.throwable).isNull();
+    assertLog()
+        .hasDebugMessage(""TimberTest:120"", ""Test"")
+        .hasNoMoreMessages();
   }
 
   @Test public void messageWithException() {
@@ -174,20 +158,19 @@ public class TimberTest {
     Timber.plant(new Timber.DebugTree());
     Timber.d(repeat('a', 3000) + '\n' + repeat('b', 6000) + '\n' + repeat('c', 3000));
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(4);
-    assertThat(logs.get(0).msg).isEqualTo(repeat('a', 3000));
-    assertThat(logs.get(1).msg).isEqualTo(repeat('b', 4000));
-    assertThat(logs.get(2).msg).isEqualTo(repeat('b', 2000));
-    assertThat(logs.get(3).msg).isEqualTo(repeat('c', 3000));
+    assertLog()
+        .hasDebugMessage(""TimberTest"", repeat('a', 3000))
+        .hasDebugMessage(""TimberTest"", repeat('b', 4000))
+        .hasDebugMessage(""TimberTest"", repeat('b', 2000))
+        .hasDebugMessage(""TimberTest"", repeat('c', 3000))
+        .hasNoMoreMessages();
   }
 
   @Test public void nullMessageWithoutThrowable() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(null);
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(0);
+    assertLog().hasNoMoreMessages();
   }
 
   @Test public void logMessageCallback() {
@@ -221,9 +204,33 @@ public class TimberTest {
         ""5 TimberTest Warn"", //
         ""5 Custom Warn"", //
         ""6 TimberTest Error"", //
-        ""6 Custom Error"",
-        ""7 TimberTest Assert"",
-        ""7 Custom Assert"");
+        ""6 Custom Error"", //
+        ""7 TimberTest Assert"", //
+        ""7 Custom Assert"" //
+    );
+  }
+
+  @Test public void formatting() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.v(""Hello, %s!"", ""World"");
+    Timber.d(""Hello, %s!"", ""World"");
+    Timber.i(""Hello, %s!"", ""World"");
+    Timber.w(""Hello, %s!"", ""World"");
+    Timber.e(""Hello, %s!"", ""World"");
+
+    assertLog()
+        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
+        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages();
+  }
+
+  private static String repeat(char c, int number) {
+    char[] data = new char[number];
+    Arrays.fill(data, c);
+    return new String(data);
   }
 
   private static void assertExceptionLogged(String message, String exceptionClassname) {
@@ -238,9 +245,48 @@ public class TimberTest {
     assertThat(log.throwable).isNull();
   }
 
-  private static String repeat(char c, int number) {
-    char[] data = new char[number];
-    Arrays.fill(data, c);
-    return new String(data);
+  private static LogAssert assertLog() {
+    return new LogAssert(ShadowLog.getLogs());
+  }
+
+  private static final class LogAssert {
+    private final List<LogItem> items;
+    private int index = 0;
+
+    private LogAssert(List<LogItem> items) {
+      this.items = items;
+    }
+
+    public LogAssert hasVerboseMessage(String tag, String message) {
+      return hasMessage(Log.VERBOSE, tag, message);
+    }
+
+    public LogAssert hasDebugMessage(String tag, String message) {
+      return hasMessage(Log.DEBUG, tag, message);
+    }
+
+    public LogAssert hasInfoMessage(String tag, String message) {
+      return hasMessage(Log.INFO, tag, message);
+    }
+
+    public LogAssert hasWarnMessage(String tag, String message) {
+      return hasMessage(Log.WARN, tag, message);
+    }
+
+    public LogAssert hasErrorMessage(String tag, String message) {
+      return hasMessage(Log.ERROR, tag, message);
+    }
+
+    private LogAssert hasMessage(int priority, String tag, String message) {
+      LogItem item = items.get(index++);
+      assertThat(item.type).isEqualTo(priority);
+      assertThat(item.tag).isEqualTo(tag);
+      assertThat(item.msg).isEqualTo(message);
+      return this;
+    }
+
+    public void hasNoMoreMessages() {
+      assertThat(items).hasSize(index);
+    }
   }
 }","@@ -61,11 +61,11 @@ public class TimberTest {
     Timber.uproot(tree1);
     Timber.d(""Second"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(3);
-    assertThat(logs.get(0).msg).isEqualTo(""First"");
-    assertThat(logs.get(1).msg).isEqualTo(""First"");
-    assertThat(logs.get(2).msg).isEqualTo(""Second"");
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""Second"")
+        .hasNoMoreMessages();
   }
 
   @Test public void uprootAllRemovesAll() {
@@ -77,49 +77,37 @@ public class TimberTest {
     Timber.uprootAll();
     Timber.d(""Second"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(2);
-    assertThat(logs.get(0).msg).isEqualTo(""First"");
-    assertThat(logs.get(1).msg).isEqualTo(""First"");
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasNoMoreMessages();
   }
 
   @Test public void noArgsDoesNotFormat() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(""te%st"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.DEBUG);
-    assertThat(log.tag).isEqualTo(""TimberTest"");
-    assertThat(log.msg).isEqualTo(""te%st"");
-    assertThat(log.throwable).isNull();
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""te%st"")
+        .hasNoMoreMessages();
   }
 
   @Test public void debugTreeTagGeneration() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(""Hello, world!"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.DEBUG);
-    assertThat(log.tag).isEqualTo(""TimberTest"");
-    assertThat(log.msg).isEqualTo(""Hello, world!"");
-    assertThat(log.throwable).isNull();
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasNoMoreMessages();
   }
 
   @Test public void debugTreeCustomTag() {
     Timber.plant(new Timber.DebugTree());
     Timber.tag(""Custom"").d(""Hello, world!"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.DEBUG);
-    assertThat(log.tag).isEqualTo(""Custom"");
-    assertThat(log.msg).isEqualTo(""Hello, world!"");
-    assertThat(log.throwable).isNull();
+    assertLog()
+        .hasDebugMessage(""Custom"", ""Hello, world!"")
+        .hasNoMoreMessages();
   }
 
   @Test public void debugTreeCanAlterCreatedTag() {
@@ -131,13 +119,9 @@ public class TimberTest {
 
     Timber.d(""Test"");
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.DEBUG);
-    assertThat(log.tag).isEqualTo(""TimberTest:132"");
-    assertThat(log.msg).isEqualTo(""Test"");
-    assertThat(log.throwable).isNull();
+    assertLog()
+        .hasDebugMessage(""TimberTest:120"", ""Test"")
+        .hasNoMoreMessages();
   }
 
   @Test public void messageWithException() {
@@ -174,20 +158,19 @@ public class TimberTest {
     Timber.plant(new Timber.DebugTree());
     Timber.d(repeat('a', 3000) + '\n' + repeat('b', 6000) + '\n' + repeat('c', 3000));
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(4);
-    assertThat(logs.get(0).msg).isEqualTo(repeat('a', 3000));
-    assertThat(logs.get(1).msg).isEqualTo(repeat('b', 4000));
-    assertThat(logs.get(2).msg).isEqualTo(repeat('b', 2000));
-    assertThat(logs.get(3).msg).isEqualTo(repeat('c', 3000));
+    assertLog()
+        .hasDebugMessage(""TimberTest"", repeat('a', 3000))
+        .hasDebugMessage(""TimberTest"", repeat('b', 4000))
+        .hasDebugMessage(""TimberTest"", repeat('b', 2000))
+        .hasDebugMessage(""TimberTest"", repeat('c', 3000))
+        .hasNoMoreMessages();
   }
 
   @Test public void nullMessageWithoutThrowable() {
     Timber.plant(new Timber.DebugTree());
     Timber.d(null);
 
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(0);
+    assertLog().hasNoMoreMessages();
   }
 
   @Test public void logMessageCallback() {
@@ -221,9 +204,33 @@ public class TimberTest {
         ""5 TimberTest Warn"", //
         ""5 Custom Warn"", //
         ""6 TimberTest Error"", //
-        ""6 Custom Error"",
-        ""7 TimberTest Assert"",
-        ""7 Custom Assert"");
+        ""6 Custom Error"", //
+        ""7 TimberTest Assert"", //
+        ""7 Custom Assert"" //
+    );
+  }
+
+  @Test public void formatting() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.v(""Hello, %s!"", ""World"");
+    Timber.d(""Hello, %s!"", ""World"");
+    Timber.i(""Hello, %s!"", ""World"");
+    Timber.w(""Hello, %s!"", ""World"");
+    Timber.e(""Hello, %s!"", ""World"");
+
+    assertLog()
+        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
+        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages();
+  }
+
+  private static String repeat(char c, int number) {
+    char[] data = new char[number];
+    Arrays.fill(data, c);
+    return new String(data);
   }
 
   private static void assertExceptionLogged(String message, String exceptionClassname) {
@@ -238,9 +245,48 @@ public class TimberTest {
     assertThat(log.throwable).isNull();
   }
 
-  private static String repeat(char c, int number) {
-    char[] data = new char[number];
-    Arrays.fill(data, c);
-    return new String(data);
+  private static LogAssert assertLog() {
+    return new LogAssert(ShadowLog.getLogs());
+  }
+
+  private static final class LogAssert {
+    private final List<LogItem> items;
+    private int index = 0;
+
+    private LogAssert(List<LogItem> items) {
+      this.items = items;
+    }
+
+    public LogAssert hasVerboseMessage(String tag, String message) {
+      return hasMessage(Log.VERBOSE, tag, message);
+    }
+
+    public LogAssert hasDebugMessage(String tag, String message) {
+      return hasMessage(Log.DEBUG, tag, message);
+    }
+
+    public LogAssert hasInfoMessage(String tag, String message) {
+      return hasMessage(Log.INFO, tag, message);
+    }
+
+    public LogAssert hasWarnMessage(String tag, String message) {
+      return hasMessage(Log.WARN, tag, message);
+    }
+
+    public LogAssert hasErrorMessage(String tag, String message) {
+      return hasMessage(Log.ERROR, tag, message);
+    }
+
+    private LogAssert hasMessage(int priority, String tag, String message) {
+      LogItem item = items.get(index++);
+      assertThat(item.type).isEqualTo(priority);
+      assertThat(item.tag).isEqualTo(tag);
+      assertThat(item.msg).isEqualTo(message);
+      return this;
+    }
+
+    public void hasNoMoreMessages() {
+      assertThat(items).hasSize(index);
+    }
   }
 }",False,test
pom.xml,pom.xml,080db547764da9e649e80d47ed4b91392e68cdf1,470bfd2c90f58b8192a6e40486142778a113edfd,[maven-release-plugin] prepare release timber-parent-3.0.1,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.1-SNAPSHOT</version>
+  <version>3.0.1</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-3.0.1</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.1-SNAPSHOT</version>
+  <version>3.0.1</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-3.0.1</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,080db547764da9e649e80d47ed4b91392e68cdf1,470bfd2c90f58b8192a6e40486142778a113edfd,[maven-release-plugin] prepare release timber-parent-3.0.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1-SNAPSHOT</version>
+    <version>3.0.1</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1-SNAPSHOT</version>
+    <version>3.0.1</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,080db547764da9e649e80d47ed4b91392e68cdf1,470bfd2c90f58b8192a6e40486142778a113edfd,[maven-release-plugin] prepare release timber-parent-3.0.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1-SNAPSHOT</version>
+    <version>3.0.1</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1-SNAPSHOT</version>
+    <version>3.0.1</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,080db547764da9e649e80d47ed4b91392e68cdf1,470bfd2c90f58b8192a6e40486142778a113edfd,[maven-release-plugin] prepare release timber-parent-3.0.1,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1-SNAPSHOT</version>
+    <version>3.0.1</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1-SNAPSHOT</version>
+    <version>3.0.1</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,3e53a79a839f09426bb5a4b5bc03bd325fda0e59,080db547764da9e649e80d47ed4b91392e68cdf1,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.1</version>
+  <version>3.0.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-3.0.1</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.1</version>
+  <version>3.0.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-3.0.1</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,3e53a79a839f09426bb5a4b5bc03bd325fda0e59,080db547764da9e649e80d47ed4b91392e68cdf1,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1</version>
+    <version>3.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1</version>
+    <version>3.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,3e53a79a839f09426bb5a4b5bc03bd325fda0e59,080db547764da9e649e80d47ed4b91392e68cdf1,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1</version>
+    <version>3.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1</version>
+    <version>3.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,3e53a79a839f09426bb5a4b5bc03bd325fda0e59,080db547764da9e649e80d47ed4b91392e68cdf1,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1</version>
+    <version>3.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.1</version>
+    <version>3.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,454786c5a559d2f9373d18920cb93f31b09c0480,3e53a79a839f09426bb5a4b5bc03bd325fda0e59,Move line-number-referencing test to the top of the file.,"@@ -24,6 +24,21 @@ public class TimberTest {
     Timber.uprootAll();
   }
 
+  // NOTE: This class references the line number. Keep it at the top so it does not change.
+  @Test public void debugTreeCanAlterCreatedTag() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected String createStackElementTag(StackTraceElement element) {
+        return super.createStackElementTag(element) + ':' + element.getLineNumber();
+      }
+    });
+
+    Timber.d(""Test"");
+
+    assertLog()
+        .hasDebugMessage(""TimberTest:35"", ""Test"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void recursion() {
     Timber.Tree timber = Timber.asTree();
     try {
@@ -110,20 +125,6 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
-  @Test public void debugTreeCanAlterCreatedTag() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected String createStackElementTag(StackTraceElement element) {
-        return super.createStackElementTag(element) + ':' + element.getLineNumber();
-      }
-    });
-
-    Timber.d(""Test"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest:120"", ""Test"")
-        .hasNoMoreMessages();
-  }
-
   @Test public void messageWithException() {
     Timber.plant(new Timber.DebugTree());
     NullPointerException datThrowable = new NullPointerException();","@@ -24,6 +24,21 @@ public class TimberTest {
     Timber.uprootAll();
   }
 
+  // NOTE: This class references the line number. Keep it at the top so it does not change.
+  @Test public void debugTreeCanAlterCreatedTag() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected String createStackElementTag(StackTraceElement element) {
+        return super.createStackElementTag(element) + ':' + element.getLineNumber();
+      }
+    });
+
+    Timber.d(""Test"");
+
+    assertLog()
+        .hasDebugMessage(""TimberTest:35"", ""Test"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void recursion() {
     Timber.Tree timber = Timber.asTree();
     try {
@@ -110,20 +125,6 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
-  @Test public void debugTreeCanAlterCreatedTag() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected String createStackElementTag(StackTraceElement element) {
-        return super.createStackElementTag(element) + ':' + element.getLineNumber();
-      }
-    });
-
-    Timber.d(""Test"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest:120"", ""Test"")
-        .hasNoMoreMessages();
-  }
-
   @Test public void messageWithException() {
     Timber.plant(new Timber.DebugTree());
     NullPointerException datThrowable = new NullPointerException();",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,5d502931a5e696006aeb0f95946f27a8cd8c6749,454786c5a559d2f9373d18920cb93f31b09c0480,Strip anonymous markers on multiple level nested classes.,"@@ -326,7 +326,7 @@ public final class Timber {
   public static class DebugTree extends Tree {
     private static final int MAX_LOG_LENGTH = 4000;
     private static final int CALL_STACK_INDEX = 5;
-    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
+    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"");
 
     /**
      * Extract the tag which should be used for the message from the {@code element}. By default","@@ -326,7 +326,7 @@ public final class Timber {
   public static class DebugTree extends Tree {
     private static final int MAX_LOG_LENGTH = 4000;
     private static final int CALL_STACK_INDEX = 5;
-    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""\\$\\d+$"");
+    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"");
 
     /**
      * Extract the tag which should be used for the message from the {@code element}. By default",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,5d502931a5e696006aeb0f95946f27a8cd8c6749,454786c5a559d2f9373d18920cb93f31b09c0480,Strip anonymous markers on multiple level nested classes.,"@@ -116,6 +116,26 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void debugTreeTagGenerationStripsAnonymousClassMarker() {
+    Timber.plant(new Timber.DebugTree());
+    new Runnable() {
+      @Override public void run() {
+        Timber.d(""Hello, world!"");
+
+        new Runnable() {
+          @Override public void run() {
+            Timber.d(""Hello, world!"");
+          }
+        }.run();
+      }
+    }.run();
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void debugTreeCustomTag() {
     Timber.plant(new Timber.DebugTree());
     Timber.tag(""Custom"").d(""Hello, world!"");","@@ -116,6 +116,26 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void debugTreeTagGenerationStripsAnonymousClassMarker() {
+    Timber.plant(new Timber.DebugTree());
+    new Runnable() {
+      @Override public void run() {
+        Timber.d(""Hello, world!"");
+
+        new Runnable() {
+          @Override public void run() {
+            Timber.d(""Hello, world!"");
+          }
+        }.run();
+      }
+    }.run();
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void debugTreeCustomTag() {
     Timber.plant(new Timber.DebugTree());
     Timber.tag(""Custom"").d(""Hello, world!"");",False,test
CHANGELOG.md,CHANGELOG.md,3d2fc9e1001eadae726d3f1c70adff63fa3160a1,b17c0455297b545eda6ca336b3e91d97602af847,Prepare version 3.0.2.,"@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 3.0.2 *(2015-05-01)*
+----------------------------
+
+ * Fix: Strip multiple anonymous class markers (e.g., `$1$2`) from class names when `DebugTree`
+   is creating an inferred tag.
+
+
 Version 3.0.1 *(2015-04-17)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 3.0.2 *(2015-05-01)*
+----------------------------
+
+ * Fix: Strip multiple anonymous class markers (e.g., `$1$2`) from class names when `DebugTree`
+   is creating an inferred tag.
+
+
 Version 3.0.1 *(2015-04-17)*
 ----------------------------",False,other
README.md,README.md,3d2fc9e1001eadae726d3f1c70adff63fa3160a1,b17c0455297b545eda6ca336b3e91d97602af847,Prepare version 3.0.2.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>3.0.1</version>
+  <version>3.0.2</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:3.0.1'
+compile 'com.jakewharton.timber:timber:3.0.2'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>3.0.1</version>
+  <version>3.0.2</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:3.0.1'
+compile 'com.jakewharton.timber:timber:3.0.2'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
pom.xml,pom.xml,b6e3766909c81823762b4ee0c9614433bc904c84,3d2fc9e1001eadae726d3f1c70adff63fa3160a1,[maven-release-plugin] prepare release timber-parent-3.0.2,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.2-SNAPSHOT</version>
+  <version>3.0.2</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-3.0.2</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.2-SNAPSHOT</version>
+  <version>3.0.2</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-3.0.2</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,b6e3766909c81823762b4ee0c9614433bc904c84,3d2fc9e1001eadae726d3f1c70adff63fa3160a1,[maven-release-plugin] prepare release timber-parent-3.0.2,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2-SNAPSHOT</version>
+    <version>3.0.2</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2-SNAPSHOT</version>
+    <version>3.0.2</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,b6e3766909c81823762b4ee0c9614433bc904c84,3d2fc9e1001eadae726d3f1c70adff63fa3160a1,[maven-release-plugin] prepare release timber-parent-3.0.2,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2-SNAPSHOT</version>
+    <version>3.0.2</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2-SNAPSHOT</version>
+    <version>3.0.2</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,b6e3766909c81823762b4ee0c9614433bc904c84,3d2fc9e1001eadae726d3f1c70adff63fa3160a1,[maven-release-plugin] prepare release timber-parent-3.0.2,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2-SNAPSHOT</version>
+    <version>3.0.2</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2-SNAPSHOT</version>
+    <version>3.0.2</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,297fe034be5b1b7c643694c11d0e838d4cd24752,b6e3766909c81823762b4ee0c9614433bc904c84,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.2</version>
+  <version>3.0.3-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-3.0.2</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.2</version>
+  <version>3.0.3-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-3.0.2</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,297fe034be5b1b7c643694c11d0e838d4cd24752,b6e3766909c81823762b4ee0c9614433bc904c84,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2</version>
+    <version>3.0.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2</version>
+    <version>3.0.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,297fe034be5b1b7c643694c11d0e838d4cd24752,b6e3766909c81823762b4ee0c9614433bc904c84,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2</version>
+    <version>3.0.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2</version>
+    <version>3.0.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,297fe034be5b1b7c643694c11d0e838d4cd24752,b6e3766909c81823762b4ee0c9614433bc904c84,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2</version>
+    <version>3.0.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.2</version>
+    <version>3.0.3-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,9c09c8aafaddbcccace67a93a479dfdc5ef47abc,297fe034be5b1b7c643694c11d0e838d4cd24752,Add hook for controlling logs by priority.,"@@ -290,7 +290,15 @@ public final class Timber {
       prepareLog(Log.ASSERT, t, message, args);
     }
 
+    /** Return whether a message at {@code priority} should be logged. */
+    protected boolean isLoggable(int priority) {
+      return true;
+    }
+
     private void prepareLog(int priority, Throwable t, String message, Object... args) {
+      if (!isLoggable(priority)) {
+        return;
+      }
       if (message != null && message.length() == 0) {
         message = null;
       }","@@ -290,7 +290,15 @@ public final class Timber {
       prepareLog(Log.ASSERT, t, message, args);
     }
 
+    /** Return whether a message at {@code priority} should be logged. */
+    protected boolean isLoggable(int priority) {
+      return true;
+    }
+
     private void prepareLog(int priority, Throwable t, String message, Object... args) {
+      if (!isLoggable(priority)) {
+        return;
+      }
       if (message != null && message.length() == 0) {
         message = null;
       }",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,9c09c8aafaddbcccace67a93a479dfdc5ef47abc,297fe034be5b1b7c643694c11d0e838d4cd24752,Add hook for controlling logs by priority.,"@@ -248,6 +248,23 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void isLoggableControlsLogging() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected boolean isLoggable(int priority) {
+        return priority == Log.INFO;
+      }
+    });
+    Timber.v(""Hello, World!"");
+    Timber.d(""Hello, World!"");
+    Timber.i(""Hello, World!"");
+    Timber.w(""Hello, World!"");
+    Timber.e(""Hello, World!"");
+
+    assertLog()
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages();
+  }
+
   private static String repeat(char c, int number) {
     char[] data = new char[number];
     Arrays.fill(data, c);","@@ -248,6 +248,23 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void isLoggableControlsLogging() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected boolean isLoggable(int priority) {
+        return priority == Log.INFO;
+      }
+    });
+    Timber.v(""Hello, World!"");
+    Timber.d(""Hello, World!"");
+    Timber.i(""Hello, World!"");
+    Timber.w(""Hello, World!"");
+    Timber.e(""Hello, World!"");
+
+    assertLog()
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages();
+  }
+
   private static String repeat(char c, int number) {
     char[] data = new char[number];
     Arrays.fill(data, c);",False,test
CHANGELOG.md,CHANGELOG.md,60a5ded0249092624ac77ed0fe16227a881f520e,c13b2c0206d1f30b43b25853ed5ef45d032ad2ab,Prepare version 3.1.0.,"@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 3.1.0 *(2015-05-11)*
+----------------------------
+
+ * New: `Tree.isLoggable` method allows a tree to determine whether a statement should be logged
+   based on its priority. Defaults to logging all levels.
+
+
 Version 3.0.2 *(2015-05-01)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 3.1.0 *(2015-05-11)*
+----------------------------
+
+ * New: `Tree.isLoggable` method allows a tree to determine whether a statement should be logged
+   based on its priority. Defaults to logging all levels.
+
+
 Version 3.0.2 *(2015-05-01)*
 ----------------------------",False,other
README.md,README.md,60a5ded0249092624ac77ed0fe16227a881f520e,c13b2c0206d1f30b43b25853ed5ef45d032ad2ab,Prepare version 3.1.0.,"@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>3.0.2</version>
+  <version>3.1.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:3.0.2'
+compile 'com.jakewharton.timber:timber:3.1.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -37,12 +37,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber</artifactId>
-  <version>3.0.2</version>
+  <version>3.1.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:3.0.2'
+compile 'com.jakewharton.timber:timber:3.1.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
pom.xml,pom.xml,47676e21f6c13acd0843f47491f858914d515f7b,60a5ded0249092624ac77ed0fe16227a881f520e,[maven-release-plugin] prepare release timber-parent-3.1.0,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.3-SNAPSHOT</version>
+  <version>3.1.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-3.1.0</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.0.3-SNAPSHOT</version>
+  <version>3.1.0</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
+    <tag>timber-parent-3.1.0</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,47676e21f6c13acd0843f47491f858914d515f7b,60a5ded0249092624ac77ed0fe16227a881f520e,[maven-release-plugin] prepare release timber-parent-3.1.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.3-SNAPSHOT</version>
+    <version>3.1.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.3-SNAPSHOT</version>
+    <version>3.1.0</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,47676e21f6c13acd0843f47491f858914d515f7b,60a5ded0249092624ac77ed0fe16227a881f520e,[maven-release-plugin] prepare release timber-parent-3.1.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.3-SNAPSHOT</version>
+    <version>3.1.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.3-SNAPSHOT</version>
+    <version>3.1.0</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,47676e21f6c13acd0843f47491f858914d515f7b,60a5ded0249092624ac77ed0fe16227a881f520e,[maven-release-plugin] prepare release timber-parent-3.1.0,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.3-SNAPSHOT</version>
+    <version>3.1.0</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.0.3-SNAPSHOT</version>
+    <version>3.1.0</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
pom.xml,pom.xml,2b337843be521f4ae728a50df54a5c33f83bdc5c,47676e21f6c13acd0843f47491f858914d515f7b,[maven-release-plugin] prepare for next development iteration,"@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.1.0</version>
+  <version>3.1.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-3.1.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>","@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton.timber</groupId>
   <artifactId>timber-parent</artifactId>
-  <version>3.1.0</version>
+  <version>3.1.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Timber (Parent)</name>
@@ -42,7 +42,7 @@
     <url>http://github.com/JakeWharton/timber/</url>
     <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
     <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>timber-parent-3.1.0</tag>
+    <tag>HEAD</tag>
   </scm>
 
   <issueManagement>",False,other
timber-lint/pom.xml,timber-lint/pom.xml,2b337843be521f4ae728a50df54a5c33f83bdc5c,47676e21f6c13acd0843f47491f858914d515f7b,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.1.0</version>
+    <version>3.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.1.0</version>
+    <version>3.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-lint</artifactId>",False,other
timber-sample/pom.xml,timber-sample/pom.xml,2b337843be521f4ae728a50df54a5c33f83bdc5c,47676e21f6c13acd0843f47491f858914d515f7b,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.1.0</version>
+    <version>3.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.1.0</version>
+    <version>3.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber-sample</artifactId>",False,other
timber/pom.xml,timber/pom.xml,2b337843be521f4ae728a50df54a5c33f83bdc5c,47676e21f6c13acd0843f47491f858914d515f7b,[maven-release-plugin] prepare for next development iteration,"@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.1.0</version>
+    <version>3.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>","@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton.timber</groupId>
     <artifactId>timber-parent</artifactId>
-    <version>3.1.0</version>
+    <version>3.1.1-SNAPSHOT</version>
   </parent>
 
   <artifactId>timber</artifactId>",False,other
.gitignore,.gitignore,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -9,10 +9,6 @@ build
 out
 lib
 
-target
-pom.xml.*
-release.properties
-
 .idea
 *.iml
 classes
@@ -20,3 +16,10 @@ classes
 obj
 
 .DS_Store
+
+# Gradle
+.gradle
+jniLibs
+build
+local.properties
+reports","@@ -9,10 +9,6 @@ build
 out
 lib
 
-target
-pom.xml.*
-release.properties
-
 .idea
 *.iml
 classes
@@ -20,3 +16,10 @@ classes
 obj
 
 .DS_Store
+
+# Gradle
+.gradle
+jniLibs
+build
+local.properties
+reports",False,other
.travis.yml,.travis.yml,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -2,8 +2,8 @@ language: android
 
 android:
   components:
-    - build-tools-20.0.0
-    - android-16
+    - build-tools-22.0.1
+    - android-22
   licenses:
     - android-sdk-license-5be876d5","@@ -2,8 +2,8 @@ language: android
 
 android:
   components:
-    - build-tools-20.0.0
-    - android-16
+    - build-tools-22.0.1
+    - android-22
   licenses:
     - android-sdk-license-5be876d5",False,other
,build.gradle,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,36 @@
+buildscript {
+  repositories {
+    mavenCentral()
+  }
+  dependencies {
+    classpath 'com.android.tools.build:gradle:1.3.0'
+  }
+}
+
+allprojects {
+  repositories {
+    mavenCentral()
+  }
+}
+
+ext {
+  minSdkVersion = 15
+  targetSdkVersion = 22
+  compileSdkVersion = 22
+  buildToolsVersion = '22.0.1'
+  sourceCompatibilityVersion = JavaVersion.VERSION_1_7
+  targetCompatibilityVersion = JavaVersion.VERSION_1_7
+}
+
+ext.deps = [
+    // Test dependencies
+    junit      : ""junit:junit:4.11"",
+    festassert : ""org.easytesting:fest-assert-core:2.0M10"",
+    festandroid: ""com.squareup:fest-android:1.0.7"",
+    mockitocore: ""org.mockito:mockito-core:1.9.5"",
+    robolectric: ""org.robolectric:robolectric:3.0"",
+
+    // Lint dependencies
+    lintapi    : ""com.android.tools.lint:lint-api:24.3.1"",
+    lintchecks : ""com.android.tools.lint:lint-checks:24.3.1""
+]","@@ -0,0 +1,36 @@
+buildscript {
+  repositories {
+    mavenCentral()
+  }
+  dependencies {
+    classpath 'com.android.tools.build:gradle:1.3.0'
+  }
+}
+
+allprojects {
+  repositories {
+    mavenCentral()
+  }
+}
+
+ext {
+  minSdkVersion = 15
+  targetSdkVersion = 22
+  compileSdkVersion = 22
+  buildToolsVersion = '22.0.1'
+  sourceCompatibilityVersion = JavaVersion.VERSION_1_7
+  targetCompatibilityVersion = JavaVersion.VERSION_1_7
+}
+
+ext.deps = [
+    // Test dependencies
+    junit      : ""junit:junit:4.11"",
+    festassert : ""org.easytesting:fest-assert-core:2.0M10"",
+    festandroid: ""com.squareup:fest-android:1.0.7"",
+    mockitocore: ""org.mockito:mockito-core:1.9.5"",
+    robolectric: ""org.robolectric:robolectric:3.0"",
+
+    // Lint dependencies
+    lintapi    : ""com.android.tools.lint:lint-api:24.3.1"",
+    lintchecks : ""com.android.tools.lint:lint-checks:24.3.1""
+]",False,other
checkstyle.xml,checkstyle.xml,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -27,7 +27,7 @@
   </module>
 
   <module name=""TreeWalker"">
-    <property name=""cacheFile"" value=""${checkstyle.cache.file}""/>
+    <!--<property name=""cacheFile"" value=""${checkstyle.cache.file}""/>-->
 
     <!-- Checks for Javadoc comments.                     -->
     <!-- See http://checkstyle.sf.net/config_javadoc.html -->","@@ -27,7 +27,7 @@
   </module>
 
   <module name=""TreeWalker"">
-    <property name=""cacheFile"" value=""${checkstyle.cache.file}""/>
+    <!--<property name=""cacheFile"" value=""${checkstyle.cache.file}""/>-->
 
     <!-- Checks for Javadoc comments.                     -->
     <!-- See http://checkstyle.sf.net/config_javadoc.html -->",False,other
,gradle.properties,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,16 @@
+GROUP=com.jakewharton.timber
+VERSION_NAME=3.1.1-SNAPSHOT
+
+POM_DESCRIPTION=No-nonsense injectable logging.
+
+POM_URL=https://github.com/JakeWharton/timber
+POM_SCM_URL=https://github.com/JakeWharton/timber
+POM_SCM_CONNECTION=scm:git:git://github.com/JakeWharton/timber.git
+POM_SCM_DEV_CONNECTION=scm:git:git://github.com/JakeWharton/timber.git
+
+POM_LICENCE_NAME=The Apache Software License, Version 2.0
+POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+POM_LICENCE_DIST=repo
+
+POM_DEVELOPER_ID=jakewharton
+POM_DEVELOPER_NAME=Jake Wharton","@@ -0,0 +1,16 @@
+GROUP=com.jakewharton.timber
+VERSION_NAME=3.1.1-SNAPSHOT
+
+POM_DESCRIPTION=No-nonsense injectable logging.
+
+POM_URL=https://github.com/JakeWharton/timber
+POM_SCM_URL=https://github.com/JakeWharton/timber
+POM_SCM_CONNECTION=scm:git:git://github.com/JakeWharton/timber.git
+POM_SCM_DEV_CONNECTION=scm:git:git://github.com/JakeWharton/timber.git
+
+POM_LICENCE_NAME=The Apache Software License, Version 2.0
+POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+POM_LICENCE_DIST=repo
+
+POM_DEVELOPER_ID=jakewharton
+POM_DEVELOPER_NAME=Jake Wharton",False,other
,gradle/gradle-mvn-push.gradle,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,112 @@
+/*
+ * Copyright 2013 Chris Banes
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+def isReleaseBuild() {
+  return VERSION_NAME.contains(""SNAPSHOT"") == false
+}
+
+def getRepositoryUsername() {
+  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : """"
+}
+
+def getRepositoryPassword() {
+  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : """"
+}
+
+afterEvaluate { project ->
+  uploadArchives {
+    repositories {
+      mavenDeployer {
+        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        repository(url: ""https://oss.sonatype.org/service/local/staging/deploy/maven2/"") {
+          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+        }
+        snapshotRepository(url: ""https://oss.sonatype.org/content/repositories/snapshots/"") {
+          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+        }
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
+
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
+        }
+      }
+    }
+  }
+
+  signing {
+    required { isReleaseBuild() && gradle.taskGraph.hasTask(""uploadArchives"") }
+    sign configurations.archives
+  }
+
+  task androidJavadocs(type: Javadoc) {
+    source = android.sourceSets.main.java.srcDirs
+    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+
+    if (JavaVersion.current().isJava8Compatible()) {
+      allprojects {
+        tasks.withType(Javadoc) {
+          options.addStringOption('Xdoclint:none', '-quiet')
+        }
+      }
+    }
+  }
+
+  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
+    classifier = 'javadoc'
+    from androidJavadocs.destinationDir
+  }
+
+  task androidSourcesJar(type: Jar) {
+    classifier = 'sources'
+    from android.sourceSets.main.java.sourceFiles
+  }
+
+  artifacts {
+    archives androidSourcesJar
+    archives androidJavadocsJar
+  }
+}","@@ -0,0 +1,112 @@
+/*
+ * Copyright 2013 Chris Banes
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+def isReleaseBuild() {
+  return VERSION_NAME.contains(""SNAPSHOT"") == false
+}
+
+def getRepositoryUsername() {
+  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : """"
+}
+
+def getRepositoryPassword() {
+  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : """"
+}
+
+afterEvaluate { project ->
+  uploadArchives {
+    repositories {
+      mavenDeployer {
+        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        repository(url: ""https://oss.sonatype.org/service/local/staging/deploy/maven2/"") {
+          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+        }
+        snapshotRepository(url: ""https://oss.sonatype.org/content/repositories/snapshots/"") {
+          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+        }
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
+
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
+        }
+      }
+    }
+  }
+
+  signing {
+    required { isReleaseBuild() && gradle.taskGraph.hasTask(""uploadArchives"") }
+    sign configurations.archives
+  }
+
+  task androidJavadocs(type: Javadoc) {
+    source = android.sourceSets.main.java.srcDirs
+    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+
+    if (JavaVersion.current().isJava8Compatible()) {
+      allprojects {
+        tasks.withType(Javadoc) {
+          options.addStringOption('Xdoclint:none', '-quiet')
+        }
+      }
+    }
+  }
+
+  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
+    classifier = 'javadoc'
+    from androidJavadocs.destinationDir
+  }
+
+  task androidSourcesJar(type: Jar) {
+    classifier = 'sources'
+    from android.sourceSets.main.java.sourceFiles
+  }
+
+  artifacts {
+    archives androidSourcesJar
+    archives androidJavadocsJar
+  }
+}",False,other
,gradle/wrapper/gradle-wrapper.properties,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,6 @@
+#Thu Aug 13 16:45:00 EDT 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.6-all.zip","@@ -0,0 +1,6 @@
+#Thu Aug 13 16:45:00 EDT 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.6-all.zip",False,other
,gradlew,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""""
+
+APP_NAME=""Gradle""
+APP_BASE_NAME=`basename ""$0""`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=""maximum""
+
+warn ( ) {
+    echo ""$*""
+}
+
+die ( ) {
+    echo
+    echo ""$*""
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case ""`uname`"" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n ""$JAVA_HOME"" ] && JAVA_HOME=`cygpath --unix ""$JAVA_HOME""`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG=""$0""
+# Need this for relative symlinks.
+while [ -h ""$PRG"" ] ; do
+    ls=`ls -ld ""$PRG""`
+    link=`expr ""$ls"" : '.*-> \(.*\)$'`
+    if expr ""$link"" : '/.*' > /dev/null; then
+        PRG=""$link""
+    else
+        PRG=`dirname ""$PRG""`""/$link""
+    fi
+done
+SAVED=""`pwd`""
+cd ""`dirname \""$PRG\""`/"" >&-
+APP_HOME=""`pwd -P`""
+cd ""$SAVED"" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n ""$JAVA_HOME"" ] ; then
+    if [ -x ""$JAVA_HOME/jre/sh/java"" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=""$JAVA_HOME/jre/sh/java""
+    else
+        JAVACMD=""$JAVA_HOME/bin/java""
+    fi
+    if [ ! -x ""$JAVACMD"" ] ; then
+        die ""ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation.""
+    fi
+else
+    JAVACMD=""java""
+    which java >/dev/null 2>&1 || die ""ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation.""
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ ""$cygwin"" = ""false"" -a ""$darwin"" = ""false"" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ ""$MAX_FD"" = ""maximum"" -o ""$MAX_FD"" = ""max"" ] ; then
+            MAX_FD=""$MAX_FD_LIMIT""
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn ""Could not set maximum file descriptor limit: $MAX_FD""
+        fi
+    else
+        warn ""Could not query maximum file descriptor limit: $MAX_FD_LIMIT""
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS=""$GRADLE_OPTS \""-Xdock:name=$APP_NAME\"" \""-Xdock:icon=$APP_HOME/media/gradle.icns\""""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed ""$APP_HOME""`
+    CLASSPATH=`cygpath --path --mixed ""$CLASSPATH""`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS=""$ROOTDIRS$SEP$dir""
+        SEP=""|""
+    done
+    OURCYGPATTERN=""(^($ROOTDIRS))""
+    # Add a user-defined pattern to the cygpath arguments
+    if [ ""$GRADLE_CYGPATTERN"" != """" ] ; then
+        OURCYGPATTERN=""$OURCYGPATTERN|($GRADLE_CYGPATTERN)""
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in ""$@"" ; do
+        CHECK=`echo ""$arg""|egrep -c ""$OURCYGPATTERN"" -`
+        CHECK2=`echo ""$arg""|egrep -c ""^-""`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed ""$arg""`
+        else
+            eval `echo args$i`=""\""$arg\""""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- ""$args0"" ;;
+        (2) set -- ""$args0"" ""$args1"" ;;
+        (3) set -- ""$args0"" ""$args1"" ""$args2"" ;;
+        (4) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ;;
+        (5) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ;;
+        (6) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ;;
+        (7) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ;;
+        (8) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ;;
+        (9) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ""$args8"" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=(""$@"")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]=""-Dorg.gradle.appname=$APP_BASE_NAME""
+
+exec ""$JAVACMD"" ""${JVM_OPTS[@]}"" -classpath ""$CLASSPATH"" org.gradle.wrapper.GradleWrapperMain ""$@""","@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""""
+
+APP_NAME=""Gradle""
+APP_BASE_NAME=`basename ""$0""`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=""maximum""
+
+warn ( ) {
+    echo ""$*""
+}
+
+die ( ) {
+    echo
+    echo ""$*""
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case ""`uname`"" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n ""$JAVA_HOME"" ] && JAVA_HOME=`cygpath --unix ""$JAVA_HOME""`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG=""$0""
+# Need this for relative symlinks.
+while [ -h ""$PRG"" ] ; do
+    ls=`ls -ld ""$PRG""`
+    link=`expr ""$ls"" : '.*-> \(.*\)$'`
+    if expr ""$link"" : '/.*' > /dev/null; then
+        PRG=""$link""
+    else
+        PRG=`dirname ""$PRG""`""/$link""
+    fi
+done
+SAVED=""`pwd`""
+cd ""`dirname \""$PRG\""`/"" >&-
+APP_HOME=""`pwd -P`""
+cd ""$SAVED"" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n ""$JAVA_HOME"" ] ; then
+    if [ -x ""$JAVA_HOME/jre/sh/java"" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=""$JAVA_HOME/jre/sh/java""
+    else
+        JAVACMD=""$JAVA_HOME/bin/java""
+    fi
+    if [ ! -x ""$JAVACMD"" ] ; then
+        die ""ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation.""
+    fi
+else
+    JAVACMD=""java""
+    which java >/dev/null 2>&1 || die ""ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation.""
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ ""$cygwin"" = ""false"" -a ""$darwin"" = ""false"" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ ""$MAX_FD"" = ""maximum"" -o ""$MAX_FD"" = ""max"" ] ; then
+            MAX_FD=""$MAX_FD_LIMIT""
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn ""Could not set maximum file descriptor limit: $MAX_FD""
+        fi
+    else
+        warn ""Could not query maximum file descriptor limit: $MAX_FD_LIMIT""
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS=""$GRADLE_OPTS \""-Xdock:name=$APP_NAME\"" \""-Xdock:icon=$APP_HOME/media/gradle.icns\""""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed ""$APP_HOME""`
+    CLASSPATH=`cygpath --path --mixed ""$CLASSPATH""`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS=""$ROOTDIRS$SEP$dir""
+        SEP=""|""
+    done
+    OURCYGPATTERN=""(^($ROOTDIRS))""
+    # Add a user-defined pattern to the cygpath arguments
+    if [ ""$GRADLE_CYGPATTERN"" != """" ] ; then
+        OURCYGPATTERN=""$OURCYGPATTERN|($GRADLE_CYGPATTERN)""
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in ""$@"" ; do
+        CHECK=`echo ""$arg""|egrep -c ""$OURCYGPATTERN"" -`
+        CHECK2=`echo ""$arg""|egrep -c ""^-""`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed ""$arg""`
+        else
+            eval `echo args$i`=""\""$arg\""""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- ""$args0"" ;;
+        (2) set -- ""$args0"" ""$args1"" ;;
+        (3) set -- ""$args0"" ""$args1"" ""$args2"" ;;
+        (4) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ;;
+        (5) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ;;
+        (6) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ;;
+        (7) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ;;
+        (8) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ;;
+        (9) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ""$args8"" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=(""$@"")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]=""-Dorg.gradle.appname=$APP_BASE_NAME""
+
+exec ""$JAVACMD"" ""${JVM_OPTS[@]}"" -classpath ""$CLASSPATH"" org.gradle.wrapper.GradleWrapperMain ""$@""",False,other
,gradlew.bat,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,90 @@
+@if ""%DEBUG%"" == """" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if ""%OS%""==""Windows_NT"" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if ""%DIRNAME%"" == """" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if ""%ERRORLEVEL%"" == ""0"" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:""=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist ""%JAVA_EXE%"" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not ""%OS%"" == ""Windows_NT"" goto win9xME_args
+if ""%@eval[2+2]"" == ""4"" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if ""x%~1"" == ""x"" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if ""%ERRORLEVEL%""==""0"" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not """" == ""%GRADLE_EXIT_CONSOLE%"" exit 1
+exit /b 1
+
+:mainEnd
+if ""%OS%""==""Windows_NT"" endlocal
+
+:omega","@@ -0,0 +1,90 @@
+@if ""%DEBUG%"" == """" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if ""%OS%""==""Windows_NT"" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if ""%DIRNAME%"" == """" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if ""%ERRORLEVEL%"" == ""0"" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:""=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist ""%JAVA_EXE%"" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not ""%OS%"" == ""Windows_NT"" goto win9xME_args
+if ""%@eval[2+2]"" == ""4"" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if ""x%~1"" == ""x"" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if ""%ERRORLEVEL%""==""0"" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not """" == ""%GRADLE_EXIT_CONSOLE%"" exit 1
+exit /b 1
+
+:mainEnd
+if ""%OS%""==""Windows_NT"" endlocal
+
+:omega",True,other
pom.xml,,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -1,152 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-
-  <groupId>com.jakewharton.timber</groupId>
-  <artifactId>timber-parent</artifactId>
-  <version>3.1.1-SNAPSHOT</version>
-  <packaging>pom</packaging>
-
-  <name>Timber (Parent)</name>
-  <description>No-nonsense injectable logging.</description>
-  <url>http://github.com/JakeWharton/timber/</url>
-  <inceptionYear>2013</inceptionYear>
-
-  <modules>
-    <module>timber</module>
-    <module>timber-sample</module>
-    <module>timber-lint</module>
-  </modules>
-
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-
-    <java.version>1.6</java.version>
-    <android.version>4.1.1.4</android.version>
-    <android.platform>16</android.platform>
-    <butterknife.version>2.0.0</butterknife.version>
-    <junit.version>4.10</junit.version>
-    <robolectric.version>2.2</robolectric.version>
-    <fest.version>2.0M10</fest.version>
-    <lint.version>24.1.2</lint.version>
-  </properties>
-
-  <scm>
-    <url>http://github.com/JakeWharton/timber/</url>
-    <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
-    <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
-  </scm>
-
-  <issueManagement>
-    <system>GitHub Issues</system>
-    <url>http://github.com/JakeWharton/timber/issues</url>
-  </issueManagement>
-
-  <licenses>
-    <license>
-      <name>Apache 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-    </license>
-  </licenses>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>com.google.android</groupId>
-        <artifactId>android</artifactId>
-        <version>${android.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.jakewharton</groupId>
-        <artifactId>butterknife</artifactId>
-        <version>${butterknife.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>junit</groupId>
-        <artifactId>junit</artifactId>
-        <version>${junit.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.robolectric</groupId>
-        <artifactId>robolectric</artifactId>
-        <version>${robolectric.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.easytesting</groupId>
-        <artifactId>fest-assert-core</artifactId>
-        <version>${fest.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.android.tools.lint</groupId>
-        <artifactId>lint</artifactId>
-        <version>${lint.version}</version>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.1</version>
-        <configuration>
-          <source>${java.version}</source>
-          <target>${java.version}</target>
-          <showWarnings>true</showWarnings>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-checkstyle-plugin</artifactId>
-        <version>2.10</version>
-        <configuration>
-          <failsOnError>true</failsOnError>
-          <configLocation>checkstyle.xml</configLocation>
-          <consoleOutput>true</consoleOutput>
-        </configuration>
-        <executions>
-          <execution>
-            <phase>verify</phase>
-            <goals>
-              <goal>checkstyle</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.4</version>
-        <configuration>
-          <autoVersionSubmodules>true</autoVersionSubmodules>
-        </configuration>
-      </plugin>
-    </plugins>
-
-    <pluginManagement>
-      <plugins>
-        <plugin>
-          <groupId>com.simpligility.maven.plugins</groupId>
-          <artifactId>android-maven-plugin</artifactId>
-          <version>4.1.0</version>
-          <configuration>
-            <sdk>
-              <platform>${android.platform}</platform>
-            </sdk>
-          </configuration>
-        </plugin>
-      </plugins>
-    </pluginManagement>
-  </build>
-</project>","@@ -1,152 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-
-  <groupId>com.jakewharton.timber</groupId>
-  <artifactId>timber-parent</artifactId>
-  <version>3.1.1-SNAPSHOT</version>
-  <packaging>pom</packaging>
-
-  <name>Timber (Parent)</name>
-  <description>No-nonsense injectable logging.</description>
-  <url>http://github.com/JakeWharton/timber/</url>
-  <inceptionYear>2013</inceptionYear>
-
-  <modules>
-    <module>timber</module>
-    <module>timber-sample</module>
-    <module>timber-lint</module>
-  </modules>
-
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-
-    <java.version>1.6</java.version>
-    <android.version>4.1.1.4</android.version>
-    <android.platform>16</android.platform>
-    <butterknife.version>2.0.0</butterknife.version>
-    <junit.version>4.10</junit.version>
-    <robolectric.version>2.2</robolectric.version>
-    <fest.version>2.0M10</fest.version>
-    <lint.version>24.1.2</lint.version>
-  </properties>
-
-  <scm>
-    <url>http://github.com/JakeWharton/timber/</url>
-    <connection>scm:git:git://github.com/JakeWharton/timber.git</connection>
-    <developerConnection>scm:git:ssh://git@github.com/JakeWharton/timber.git</developerConnection>
-    <tag>HEAD</tag>
-  </scm>
-
-  <issueManagement>
-    <system>GitHub Issues</system>
-    <url>http://github.com/JakeWharton/timber/issues</url>
-  </issueManagement>
-
-  <licenses>
-    <license>
-      <name>Apache 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-    </license>
-  </licenses>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>com.google.android</groupId>
-        <artifactId>android</artifactId>
-        <version>${android.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.jakewharton</groupId>
-        <artifactId>butterknife</artifactId>
-        <version>${butterknife.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>junit</groupId>
-        <artifactId>junit</artifactId>
-        <version>${junit.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.robolectric</groupId>
-        <artifactId>robolectric</artifactId>
-        <version>${robolectric.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.easytesting</groupId>
-        <artifactId>fest-assert-core</artifactId>
-        <version>${fest.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.android.tools.lint</groupId>
-        <artifactId>lint</artifactId>
-        <version>${lint.version}</version>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.1</version>
-        <configuration>
-          <source>${java.version}</source>
-          <target>${java.version}</target>
-          <showWarnings>true</showWarnings>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-checkstyle-plugin</artifactId>
-        <version>2.10</version>
-        <configuration>
-          <failsOnError>true</failsOnError>
-          <configLocation>checkstyle.xml</configLocation>
-          <consoleOutput>true</consoleOutput>
-        </configuration>
-        <executions>
-          <execution>
-            <phase>verify</phase>
-            <goals>
-              <goal>checkstyle</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.4</version>
-        <configuration>
-          <autoVersionSubmodules>true</autoVersionSubmodules>
-        </configuration>
-      </plugin>
-    </plugins>
-
-    <pluginManagement>
-      <plugins>
-        <plugin>
-          <groupId>com.simpligility.maven.plugins</groupId>
-          <artifactId>android-maven-plugin</artifactId>
-          <version>4.1.0</version>
-          <configuration>
-            <sdk>
-              <platform>${android.platform}</platform>
-            </sdk>
-          </configuration>
-        </plugin>
-      </plugins>
-    </pluginManagement>
-  </build>
-</project>",False,other
,settings.gradle,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,3 @@
+include ':timber'
+include ':timber-lint'
+include ':timber-sample'","@@ -0,0 +1,3 @@
+include ':timber'
+include ':timber-lint'
+include ':timber-sample'",False,other
,timber-lint/build.gradle,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,18 @@
+apply plugin: 'java'
+
+configurations {
+  lintChecks
+}
+
+dependencies {
+  compile deps.lintapi
+  compile deps.lintchecks
+
+  lintChecks files(jar)
+}
+
+jar {
+  manifest {
+    attributes('Lint-Registry': 'timber.lint.IssueRegistry')
+  }
+}","@@ -0,0 +1,18 @@
+apply plugin: 'java'
+
+configurations {
+  lintChecks
+}
+
+dependencies {
+  compile deps.lintapi
+  compile deps.lintchecks
+
+  lintChecks files(jar)
+}
+
+jar {
+  manifest {
+    attributes('Lint-Registry': 'timber.lint.IssueRegistry')
+  }
+}",False,other
timber-lint/pom.xml,,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -1,36 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.jakewharton.timber</groupId>
-    <artifactId>timber-parent</artifactId>
-    <version>3.1.1-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>timber-lint</artifactId>
-  <name>Timber Lint</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.android.tools.lint</groupId>
-      <artifactId>lint</artifactId>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jar-plugin</artifactId>
-        <configuration>
-          <archive>
-            <manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>
-          </archive>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>","@@ -1,36 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.jakewharton.timber</groupId>
-    <artifactId>timber-parent</artifactId>
-    <version>3.1.1-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>timber-lint</artifactId>
-  <name>Timber Lint</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.android.tools.lint</groupId>
-      <artifactId>lint</artifactId>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jar-plugin</artifactId>
-        <configuration>
-          <archive>
-            <manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>
-          </archive>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -40,7 +40,6 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Matcher;
 
-import static com.android.SdkConstants.GET_STRING_METHOD;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_CHAR;
@@ -55,6 +54,8 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 
 public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner,
     Detector.ClassScanner {
+  private final static String GET_STRING_METHOD = ""getString"";
+
   @NonNull @Override public Speed getSpeed() {
     return Speed.NORMAL;
   }","@@ -40,7 +40,6 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Matcher;
 
-import static com.android.SdkConstants.GET_STRING_METHOD;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_CHAR;
@@ -55,6 +54,8 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 
 public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner,
     Detector.ClassScanner {
+  private final static String GET_STRING_METHOD = ""getString"";
+
   @NonNull @Override public Speed getSpeed() {
     return Speed.NORMAL;
   }",False,source
timber-lint/src/main/resources/META-INF/MANIFEST.MF,,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -1,2 +0,0 @@
-Manifest-Version: 1.0
-Lint-Registry: timber.lint.IssueRegistry","@@ -1,2 +0,0 @@
-Manifest-Version: 1.0
-Lint-Registry: timber.lint.IssueRegistry",False,source
,timber-sample/build.gradle,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,30 @@
+apply plugin: 'com.android.application'
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+
+  compileOptions {
+    sourceCompatibility rootProject.ext.sourceCompatibilityVersion
+    targetCompatibility rootProject.ext.targetCompatibilityVersion
+  }
+
+  defaultConfig {
+    applicationId 'com.example.timber'
+    minSdkVersion rootProject.ext.minSdkVersion
+    targetSdkVersion rootProject.ext.targetSdkVersion
+    versionCode 1
+    versionName '1.0.0'
+  }
+
+  android {
+    lintOptions {
+      ignore 'InvalidPackage'
+    }
+  }
+}
+
+dependencies {
+  compile project(':timber')
+  compile 'com.jakewharton:butterknife:7.0.1'
+}","@@ -0,0 +1,30 @@
+apply plugin: 'com.android.application'
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+
+  compileOptions {
+    sourceCompatibility rootProject.ext.sourceCompatibilityVersion
+    targetCompatibility rootProject.ext.targetCompatibilityVersion
+  }
+
+  defaultConfig {
+    applicationId 'com.example.timber'
+    minSdkVersion rootProject.ext.minSdkVersion
+    targetSdkVersion rootProject.ext.targetSdkVersion
+    versionCode 1
+    versionName '1.0.0'
+  }
+
+  android {
+    lintOptions {
+      ignore 'InvalidPackage'
+    }
+  }
+}
+
+dependencies {
+  compile project(':timber')
+  compile 'com.jakewharton:butterknife:7.0.1'
+}",False,other
timber-sample/pom.xml,,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -1,43 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.jakewharton.timber</groupId>
-    <artifactId>timber-parent</artifactId>
-    <version>3.1.1-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>timber-sample</artifactId>
-  <name>Timber Sample</name>
-  <packaging>apk</packaging>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.jakewharton.timber</groupId>
-      <artifactId>timber</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.jakewharton</groupId>
-      <artifactId>butterknife</artifactId>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>com.simpligility.maven.plugins</groupId>
-        <artifactId>android-maven-plugin</artifactId>
-        <extensions>true</extensions>
-      </plugin>
-    </plugins>
-  </build>
-</project>","@@ -1,43 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.jakewharton.timber</groupId>
-    <artifactId>timber-parent</artifactId>
-    <version>3.1.1-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>timber-sample</artifactId>
-  <name>Timber Sample</name>
-  <packaging>apk</packaging>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.jakewharton.timber</groupId>
-      <artifactId>timber</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.jakewharton</groupId>
-      <artifactId>butterknife</artifactId>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>com.simpligility.maven.plugins</groupId>
-        <artifactId>android-maven-plugin</artifactId>
-        <extensions>true</extensions>
-      </plugin>
-    </plugins>
-  </build>
-</project>",False,other
timber-sample/src/main/AndroidManifest.xml,timber-sample/src/main/AndroidManifest.xml,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -1,12 +1,8 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
 
 <manifest xmlns:android=""http://schemas.android.com/apk/res/android""
-    android:versionCode=""1""
-    android:versionName=""1.0""
     package=""com.example.timber"">
 
-  <uses-sdk android:minSdkVersion=""4"" android:targetSdkVersion=""17""/>
-
   <application
       android:label=""@string/app_name""
       android:name="".ExampleApp"">","@@ -1,12 +1,8 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
 
 <manifest xmlns:android=""http://schemas.android.com/apk/res/android""
-    android:versionCode=""1""
-    android:versionName=""1.0""
     package=""com.example.timber"">
 
-  <uses-sdk android:minSdkVersion=""4"" android:targetSdkVersion=""17""/>
-
   <application
       android:label=""@string/app_name""
       android:name="".ExampleApp"">",False,source
timber-sample/src/main/java/com/example/timber/ui/DemoActivity.java,timber-sample/src/main/java/com/example/timber/ui/DemoActivity.java,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -4,8 +4,9 @@ import android.app.Activity;
 import android.os.Bundle;
 import android.widget.Button;
 import android.widget.Toast;
+
+import butterknife.ButterKnife;
 import butterknife.OnClick;
-import butterknife.Views;
 import com.example.timber.R;
 import timber.log.Timber;
 
@@ -15,7 +16,7 @@ public class DemoActivity extends Activity {
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.demo_activity);
-    Views.inject(this);
+    ButterKnife.bind(this);
     Timber.tag(""LifeCycles"");
     Timber.d(""Activity Created"");
   }","@@ -4,8 +4,9 @@ import android.app.Activity;
 import android.os.Bundle;
 import android.widget.Button;
 import android.widget.Toast;
+
+import butterknife.ButterKnife;
 import butterknife.OnClick;
-import butterknife.Views;
 import com.example.timber.R;
 import timber.log.Timber;
 
@@ -15,7 +16,7 @@ public class DemoActivity extends Activity {
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.demo_activity);
-    Views.inject(this);
+    ButterKnife.bind(this);
     Timber.tag(""LifeCycles"");
     Timber.d(""Activity Created"");
   }",False,source
,timber/build.gradle,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,54 @@
+apply plugin: 'com.android.library'
+apply plugin: 'checkstyle'
+
+task checkstyle(type: Checkstyle) {
+  configFile rootProject.file('checkstyle.xml')
+  source 'src/main/java'
+  ignoreFailures false
+  showViolations true
+  include '**/*.java'
+
+  classpath = files()
+}
+
+afterEvaluate {
+  if (project.tasks.findByName('check')) {
+    check.dependsOn('checkstyle')
+  }
+}
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+
+  defaultConfig {
+    minSdkVersion rootProject.ext.minSdkVersion
+  }
+}
+
+configurations {
+  lintChecks
+}
+
+dependencies {
+  testCompile deps.festandroid
+  testCompile deps.festassert
+  testCompile deps.junit
+  testCompile deps.robolectric
+
+  lintChecks project(path: ':timber-lint', configuration: 'lintChecks')
+}
+
+task copyLintJar(type: Copy) {
+  from(configurations.lintChecks) {
+    rename { 'lint.jar' }
+  }
+  into 'build/intermediates/lint/'
+}
+
+project.afterEvaluate {
+  def compileLintTask = project.tasks.find { it.name == 'compileLint' }
+  compileLintTask.dependsOn(copyLintJar)
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -0,0 +1,54 @@
+apply plugin: 'com.android.library'
+apply plugin: 'checkstyle'
+
+task checkstyle(type: Checkstyle) {
+  configFile rootProject.file('checkstyle.xml')
+  source 'src/main/java'
+  ignoreFailures false
+  showViolations true
+  include '**/*.java'
+
+  classpath = files()
+}
+
+afterEvaluate {
+  if (project.tasks.findByName('check')) {
+    check.dependsOn('checkstyle')
+  }
+}
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+
+  defaultConfig {
+    minSdkVersion rootProject.ext.minSdkVersion
+  }
+}
+
+configurations {
+  lintChecks
+}
+
+dependencies {
+  testCompile deps.festandroid
+  testCompile deps.festassert
+  testCompile deps.junit
+  testCompile deps.robolectric
+
+  lintChecks project(path: ':timber-lint', configuration: 'lintChecks')
+}
+
+task copyLintJar(type: Copy) {
+  from(configurations.lintChecks) {
+    rename { 'lint.jar' }
+  }
+  into 'build/intermediates/lint/'
+}
+
+project.afterEvaluate {
+  def compileLintTask = project.tasks.find { it.name == 'compileLint' }
+  compileLintTask.dependsOn(copyLintJar)
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
,timber/gradle.properties,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=timber
+POM_NAME=Timber
+POM_PACKAGING=aar","@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=timber
+POM_NAME=Timber
+POM_PACKAGING=aar",False,other
timber/pom.xml,,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -1,38 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.jakewharton.timber</groupId>
-    <artifactId>timber-parent</artifactId>
-    <version>3.1.1-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>timber</artifactId>
-  <name>Timber</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.robolectric</groupId>
-      <artifactId>robolectric</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.easytesting</groupId>
-      <artifactId>fest-assert-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-</project>","@@ -1,38 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.jakewharton.timber</groupId>
-    <artifactId>timber-parent</artifactId>
-    <version>3.1.1-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>timber</artifactId>
-  <name>Timber</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.robolectric</groupId>
-      <artifactId>robolectric</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.easytesting</groupId>
-      <artifactId>fest-assert-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-</project>",False,other
,timber/src/main/AndroidManifest.xml,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,2b337843be521f4ae728a50df54a5c33f83bdc5c,"Move to gradle

Migrate lint module to gradle, bundle with aar

Update travis config","@@ -0,0 +1,3 @@
+<manifest package=""timber.log"">
+    <application/>
+</manifest>","@@ -0,0 +1,3 @@
+<manifest package=""timber.log"">
+    <application/>
+</manifest>",False,source
.buildscript/deploy_snapshot.sh,.buildscript/deploy_snapshot.sh,37c02ea3c5a21d89cca0311a4cd1bf52a82fe39b,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,Update auto-deploy stuffs to Gradle.,"@@ -21,6 +21,6 @@ elif [ ""$TRAVIS_BRANCH"" != ""$BRANCH"" ]; then
   echo ""Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.""
 else
   echo ""Deploying snapshot...""
-  mvn clean source:jar javadoc:jar deploy --settings="".buildscript/settings.xml"" -Dmaven.test.skip=true
+  ./gradlew clean uploadArchives
   echo ""Snapshot deployed!""
 fi","@@ -21,6 +21,6 @@ elif [ ""$TRAVIS_BRANCH"" != ""$BRANCH"" ]; then
   echo ""Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.""
 else
   echo ""Deploying snapshot...""
-  mvn clean source:jar javadoc:jar deploy --settings="".buildscript/settings.xml"" -Dmaven.test.skip=true
+  ./gradlew clean uploadArchives
   echo ""Snapshot deployed!""
 fi",False,other
.buildscript/settings.xml,,37c02ea3c5a21d89cca0311a4cd1bf52a82fe39b,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,Update auto-deploy stuffs to Gradle.,"@@ -1,9 +0,0 @@
-<settings>
-  <servers>
-    <server>
-      <id>sonatype-nexus-snapshots</id>
-      <username>${env.CI_DEPLOY_USERNAME}</username>
-      <password>${env.CI_DEPLOY_PASSWORD}</password>
-    </server>
-  </servers>
-</settings>","@@ -1,9 +0,0 @@
-<settings>
-  <servers>
-    <server>
-      <id>sonatype-nexus-snapshots</id>
-      <username>${env.CI_DEPLOY_USERNAME}</username>
-      <password>${env.CI_DEPLOY_PASSWORD}</password>
-    </server>
-  </servers>
-</settings>",False,other
.travis.yml,.travis.yml,37c02ea3c5a21d89cca0311a4cd1bf52a82fe39b,d7b1acf68759eef5a4f8255bc561c721a76ebc8d,Update auto-deploy stuffs to Gradle.,"@@ -16,8 +16,8 @@ after_success:
 
 env:
   global:
-    - secure: ""hT/3yXtmkxtS8Px8Xm0mauH7TuZyrEjqhyZWCjn4Z/ZzjVWQBU/10NmQL16Jc7VDpmbhyIum2OL7UqFpgjmvnuPJgLYPJZPryLXY32hoqtleYrNuszRnpjpsyGpX6ZqDqdcmZe3fiCW08kt7oOsjpwekaOMsfodGTn5+Yt+ks30=""
-    - secure: ""EzFLgBs60RTVY3q5LIKbzhk/ja1Tv2TpleStnyJtxJd5xFHjRMLxwl1Q2rXvn7ql6tCuFSDNPUaeHHVL18Nqc9wbeOYKpEJtyG8n4cUIuCT5GAVyW1L3L1m5BOAXD09Qcha233hl9b3hjEKla3RmKDqzAfJBU4+M7rLhkvbpuUo=""
+    - secure: ""TayWqFgdWrVI75qdHlrqaZV5MB55r+L5NnLRydIdjGUpq/jLBCaZOCrk4jN47kJMRjQaJvO3tHFQGVZernh7hqCeMGjdhj40VEEVX5edOetUrNhKGl3Jsr/snZweFGHD0tQl8A727k8jh9gA6/YvrWi32aTZet2YC/DkAxlCtsM=""
+    - secure: ""rcsOFJbjcpMihb8Zv0h/VMNjGXBbogPKoQMUmg1LUvO63KvdBaJlRhsjUNBxoUsPKRlMroJ2yhusjfqfSvaoKXbzV/PbyyEJitk7+MSIVvtjuJP55lGjG2jTilvIBQ2jNYO0WZFrFFslT2akiTuTwH3G95XAhrg7dSWWrHDoYyU=""
 
 branches:
   except:","@@ -16,8 +16,8 @@ after_success:
 
 env:
   global:
-    - secure: ""hT/3yXtmkxtS8Px8Xm0mauH7TuZyrEjqhyZWCjn4Z/ZzjVWQBU/10NmQL16Jc7VDpmbhyIum2OL7UqFpgjmvnuPJgLYPJZPryLXY32hoqtleYrNuszRnpjpsyGpX6ZqDqdcmZe3fiCW08kt7oOsjpwekaOMsfodGTn5+Yt+ks30=""
-    - secure: ""EzFLgBs60RTVY3q5LIKbzhk/ja1Tv2TpleStnyJtxJd5xFHjRMLxwl1Q2rXvn7ql6tCuFSDNPUaeHHVL18Nqc9wbeOYKpEJtyG8n4cUIuCT5GAVyW1L3L1m5BOAXD09Qcha233hl9b3hjEKla3RmKDqzAfJBU4+M7rLhkvbpuUo=""
+    - secure: ""TayWqFgdWrVI75qdHlrqaZV5MB55r+L5NnLRydIdjGUpq/jLBCaZOCrk4jN47kJMRjQaJvO3tHFQGVZernh7hqCeMGjdhj40VEEVX5edOetUrNhKGl3Jsr/snZweFGHD0tQl8A727k8jh9gA6/YvrWi32aTZet2YC/DkAxlCtsM=""
+    - secure: ""rcsOFJbjcpMihb8Zv0h/VMNjGXBbogPKoQMUmg1LUvO63KvdBaJlRhsjUNBxoUsPKRlMroJ2yhusjfqfSvaoKXbzV/PbyyEJitk7+MSIVvtjuJP55lGjG2jTilvIBQ2jNYO0WZFrFFslT2akiTuTwH3G95XAhrg7dSWWrHDoYyU=""
 
 branches:
   except:",False,other
gradle.properties,gradle.properties,84d0633151941693dbee6da74c9b20601a2002b8,37c02ea3c5a21d89cca0311a4cd1bf52a82fe39b,Next version is 4.0.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=3.1.1-SNAPSHOT
+VERSION_NAME=4.0.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=3.1.1-SNAPSHOT
+VERSION_NAME=4.0.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
settings.gradle,settings.gradle,9595dac4422e7305ffbb45e2623f557cb37d7d7b,84d0633151941693dbee6da74c9b20601a2002b8,Fix root project name.,"@@ -1,3 +1,5 @@
 include ':timber'
 include ':timber-lint'
 include ':timber-sample'
+
+rootProject.name = 'timber-root'","@@ -1,3 +1,5 @@
 include ':timber'
 include ':timber-lint'
 include ':timber-sample'
+
+rootProject.name = 'timber-root'",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,eeed278a2d91fa17cffa8e4c61a785767ad6c33f,9595dac4422e7305ffbb45e2623f557cb37d7d7b,Fix: threadsafe iteration of forest collection.,"@@ -2,7 +2,7 @@ package timber.log;
 
 import android.util.Log;
 import java.util.List;
-import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.ArrayList;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -78,10 +78,10 @@ public final class Timber {
 
   /** Set a one-time tag for use on the next logging call. */
   public static Tree tag(String tag) {
-    List<Tree> forest = FOREST;
+    Tree[] forest = forestAsArray;
     //noinspection ForLoopReplaceableByForEach
-    for (int i = 0, count = forest.size(); i < count; i++) {
-      forest.get(i).explicitTag.set(tag);
+    for (int i = 0, count = forest.length; i < count; i++) {
+      forest[i].explicitTag.set(tag);
     }
     return TREE_OF_SOULS;
   }
@@ -94,118 +94,130 @@ public final class Timber {
     if (tree == TREE_OF_SOULS) {
       throw new IllegalArgumentException(""Cannot plant Timber into itself."");
     }
-    FOREST.add(tree);
+    synchronized (FOREST) {
+      FOREST.add(tree);
+      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
+    }
   }
 
   /** Remove a planted tree. */
   public static void uproot(Tree tree) {
-    if (!FOREST.remove(tree)) {
-      throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
+    synchronized (FOREST) {
+      if (!FOREST.remove(tree)) {
+        throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
+      }
+      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
     }
   }
 
   /** Remove all planted trees. */
   public static void uprootAll() {
-    FOREST.clear();
+    synchronized (FOREST) {
+      FOREST.clear();
+      forestAsArray = TREE_ARRAY_EMPTY;
+    }
   }
 
-  private static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
+  private static final Tree[] TREE_ARRAY_EMPTY = new Tree[0];
+  // Both fields guarded by 'FOREST'.
+  private static final List<Tree> FOREST = new ArrayList<>();
+  private static volatile Tree[] forestAsArray = TREE_ARRAY_EMPTY;
 
   /** A {@link Tree} that delegates to all planted trees in the {@linkplain #FOREST forest}. */
   private static final Tree TREE_OF_SOULS = new Tree() {
     @Override public void v(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).v(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].v(message, args);
       }
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).v(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].v(t, message, args);
       }
     }
 
     @Override public void d(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).d(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].d(message, args);
       }
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).d(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].d(t, message, args);
       }
     }
 
     @Override public void i(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).i(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].i(message, args);
       }
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).i(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].i(t, message, args);
       }
     }
 
     @Override public void w(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).w(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].w(message, args);
       }
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).w(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].w(t, message, args);
       }
     }
 
     @Override public void e(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).e(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].e(message, args);
       }
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).e(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].e(t, message, args);
       }
     }
 
     @Override public void wtf(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).wtf(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].wtf(message, args);
       }
     }
 
     @Override public void wtf(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).wtf(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].wtf(t, message, args);
       }
     }
 
@@ -220,7 +232,7 @@ public final class Timber {
 
   /** A facade for handling logging calls. Install instances via {@link #plant Timber.plant()}. */
   public static abstract class Tree {
-    private final ThreadLocal<String> explicitTag = new ThreadLocal<String>();
+    private final ThreadLocal<String> explicitTag = new ThreadLocal<>();
 
     String getTag() {
       String tag = explicitTag.get();","@@ -2,7 +2,7 @@ package timber.log;
 
 import android.util.Log;
 import java.util.List;
-import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.ArrayList;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -78,10 +78,10 @@ public final class Timber {
 
   /** Set a one-time tag for use on the next logging call. */
   public static Tree tag(String tag) {
-    List<Tree> forest = FOREST;
+    Tree[] forest = forestAsArray;
     //noinspection ForLoopReplaceableByForEach
-    for (int i = 0, count = forest.size(); i < count; i++) {
-      forest.get(i).explicitTag.set(tag);
+    for (int i = 0, count = forest.length; i < count; i++) {
+      forest[i].explicitTag.set(tag);
     }
     return TREE_OF_SOULS;
   }
@@ -94,118 +94,130 @@ public final class Timber {
     if (tree == TREE_OF_SOULS) {
       throw new IllegalArgumentException(""Cannot plant Timber into itself."");
     }
-    FOREST.add(tree);
+    synchronized (FOREST) {
+      FOREST.add(tree);
+      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
+    }
   }
 
   /** Remove a planted tree. */
   public static void uproot(Tree tree) {
-    if (!FOREST.remove(tree)) {
-      throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
+    synchronized (FOREST) {
+      if (!FOREST.remove(tree)) {
+        throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
+      }
+      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
     }
   }
 
   /** Remove all planted trees. */
   public static void uprootAll() {
-    FOREST.clear();
+    synchronized (FOREST) {
+      FOREST.clear();
+      forestAsArray = TREE_ARRAY_EMPTY;
+    }
   }
 
-  private static final List<Tree> FOREST = new CopyOnWriteArrayList<Tree>();
+  private static final Tree[] TREE_ARRAY_EMPTY = new Tree[0];
+  // Both fields guarded by 'FOREST'.
+  private static final List<Tree> FOREST = new ArrayList<>();
+  private static volatile Tree[] forestAsArray = TREE_ARRAY_EMPTY;
 
   /** A {@link Tree} that delegates to all planted trees in the {@linkplain #FOREST forest}. */
   private static final Tree TREE_OF_SOULS = new Tree() {
     @Override public void v(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).v(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].v(message, args);
       }
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).v(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].v(t, message, args);
       }
     }
 
     @Override public void d(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).d(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].d(message, args);
       }
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).d(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].d(t, message, args);
       }
     }
 
     @Override public void i(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).i(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].i(message, args);
       }
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).i(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].i(t, message, args);
       }
     }
 
     @Override public void w(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).w(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].w(message, args);
       }
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).w(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].w(t, message, args);
       }
     }
 
     @Override public void e(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).e(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].e(message, args);
       }
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).e(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].e(t, message, args);
       }
     }
 
     @Override public void wtf(String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).wtf(message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].wtf(message, args);
       }
     }
 
     @Override public void wtf(Throwable t, String message, Object... args) {
-      List<Tree> forest = FOREST;
+      Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.size(); i < count; i++) {
-        forest.get(i).wtf(t, message, args);
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].wtf(t, message, args);
       }
     }
 
@@ -220,7 +232,7 @@ public final class Timber {
 
   /** A facade for handling logging calls. Install instances via {@link #plant Timber.plant()}. */
   public static abstract class Tree {
-    private final ThreadLocal<String> explicitTag = new ThreadLocal<String>();
+    private final ThreadLocal<String> explicitTag = new ThreadLocal<>();
 
     String getTag() {
       String tag = explicitTag.get();",False,source
timber/build.gradle,timber/build.gradle,e9e928fd3c53acd2f34843811551113ea63646ee,eeed278a2d91fa17cffa8e4c61a785767ad6c33f,"Add IntelliJ/Android Studio @NonNls annotation

This will help the Intellij ""hard coded strings"" analysis by ignoring hard-coded strings passed in to Timber.  Since these strings are not localizable they can be excluded from this check which is intended to find I18N problems.","@@ -31,6 +31,8 @@ configurations {
 }
 
 dependencies {
+  provided 'org.jetbrains:annotations:13.0'
+
   testCompile deps.festandroid
   testCompile deps.festassert
   testCompile deps.junit","@@ -31,6 +31,8 @@ configurations {
 }
 
 dependencies {
+  provided 'org.jetbrains:annotations:13.0'
+
   testCompile deps.festandroid
   testCompile deps.festassert
   testCompile deps.junit",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,e9e928fd3c53acd2f34843811551113ea63646ee,eeed278a2d91fa17cffa8e4c61a785767ad6c33f,"Add IntelliJ/Android Studio @NonNls annotation

This will help the Intellij ""hard coded strings"" analysis by ignoring hard-coded strings passed in to Timber.  Since these strings are not localizable they can be excluded from this check which is intended to find I18N problems.","@@ -1,6 +1,9 @@
 package timber.log;
 
 import android.util.Log;
+
+import org.jetbrains.annotations.NonNls;
+
 import java.util.List;
 import java.util.ArrayList;
 import java.util.regex.Matcher;
@@ -9,62 +12,62 @@ import java.util.regex.Pattern;
 /** Logging for lazy people. */
 public final class Timber {
   /** Log a verbose message with optional format args. */
-  public static void v(String message, Object... args) {
+  public static void v(@NonNls String message, Object... args) {
     TREE_OF_SOULS.v(message, args);
   }
 
   /** Log a verbose exception and a message with optional format args. */
-  public static void v(Throwable t, String message, Object... args) {
+  public static void v(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.v(t, message, args);
   }
 
   /** Log a debug message with optional format args. */
-  public static void d(String message, Object... args) {
+  public static void d(@NonNls String message, Object... args) {
     TREE_OF_SOULS.d(message, args);
   }
 
   /** Log a debug exception and a message with optional format args. */
-  public static void d(Throwable t, String message, Object... args) {
+  public static void d(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.d(t, message, args);
   }
 
   /** Log an info message with optional format args. */
-  public static void i(String message, Object... args) {
+  public static void i(@NonNls String message, Object... args) {
     TREE_OF_SOULS.i(message, args);
   }
 
   /** Log an info exception and a message with optional format args. */
-  public static void i(Throwable t, String message, Object... args) {
+  public static void i(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.i(t, message, args);
   }
 
   /** Log a warning message with optional format args. */
-  public static void w(String message, Object... args) {
+  public static void w(@NonNls String message, Object... args) {
     TREE_OF_SOULS.w(message, args);
   }
 
   /** Log a warning exception and a message with optional format args. */
-  public static void w(Throwable t, String message, Object... args) {
+  public static void w(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.w(t, message, args);
   }
 
   /** Log an error message with optional format args. */
-  public static void e(String message, Object... args) {
+  public static void e(@NonNls String message, Object... args) {
     TREE_OF_SOULS.e(message, args);
   }
 
   /** Log an error exception and a message with optional format args. */
-  public static void e(Throwable t, String message, Object... args) {
+  public static void e(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.e(t, message, args);
   }
 
   /** Log an assert message with optional format args. */
-  public static void wtf(String message, Object... args) {
+  public static void wtf(@NonNls String message, Object... args) {
     TREE_OF_SOULS.wtf(message, args);
   }
 
   /** Log an assert exception and a message with optional format args. */
-  public static void wtf(Throwable t, String message, Object... args) {
+  public static void wtf(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.wtf(t, message, args);
   }","@@ -1,6 +1,9 @@
 package timber.log;
 
 import android.util.Log;
+
+import org.jetbrains.annotations.NonNls;
+
 import java.util.List;
 import java.util.ArrayList;
 import java.util.regex.Matcher;
@@ -9,62 +12,62 @@ import java.util.regex.Pattern;
 /** Logging for lazy people. */
 public final class Timber {
   /** Log a verbose message with optional format args. */
-  public static void v(String message, Object... args) {
+  public static void v(@NonNls String message, Object... args) {
     TREE_OF_SOULS.v(message, args);
   }
 
   /** Log a verbose exception and a message with optional format args. */
-  public static void v(Throwable t, String message, Object... args) {
+  public static void v(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.v(t, message, args);
   }
 
   /** Log a debug message with optional format args. */
-  public static void d(String message, Object... args) {
+  public static void d(@NonNls String message, Object... args) {
     TREE_OF_SOULS.d(message, args);
   }
 
   /** Log a debug exception and a message with optional format args. */
-  public static void d(Throwable t, String message, Object... args) {
+  public static void d(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.d(t, message, args);
   }
 
   /** Log an info message with optional format args. */
-  public static void i(String message, Object... args) {
+  public static void i(@NonNls String message, Object... args) {
     TREE_OF_SOULS.i(message, args);
   }
 
   /** Log an info exception and a message with optional format args. */
-  public static void i(Throwable t, String message, Object... args) {
+  public static void i(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.i(t, message, args);
   }
 
   /** Log a warning message with optional format args. */
-  public static void w(String message, Object... args) {
+  public static void w(@NonNls String message, Object... args) {
     TREE_OF_SOULS.w(message, args);
   }
 
   /** Log a warning exception and a message with optional format args. */
-  public static void w(Throwable t, String message, Object... args) {
+  public static void w(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.w(t, message, args);
   }
 
   /** Log an error message with optional format args. */
-  public static void e(String message, Object... args) {
+  public static void e(@NonNls String message, Object... args) {
     TREE_OF_SOULS.e(message, args);
   }
 
   /** Log an error exception and a message with optional format args. */
-  public static void e(Throwable t, String message, Object... args) {
+  public static void e(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.e(t, message, args);
   }
 
   /** Log an assert message with optional format args. */
-  public static void wtf(String message, Object... args) {
+  public static void wtf(@NonNls String message, Object... args) {
     TREE_OF_SOULS.wtf(message, args);
   }
 
   /** Log an assert exception and a message with optional format args. */
-  public static void wtf(Throwable t, String message, Object... args) {
+  public static void wtf(Throwable t, @NonNls String message, Object... args) {
     TREE_OF_SOULS.wtf(t, message, args);
   }",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,22a2252e6fcca90ec5780cde0d40dda1023f93ab,e9e928fd3c53acd2f34843811551113ea63646ee,Add forest copy getter for all planted trees.,"@@ -1,13 +1,13 @@
 package timber.log;
 
 import android.util.Log;
-
-import org.jetbrains.annotations.NonNls;
-
-import java.util.List;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.jetbrains.annotations.NonNls;
+
+import static java.util.Collections.unmodifiableList;
 
 /** Logging for lazy people. */
 public final class Timber {
@@ -121,6 +121,13 @@ public final class Timber {
     }
   }
 
+  /** Return a copy of all planted {@linkplain Tree trees}. */
+  public static List<Tree> forest() {
+    synchronized (FOREST) {
+      return unmodifiableList(new ArrayList<>(FOREST));
+    }
+  }
+
   private static final Tree[] TREE_ARRAY_EMPTY = new Tree[0];
   // Both fields guarded by 'FOREST'.
   private static final List<Tree> FOREST = new ArrayList<>();","@@ -1,13 +1,13 @@
 package timber.log;
 
 import android.util.Log;
-
-import org.jetbrains.annotations.NonNls;
-
-import java.util.List;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.jetbrains.annotations.NonNls;
+
+import static java.util.Collections.unmodifiableList;
 
 /** Logging for lazy people. */
 public final class Timber {
@@ -121,6 +121,13 @@ public final class Timber {
     }
   }
 
+  /** Return a copy of all planted {@linkplain Tree trees}. */
+  public static List<Tree> forest() {
+    synchronized (FOREST) {
+      return unmodifiableList(new ArrayList<>(FOREST));
+    }
+  }
+
   private static final Tree[] TREE_ARRAY_EMPTY = new Tree[0];
   // Both fields guarded by 'FOREST'.
   private static final List<Tree> FOREST = new ArrayList<>();",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,22a2252e6fcca90ec5780cde0d40dda1023f93ab,e9e928fd3c53acd2f34843811551113ea63646ee,Add forest copy getter for all planted trees.,"@@ -58,6 +58,15 @@ public class TimberTest {
     }
   }
 
+  @Test public void forestReturnsAllPlanted() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1);
+    Timber.plant(tree2);
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2);
+  }
+
   @Test public void uprootThrowsIfMissing() {
     try {
       Timber.uproot(new Timber.DebugTree());","@@ -58,6 +58,15 @@ public class TimberTest {
     }
   }
 
+  @Test public void forestReturnsAllPlanted() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1);
+    Timber.plant(tree2);
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2);
+  }
+
   @Test public void uprootThrowsIfMissing() {
     try {
       Timber.uproot(new Timber.DebugTree());",False,test
CHANGELOG.md,CHANGELOG.md,a4f3e08dae39162f84a02a229b78a063eee5d1e8,1967f22a339f3c4bfcef23a089b9ee1e5fc4fab2,Prepare version 4.0.0.,"@@ -1,6 +1,15 @@
 Change Log
 ==========
 
+Version 4.0.0 *(2015-10-11)*
+----------------------------
+
+ * New: Library is now an .aar! This means the lint rules are automatically applied to consuming
+   projects.
+ * New: `Tree.forest()` returns an immutable copy of all planted trees.
+ * Fix: Ensure thread safety when logging and adding or removing trees concurrently.
+
+
 Version 3.1.0 *(2015-05-11)*
 ----------------------------","@@ -1,6 +1,15 @@
 Change Log
 ==========
 
+Version 4.0.0 *(2015-10-11)*
+----------------------------
+
+ * New: Library is now an .aar! This means the lint rules are automatically applied to consuming
+   projects.
+ * New: `Tree.forest()` returns an immutable copy of all planted trees.
+ * Fix: Ensure thread safety when logging and adding or removing trees concurrently.
+
+
 Version 3.1.0 *(2015-05-11)*
 ----------------------------",False,other
README.md,README.md,a4f3e08dae39162f84a02a229b78a063eee5d1e8,1967f22a339f3c4bfcef23a089b9ee1e5fc4fab2,Prepare version 4.0.0.,"@@ -31,18 +31,8 @@ Check out the sample app in `timber-sample/` to see it in action.
 Download
 --------
 
-Download [the latest JAR][2] or grab via Maven:
-
-```xml
-<dependency>
-  <groupId>com.jakewharton.timber</groupId>
-  <artifactId>timber</artifactId>
-  <version>3.1.0</version>
-</dependency>
-```
-or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:3.1.0'
+compile 'com.jakewharton.timber:timber:4.0.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -31,18 +31,8 @@ Check out the sample app in `timber-sample/` to see it in action.
 Download
 --------
 
-Download [the latest JAR][2] or grab via Maven:
-
-```xml
-<dependency>
-  <groupId>com.jakewharton.timber</groupId>
-  <artifactId>timber</artifactId>
-  <version>3.1.0</version>
-</dependency>
-```
-or Gradle:
 ```groovy
-compile 'com.jakewharton.timber:timber:3.1.0'
+compile 'com.jakewharton.timber:timber:4.0.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
,RELEASING.md,a4f3e08dae39162f84a02a229b78a063eee5d1e8,1967f22a339f3c4bfcef23a089b9ee1e5fc4fab2,Prepare version 4.0.0.,"@@ -0,0 +1,13 @@
+Releasing
+========
+
+ 1. Change the version in `gradle.properties` to a non-SNAPSHOT version.
+ 2. Update the `CHANGELOG.md` for the impending release.
+ 3. Update the `README.md` with the new version.
+ 4. `git commit -am ""Prepare for release X.Y.Z.""` (where X.Y.Z is the new version)
+ 5. `./gradlew clean uploadArchives`
+ 6. `git tag -a X.Y.Z -m ""Version X.Y.Z""` (where X.Y.Z is the new version)
+ 7. Update the `gradle.properties` to the next SNAPSHOT version.
+ 8. `git commit -am ""Prepare next development version.""`
+ 9. `git push && git push --tags`
+ 10. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.","@@ -0,0 +1,13 @@
+Releasing
+========
+
+ 1. Change the version in `gradle.properties` to a non-SNAPSHOT version.
+ 2. Update the `CHANGELOG.md` for the impending release.
+ 3. Update the `README.md` with the new version.
+ 4. `git commit -am ""Prepare for release X.Y.Z.""` (where X.Y.Z is the new version)
+ 5. `./gradlew clean uploadArchives`
+ 6. `git tag -a X.Y.Z -m ""Version X.Y.Z""` (where X.Y.Z is the new version)
+ 7. Update the `gradle.properties` to the next SNAPSHOT version.
+ 8. `git commit -am ""Prepare next development version.""`
+ 9. `git push && git push --tags`
+ 10. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.",False,other
gradle.properties,gradle.properties,a4f3e08dae39162f84a02a229b78a063eee5d1e8,1967f22a339f3c4bfcef23a089b9ee1e5fc4fab2,Prepare version 4.0.0.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.0.0-SNAPSHOT
+VERSION_NAME=4.0.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.0.0-SNAPSHOT
+VERSION_NAME=4.0.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,7d67419bbcce9edc28613fa09946da3ca0de0b29,a4f3e08dae39162f84a02a229b78a063eee5d1e8,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.0.0
+VERSION_NAME=4.0.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.0.0
+VERSION_NAME=4.0.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
timber-lint/build.gradle,timber-lint/build.gradle,70fcc4e6d9ee2aceaaafe43fbcc042739517ce4b,7d67419bbcce9edc28613fa09946da3ca0de0b29,Build lint jar targetting Java 7 VMs.,"@@ -1,5 +1,8 @@
 apply plugin: 'java'
 
+targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_7
+
 configurations {
   lintChecks
 }","@@ -1,5 +1,8 @@
 apply plugin: 'java'
 
+targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_7
+
 configurations {
   lintChecks
 }",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,b76957bb23fba77b7a3c8e970689eb84059ab887,9d5cb9a2ee295f6155741592d17f75d261ee04e4,Allow any type into a '%s' format marker.,"@@ -210,10 +210,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
             break;
           case 'h':
           case 'H':
-          case 's':
-          case 'S':
             valid = type != Boolean.TYPE && !Number.class.isAssignableFrom(type);
             break;
+          case 's':
+          case 'S':
           default:
             valid = true;
         }","@@ -210,10 +210,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
             break;
           case 'h':
           case 'H':
-          case 's':
-          case 'S':
             valid = type != Boolean.TYPE && !Number.class.isAssignableFrom(type);
             break;
+          case 's':
+          case 'S':
           default:
             valid = true;
         }",False,source
build.gradle,build.gradle,8661494a8230f9bef7ce40842a3e511a4b2e6aed,9d5cb9a2ee295f6155741592d17f75d261ee04e4,Latest Gradle plugin.,"@@ -3,7 +3,7 @@ buildscript {
     mavenCentral()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:1.3.0'
+    classpath 'com.android.tools.build:gradle:1.3.1'
   }
 }","@@ -3,7 +3,7 @@ buildscript {
     mavenCentral()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:1.3.0'
+    classpath 'com.android.tools.build:gradle:1.3.1'
   }
 }",False,other
timber-sample/build.gradle,timber-sample/build.gradle,d02b6a49389c9528f5ea0f05a732f3e6382d2d0a,9d5cb9a2ee295f6155741592d17f75d261ee04e4,"Correct lintOptions specification, also log to stdout.","@@ -17,10 +17,10 @@ android {
     versionName '1.0.0'
   }
 
-  android {
-    lintOptions {
-      ignore 'InvalidPackage'
-    }
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    ignore 'InvalidPackage'
   }
 }","@@ -17,10 +17,10 @@ android {
     versionName '1.0.0'
   }
 
-  android {
-    lintOptions {
-      ignore 'InvalidPackage'
-    }
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    ignore 'InvalidPackage'
   }
 }",False,other
CHANGELOG.md,CHANGELOG.md,bfc7f59ff94d1db9c52b300e44a27a5a79d24cc9,a951d65ccdb63dcd122916f79e27a038d9bfb37f,Prepare for release 4.0.1.,"@@ -1,7 +1,14 @@
 Change Log
 ==========
 
-Version 4.0.0 *(2015-10-11)*
+Version 4.0.1 *(2015-10-07)*
+----------------------------
+
+ * Fix: TimberArgTypes lint rule now allows booleans and numbers in '%s' format markers.
+ * Fix: Lint rules now support running on Java 7 VMs.
+
+
+Version 4.0.0 *(2015-10-07)*
 ----------------------------
 
  * New: Library is now an .aar! This means the lint rules are automatically applied to consuming","@@ -1,7 +1,14 @@
 Change Log
 ==========
 
-Version 4.0.0 *(2015-10-11)*
+Version 4.0.1 *(2015-10-07)*
+----------------------------
+
+ * Fix: TimberArgTypes lint rule now allows booleans and numbers in '%s' format markers.
+ * Fix: Lint rules now support running on Java 7 VMs.
+
+
+Version 4.0.0 *(2015-10-07)*
 ----------------------------
 
  * New: Library is now an .aar! This means the lint rules are automatically applied to consuming",False,other
README.md,README.md,bfc7f59ff94d1db9c52b300e44a27a5a79d24cc9,a951d65ccdb63dcd122916f79e27a038d9bfb37f,Prepare for release 4.0.1.,"@@ -32,7 +32,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.0.0'
+compile 'com.jakewharton.timber:timber:4.0.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -32,7 +32,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.0.0'
+compile 'com.jakewharton.timber:timber:4.0.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,bfc7f59ff94d1db9c52b300e44a27a5a79d24cc9,a951d65ccdb63dcd122916f79e27a038d9bfb37f,Prepare for release 4.0.1.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.0.1-SNAPSHOT
+VERSION_NAME=4.0.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.0.1-SNAPSHOT
+VERSION_NAME=4.0.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,136394d5556bb27d7c39018c33d7c42658cdfcd9,bfc7f59ff94d1db9c52b300e44a27a5a79d24cc9,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.0.1
+VERSION_NAME=4.0.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.0.1
+VERSION_NAME=4.0.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
README.md,README.md,ef7ebf2968f4097e16ff4653d3ee6518f4163145,136394d5556bb27d7c39018c33d7c42658cdfcd9,Document lint rules in README.,"@@ -28,6 +28,50 @@ Two easy steps:
 Check out the sample app in `timber-sample/` to see it in action.
 
 
+Lint
+----
+
+Timber ships with embedded lint rules to detect problems in your app.
+
+ *  **TimberArgCount** (Error) - Detects an incorrect number of arguments passed to a `Timber` call for
+    the specified format string.
+
+        Example.java:35: Error: Wrong argument count, format string Hello %s %s! requires 2 but format call supplies 1 [TimberArgCount]
+            Timber.d(""Hello %s %s!"", firstName);
+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+ *  **TimberArgTypes** (Error) - Detects arguments which are of the wrong type for the specified format string.
+
+        Example.java:35: Error: Wrong argument type for formatting argument '#0' in success = %b: conversion is 'b', received String (argument #2 in method call) [TimberArgTypes]
+            Timber.d(""success = %b"", taskName);
+                                     ~~~~~~~~
+ *  **TimberTagLength** (Error) - Detects the use of tags which are longer than Android's maximum length of 23.
+
+        Example.java:35: Error: The logging tag can be at most 23 characters, was 35 (TagNameThatIsReallyReallyReallyLong) [TimberTagLength]
+            Timber.tag(""TagNameThatIsReallyReallyReallyLong"").d(""Hello %s %s!"", firstName, lastName);
+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+ *  **LogNotTimber** (Warning) - Detects usages of Android's `Log` that should be using `Timber`.
+
+        Example.java:35: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            Log.d(""Greeting"", ""Hello "" + firstName + "" "" + lastName + ""!"");
+                ~
+
+ *  **StringFormatInTimber** (Warning) - Detects `String.format` used inside of a `Timber` call. Timber
+    handles string formatting automatically.
+
+        Example.java:35: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            Timber.d(String.format(""Hello, %s %s"", firstName, lastName));
+                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+ *  **BinaryOperationInTimber** (Warning) - Detects string concatenation inside of a `Timber` call. Timber
+    handles string formatting automatically and should be preferred over manual concatenation.
+
+        Example.java:35: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            Timber.d(""Hello "" + firstName + "" "" + lastName + ""!"");
+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+
 Download
 --------","@@ -28,6 +28,50 @@ Two easy steps:
 Check out the sample app in `timber-sample/` to see it in action.
 
 
+Lint
+----
+
+Timber ships with embedded lint rules to detect problems in your app.
+
+ *  **TimberArgCount** (Error) - Detects an incorrect number of arguments passed to a `Timber` call for
+    the specified format string.
+
+        Example.java:35: Error: Wrong argument count, format string Hello %s %s! requires 2 but format call supplies 1 [TimberArgCount]
+            Timber.d(""Hello %s %s!"", firstName);
+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+ *  **TimberArgTypes** (Error) - Detects arguments which are of the wrong type for the specified format string.
+
+        Example.java:35: Error: Wrong argument type for formatting argument '#0' in success = %b: conversion is 'b', received String (argument #2 in method call) [TimberArgTypes]
+            Timber.d(""success = %b"", taskName);
+                                     ~~~~~~~~
+ *  **TimberTagLength** (Error) - Detects the use of tags which are longer than Android's maximum length of 23.
+
+        Example.java:35: Error: The logging tag can be at most 23 characters, was 35 (TagNameThatIsReallyReallyReallyLong) [TimberTagLength]
+            Timber.tag(""TagNameThatIsReallyReallyReallyLong"").d(""Hello %s %s!"", firstName, lastName);
+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+ *  **LogNotTimber** (Warning) - Detects usages of Android's `Log` that should be using `Timber`.
+
+        Example.java:35: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            Log.d(""Greeting"", ""Hello "" + firstName + "" "" + lastName + ""!"");
+                ~
+
+ *  **StringFormatInTimber** (Warning) - Detects `String.format` used inside of a `Timber` call. Timber
+    handles string formatting automatically.
+
+        Example.java:35: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            Timber.d(String.format(""Hello, %s %s"", firstName, lastName));
+                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+ *  **BinaryOperationInTimber** (Warning) - Detects string concatenation inside of a `Timber` call. Timber
+    handles string formatting automatically and should be preferred over manual concatenation.
+
+        Example.java:35: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            Timber.d(""Hello "" + firstName + "" "" + lastName + ""!"");
+            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+
 Download
 --------",False,readme
timber/build.gradle,timber/build.gradle,3ef6e2e2267d47ff43a68f41dbf19b11349a0228,ef7ebf2968f4097e16ff4653d3ee6518f4163145,Consumer Proguard rule is added,"@@ -23,6 +23,7 @@ android {
 
   defaultConfig {
     minSdkVersion rootProject.ext.minSdkVersion
+    consumerProguardFiles 'consumer-proguard-rules.pro'
   }
 }","@@ -23,6 +23,7 @@ android {
 
   defaultConfig {
     minSdkVersion rootProject.ext.minSdkVersion
+    consumerProguardFiles 'consumer-proguard-rules.pro'
   }
 }",False,other
,timber/consumer-proguard-rules.pro,3ef6e2e2267d47ff43a68f41dbf19b11349a0228,ef7ebf2968f4097e16ff4653d3ee6518f4163145,Consumer Proguard rule is added,"@@ -0,0 +1 @@
+-dontwarn org.jetbrains.annotations.**","@@ -0,0 +1 @@
+-dontwarn org.jetbrains.annotations.**",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,d31086ead3ed14ddcf6dae20e6d4a45f7cd09a8d,7e480c2b837eebd266a7d680407a6e63cd13f9a9,"Replace use of Log#getStackTraceString(Throwable)

The built-in method hides UnknownHostException, which we do not want.
This diff adds a method to get a Throwable's stack trace as a string
that does not exhibit this behavior.","@@ -1,6 +1,9 @@
 package timber.log;
 
 import android.util.Log;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.regex.Matcher;
@@ -328,19 +331,29 @@ public final class Timber {
         if (t == null) {
           return; // Swallow message if it's null and there's no throwable.
         }
-        message = Log.getStackTraceString(t);
+        message = getStackTraceString(t);
       } else {
         if (args.length > 0) {
           message = String.format(message, args);
         }
         if (t != null) {
-          message += ""\n"" + Log.getStackTraceString(t);
+          message += ""\n"" + getStackTraceString(t);
         }
       }
 
       log(priority, getTag(), message, t);
     }
 
+    private String getStackTraceString(Throwable t) {
+      // Don't replace this with Log.getStackTraceString() - it hides
+      // UnknownHostException, which is not what we want.
+      StringWriter sw = new StringWriter(256);
+      PrintWriter pw = new PrintWriter(sw, false);
+      t.printStackTrace(pw);
+      pw.flush();
+      return sw.toString();
+    }
+
     /**
      * Write a log message to its destination. Called for all level-specific methods by default.
      *","@@ -1,6 +1,9 @@
 package timber.log;
 
 import android.util.Log;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.regex.Matcher;
@@ -328,19 +331,29 @@ public final class Timber {
         if (t == null) {
           return; // Swallow message if it's null and there's no throwable.
         }
-        message = Log.getStackTraceString(t);
+        message = getStackTraceString(t);
       } else {
         if (args.length > 0) {
           message = String.format(message, args);
         }
         if (t != null) {
-          message += ""\n"" + Log.getStackTraceString(t);
+          message += ""\n"" + getStackTraceString(t);
         }
       }
 
       log(priority, getTag(), message, t);
     }
 
+    private String getStackTraceString(Throwable t) {
+      // Don't replace this with Log.getStackTraceString() - it hides
+      // UnknownHostException, which is not what we want.
+      StringWriter sw = new StringWriter(256);
+      PrintWriter pw = new PrintWriter(sw, false);
+      t.printStackTrace(pw);
+      pw.flush();
+      return sw.toString();
+    }
+
     /**
      * Write a log message to its destination. Called for all level-specific methods by default.
      *",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,d31086ead3ed14ddcf6dae20e6d4a45f7cd09a8d,7e480c2b837eebd266a7d680407a6e63cd13f9a9,"Replace use of Log#getStackTraceString(Throwable)

The built-in method hides UnknownHostException, which we do not want.
This diff adds a method to get a Throwable's stack trace as a string
that does not exhibit this behavior.","@@ -1,6 +1,8 @@
 package timber.log;
 
 import android.util.Log;
+
+import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -35,7 +37,7 @@ public class TimberTest {
     Timber.d(""Test"");
 
     assertLog()
-        .hasDebugMessage(""TimberTest:35"", ""Test"")
+        .hasDebugMessage(""TimberTest:37"", ""Test"")
         .hasNoMoreMessages();
   }
 
@@ -274,6 +276,13 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void logsUnknownHostExceptions() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.e(new UnknownHostException(), null);
+
+    assertExceptionLogged("""", ""UnknownHostException"");
+  }
+
   private static String repeat(char c, int number) {
     char[] data = new char[number];
     Arrays.fill(data, c);","@@ -1,6 +1,8 @@
 package timber.log;
 
 import android.util.Log;
+
+import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -35,7 +37,7 @@ public class TimberTest {
     Timber.d(""Test"");
 
     assertLog()
-        .hasDebugMessage(""TimberTest:35"", ""Test"")
+        .hasDebugMessage(""TimberTest:37"", ""Test"")
         .hasNoMoreMessages();
   }
 
@@ -274,6 +276,13 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void logsUnknownHostExceptions() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.e(new UnknownHostException(), null);
+
+    assertExceptionLogged("""", ""UnknownHostException"");
+  }
+
   private static String repeat(char c, int number) {
     char[] data = new char[number];
     Arrays.fill(data, c);",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,64fec4b4ad0bc7bffb91167d2aa2d86156fb2abf,36f904625112dd81efa5423f3ea4af52e4d0c45d,Fix TagLength lint check to only highlight argument,"@@ -110,7 +110,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         String message = String.format(
             ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
             tag.length(), tag);
-        context.report(ISSUE_TAG_LENGTH, node, context.getLocation(node), message);
+        context.report(ISSUE_TAG_LENGTH, node, context.getLocation(argument), message);
       }
     } else {
       if (node.astOperand() instanceof VariableReference) {","@@ -110,7 +110,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         String message = String.format(
             ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
             tag.length(), tag);
-        context.report(ISSUE_TAG_LENGTH, node, context.getLocation(node), message);
+        context.report(ISSUE_TAG_LENGTH, node, context.getLocation(argument), message);
       }
     } else {
       if (node.astOperand() instanceof VariableReference) {",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,f264e24c49f03a77537df5f591fc89045e20c068,91e3e1f037a0687e64fec5764c88f34d530d0106,Switch to 1-based indexing for arg types check,"@@ -220,7 +220,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         if (!valid) {
           String message = String.format(""Wrong argument type for formatting argument '#%1$d' ""
                   + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                  + ""(argument #%5$d in method call)"", i, formatString, formatType,
+                  + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
               type.getSimpleName(), startIndexOfArguments + i + 1);
           context.report(ISSUE_ARG_TYPES, node, context.getLocation(argument), message);
         }","@@ -220,7 +220,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         if (!valid) {
           String message = String.format(""Wrong argument type for formatting argument '#%1$d' ""
                   + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                  + ""(argument #%5$d in method call)"", i, formatString, formatType,
+                  + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
               type.getSimpleName(), startIndexOfArguments + i + 1);
           context.report(ISSUE_ARG_TYPES, node, context.getLocation(argument), message);
         }",False,source
README.md,README.md,063dfd8511611ef47b425beddcfdbcee6c02cf7a,23336d445e99f55904f76597964c88dc1d5192ae,Switch BinaryOperationInTimber to be accurate.,"@@ -69,7 +69,7 @@ Timber ships with embedded lint rules to detect problems in your app.
 
         Example.java:35: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
             Timber.d(""Hello "" + firstName + "" "" + lastName + ""!"");
-            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 
 Download","@@ -69,7 +69,7 @@ Timber ships with embedded lint rules to detect problems in your app.
 
         Example.java:35: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
             Timber.d(""Hello "" + firstName + "" "" + lastName + ""!"");
-            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 
 Download",False,readme
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,61654ff83a1573e912b05718ef25757ea6cfcde5,ef7ebf2968f4097e16ff4653d3ee6518f4163145,Generic log methods that allow passing a priority.,"@@ -71,6 +71,16 @@ public final class Timber {
     TREE_OF_SOULS.wtf(t, message, args);
   }
 
+  /** Log at {@code priority} a message with optional format args. */
+  public static void log(int priority, @NonNls String message, Object... args) {
+    TREE_OF_SOULS.log(priority, message, args);
+  }
+
+  /** Log at {@code priority} an exception and a message with optional format args. */
+  public static void log(int priority, Throwable t, @NonNls String message, Object... args) {
+    TREE_OF_SOULS.log(priority, t, message, args);
+  }
+
   /**
    * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
    * instance rather than using static methods or to facilitate testing.
@@ -231,6 +241,22 @@ public final class Timber {
       }
     }
 
+    @Override public void log(int priority, String message, Object... args) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].log(priority, message, args);
+      }
+    }
+
+    @Override public void log(int priority, Throwable t, String message, Object... args) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].log(priority, t, message, args);
+      }
+    }
+
     @Override protected void log(int priority, String tag, String message, Throwable t) {
       throw new AssertionError(""Missing override for log method."");
     }
@@ -312,6 +338,16 @@ public final class Timber {
       prepareLog(Log.ASSERT, t, message, args);
     }
 
+    /** Log at {@code priority} a message with optional format args. */
+    public void log(int priority, String message, Object... args) {
+      prepareLog(priority, null, message, args);
+    }
+
+    /** Log at {@code priority} an exception and a message with optional format args. */
+    public void log(int priority, Throwable t, String message, Object... args) {
+      prepareLog(priority, t, message, args);
+    }
+
     /** Return whether a message at {@code priority} should be logged. */
     protected boolean isLoggable(int priority) {
       return true;","@@ -71,6 +71,16 @@ public final class Timber {
     TREE_OF_SOULS.wtf(t, message, args);
   }
 
+  /** Log at {@code priority} a message with optional format args. */
+  public static void log(int priority, @NonNls String message, Object... args) {
+    TREE_OF_SOULS.log(priority, message, args);
+  }
+
+  /** Log at {@code priority} an exception and a message with optional format args. */
+  public static void log(int priority, Throwable t, @NonNls String message, Object... args) {
+    TREE_OF_SOULS.log(priority, t, message, args);
+  }
+
   /**
    * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
    * instance rather than using static methods or to facilitate testing.
@@ -231,6 +241,22 @@ public final class Timber {
       }
     }
 
+    @Override public void log(int priority, String message, Object... args) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].log(priority, message, args);
+      }
+    }
+
+    @Override public void log(int priority, Throwable t, String message, Object... args) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].log(priority, t, message, args);
+      }
+    }
+
     @Override protected void log(int priority, String tag, String message, Throwable t) {
       throw new AssertionError(""Missing override for log method."");
     }
@@ -312,6 +338,16 @@ public final class Timber {
       prepareLog(Log.ASSERT, t, message, args);
     }
 
+    /** Log at {@code priority} a message with optional format args. */
+    public void log(int priority, String message, Object... args) {
+      prepareLog(priority, null, message, args);
+    }
+
+    /** Log at {@code priority} an exception and a message with optional format args. */
+    public void log(int priority, Throwable t, String message, Object... args) {
+      prepareLog(priority, t, message, args);
+    }
+
     /** Return whether a message at {@code priority} should be logged. */
     protected boolean isLoggable(int priority) {
       return true;",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,61654ff83a1573e912b05718ef25757ea6cfcde5,ef7ebf2968f4097e16ff4653d3ee6518f4163145,Generic log methods that allow passing a priority.,"@@ -240,6 +240,26 @@ public class TimberTest {
     );
   }
 
+  @Test public void logAtSpecifiedPriority() {
+    Timber.plant(new Timber.DebugTree());
+
+    Timber.log(Log.VERBOSE, ""Hello, World!"");
+    Timber.log(Log.DEBUG, ""Hello, World!"");
+    Timber.log(Log.INFO, ""Hello, World!"");
+    Timber.log(Log.WARN, ""Hello, World!"");
+    Timber.log(Log.ERROR, ""Hello, World!"");
+    Timber.log(Log.ASSERT, ""Hello, World!"");
+
+    assertLog()
+        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
+        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
+        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void formatting() {
     Timber.plant(new Timber.DebugTree());
     Timber.v(""Hello, %s!"", ""World"");
@@ -324,6 +344,10 @@ public class TimberTest {
       return hasMessage(Log.ERROR, tag, message);
     }
 
+    public LogAssert hasAssertMessage(String tag, String message) {
+      return hasMessage(Log.ASSERT, tag, message);
+    }
+
     private LogAssert hasMessage(int priority, String tag, String message) {
       LogItem item = items.get(index++);
       assertThat(item.type).isEqualTo(priority);","@@ -240,6 +240,26 @@ public class TimberTest {
     );
   }
 
+  @Test public void logAtSpecifiedPriority() {
+    Timber.plant(new Timber.DebugTree());
+
+    Timber.log(Log.VERBOSE, ""Hello, World!"");
+    Timber.log(Log.DEBUG, ""Hello, World!"");
+    Timber.log(Log.INFO, ""Hello, World!"");
+    Timber.log(Log.WARN, ""Hello, World!"");
+    Timber.log(Log.ERROR, ""Hello, World!"");
+    Timber.log(Log.ASSERT, ""Hello, World!"");
+
+    assertLog()
+        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
+        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
+        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void formatting() {
     Timber.plant(new Timber.DebugTree());
     Timber.v(""Hello, %s!"", ""World"");
@@ -324,6 +344,10 @@ public class TimberTest {
       return hasMessage(Log.ERROR, tag, message);
     }
 
+    public LogAssert hasAssertMessage(String tag, String message) {
+      return hasMessage(Log.ASSERT, tag, message);
+    }
+
     private LogAssert hasMessage(int priority, String tag, String message) {
       LogItem item = items.get(index++);
       assertThat(item.type).isEqualTo(priority);",False,test
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,7f53bdc68e7cbcbd70f07216127f4af3a866dd04,c0b1b1cbfe97dee3a668df90c42cf3380052e16f,Backfill some WTF tests.,"@@ -269,6 +269,7 @@ public class TimberTest {
     Timber.i(""Hello, %s!"", ""World"");
     Timber.w(""Hello, %s!"", ""World"");
     Timber.e(""Hello, %s!"", ""World"");
+    Timber.wtf(""Hello, %s!"", ""World"");
 
     assertLog()
         .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
@@ -276,6 +277,7 @@ public class TimberTest {
         .hasInfoMessage(""TimberTest"", ""Hello, World!"")
         .hasWarnMessage(""TimberTest"", ""Hello, World!"")
         .hasErrorMessage(""TimberTest"", ""Hello, World!"")
+        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
         .hasNoMoreMessages();
   }
 
@@ -290,6 +292,7 @@ public class TimberTest {
     Timber.i(""Hello, World!"");
     Timber.w(""Hello, World!"");
     Timber.e(""Hello, World!"");
+    Timber.wtf(""Hello, World!"");
 
     assertLog()
         .hasInfoMessage(""TimberTest"", ""Hello, World!"")","@@ -269,6 +269,7 @@ public class TimberTest {
     Timber.i(""Hello, %s!"", ""World"");
     Timber.w(""Hello, %s!"", ""World"");
     Timber.e(""Hello, %s!"", ""World"");
+    Timber.wtf(""Hello, %s!"", ""World"");
 
     assertLog()
         .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
@@ -276,6 +277,7 @@ public class TimberTest {
         .hasInfoMessage(""TimberTest"", ""Hello, World!"")
         .hasWarnMessage(""TimberTest"", ""Hello, World!"")
         .hasErrorMessage(""TimberTest"", ""Hello, World!"")
+        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
         .hasNoMoreMessages();
   }
 
@@ -290,6 +292,7 @@ public class TimberTest {
     Timber.i(""Hello, World!"");
     Timber.w(""Hello, World!"");
     Timber.e(""Hello, World!"");
+    Timber.wtf(""Hello, World!"");
 
     assertLog()
         .hasInfoMessage(""TimberTest"", ""Hello, World!"")",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,0ff938bbfd0b94f8d9ded7d9fefad092c410b78a,063dfd8511611ef47b425beddcfdbcee6c02cf7a,Only emit BinaryOperation error if the operation results in a String type,"@@ -13,6 +13,11 @@ import com.android.tools.lint.detector.api.JavaContext;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.android.tools.lint.detector.api.Speed;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import java.util.regex.Matcher;
 import lombok.ast.AstVisitor;
 import lombok.ast.BinaryExpression;
 import lombok.ast.BinaryOperator;
@@ -34,12 +39,6 @@ import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-import java.util.regex.Matcher;
-
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_CHAR;
@@ -457,9 +456,12 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
   private static boolean checkNode(JavaContext context, MethodInvocation node, Node argument) {
     if (argument instanceof BinaryExpression) {
-      context.report(ISSUE_BINARY, node, context.getLocation(argument),
-          ""Replace String concatenation with Timber's string formatting"");
-      return true;
+      Class argumentType = getType(context, (BinaryExpression) argument);
+      if (argumentType == String.class) {
+        context.report(ISSUE_BINARY, node, context.getLocation(argument),
+            ""Replace String concatenation with Timber's string formatting"");
+        return true;
+      }
     } else if (argument instanceof If || argument instanceof InlineIfExpression) {
       return checkConditionalUsage(context, node, argument);
     }","@@ -13,6 +13,11 @@ import com.android.tools.lint.detector.api.JavaContext;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.android.tools.lint.detector.api.Speed;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import java.util.regex.Matcher;
 import lombok.ast.AstVisitor;
 import lombok.ast.BinaryExpression;
 import lombok.ast.BinaryOperator;
@@ -34,12 +39,6 @@ import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-import java.util.regex.Matcher;
-
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_CHAR;
@@ -457,9 +456,12 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
   private static boolean checkNode(JavaContext context, MethodInvocation node, Node argument) {
     if (argument instanceof BinaryExpression) {
-      context.report(ISSUE_BINARY, node, context.getLocation(argument),
-          ""Replace String concatenation with Timber's string formatting"");
-      return true;
+      Class argumentType = getType(context, (BinaryExpression) argument);
+      if (argumentType == String.class) {
+        context.report(ISSUE_BINARY, node, context.getLocation(argument),
+            ""Replace String concatenation with Timber's string formatting"");
+        return true;
+      }
     } else if (argument instanceof If || argument instanceof InlineIfExpression) {
       return checkConditionalUsage(context, node, argument);
     }",False,source
.travis.yml,.travis.yml,cd7ebfc7753482a963fbbf77c736b3f5a19cef0b,063dfd8511611ef47b425beddcfdbcee6c02cf7a,Update build tools and target/compile Sdk to 23,"@@ -2,8 +2,8 @@ language: android
 
 android:
   components:
-    - build-tools-22.0.1
-    - android-22
+    - build-tools-23.0.1
+    - android-23
   licenses:
     - android-sdk-license-5be876d5","@@ -2,8 +2,8 @@ language: android
 
 android:
   components:
-    - build-tools-22.0.1
-    - android-22
+    - build-tools-23.0.1
+    - android-23
   licenses:
     - android-sdk-license-5be876d5",False,other
build.gradle,build.gradle,cd7ebfc7753482a963fbbf77c736b3f5a19cef0b,063dfd8511611ef47b425beddcfdbcee6c02cf7a,Update build tools and target/compile Sdk to 23,"@@ -15,22 +15,22 @@ allprojects {
 
 ext {
   minSdkVersion = 15
-  targetSdkVersion = 22
-  compileSdkVersion = 22
-  buildToolsVersion = '22.0.1'
+  targetSdkVersion = 23
+  compileSdkVersion = 23
+  buildToolsVersion = '23.0.1'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
 }
 
 ext.deps = [
     // Test dependencies
-    junit      : ""junit:junit:4.11"",
-    festassert : ""org.easytesting:fest-assert-core:2.0M10"",
-    festandroid: ""com.squareup:fest-android:1.0.7"",
-    mockitocore: ""org.mockito:mockito-core:1.9.5"",
-    robolectric: ""org.robolectric:robolectric:3.0"",
+    junit      : 'junit:junit:4.11',
+    festassert : 'org.easytesting:fest-assert-core:2.0M10',
+    festandroid: 'com.squareup:fest-android:1.0.7',
+    mockitocore: 'org.mockito:mockito-core:1.9.5',
+    robolectric: 'org.robolectric:robolectric:3.0',
 
     // Lint dependencies
-    lintapi    : ""com.android.tools.lint:lint-api:24.3.1"",
-    lintchecks : ""com.android.tools.lint:lint-checks:24.3.1""
+    lintapi    : 'com.android.tools.lint:lint-api:24.3.1',
+    lintchecks : 'com.android.tools.lint:lint-checks:24.3.1'
 ]","@@ -15,22 +15,22 @@ allprojects {
 
 ext {
   minSdkVersion = 15
-  targetSdkVersion = 22
-  compileSdkVersion = 22
-  buildToolsVersion = '22.0.1'
+  targetSdkVersion = 23
+  compileSdkVersion = 23
+  buildToolsVersion = '23.0.1'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
 }
 
 ext.deps = [
     // Test dependencies
-    junit      : ""junit:junit:4.11"",
-    festassert : ""org.easytesting:fest-assert-core:2.0M10"",
-    festandroid: ""com.squareup:fest-android:1.0.7"",
-    mockitocore: ""org.mockito:mockito-core:1.9.5"",
-    robolectric: ""org.robolectric:robolectric:3.0"",
+    junit      : 'junit:junit:4.11',
+    festassert : 'org.easytesting:fest-assert-core:2.0M10',
+    festandroid: 'com.squareup:fest-android:1.0.7',
+    mockitocore: 'org.mockito:mockito-core:1.9.5',
+    robolectric: 'org.robolectric:robolectric:3.0',
 
     // Lint dependencies
-    lintapi    : ""com.android.tools.lint:lint-api:24.3.1"",
-    lintchecks : ""com.android.tools.lint:lint-checks:24.3.1""
+    lintapi    : 'com.android.tools.lint:lint-api:24.3.1',
+    lintchecks : 'com.android.tools.lint:lint-checks:24.3.1'
 ]",False,other
CHANGELOG.md,CHANGELOG.md,e16f4a4f7c450ab9e824846a382284cfd07873d6,5ce72c766a024f82b5b2bde283e8bc3595c95f72,Prepare release 4.1.0.,"@@ -1,6 +1,18 @@
 Change Log
 ==========
 
+Version 4.1.0 *(2015-10-19)*
+----------------------------
+
+ * New: Consumer ProGuard rule automatically suppresses a warning for the use `@NonNls` on the 'message'
+   argument for logging method. The warning was only for users running ProGuard and can safely be ignored.
+ * New: Static `log` methods which accept a priority as a first argument makes dynamic logging at different
+   levels easier to support.
+ * Fix: Replace internal use of `Log.getStackTraceString` with our own implementation. This ensures that
+   `UnknownHostException` errors are logged, which previously were suppressed.
+ * Fix: 'BinaryOperationInTimber' lint rule now only triggers for string concatenation.
+
+
 Version 4.0.1 *(2015-10-07)*
 ----------------------------","@@ -1,6 +1,18 @@
 Change Log
 ==========
 
+Version 4.1.0 *(2015-10-19)*
+----------------------------
+
+ * New: Consumer ProGuard rule automatically suppresses a warning for the use `@NonNls` on the 'message'
+   argument for logging method. The warning was only for users running ProGuard and can safely be ignored.
+ * New: Static `log` methods which accept a priority as a first argument makes dynamic logging at different
+   levels easier to support.
+ * Fix: Replace internal use of `Log.getStackTraceString` with our own implementation. This ensures that
+   `UnknownHostException` errors are logged, which previously were suppressed.
+ * Fix: 'BinaryOperationInTimber' lint rule now only triggers for string concatenation.
+
+
 Version 4.0.1 *(2015-10-07)*
 ----------------------------",False,other
README.md,README.md,e16f4a4f7c450ab9e824846a382284cfd07873d6,5ce72c766a024f82b5b2bde283e8bc3595c95f72,Prepare release 4.1.0.,"@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.0.1'
+compile 'com.jakewharton.timber:timber:4.1.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.0.1'
+compile 'com.jakewharton.timber:timber:4.1.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,e16f4a4f7c450ab9e824846a382284cfd07873d6,5ce72c766a024f82b5b2bde283e8bc3595c95f72,Prepare release 4.1.0.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.0.2-SNAPSHOT
+VERSION_NAME=4.1.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.0.2-SNAPSHOT
+VERSION_NAME=4.1.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,362e20b376d9b7d788ac2659e5c92004ab2e0413,e16f4a4f7c450ab9e824846a382284cfd07873d6,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.0
+VERSION_NAME=4.1.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.0
+VERSION_NAME=4.1.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,d148a6dc11b95f534133ee73838fac5a152db36d,362e20b376d9b7d788ac2659e5c92004ab2e0413,Remove creation of synthetic accessor methods.,"@@ -144,7 +144,7 @@ public final class Timber {
   private static final Tree[] TREE_ARRAY_EMPTY = new Tree[0];
   // Both fields guarded by 'FOREST'.
   private static final List<Tree> FOREST = new ArrayList<>();
-  private static volatile Tree[] forestAsArray = TREE_ARRAY_EMPTY;
+  static volatile Tree[] forestAsArray = TREE_ARRAY_EMPTY;
 
   /** A {@link Tree} that delegates to all planted trees in the {@linkplain #FOREST forest}. */
   private static final Tree TREE_OF_SOULS = new Tree() {
@@ -271,7 +271,7 @@ public final class Timber {
 
   /** A facade for handling logging calls. Install instances via {@link #plant Timber.plant()}. */
   public static abstract class Tree {
-    private final ThreadLocal<String> explicitTag = new ThreadLocal<>();
+    final ThreadLocal<String> explicitTag = new ThreadLocal<>();
 
     String getTag() {
       String tag = explicitTag.get();","@@ -144,7 +144,7 @@ public final class Timber {
   private static final Tree[] TREE_ARRAY_EMPTY = new Tree[0];
   // Both fields guarded by 'FOREST'.
   private static final List<Tree> FOREST = new ArrayList<>();
-  private static volatile Tree[] forestAsArray = TREE_ARRAY_EMPTY;
+  static volatile Tree[] forestAsArray = TREE_ARRAY_EMPTY;
 
   /** A {@link Tree} that delegates to all planted trees in the {@linkplain #FOREST forest}. */
   private static final Tree TREE_OF_SOULS = new Tree() {
@@ -271,7 +271,7 @@ public final class Timber {
 
   /** A facade for handling logging calls. Install instances via {@link #plant Timber.plant()}. */
   public static abstract class Tree {
-    private final ThreadLocal<String> explicitTag = new ThreadLocal<>();
+    final ThreadLocal<String> explicitTag = new ThreadLocal<>();
 
     String getTag() {
       String tag = explicitTag.get();",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,c5ace1beef749e9e9b80bbce4768bb35f27a07f7,34a9c89520a66650ea4166958e96fb34928f43f0,Small tweaks,"@@ -321,7 +321,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   }
 
   private static boolean isSubclassOf(JavaContext context, VariableReference variableReference,
-      Class clazz) {
+      Class<?> clazz) {
     JavaParser.ResolvedNode resolved = context.resolve(variableReference);
     if (resolved instanceof JavaParser.ResolvedVariable) {
       JavaParser.ResolvedVariable resolvedVariable = (JavaParser.ResolvedVariable) resolved;
@@ -332,7 +332,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   }
 
   private static List<String> getStringArgumentTypes(String formatString) {
-    List<String> types = new ArrayList<String>();
+    List<String> types = new ArrayList<>();
     Matcher matcher = StringFormatDetector.FORMAT.matcher(formatString);
     int index = 0;
     int prevIndex = 0;","@@ -321,7 +321,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   }
 
   private static boolean isSubclassOf(JavaContext context, VariableReference variableReference,
-      Class clazz) {
+      Class<?> clazz) {
     JavaParser.ResolvedNode resolved = context.resolve(variableReference);
     if (resolved instanceof JavaParser.ResolvedVariable) {
       JavaParser.ResolvedVariable resolvedVariable = (JavaParser.ResolvedVariable) resolved;
@@ -332,7 +332,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   }
 
   private static List<String> getStringArgumentTypes(String formatString) {
-    List<String> types = new ArrayList<String>();
+    List<String> types = new ArrayList<>();
     Matcher matcher = StringFormatDetector.FORMAT.matcher(formatString);
     int index = 0;
     int prevIndex = 0;",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,bd7b02e5fb09592fac1c241c1f6aac1338d70e21,c5ace1beef749e9e9b80bbce4768bb35f27a07f7,"Null check tag, there may be no literal value.","@@ -105,7 +105,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     } else if (""tag"".equals(methodName)) {
       Node argument = node.astArguments().iterator().next();
       String tag = findLiteralValue(context, argument);
-      if (tag.length() > 23) {
+      if (tag != null && tag.length() > 23) {
         String message = String.format(
             ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
             tag.length(), tag);","@@ -105,7 +105,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     } else if (""tag"".equals(methodName)) {
       Node argument = node.astArguments().iterator().next();
       String tag = findLiteralValue(context, argument);
-      if (tag.length() > 23) {
+      if (tag != null && tag.length() > 23) {
         String message = String.format(
             ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
             tag.length(), tag);",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,10bbf33db8c4ed1daf3d7dbd18215a6a7edecf18,bd7b02e5fb09592fac1c241c1f6aac1338d70e21,Add TreeCount method,"@@ -141,6 +141,12 @@ public final class Timber {
     }
   }
 
+  public static int treeCount() {
+    synchronized (FOREST) {
+      return FOREST.size();
+    }
+  }
+
   private static final Tree[] TREE_ARRAY_EMPTY = new Tree[0];
   // Both fields guarded by 'FOREST'.
   private static final List<Tree> FOREST = new ArrayList<>();","@@ -141,6 +141,12 @@ public final class Timber {
     }
   }
 
+  public static int treeCount() {
+    synchronized (FOREST) {
+      return FOREST.size();
+    }
+  }
+
   private static final Tree[] TREE_ARRAY_EMPTY = new Tree[0];
   // Both fields guarded by 'FOREST'.
   private static final List<Tree> FOREST = new ArrayList<>();",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,10bbf33db8c4ed1daf3d7dbd18215a6a7edecf18,bd7b02e5fb09592fac1c241c1f6aac1338d70e21,Add TreeCount method,"@@ -51,6 +51,17 @@ public class TimberTest {
     }
   }
 
+  @Test public void treeCount() {
+    // inserts trees and checks if the amount of returned trees matches.
+    assertThat(Timber.treeCount()).isEqualTo(0);
+    for(int i= 1 ; i < 50 ; i++){
+      Timber.plant(new Timber.DebugTree());
+      assertThat(Timber.treeCount()).isEqualTo(i);
+    }
+    Timber.uprootAll();
+    assertThat(Timber.treeCount()).isEqualTo(0);
+  }
+
   @Test public void nullTree() {
     try {
       Timber.plant(null);","@@ -51,6 +51,17 @@ public class TimberTest {
     }
   }
 
+  @Test public void treeCount() {
+    // inserts trees and checks if the amount of returned trees matches.
+    assertThat(Timber.treeCount()).isEqualTo(0);
+    for(int i= 1 ; i < 50 ; i++){
+      Timber.plant(new Timber.DebugTree());
+      assertThat(Timber.treeCount()).isEqualTo(i);
+    }
+    Timber.uprootAll();
+    assertThat(Timber.treeCount()).isEqualTo(0);
+  }
+
   @Test public void nullTree() {
     try {
       Timber.plant(null);",False,test
CHANGELOG.md,CHANGELOG.md,d537b8fc98c5e14f5df09fe308dccc00371cb187,10bbf33db8c4ed1daf3d7dbd18215a6a7edecf18,Prepare version 4.1.1.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 4.1.1 *(2016-02-19)*
+----------------------------
+
+ * New: Add method for retreiving the number of installed trees.
+
+
 Version 4.1.0 *(2015-10-19)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 4.1.1 *(2016-02-19)*
+----------------------------
+
+ * New: Add method for retreiving the number of installed trees.
+
+
 Version 4.1.0 *(2015-10-19)*
 ----------------------------",False,other
README.md,README.md,d537b8fc98c5e14f5df09fe308dccc00371cb187,10bbf33db8c4ed1daf3d7dbd18215a6a7edecf18,Prepare version 4.1.1.,"@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.1.0'
+compile 'com.jakewharton.timber:timber:4.1.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
@@ -102,7 +102,4 @@ License
 
 
  [1]: http://github.com/JakeWharton/pidcat/
- [2]: https://search.maven.org/remote_content?g=com.jakewharton.timber&a=timber&v=LATEST
- [3]: http://square.github.io/dagger/
- [4]: http://jakewharton.github.io/butterknife/
  [snap]: https://oss.sonatype.org/content/repositories/snapshots/","@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.1.0'
+compile 'com.jakewharton.timber:timber:4.1.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
@@ -102,7 +102,4 @@ License
 
 
  [1]: http://github.com/JakeWharton/pidcat/
- [2]: https://search.maven.org/remote_content?g=com.jakewharton.timber&a=timber&v=LATEST
- [3]: http://square.github.io/dagger/
- [4]: http://jakewharton.github.io/butterknife/
  [snap]: https://oss.sonatype.org/content/repositories/snapshots/",False,readme
gradle.properties,gradle.properties,d537b8fc98c5e14f5df09fe308dccc00371cb187,10bbf33db8c4ed1daf3d7dbd18215a6a7edecf18,Prepare version 4.1.1.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.1-SNAPSHOT
+VERSION_NAME=4.1.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.1-SNAPSHOT
+VERSION_NAME=4.1.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,a6b2e220a33da939da181de37a5cd68be843f63a,d537b8fc98c5e14f5df09fe308dccc00371cb187,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.1
+VERSION_NAME=4.1.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.1
+VERSION_NAME=4.1.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,7fac4e0d775e2daadf414247188a5dae60e02a8c,a6b2e220a33da939da181de37a5cd68be843f63a,Fix lint warning for tag call,"@@ -103,6 +103,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       context.report(ISSUE_FORMAT, node, context.getLocation(node),
           ""Using 'String#format' inside of 'Timber'"");
     } else if (""tag"".equals(methodName)) {
+      VariableReference ref = (VariableReference) node.astOperand();
+      if (!""Timber"".equals(ref.astIdentifier().astValue())) {
+        return;
+      }
       Node argument = node.astArguments().iterator().next();
       String tag = findLiteralValue(context, argument);
       if (tag != null && tag.length() > 23) {","@@ -103,6 +103,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       context.report(ISSUE_FORMAT, node, context.getLocation(node),
           ""Using 'String#format' inside of 'Timber'"");
     } else if (""tag"".equals(methodName)) {
+      VariableReference ref = (VariableReference) node.astOperand();
+      if (!""Timber"".equals(ref.astIdentifier().astValue())) {
+        return;
+      }
       Node argument = node.astArguments().iterator().next();
       String tag = findLiteralValue(context, argument);
       if (tag != null && tag.length() > 23) {",False,source
CHANGELOG.md,CHANGELOG.md,00b97825ad802321019e9593ac0e0a5f5eff529b,31242742ce449380994368eeb131894d54fe39fa,Prepare version 4.1.2.,"@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 4.1.2 *(2016-03-30)*
+----------------------------
+
+ * Fix: Tag-length lint check now only triggers on calls to `Timber`'s `tag` method. Previously it would
+   match _any_ `tag` method and flag arguments longer than 23 characters.
+
+
 Version 4.1.1 *(2016-02-19)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 4.1.2 *(2016-03-30)*
+----------------------------
+
+ * Fix: Tag-length lint check now only triggers on calls to `Timber`'s `tag` method. Previously it would
+   match _any_ `tag` method and flag arguments longer than 23 characters.
+
+
 Version 4.1.1 *(2016-02-19)*
 ----------------------------",False,other
README.md,README.md,00b97825ad802321019e9593ac0e0a5f5eff529b,31242742ce449380994368eeb131894d54fe39fa,Prepare version 4.1.2.,"@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.1.1'
+compile 'com.jakewharton.timber:timber:4.1.2'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.1.1'
+compile 'com.jakewharton.timber:timber:4.1.2'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,00b97825ad802321019e9593ac0e0a5f5eff529b,31242742ce449380994368eeb131894d54fe39fa,Prepare version 4.1.2.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.2-SNAPSHOT
+VERSION_NAME=4.1.2
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.2-SNAPSHOT
+VERSION_NAME=4.1.2
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,1fba660de9fa24d779c0ea111bee9447e7c45caf,00b97825ad802321019e9593ac0e0a5f5eff529b,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.2
+VERSION_NAME=4.1.3-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.2
+VERSION_NAME=4.1.3-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
build.gradle,build.gradle,db0c60f30b556b4a89713a7995ca278b674be221,1fba660de9fa24d779c0ea111bee9447e7c45caf,change minSdkVersion to 9 and nothing goes wrong!!!,"@@ -14,7 +14,7 @@ allprojects {
 }
 
 ext {
-  minSdkVersion = 15
+  minSdkVersion = 9
   targetSdkVersion = 23
   compileSdkVersion = 23
   buildToolsVersion = '23.0.1'","@@ -14,7 +14,7 @@ allprojects {
 }
 
 ext {
-  minSdkVersion = 15
+  minSdkVersion = 9
   targetSdkVersion = 23
   compileSdkVersion = 23
   buildToolsVersion = '23.0.1'",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,39c2baf63882c31e96888a48f4c38481a61a7efe,865bc31ff7f51656a8b13f9a485f20a85988afb7,"Add more strict pattern match for StringFormatInTimber

`Timber#plant` is able to contains `String.format` with an annonymous class.
Instead of checking the statement start with `Timber.`, now Timber-lint
checke the statement start with logging methods(v/d/i/w/e/wtf) call","@@ -18,6 +18,7 @@ import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 import lombok.ast.AstVisitor;
 import lombok.ast.BinaryExpression;
 import lombok.ast.BinaryOperator;
@@ -97,7 +98,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         return;
       }
       ExpressionStatement statement = (ExpressionStatement) current;
-      if (!statement.toString().startsWith(""Timber."")) {
+      if (!Pattern.matches(""^Timber\\.(v|d|i|w|e|wtf).*"", statement.toString())) {
         return;
       }
       context.report(ISSUE_FORMAT, node, context.getLocation(node),","@@ -18,6 +18,7 @@ import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 import lombok.ast.AstVisitor;
 import lombok.ast.BinaryExpression;
 import lombok.ast.BinaryOperator;
@@ -97,7 +98,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         return;
       }
       ExpressionStatement statement = (ExpressionStatement) current;
-      if (!statement.toString().startsWith(""Timber."")) {
+      if (!Pattern.matches(""^Timber\\.(v|d|i|w|e|wtf).*"", statement.toString())) {
         return;
       }
       context.report(ISSUE_FORMAT, node, context.getLocation(node),",False,source
.travis.yml,.travis.yml,086a0c10b730977b4b9d0ecdfe5b3147f66fc6df,1fba660de9fa24d779c0ea111bee9447e7c45caf,Modern Android plugin.,"@@ -2,10 +2,10 @@ language: android
 
 android:
   components:
+    - platform-tools
+    - tools
     - build-tools-23.0.1
     - android-23
-  licenses:
-    - android-sdk-license-5be876d5
 
 jdk:
   - oraclejdk7","@@ -2,10 +2,10 @@ language: android
 
 android:
   components:
+    - platform-tools
+    - tools
     - build-tools-23.0.1
     - android-23
-  licenses:
-    - android-sdk-license-5be876d5
 
 jdk:
   - oraclejdk7",False,other
build.gradle,build.gradle,086a0c10b730977b4b9d0ecdfe5b3147f66fc6df,1fba660de9fa24d779c0ea111bee9447e7c45caf,Modern Android plugin.,"@@ -3,7 +3,7 @@ buildscript {
     mavenCentral()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:1.3.1'
+    classpath 'com.android.tools.build:gradle:2.1.0'
   }
 }","@@ -3,7 +3,7 @@ buildscript {
     mavenCentral()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:1.3.1'
+    classpath 'com.android.tools.build:gradle:2.1.0'
   }
 }",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,086a0c10b730977b4b9d0ecdfe5b3147f66fc6df,1fba660de9fa24d779c0ea111bee9447e7c45caf,Modern Android plugin.,"@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.6-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.13-all.zip","@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.6-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.13-all.zip",False,other
timber/build.gradle,timber/build.gradle,086a0c10b730977b4b9d0ecdfe5b3147f66fc6df,1fba660de9fa24d779c0ea111bee9447e7c45caf,Modern Android plugin.,"@@ -25,6 +25,11 @@ android {
     minSdkVersion rootProject.ext.minSdkVersion
     consumerProguardFiles 'consumer-proguard-rules.pro'
   }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+  }
 }
 
 configurations {","@@ -25,6 +25,11 @@ android {
     minSdkVersion rootProject.ext.minSdkVersion
     consumerProguardFiles 'consumer-proguard-rules.pro'
   }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+  }
 }
 
 configurations {",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,b116d02f50ac02a2e59e4797f1100c18184cec50,2477287eac8db7514f32d19d8c8f3fecc33fed7b,Add Timber.plant(Tree... trees) method to plant multiple trees,"@@ -1,10 +1,10 @@
 package timber.log;
 
 import android.util.Log;
-
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -116,6 +116,25 @@ public final class Timber {
     }
   }
 
+  /** Adds new logging trees. */
+  public static void plant(Tree... trees) {
+    if (trees == null) {
+      throw new NullPointerException(""trees == null"");
+    }
+    for (Tree tree : trees) {
+      if (tree == null) {
+        throw new NullPointerException(""trees contains null"");
+      }
+      if (tree == TREE_OF_SOULS) {
+        throw new IllegalArgumentException(""Cannot plant Timber into itself."");
+      }
+    }
+    synchronized (FOREST) {
+      Collections.addAll(FOREST, trees);
+      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
+    }
+  }
+
   /** Remove a planted tree. */
   public static void uproot(Tree tree) {
     synchronized (FOREST) {","@@ -1,10 +1,10 @@
 package timber.log;
 
 import android.util.Log;
-
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -116,6 +116,25 @@ public final class Timber {
     }
   }
 
+  /** Adds new logging trees. */
+  public static void plant(Tree... trees) {
+    if (trees == null) {
+      throw new NullPointerException(""trees == null"");
+    }
+    for (Tree tree : trees) {
+      if (tree == null) {
+        throw new NullPointerException(""trees contains null"");
+      }
+      if (tree == TREE_OF_SOULS) {
+        throw new IllegalArgumentException(""Cannot plant Timber into itself."");
+      }
+    }
+    synchronized (FOREST) {
+      Collections.addAll(FOREST, trees);
+      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
+    }
+  }
+
   /** Remove a planted tree. */
   public static void uproot(Tree tree) {
     synchronized (FOREST) {",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,b116d02f50ac02a2e59e4797f1100c18184cec50,2477287eac8db7514f32d19d8c8f3fecc33fed7b,Add Timber.plant(Tree... trees) method to plant multiple trees,"@@ -49,6 +49,12 @@ public class TimberTest {
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(""Cannot plant Timber into itself."");
     }
+    try {
+      Timber.plant(new Timber.Tree[] { timber });
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(""Cannot plant Timber into itself."");
+    }
   }
 
   @Test public void treeCount() {
@@ -62,15 +68,35 @@ public class TimberTest {
     assertThat(Timber.treeCount()).isEqualTo(0);
   }
 
+  @SuppressWarnings(""ConstantConditions"")
   @Test public void nullTree() {
+    Timber.Tree nullTree = null;
     try {
-      Timber.plant(null);
+      Timber.plant(nullTree);
       fail();
     } catch (NullPointerException e) {
       assertThat(e).hasMessage(""tree == null"");
     }
   }
 
+  @SuppressWarnings(""ConstantConditions"")
+  @Test public void nullTreeArray() {
+    Timber.Tree[] nullTrees = null;
+    try {
+      Timber.plant(nullTrees);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessage(""trees == null"");
+    }
+    nullTrees = new Timber.Tree[] { null };
+    try {
+      Timber.plant(nullTrees);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessage(""trees contains null"");
+    }
+  }
+
   @Test public void forestReturnsAllPlanted() {
     Timber.DebugTree tree1 = new Timber.DebugTree();
     Timber.DebugTree tree2 = new Timber.DebugTree();
@@ -80,6 +106,14 @@ public class TimberTest {
     assertThat(Timber.forest()).containsExactly(tree1, tree2);
   }
 
+  @Test public void forestReturnsAllTreesPlanted() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1, tree2);
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2);
+  }
+
   @Test public void uprootThrowsIfMissing() {
     try {
       Timber.uproot(new Timber.DebugTree());","@@ -49,6 +49,12 @@ public class TimberTest {
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(""Cannot plant Timber into itself."");
     }
+    try {
+      Timber.plant(new Timber.Tree[] { timber });
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(""Cannot plant Timber into itself."");
+    }
   }
 
   @Test public void treeCount() {
@@ -62,15 +68,35 @@ public class TimberTest {
     assertThat(Timber.treeCount()).isEqualTo(0);
   }
 
+  @SuppressWarnings(""ConstantConditions"")
   @Test public void nullTree() {
+    Timber.Tree nullTree = null;
     try {
-      Timber.plant(null);
+      Timber.plant(nullTree);
       fail();
     } catch (NullPointerException e) {
       assertThat(e).hasMessage(""tree == null"");
     }
   }
 
+  @SuppressWarnings(""ConstantConditions"")
+  @Test public void nullTreeArray() {
+    Timber.Tree[] nullTrees = null;
+    try {
+      Timber.plant(nullTrees);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessage(""trees == null"");
+    }
+    nullTrees = new Timber.Tree[] { null };
+    try {
+      Timber.plant(nullTrees);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessage(""trees contains null"");
+    }
+  }
+
   @Test public void forestReturnsAllPlanted() {
     Timber.DebugTree tree1 = new Timber.DebugTree();
     Timber.DebugTree tree2 = new Timber.DebugTree();
@@ -80,6 +106,14 @@ public class TimberTest {
     assertThat(Timber.forest()).containsExactly(tree1, tree2);
   }
 
+  @Test public void forestReturnsAllTreesPlanted() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1, tree2);
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2);
+  }
+
   @Test public void uprootThrowsIfMissing() {
     try {
       Timber.uproot(new Timber.DebugTree());",False,test
.travis.yml,.travis.yml,f755464b91559c84fa6b9cee992efd37fa229634,2477287eac8db7514f32d19d8c8f3fecc33fed7b,Update to API 24 and friends.,"@@ -2,13 +2,12 @@ language: android
 
 android:
   components:
-    - platform-tools
     - tools
-    - build-tools-23.0.1
-    - android-23
+    - platform-tools
+    - build-tools-24.0.0
+    - android-24
 
 jdk:
-  - oraclejdk7
   - oraclejdk8
 
 after_success:","@@ -2,13 +2,12 @@ language: android
 
 android:
   components:
-    - platform-tools
     - tools
-    - build-tools-23.0.1
-    - android-23
+    - platform-tools
+    - build-tools-24.0.0
+    - android-24
 
 jdk:
-  - oraclejdk7
   - oraclejdk8
 
 after_success:",False,other
build.gradle,build.gradle,f755464b91559c84fa6b9cee992efd37fa229634,2477287eac8db7514f32d19d8c8f3fecc33fed7b,Update to API 24 and friends.,"@@ -15,9 +15,9 @@ allprojects {
 
 ext {
   minSdkVersion = 9
-  targetSdkVersion = 23
-  compileSdkVersion = 23
-  buildToolsVersion = '23.0.1'
+  targetSdkVersion = 24
+  compileSdkVersion = 24
+  buildToolsVersion = '24.0.0'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
 }","@@ -15,9 +15,9 @@ allprojects {
 
 ext {
   minSdkVersion = 9
-  targetSdkVersion = 23
-  compileSdkVersion = 23
-  buildToolsVersion = '23.0.1'
+  targetSdkVersion = 24
+  compileSdkVersion = 24
+  buildToolsVersion = '24.0.0'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
 }",False,other
build.gradle,build.gradle,8c09710094b5c81a58bbd9fdf6880b9f0f686aa3,0ca76d358c36b13fdb49211d4df6b54b8f9af764,Consume tag even when message's priority is not loggable,"@@ -3,7 +3,7 @@ buildscript {
     mavenCentral()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.1.0'
+    classpath 'com.android.tools.build:gradle:2.1.2'
   }
 }","@@ -3,7 +3,7 @@ buildscript {
     mavenCentral()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.1.0'
+    classpath 'com.android.tools.build:gradle:2.1.2'
   }
 }",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,8c09710094b5c81a58bbd9fdf6880b9f0f686aa3,0ca76d358c36b13fdb49211d4df6b54b8f9af764,Consume tag even when message's priority is not loggable,"@@ -382,6 +382,9 @@ public final class Timber {
     }
 
     private void prepareLog(int priority, Throwable t, String message, Object... args) {
+      // Consume tag even when message is not loggable so that next message is correctly tagged.
+      String tag = getTag();
+
       if (!isLoggable(priority)) {
         return;
       }
@@ -402,7 +405,7 @@ public final class Timber {
         }
       }
 
-      log(priority, getTag(), message, t);
+      log(priority, tag, message, t);
     }
 
     private String getStackTraceString(Throwable t) {","@@ -382,6 +382,9 @@ public final class Timber {
     }
 
     private void prepareLog(int priority, Throwable t, String message, Object... args) {
+      // Consume tag even when message is not loggable so that next message is correctly tagged.
+      String tag = getTag();
+
       if (!isLoggable(priority)) {
         return;
       }
@@ -402,7 +405,7 @@ public final class Timber {
         }
       }
 
-      log(priority, getTag(), message, t);
+      log(priority, tag, message, t);
     }
 
     private String getStackTraceString(Throwable t) {",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,8c09710094b5c81a58bbd9fdf6880b9f0f686aa3,0ca76d358c36b13fdb49211d4df6b54b8f9af764,Consume tag even when message's priority is not loggable,"@@ -351,6 +351,21 @@ public class TimberTest {
     assertExceptionLogged("""", ""UnknownHostException"");
   }
 
+  @Test public void tagIsClearedWhenNotLoggable() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override
+      protected boolean isLoggable(int priority) {
+        return priority >= Log.WARN;
+      }
+    });
+    Timber.tag(""NotLogged"").i(""Message not logged"");
+    Timber.w(""Message logged"");
+
+    assertLog()
+        .hasWarnMessage(""TimberTest"", ""Message logged"")
+        .hasNoMoreMessages();
+  }
+
   private static String repeat(char c, int number) {
     char[] data = new char[number];
     Arrays.fill(data, c);","@@ -351,6 +351,21 @@ public class TimberTest {
     assertExceptionLogged("""", ""UnknownHostException"");
   }
 
+  @Test public void tagIsClearedWhenNotLoggable() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override
+      protected boolean isLoggable(int priority) {
+        return priority >= Log.WARN;
+      }
+    });
+    Timber.tag(""NotLogged"").i(""Message not logged"");
+    Timber.w(""Message logged"");
+
+    assertLog()
+        .hasWarnMessage(""TimberTest"", ""Message logged"")
+        .hasNoMoreMessages();
+  }
+
   private static String repeat(char c, int number) {
     char[] data = new char[number];
     Arrays.fill(data, c);",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,df5f0b3b052c2b7e29d0d38d7d1274d1fdf9eb62,8c09710094b5c81a58bbd9fdf6880b9f0f686aa3,Make Timber lint run on Timber.tag() logs,"@@ -24,6 +24,7 @@ import lombok.ast.BinaryExpression;
 import lombok.ast.BinaryOperator;
 import lombok.ast.BooleanLiteral;
 import lombok.ast.CharLiteral;
+import lombok.ast.DescribedNode;
 import lombok.ast.Expression;
 import lombok.ast.ExpressionStatement;
 import lombok.ast.FloatingPointLiteral;
@@ -55,6 +56,7 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner,
     Detector.ClassScanner {
   private final static String GET_STRING_METHOD = ""getString"";
+  private final static String TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)"";
 
   @NonNull @Override public Speed getSpeed() {
     return Speed.NORMAL;
@@ -98,7 +100,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         return;
       }
       ExpressionStatement statement = (ExpressionStatement) current;
-      if (!Pattern.matches(""^Timber\\.(v|d|i|w|e|wtf).*"", statement.toString())) {
+      if (!Pattern.matches(""^Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP + "".*"", statement.toString())) {
         return;
       }
       context.report(ISSUE_FORMAT, node, context.getLocation(node),
@@ -116,29 +118,77 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
             tag.length(), tag);
         context.report(ISSUE_TAG_LENGTH, node, context.getLocation(argument), message);
       }
-    } else {
-      if (node.astOperand() instanceof VariableReference) {
-        VariableReference ref = (VariableReference) node.astOperand();
-        if (!""Timber"".equals(ref.astIdentifier().astValue())) {
-          return;
+    } else if (node.astOperand() instanceof VariableReference) {
+      VariableReference ref = (VariableReference) node.astOperand();
+      if (!""Timber"".equals(ref.astIdentifier().astValue())) {
+        return;
+      }
+      checkThrowablePosition(context, node);
+      checkArguments(context, node);
+    } else if (isAstOperandTimberTagLogPattern(node)) {
+      List<Node> siblings = node.astOperand().getParent().getChildren();
+
+      List<Node> logNodes = siblings.subList(1, siblings.size());
+      List<Expression> expressionNodes = new ArrayList<>(); // casted version of logNodes
+
+      List<Node> logArgs = logNodes.subList(1, logNodes.size());
+      for (Node n : logArgs) {
+        if (!(n instanceof lombok.ast.Expression)) {
+          continue; // this is a failure; see `if` guard just outside of this loop
         }
-        checkThrowablePosition(context, node);
-        checkArguments(context, node);
+        expressionNodes.add((Expression) n);
+      }
+
+      // If we're short an Expression, then our guess about this node and its siblings may be wrong,
+      if (expressionNodes.size() == logArgs.size()) {
+        checkStringFormatArguments(
+            context, node, expressionNodes.iterator(), expressionNodes.size());
       }
     }
   }
 
+  /**
+   * Rough guess as to whether node represents a `Timber.tag(TAG).v(...)` style log experssion.
+   *
+   * TODO: ""Rough guess"" because a proper check would check that `v` is being called on an instance
+   * of a planted tree, but this is a quick & dirty hack in place of that (eg: generalized something
+   * like a JavaContext.resolve check on `node`?).
+   */
+  private static boolean isAstOperandTimberTagLogPattern(MethodInvocation node) {
+    Expression astOperand = node.astOperand();
+    if (!(astOperand instanceof MethodInvocation)) {
+      return false;
+    }
+    MethodInvocation m = (MethodInvocation) astOperand;
+
+    if (!""Timber"".equals(m.rawOperand().toString())
+        || !""tag"".equals(m.astName().toString())
+        || !Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, node.astName().getDescription())) {
+      // Is not of the form ""Timber.tag(...).w(...)"" (where ""w()"" can be any valid log method)
+      return false;
+    }
+
+    return (m.getParent().getChildren().get(1) instanceof DescribedNode);
+  }
+
   private static void checkArguments(JavaContext context, MethodInvocation node) {
     StrictListAccessor<Expression, MethodInvocation> astArguments = node.astArguments();
-    Iterator<Expression> iterator = astArguments.iterator();
-    if (!iterator.hasNext()) {
+    checkStringFormatArguments(context, node, astArguments.iterator(), astArguments.size());
+  }
+
+  private static void checkStringFormatArguments(
+      JavaContext context,
+      MethodInvocation reportNode,
+      Iterator<Expression> logArguments,
+      int originalArgSize) {
+    if (!logArguments.hasNext()) {
       return;
     }
     int startIndexOfArguments = 1;
-    Expression formatStringArg = iterator.next();
+    Expression formatStringArg = logArguments.next();
     if (formatStringArg instanceof VariableReference) {
       if (isSubclassOf(context, (VariableReference) formatStringArg, Throwable.class)) {
-        formatStringArg = iterator.next();
+        formatStringArg = logArguments.next();
         startIndexOfArguments++;
       }
     }
@@ -149,9 +199,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return;
     }
     int argumentCount = getFormatArgumentCount(formatString);
-    int passedArgCount = astArguments.size() - startIndexOfArguments;
+    int passedArgCount = originalArgSize - startIndexOfArguments;
     if (argumentCount < passedArgCount) {
-      context.report(ISSUE_ARG_COUNT, node, context.getLocation(node), String.format(
+      context.report(ISSUE_ARG_COUNT, reportNode, context.getLocation(reportNode), String.format(
               ""Wrong argument count, format string `%1$s` requires ""
                   + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
               passedArgCount));
@@ -167,10 +217,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     boolean valid;
     for (int i = 0; i < types.size(); i++) {
       String formatType = types.get(i);
-      if (iterator.hasNext()) {
-        argument = iterator.next();
+      if (logArguments.hasNext()) {
+        argument = logArguments.next();
       } else {
-        context.report(ISSUE_ARG_COUNT, node, context.getLocation(node), String.format(
+        context.report(ISSUE_ARG_COUNT, reportNode, context.getLocation(reportNode), String.format(
                 ""Wrong argument count, format string `%1$s` requires ""
                     + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
                 passedArgCount));
@@ -226,7 +276,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
                   + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
                   + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
               type.getSimpleName(), startIndexOfArguments + i + 1);
-          context.report(ISSUE_ARG_TYPES, node, context.getLocation(argument), message);
+          context.report(ISSUE_ARG_TYPES, reportNode, context.getLocation(argument), message);
         }
       }
     }","@@ -24,6 +24,7 @@ import lombok.ast.BinaryExpression;
 import lombok.ast.BinaryOperator;
 import lombok.ast.BooleanLiteral;
 import lombok.ast.CharLiteral;
+import lombok.ast.DescribedNode;
 import lombok.ast.Expression;
 import lombok.ast.ExpressionStatement;
 import lombok.ast.FloatingPointLiteral;
@@ -55,6 +56,7 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner,
     Detector.ClassScanner {
   private final static String GET_STRING_METHOD = ""getString"";
+  private final static String TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)"";
 
   @NonNull @Override public Speed getSpeed() {
     return Speed.NORMAL;
@@ -98,7 +100,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         return;
       }
       ExpressionStatement statement = (ExpressionStatement) current;
-      if (!Pattern.matches(""^Timber\\.(v|d|i|w|e|wtf).*"", statement.toString())) {
+      if (!Pattern.matches(""^Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP + "".*"", statement.toString())) {
         return;
       }
       context.report(ISSUE_FORMAT, node, context.getLocation(node),
@@ -116,29 +118,77 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
             tag.length(), tag);
         context.report(ISSUE_TAG_LENGTH, node, context.getLocation(argument), message);
       }
-    } else {
-      if (node.astOperand() instanceof VariableReference) {
-        VariableReference ref = (VariableReference) node.astOperand();
-        if (!""Timber"".equals(ref.astIdentifier().astValue())) {
-          return;
+    } else if (node.astOperand() instanceof VariableReference) {
+      VariableReference ref = (VariableReference) node.astOperand();
+      if (!""Timber"".equals(ref.astIdentifier().astValue())) {
+        return;
+      }
+      checkThrowablePosition(context, node);
+      checkArguments(context, node);
+    } else if (isAstOperandTimberTagLogPattern(node)) {
+      List<Node> siblings = node.astOperand().getParent().getChildren();
+
+      List<Node> logNodes = siblings.subList(1, siblings.size());
+      List<Expression> expressionNodes = new ArrayList<>(); // casted version of logNodes
+
+      List<Node> logArgs = logNodes.subList(1, logNodes.size());
+      for (Node n : logArgs) {
+        if (!(n instanceof lombok.ast.Expression)) {
+          continue; // this is a failure; see `if` guard just outside of this loop
         }
-        checkThrowablePosition(context, node);
-        checkArguments(context, node);
+        expressionNodes.add((Expression) n);
+      }
+
+      // If we're short an Expression, then our guess about this node and its siblings may be wrong,
+      if (expressionNodes.size() == logArgs.size()) {
+        checkStringFormatArguments(
+            context, node, expressionNodes.iterator(), expressionNodes.size());
       }
     }
   }
 
+  /**
+   * Rough guess as to whether node represents a `Timber.tag(TAG).v(...)` style log experssion.
+   *
+   * TODO: ""Rough guess"" because a proper check would check that `v` is being called on an instance
+   * of a planted tree, but this is a quick & dirty hack in place of that (eg: generalized something
+   * like a JavaContext.resolve check on `node`?).
+   */
+  private static boolean isAstOperandTimberTagLogPattern(MethodInvocation node) {
+    Expression astOperand = node.astOperand();
+    if (!(astOperand instanceof MethodInvocation)) {
+      return false;
+    }
+    MethodInvocation m = (MethodInvocation) astOperand;
+
+    if (!""Timber"".equals(m.rawOperand().toString())
+        || !""tag"".equals(m.astName().toString())
+        || !Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, node.astName().getDescription())) {
+      // Is not of the form ""Timber.tag(...).w(...)"" (where ""w()"" can be any valid log method)
+      return false;
+    }
+
+    return (m.getParent().getChildren().get(1) instanceof DescribedNode);
+  }
+
   private static void checkArguments(JavaContext context, MethodInvocation node) {
     StrictListAccessor<Expression, MethodInvocation> astArguments = node.astArguments();
-    Iterator<Expression> iterator = astArguments.iterator();
-    if (!iterator.hasNext()) {
+    checkStringFormatArguments(context, node, astArguments.iterator(), astArguments.size());
+  }
+
+  private static void checkStringFormatArguments(
+      JavaContext context,
+      MethodInvocation reportNode,
+      Iterator<Expression> logArguments,
+      int originalArgSize) {
+    if (!logArguments.hasNext()) {
       return;
     }
     int startIndexOfArguments = 1;
-    Expression formatStringArg = iterator.next();
+    Expression formatStringArg = logArguments.next();
     if (formatStringArg instanceof VariableReference) {
       if (isSubclassOf(context, (VariableReference) formatStringArg, Throwable.class)) {
-        formatStringArg = iterator.next();
+        formatStringArg = logArguments.next();
         startIndexOfArguments++;
       }
     }
@@ -149,9 +199,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return;
     }
     int argumentCount = getFormatArgumentCount(formatString);
-    int passedArgCount = astArguments.size() - startIndexOfArguments;
+    int passedArgCount = originalArgSize - startIndexOfArguments;
     if (argumentCount < passedArgCount) {
-      context.report(ISSUE_ARG_COUNT, node, context.getLocation(node), String.format(
+      context.report(ISSUE_ARG_COUNT, reportNode, context.getLocation(reportNode), String.format(
               ""Wrong argument count, format string `%1$s` requires ""
                   + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
               passedArgCount));
@@ -167,10 +217,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     boolean valid;
     for (int i = 0; i < types.size(); i++) {
       String formatType = types.get(i);
-      if (iterator.hasNext()) {
-        argument = iterator.next();
+      if (logArguments.hasNext()) {
+        argument = logArguments.next();
       } else {
-        context.report(ISSUE_ARG_COUNT, node, context.getLocation(node), String.format(
+        context.report(ISSUE_ARG_COUNT, reportNode, context.getLocation(reportNode), String.format(
                 ""Wrong argument count, format string `%1$s` requires ""
                     + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
                 passedArgCount));
@@ -226,7 +276,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
                   + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
                   + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
               type.getSimpleName(), startIndexOfArguments + i + 1);
-          context.report(ISSUE_ARG_TYPES, node, context.getLocation(argument), message);
+          context.report(ISSUE_ARG_TYPES, reportNode, context.getLocation(argument), message);
         }
       }
     }",False,source
CHANGELOG.md,CHANGELOG.md,9b3d2c0b677c2d771b5ecadb4adb9c4015c4f546,df5f0b3b052c2b7e29d0d38d7d1274d1fdf9eb62,Prepare version 4.2.0.,"@@ -1,6 +1,15 @@
 Change Log
 ==========
 
+Version 4.2.0 *(2016-08-12)*
+----------------------------
+
+ * New: `Timber.plant` now has a varargs overload for planting multiple trees at once.
+ * New: minSdkVersion is now 9 because reasons.
+ * Fix: Consume explicitly specified tag even if the message is determined as not loggable (due to level).
+ * Fix: Allow lint checks to run when `Timber.tag(..).v(..)`-style logging is used.
+
+
 Version 4.1.2 *(2016-03-30)*
 ----------------------------","@@ -1,6 +1,15 @@
 Change Log
 ==========
 
+Version 4.2.0 *(2016-08-12)*
+----------------------------
+
+ * New: `Timber.plant` now has a varargs overload for planting multiple trees at once.
+ * New: minSdkVersion is now 9 because reasons.
+ * Fix: Consume explicitly specified tag even if the message is determined as not loggable (due to level).
+ * Fix: Allow lint checks to run when `Timber.tag(..).v(..)`-style logging is used.
+
+
 Version 4.1.2 *(2016-03-30)*
 ----------------------------",False,other
README.md,README.md,9b3d2c0b677c2d771b5ecadb4adb9c4015c4f546,df5f0b3b052c2b7e29d0d38d7d1274d1fdf9eb62,Prepare version 4.2.0.,"@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.1.2'
+compile 'com.jakewharton.timber:timber:4.2.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.1.2'
+compile 'com.jakewharton.timber:timber:4.2.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,9b3d2c0b677c2d771b5ecadb4adb9c4015c4f546,df5f0b3b052c2b7e29d0d38d7d1274d1fdf9eb62,Prepare version 4.2.0.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.3-SNAPSHOT
+VERSION_NAME=4.2.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.1.3-SNAPSHOT
+VERSION_NAME=4.2.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,5ef223bca8b0db00434d85accbdd10a64d12d01e,9b3d2c0b677c2d771b5ecadb4adb9c4015c4f546,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.2.0
+VERSION_NAME=4.2.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.2.0
+VERSION_NAME=4.2.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,fcd99ad8f49422b5db346c791405f4ee6faacf24,5ef223bca8b0db00434d85accbdd10a64d12d01e,Timber Throwable shortcut,"@@ -24,6 +24,11 @@ public final class Timber {
     TREE_OF_SOULS.v(t, message, args);
   }
 
+  /** Log a verbose exception. */
+  public static void v(Throwable t) {
+    TREE_OF_SOULS.v(t);
+  }
+
   /** Log a debug message with optional format args. */
   public static void d(@NonNls String message, Object... args) {
     TREE_OF_SOULS.d(message, args);
@@ -34,6 +39,11 @@ public final class Timber {
     TREE_OF_SOULS.d(t, message, args);
   }
 
+  /** Log a debug exception. */
+  public static void d(Throwable t) {
+    TREE_OF_SOULS.d(t);
+  }
+
   /** Log an info message with optional format args. */
   public static void i(@NonNls String message, Object... args) {
     TREE_OF_SOULS.i(message, args);
@@ -44,6 +54,11 @@ public final class Timber {
     TREE_OF_SOULS.i(t, message, args);
   }
 
+  /** Log an info exception. */
+  public static void i(Throwable t) {
+    TREE_OF_SOULS.i(t);
+  }
+
   /** Log a warning message with optional format args. */
   public static void w(@NonNls String message, Object... args) {
     TREE_OF_SOULS.w(message, args);
@@ -54,6 +69,11 @@ public final class Timber {
     TREE_OF_SOULS.w(t, message, args);
   }
 
+  /** Log a warning exception. */
+  public static void w(Throwable t) {
+    TREE_OF_SOULS.w(t);
+  }
+
   /** Log an error message with optional format args. */
   public static void e(@NonNls String message, Object... args) {
     TREE_OF_SOULS.e(message, args);
@@ -64,6 +84,11 @@ public final class Timber {
     TREE_OF_SOULS.e(t, message, args);
   }
 
+  /** Log an error exception. */
+  public static void e(Throwable t) {
+    TREE_OF_SOULS.e(t);
+  }
+
   /** Log an assert message with optional format args. */
   public static void wtf(@NonNls String message, Object... args) {
     TREE_OF_SOULS.wtf(message, args);
@@ -74,6 +99,11 @@ public final class Timber {
     TREE_OF_SOULS.wtf(t, message, args);
   }
 
+  /** Log an assert exception. */
+  public static void wtf(Throwable t) {
+    TREE_OF_SOULS.wtf(t);
+  }
+
   /** Log at {@code priority} a message with optional format args. */
   public static void log(int priority, @NonNls String message, Object... args) {
     TREE_OF_SOULS.log(priority, message, args);
@@ -84,6 +114,11 @@ public final class Timber {
     TREE_OF_SOULS.log(priority, t, message, args);
   }
 
+  /** Log at {@code priority} an exception. */
+  public static void log(int priority, Throwable t) {
+    TREE_OF_SOULS.log(priority, t);
+  }
+
   /**
    * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
    * instance rather than using static methods or to facilitate testing.
@@ -189,6 +224,14 @@ public final class Timber {
       }
     }
 
+    @Override public void v(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].v(t);
+      }
+    }
+
     @Override public void d(String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -205,6 +248,14 @@ public final class Timber {
       }
     }
 
+    @Override public void d(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].d(t);
+      }
+    }
+
     @Override public void i(String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -221,6 +272,14 @@ public final class Timber {
       }
     }
 
+    @Override public void i(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].i(t);
+      }
+    }
+
     @Override public void w(String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -237,6 +296,14 @@ public final class Timber {
       }
     }
 
+    @Override public void w(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].w(t);
+      }
+    }
+
     @Override public void e(String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -253,6 +320,14 @@ public final class Timber {
       }
     }
 
+    @Override public void e(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].e(t);
+      }
+    }
+
     @Override public void wtf(String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -269,6 +344,14 @@ public final class Timber {
       }
     }
 
+    @Override public void wtf(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].wtf(t);
+      }
+    }
+
     @Override public void log(int priority, String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -285,6 +368,14 @@ public final class Timber {
       }
     }
 
+    @Override public void log(int priority, Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].log(priority, t);
+      }
+    }
+
     @Override protected void log(int priority, String tag, String message, Throwable t) {
       throw new AssertionError(""Missing override for log method."");
     }
@@ -316,6 +407,11 @@ public final class Timber {
       prepareLog(Log.VERBOSE, t, message, args);
     }
 
+    /** Log a verbose exception. */
+    public void v(Throwable t) {
+      prepareLog(Log.VERBOSE, t, null);
+    }
+
     /** Log a debug message with optional format args. */
     public void d(String message, Object... args) {
       prepareLog(Log.DEBUG, null, message, args);
@@ -326,6 +422,11 @@ public final class Timber {
       prepareLog(Log.DEBUG, t, message, args);
     }
 
+    /** Log a debug exception. */
+    public void d(Throwable t) {
+      prepareLog(Log.DEBUG, t, null);
+    }
+
     /** Log an info message with optional format args. */
     public void i(String message, Object... args) {
       prepareLog(Log.INFO, null, message, args);
@@ -336,6 +437,11 @@ public final class Timber {
       prepareLog(Log.INFO, t, message, args);
     }
 
+    /** Log an info exception. */
+    public void i(Throwable t) {
+      prepareLog(Log.INFO, t, null);
+    }
+
     /** Log a warning message with optional format args. */
     public void w(String message, Object... args) {
       prepareLog(Log.WARN, null, message, args);
@@ -346,6 +452,11 @@ public final class Timber {
       prepareLog(Log.WARN, t, message, args);
     }
 
+    /** Log a warning exception. */
+    public void w(Throwable t) {
+      prepareLog(Log.WARN, t, null);
+    }
+
     /** Log an error message with optional format args. */
     public void e(String message, Object... args) {
       prepareLog(Log.ERROR, null, message, args);
@@ -356,6 +467,11 @@ public final class Timber {
       prepareLog(Log.ERROR, t, message, args);
     }
 
+    /** Log an error exception. */
+    public void e(Throwable t) {
+      prepareLog(Log.ERROR, t, null);
+    }
+
     /** Log an assert message with optional format args. */
     public void wtf(String message, Object... args) {
       prepareLog(Log.ASSERT, null, message, args);
@@ -366,6 +482,11 @@ public final class Timber {
       prepareLog(Log.ASSERT, t, message, args);
     }
 
+    /** Log an assert exception. */
+    public void wtf(Throwable t) {
+      prepareLog(Log.ASSERT, t, null);
+    }
+
     /** Log at {@code priority} a message with optional format args. */
     public void log(int priority, String message, Object... args) {
       prepareLog(priority, null, message, args);
@@ -376,6 +497,11 @@ public final class Timber {
       prepareLog(priority, t, message, args);
     }
 
+    /** Log at {@code priority} an exception. */
+    public void log(int priority, Throwable t) {
+      prepareLog(priority, t, null);
+    }
+
     /** Return whether a message at {@code priority} should be logged. */
     protected boolean isLoggable(int priority) {
       return true;","@@ -24,6 +24,11 @@ public final class Timber {
     TREE_OF_SOULS.v(t, message, args);
   }
 
+  /** Log a verbose exception. */
+  public static void v(Throwable t) {
+    TREE_OF_SOULS.v(t);
+  }
+
   /** Log a debug message with optional format args. */
   public static void d(@NonNls String message, Object... args) {
     TREE_OF_SOULS.d(message, args);
@@ -34,6 +39,11 @@ public final class Timber {
     TREE_OF_SOULS.d(t, message, args);
   }
 
+  /** Log a debug exception. */
+  public static void d(Throwable t) {
+    TREE_OF_SOULS.d(t);
+  }
+
   /** Log an info message with optional format args. */
   public static void i(@NonNls String message, Object... args) {
     TREE_OF_SOULS.i(message, args);
@@ -44,6 +54,11 @@ public final class Timber {
     TREE_OF_SOULS.i(t, message, args);
   }
 
+  /** Log an info exception. */
+  public static void i(Throwable t) {
+    TREE_OF_SOULS.i(t);
+  }
+
   /** Log a warning message with optional format args. */
   public static void w(@NonNls String message, Object... args) {
     TREE_OF_SOULS.w(message, args);
@@ -54,6 +69,11 @@ public final class Timber {
     TREE_OF_SOULS.w(t, message, args);
   }
 
+  /** Log a warning exception. */
+  public static void w(Throwable t) {
+    TREE_OF_SOULS.w(t);
+  }
+
   /** Log an error message with optional format args. */
   public static void e(@NonNls String message, Object... args) {
     TREE_OF_SOULS.e(message, args);
@@ -64,6 +84,11 @@ public final class Timber {
     TREE_OF_SOULS.e(t, message, args);
   }
 
+  /** Log an error exception. */
+  public static void e(Throwable t) {
+    TREE_OF_SOULS.e(t);
+  }
+
   /** Log an assert message with optional format args. */
   public static void wtf(@NonNls String message, Object... args) {
     TREE_OF_SOULS.wtf(message, args);
@@ -74,6 +99,11 @@ public final class Timber {
     TREE_OF_SOULS.wtf(t, message, args);
   }
 
+  /** Log an assert exception. */
+  public static void wtf(Throwable t) {
+    TREE_OF_SOULS.wtf(t);
+  }
+
   /** Log at {@code priority} a message with optional format args. */
   public static void log(int priority, @NonNls String message, Object... args) {
     TREE_OF_SOULS.log(priority, message, args);
@@ -84,6 +114,11 @@ public final class Timber {
     TREE_OF_SOULS.log(priority, t, message, args);
   }
 
+  /** Log at {@code priority} an exception. */
+  public static void log(int priority, Throwable t) {
+    TREE_OF_SOULS.log(priority, t);
+  }
+
   /**
    * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
    * instance rather than using static methods or to facilitate testing.
@@ -189,6 +224,14 @@ public final class Timber {
       }
     }
 
+    @Override public void v(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].v(t);
+      }
+    }
+
     @Override public void d(String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -205,6 +248,14 @@ public final class Timber {
       }
     }
 
+    @Override public void d(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].d(t);
+      }
+    }
+
     @Override public void i(String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -221,6 +272,14 @@ public final class Timber {
       }
     }
 
+    @Override public void i(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].i(t);
+      }
+    }
+
     @Override public void w(String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -237,6 +296,14 @@ public final class Timber {
       }
     }
 
+    @Override public void w(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].w(t);
+      }
+    }
+
     @Override public void e(String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -253,6 +320,14 @@ public final class Timber {
       }
     }
 
+    @Override public void e(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].e(t);
+      }
+    }
+
     @Override public void wtf(String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -269,6 +344,14 @@ public final class Timber {
       }
     }
 
+    @Override public void wtf(Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].wtf(t);
+      }
+    }
+
     @Override public void log(int priority, String message, Object... args) {
       Tree[] forest = forestAsArray;
       //noinspection ForLoopReplaceableByForEach
@@ -285,6 +368,14 @@ public final class Timber {
       }
     }
 
+    @Override public void log(int priority, Throwable t) {
+      Tree[] forest = forestAsArray;
+      //noinspection ForLoopReplaceableByForEach
+      for (int i = 0, count = forest.length; i < count; i++) {
+        forest[i].log(priority, t);
+      }
+    }
+
     @Override protected void log(int priority, String tag, String message, Throwable t) {
       throw new AssertionError(""Missing override for log method."");
     }
@@ -316,6 +407,11 @@ public final class Timber {
       prepareLog(Log.VERBOSE, t, message, args);
     }
 
+    /** Log a verbose exception. */
+    public void v(Throwable t) {
+      prepareLog(Log.VERBOSE, t, null);
+    }
+
     /** Log a debug message with optional format args. */
     public void d(String message, Object... args) {
       prepareLog(Log.DEBUG, null, message, args);
@@ -326,6 +422,11 @@ public final class Timber {
       prepareLog(Log.DEBUG, t, message, args);
     }
 
+    /** Log a debug exception. */
+    public void d(Throwable t) {
+      prepareLog(Log.DEBUG, t, null);
+    }
+
     /** Log an info message with optional format args. */
     public void i(String message, Object... args) {
       prepareLog(Log.INFO, null, message, args);
@@ -336,6 +437,11 @@ public final class Timber {
       prepareLog(Log.INFO, t, message, args);
     }
 
+    /** Log an info exception. */
+    public void i(Throwable t) {
+      prepareLog(Log.INFO, t, null);
+    }
+
     /** Log a warning message with optional format args. */
     public void w(String message, Object... args) {
       prepareLog(Log.WARN, null, message, args);
@@ -346,6 +452,11 @@ public final class Timber {
       prepareLog(Log.WARN, t, message, args);
     }
 
+    /** Log a warning exception. */
+    public void w(Throwable t) {
+      prepareLog(Log.WARN, t, null);
+    }
+
     /** Log an error message with optional format args. */
     public void e(String message, Object... args) {
       prepareLog(Log.ERROR, null, message, args);
@@ -356,6 +467,11 @@ public final class Timber {
       prepareLog(Log.ERROR, t, message, args);
     }
 
+    /** Log an error exception. */
+    public void e(Throwable t) {
+      prepareLog(Log.ERROR, t, null);
+    }
+
     /** Log an assert message with optional format args. */
     public void wtf(String message, Object... args) {
       prepareLog(Log.ASSERT, null, message, args);
@@ -366,6 +482,11 @@ public final class Timber {
       prepareLog(Log.ASSERT, t, message, args);
     }
 
+    /** Log an assert exception. */
+    public void wtf(Throwable t) {
+      prepareLog(Log.ASSERT, t, null);
+    }
+
     /** Log at {@code priority} a message with optional format args. */
     public void log(int priority, String message, Object... args) {
       prepareLog(priority, null, message, args);
@@ -376,6 +497,11 @@ public final class Timber {
       prepareLog(priority, t, message, args);
     }
 
+    /** Log at {@code priority} an exception. */
+    public void log(int priority, Throwable t) {
+      prepareLog(priority, t, null);
+    }
+
     /** Return whether a message at {@code priority} should be logged. */
     protected boolean isLoggable(int priority) {
       return true;",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,fcd99ad8f49422b5db346c791405f4ee6faacf24,5ef223bca8b0db00434d85accbdd10a64d12d01e,Timber Throwable shortcut,"@@ -3,6 +3,7 @@ package timber.log;
 import android.util.Log;
 
 import java.net.UnknownHostException;
+import java.net.ConnectException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -37,7 +38,7 @@ public class TimberTest {
     Timber.d(""Test"");
 
     assertLog()
-        .hasDebugMessage(""TimberTest:37"", ""Test"")
+        .hasDebugMessage(""TimberTest:38"", ""Test"")
         .hasNoMoreMessages();
   }
 
@@ -206,7 +207,51 @@ public class TimberTest {
     NullPointerException datThrowable = new NullPointerException();
     Timber.e(datThrowable, ""OMFG!"");
 
-    assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
+    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
+  }
+
+  @Test public void exceptionOnly() {
+    Timber.plant(new Timber.DebugTree());
+
+    Timber.v(new IllegalArgumentException());
+    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""TimberTest"", 0);
+
+    Timber.i(new NullPointerException());
+    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""TimberTest"", 1);
+
+    Timber.d(new UnsupportedOperationException());
+    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""TimberTest"", 2);
+
+    Timber.w(new UnknownHostException());
+    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""TimberTest"", 3);
+
+    Timber.e(new ConnectException());
+    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""TimberTest"", 4);
+
+    Timber.wtf(new AssertionError());
+    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""TimberTest"", 5);
+  }
+
+  @Test public void exceptionOnlyCustomTag() {
+    Timber.plant(new Timber.DebugTree());
+
+    Timber.tag(""Custom"").v(new IllegalArgumentException());
+    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""Custom"", 0);
+
+    Timber.tag(""Custom"").i(new NullPointerException());
+    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""Custom"", 1);
+
+    Timber.tag(""Custom"").d(new UnsupportedOperationException());
+    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""Custom"", 2);
+
+    Timber.tag(""Custom"").w(new UnknownHostException());
+    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""Custom"", 3);
+
+    Timber.tag(""Custom"").e(new ConnectException());
+    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""Custom"", 4);
+
+    Timber.tag(""Custom"").wtf(new AssertionError());
+    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""Custom"", 5);
   }
 
   @Test public void exceptionFromSpawnedThread() throws InterruptedException {
@@ -220,7 +265,7 @@ public class TimberTest {
       }
     }.run();
     latch.await();
-    assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
+    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
   }
 
   @Test public void nullMessageWithThrowable() {
@@ -228,7 +273,7 @@ public class TimberTest {
     final NullPointerException datThrowable = new NullPointerException();
     Timber.e(datThrowable, null);
 
-    assertExceptionLogged("""", ""java.lang.NullPointerException"");
+    assertExceptionLogged(Log.ERROR, """", ""java.lang.NullPointerException"");
   }
 
   @Test public void chunkAcrossNewlinesAndLimit() {
@@ -348,7 +393,7 @@ public class TimberTest {
     Timber.plant(new Timber.DebugTree());
     Timber.e(new UnknownHostException(), null);
 
-    assertExceptionLogged("""", ""UnknownHostException"");
+    assertExceptionLogged(Log.ERROR, """", ""UnknownHostException"");
   }
 
   @Test public void tagIsClearedWhenNotLoggable() {
@@ -372,13 +417,21 @@ public class TimberTest {
     return new String(data);
   }
 
-  private static void assertExceptionLogged(String message, String exceptionClassname) {
+  private static void assertExceptionLogged(int logType, String message, String exceptionClassname) {
+    assertExceptionLogged(logType, message, exceptionClassname, null, 0);
+  }
+
+  private static void assertExceptionLogged(int logType, String message, String exceptionClassname, String tag, int index) {
     List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.ERROR);
-    assertThat(log.tag).isEqualTo(""TimberTest"");
-    assertThat(log.msg).startsWith(message);
+    assertThat(logs).hasSize(index + 1);
+    LogItem log = logs.get(index);
+    assertThat(log.type).isEqualTo(logType);
+    assertThat(log.tag).isEqualTo(tag != null ? tag : ""TimberTest"");
+
+    if (message != null) {
+      assertThat(log.msg).startsWith(message);
+    }
+
     assertThat(log.msg).contains(exceptionClassname);
     // We use a low-level primitive that Robolectric doesn't populate.
     assertThat(log.throwable).isNull();","@@ -3,6 +3,7 @@ package timber.log;
 import android.util.Log;
 
 import java.net.UnknownHostException;
+import java.net.ConnectException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -37,7 +38,7 @@ public class TimberTest {
     Timber.d(""Test"");
 
     assertLog()
-        .hasDebugMessage(""TimberTest:37"", ""Test"")
+        .hasDebugMessage(""TimberTest:38"", ""Test"")
         .hasNoMoreMessages();
   }
 
@@ -206,7 +207,51 @@ public class TimberTest {
     NullPointerException datThrowable = new NullPointerException();
     Timber.e(datThrowable, ""OMFG!"");
 
-    assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
+    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
+  }
+
+  @Test public void exceptionOnly() {
+    Timber.plant(new Timber.DebugTree());
+
+    Timber.v(new IllegalArgumentException());
+    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""TimberTest"", 0);
+
+    Timber.i(new NullPointerException());
+    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""TimberTest"", 1);
+
+    Timber.d(new UnsupportedOperationException());
+    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""TimberTest"", 2);
+
+    Timber.w(new UnknownHostException());
+    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""TimberTest"", 3);
+
+    Timber.e(new ConnectException());
+    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""TimberTest"", 4);
+
+    Timber.wtf(new AssertionError());
+    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""TimberTest"", 5);
+  }
+
+  @Test public void exceptionOnlyCustomTag() {
+    Timber.plant(new Timber.DebugTree());
+
+    Timber.tag(""Custom"").v(new IllegalArgumentException());
+    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""Custom"", 0);
+
+    Timber.tag(""Custom"").i(new NullPointerException());
+    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""Custom"", 1);
+
+    Timber.tag(""Custom"").d(new UnsupportedOperationException());
+    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""Custom"", 2);
+
+    Timber.tag(""Custom"").w(new UnknownHostException());
+    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""Custom"", 3);
+
+    Timber.tag(""Custom"").e(new ConnectException());
+    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""Custom"", 4);
+
+    Timber.tag(""Custom"").wtf(new AssertionError());
+    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""Custom"", 5);
   }
 
   @Test public void exceptionFromSpawnedThread() throws InterruptedException {
@@ -220,7 +265,7 @@ public class TimberTest {
       }
     }.run();
     latch.await();
-    assertExceptionLogged(""OMFG!"", ""java.lang.NullPointerException"");
+    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
   }
 
   @Test public void nullMessageWithThrowable() {
@@ -228,7 +273,7 @@ public class TimberTest {
     final NullPointerException datThrowable = new NullPointerException();
     Timber.e(datThrowable, null);
 
-    assertExceptionLogged("""", ""java.lang.NullPointerException"");
+    assertExceptionLogged(Log.ERROR, """", ""java.lang.NullPointerException"");
   }
 
   @Test public void chunkAcrossNewlinesAndLimit() {
@@ -348,7 +393,7 @@ public class TimberTest {
     Timber.plant(new Timber.DebugTree());
     Timber.e(new UnknownHostException(), null);
 
-    assertExceptionLogged("""", ""UnknownHostException"");
+    assertExceptionLogged(Log.ERROR, """", ""UnknownHostException"");
   }
 
   @Test public void tagIsClearedWhenNotLoggable() {
@@ -372,13 +417,21 @@ public class TimberTest {
     return new String(data);
   }
 
-  private static void assertExceptionLogged(String message, String exceptionClassname) {
+  private static void assertExceptionLogged(int logType, String message, String exceptionClassname) {
+    assertExceptionLogged(logType, message, exceptionClassname, null, 0);
+  }
+
+  private static void assertExceptionLogged(int logType, String message, String exceptionClassname, String tag, int index) {
     List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(1);
-    LogItem log = logs.get(0);
-    assertThat(log.type).isEqualTo(Log.ERROR);
-    assertThat(log.tag).isEqualTo(""TimberTest"");
-    assertThat(log.msg).startsWith(message);
+    assertThat(logs).hasSize(index + 1);
+    LogItem log = logs.get(index);
+    assertThat(log.type).isEqualTo(logType);
+    assertThat(log.tag).isEqualTo(tag != null ? tag : ""TimberTest"");
+
+    if (message != null) {
+      assertThat(log.msg).startsWith(message);
+    }
+
     assertThat(log.msg).contains(exceptionClassname);
     // We use a low-level primitive that Robolectric doesn't populate.
     assertThat(log.throwable).isNull();",False,test
CHANGELOG.md,CHANGELOG.md,db51fbd52e74d228e7e452ca3421662242a4455f,fcd99ad8f49422b5db346c791405f4ee6faacf24,Prepare version 4.3.0.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 4.3.0 *(2016-08-18)*
+----------------------------
+
+ * New: Overloads for all log methods which accept only a `Throwable` without a message.
+
+
 Version 4.2.0 *(2016-08-12)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 4.3.0 *(2016-08-18)*
+----------------------------
+
+ * New: Overloads for all log methods which accept only a `Throwable` without a message.
+
+
 Version 4.2.0 *(2016-08-12)*
 ----------------------------",False,other
README.md,README.md,db51fbd52e74d228e7e452ca3421662242a4455f,fcd99ad8f49422b5db346c791405f4ee6faacf24,Prepare version 4.3.0.,"@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.2.0'
+compile 'com.jakewharton.timber:timber:4.3.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.2.0'
+compile 'com.jakewharton.timber:timber:4.3.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,db51fbd52e74d228e7e452ca3421662242a4455f,fcd99ad8f49422b5db346c791405f4ee6faacf24,Prepare version 4.3.0.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.2.1-SNAPSHOT
+VERSION_NAME=4.3.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.2.1-SNAPSHOT
+VERSION_NAME=4.3.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,7edb780bdbd2334a81a983fd14923336be5e6fed,db51fbd52e74d228e7e452ca3421662242a4455f,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.3.0
+VERSION_NAME=4.3.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.3.0
+VERSION_NAME=4.3.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,f8c58cda57a52b748d14b33b70b84d3e7985df41,7edb780bdbd2334a81a983fd14923336be5e6fed,"Actually test on a spawned thread.

Going by the name of the test and the presence of the CountdownLatch its obvious the intent was to test execution on a second thread, not direct execution through a Thread object.","@@ -263,7 +263,7 @@ public class TimberTest {
         Timber.e(datThrowable, ""OMFG!"");
         latch.countDown();
       }
-    }.run();
+    }.start();
     latch.await();
     assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
   }","@@ -263,7 +263,7 @@ public class TimberTest {
         Timber.e(datThrowable, ""OMFG!"");
         latch.countDown();
       }
-    }.run();
+    }.start();
     latch.await();
     assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
   }",False,test
build.gradle,build.gradle,3390db486460ded59752e605ed873a5d588492d8,750bd85760cca481708cb3fe6121768c665064ef,Bump gradle and lint api dependencies.,"@@ -3,7 +3,7 @@ buildscript {
     mavenCentral()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.1.2'
+    classpath 'com.android.tools.build:gradle:2.1.3'
   }
 }
 
@@ -20,6 +20,7 @@ ext {
   buildToolsVersion = '24.0.0'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
+  lintVersion = '25.1.2'
 }
 
 ext.deps = [
@@ -31,6 +32,6 @@ ext.deps = [
     robolectric: 'org.robolectric:robolectric:3.0',
 
     // Lint dependencies
-    lintapi    : 'com.android.tools.lint:lint-api:24.3.1',
-    lintchecks : 'com.android.tools.lint:lint-checks:24.3.1'
+    lintapi    : ""com.android.tools.lint:lint-api:${lintVersion}"",
+    lintchecks : ""com.android.tools.lint:lint-checks:${lintVersion}""
 ]","@@ -3,7 +3,7 @@ buildscript {
     mavenCentral()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.1.2'
+    classpath 'com.android.tools.build:gradle:2.1.3'
   }
 }
 
@@ -20,6 +20,7 @@ ext {
   buildToolsVersion = '24.0.0'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
+  lintVersion = '25.1.2'
 }
 
 ext.deps = [
@@ -31,6 +32,6 @@ ext.deps = [
     robolectric: 'org.robolectric:robolectric:3.0',
 
     // Lint dependencies
-    lintapi    : 'com.android.tools.lint:lint-api:24.3.1',
-    lintchecks : 'com.android.tools.lint:lint-checks:24.3.1'
+    lintapi    : ""com.android.tools.lint:lint-api:${lintVersion}"",
+    lintchecks : ""com.android.tools.lint:lint-checks:${lintVersion}""
 ]",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,3390db486460ded59752e605ed873a5d588492d8,750bd85760cca481708cb3fe6121768c665064ef,Bump gradle and lint api dependencies.,"@@ -1,6 +1,6 @@
-#Thu Aug 13 16:45:00 EDT 2015
+#Wed Sep 14 14:53:41 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.13-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip","@@ -1,6 +1,6 @@
-#Thu Aug 13 16:45:00 EDT 2015
+#Wed Sep 14 14:53:41 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.13-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip",False,other
gradlew,gradlew,3390db486460ded59752e605ed873a5d588492d8,750bd85760cca481708cb3fe6121768c665064ef,Bump gradle and lint api dependencies.,"@@ -6,12 +6,30 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG=""$0""
+# Need this for relative symlinks.
+while [ -h ""$PRG"" ] ; do
+    ls=`ls -ld ""$PRG""`
+    link=`expr ""$ls"" : '.*-> \(.*\)$'`
+    if expr ""$link"" : '/.*' > /dev/null; then
+        PRG=""$link""
+    else
+        PRG=`dirname ""$PRG""`""/$link""
+    fi
+done
+SAVED=""`pwd`""
+cd ""`dirname \""$PRG\""`/"" >/dev/null
+APP_HOME=""`pwd -P`""
+cd ""$SAVED"" >/dev/null
 
 APP_NAME=""Gradle""
 APP_BASE_NAME=`basename ""$0""`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD=""maximum""
 
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case ""`uname`"" in
   CYGWIN* )
     cygwin=true
@@ -40,31 +59,11 @@ case ""`uname`"" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n ""$JAVA_HOME"" ] && JAVA_HOME=`cygpath --unix ""$JAVA_HOME""`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG=""$0""
-# Need this for relative symlinks.
-while [ -h ""$PRG"" ] ; do
-    ls=`ls -ld ""$PRG""`
-    link=`expr ""$ls"" : '.*-> \(.*\)$'`
-    if expr ""$link"" : '/.*' > /dev/null; then
-        PRG=""$link""
-    else
-        PRG=`dirname ""$PRG""`""/$link""
-    fi
-done
-SAVED=""`pwd`""
-cd ""`dirname \""$PRG\""`/"" >&-
-APP_HOME=""`pwd -P`""
-cd ""$SAVED"" >&-
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -90,7 +89,7 @@ location of your Java installation.""
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ ""$cygwin"" = ""false"" -a ""$darwin"" = ""false"" ] ; then
+if [ ""$cygwin"" = ""false"" -a ""$darwin"" = ""false"" -a ""$nonstop"" = ""false"" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ ""$MAX_FD"" = ""maximum"" -o ""$MAX_FD"" = ""max"" ] ; then
@@ -114,6 +113,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed ""$APP_HOME""`
     CLASSPATH=`cygpath --path --mixed ""$CLASSPATH""`
+    JAVACMD=`cygpath --unix ""$JAVACMD""`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`","@@ -6,12 +6,30 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG=""$0""
+# Need this for relative symlinks.
+while [ -h ""$PRG"" ] ; do
+    ls=`ls -ld ""$PRG""`
+    link=`expr ""$ls"" : '.*-> \(.*\)$'`
+    if expr ""$link"" : '/.*' > /dev/null; then
+        PRG=""$link""
+    else
+        PRG=`dirname ""$PRG""`""/$link""
+    fi
+done
+SAVED=""`pwd`""
+cd ""`dirname \""$PRG\""`/"" >/dev/null
+APP_HOME=""`pwd -P`""
+cd ""$SAVED"" >/dev/null
 
 APP_NAME=""Gradle""
 APP_BASE_NAME=`basename ""$0""`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD=""maximum""
 
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case ""`uname`"" in
   CYGWIN* )
     cygwin=true
@@ -40,31 +59,11 @@ case ""`uname`"" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n ""$JAVA_HOME"" ] && JAVA_HOME=`cygpath --unix ""$JAVA_HOME""`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG=""$0""
-# Need this for relative symlinks.
-while [ -h ""$PRG"" ] ; do
-    ls=`ls -ld ""$PRG""`
-    link=`expr ""$ls"" : '.*-> \(.*\)$'`
-    if expr ""$link"" : '/.*' > /dev/null; then
-        PRG=""$link""
-    else
-        PRG=`dirname ""$PRG""`""/$link""
-    fi
-done
-SAVED=""`pwd`""
-cd ""`dirname \""$PRG\""`/"" >&-
-APP_HOME=""`pwd -P`""
-cd ""$SAVED"" >&-
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -90,7 +89,7 @@ location of your Java installation.""
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ ""$cygwin"" = ""false"" -a ""$darwin"" = ""false"" ] ; then
+if [ ""$cygwin"" = ""false"" -a ""$darwin"" = ""false"" -a ""$nonstop"" = ""false"" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ ""$MAX_FD"" = ""maximum"" -o ""$MAX_FD"" = ""max"" ] ; then
@@ -114,6 +113,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed ""$APP_HOME""`
     CLASSPATH=`cygpath --path --mixed ""$CLASSPATH""`
+    JAVACMD=`cygpath --unix ""$JAVACMD""`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`",False,other
gradlew.bat,gradlew.bat,3390db486460ded59752e605ed873a5d588492d8,750bd85760cca481708cb3fe6121768c665064ef,Bump gradle and lint api dependencies.,"@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if ""%OS%""==""Windows_NT"" setlocal
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 set DIRNAME=%~dp0
 if ""%DIRNAME%"" == """" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,7 +46,7 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not ""%OS%"" == ""Windows_NT"" goto win9xME_args
 if ""%@eval[2+2]"" == ""4"" goto 4NT_args","@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if ""%OS%""==""Windows_NT"" setlocal
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 set DIRNAME=%~dp0
 if ""%DIRNAME%"" == """" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,7 +46,7 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not ""%OS%"" == ""Windows_NT"" goto win9xME_args
 if ""%@eval[2+2]"" == ""4"" goto 4NT_args",True,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,2485dc369a9b77dd9c427b61e93d50128158b48c,3390db486460ded59752e605ed873a5d588492d8,Add ability to filter logs by log tag.,"@@ -502,16 +502,25 @@ public final class Timber {
       prepareLog(priority, t, null);
     }
 
-    /** Return whether a message at {@code priority} should be logged. */
+    /**
+     * Return whether a message at {@code priority} should be logged.
+     * @deprecated use {@link #isLoggable(String, int)} instead.
+     */
+    @Deprecated
     protected boolean isLoggable(int priority) {
       return true;
     }
 
+    /** Return whether a message at {@code priority} or {@code tag} should be logged. */
+    protected boolean isLoggable(String tag, int priority) {
+      return isLoggable(priority);
+    }
+
     private void prepareLog(int priority, Throwable t, String message, Object... args) {
       // Consume tag even when message is not loggable so that next message is correctly tagged.
       String tag = getTag();
 
-      if (!isLoggable(priority)) {
+      if (!isLoggable(tag, priority)) {
         return;
       }
       if (message != null && message.length() == 0) {","@@ -502,16 +502,25 @@ public final class Timber {
       prepareLog(priority, t, null);
     }
 
-    /** Return whether a message at {@code priority} should be logged. */
+    /**
+     * Return whether a message at {@code priority} should be logged.
+     * @deprecated use {@link #isLoggable(String, int)} instead.
+     */
+    @Deprecated
     protected boolean isLoggable(int priority) {
       return true;
     }
 
+    /** Return whether a message at {@code priority} or {@code tag} should be logged. */
+    protected boolean isLoggable(String tag, int priority) {
+      return isLoggable(priority);
+    }
+
     private void prepareLog(int priority, Throwable t, String message, Object... args) {
       // Consume tag even when message is not loggable so that next message is correctly tagged.
       String tag = getTag();
 
-      if (!isLoggable(priority)) {
+      if (!isLoggable(tag, priority)) {
         return;
       }
       if (message != null && message.length() == 0) {",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,2485dc369a9b77dd9c427b61e93d50128158b48c,3390db486460ded59752e605ed873a5d588492d8,Add ability to filter logs by log tag.,"@@ -389,6 +389,24 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void isLoggableTagControlsLogging() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected boolean isLoggable(String tag, int priority) {
+        return ""FILTER"".equals(tag);
+      }
+    });
+    Timber.tag(""FILTER"").v(""Hello, World!"");
+    Timber.d(""Hello, World!"");
+    Timber.i(""Hello, World!"");
+    Timber.w(""Hello, World!"");
+    Timber.e(""Hello, World!"");
+    Timber.wtf(""Hello, World!"");
+
+    assertLog()
+        .hasVerboseMessage(""FILTER"", ""Hello, World!"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void logsUnknownHostExceptions() {
     Timber.plant(new Timber.DebugTree());
     Timber.e(new UnknownHostException(), null);","@@ -389,6 +389,24 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void isLoggableTagControlsLogging() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override protected boolean isLoggable(String tag, int priority) {
+        return ""FILTER"".equals(tag);
+      }
+    });
+    Timber.tag(""FILTER"").v(""Hello, World!"");
+    Timber.d(""Hello, World!"");
+    Timber.i(""Hello, World!"");
+    Timber.w(""Hello, World!"");
+    Timber.e(""Hello, World!"");
+    Timber.wtf(""Hello, World!"");
+
+    assertLog()
+        .hasVerboseMessage(""FILTER"", ""Hello, World!"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void logsUnknownHostExceptions() {
     Timber.plant(new Timber.DebugTree());
     Timber.e(new UnknownHostException(), null);",False,test
CHANGELOG.md,CHANGELOG.md,91900182e30e49b49ef0998bea82859ae6f1058a,fb336b7c86e2f50bfa6d2e1109ecc955e05fb74c,Prepare version 4.3.1.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 4.3.1 *(2016-09-19)*
+----------------------------
+
+ * New: Add convenience method `isLoggable` convenience method which also provides the tag.
+
+
 Version 4.3.0 *(2016-08-18)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 4.3.1 *(2016-09-19)*
+----------------------------
+
+ * New: Add convenience method `isLoggable` convenience method which also provides the tag.
+
+
 Version 4.3.0 *(2016-08-18)*
 ----------------------------",False,other
README.md,README.md,91900182e30e49b49ef0998bea82859ae6f1058a,fb336b7c86e2f50bfa6d2e1109ecc955e05fb74c,Prepare version 4.3.1.,"@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.3.0'
+compile 'com.jakewharton.timber:timber:4.3.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.3.0'
+compile 'com.jakewharton.timber:timber:4.3.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,91900182e30e49b49ef0998bea82859ae6f1058a,fb336b7c86e2f50bfa6d2e1109ecc955e05fb74c,Prepare version 4.3.1.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.3.1-SNAPSHOT
+VERSION_NAME=4.3.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.3.1-SNAPSHOT
+VERSION_NAME=4.3.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,c02eeaab4a7d6bc11690c1af1002f9030c2db4c5,91900182e30e49b49ef0998bea82859ae6f1058a,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.3.1
+VERSION_NAME=4.3.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.3.1
+VERSION_NAME=4.3.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,08e633fb23f91a22a84e90a8b69ad9288a50168d,c02eeaab4a7d6bc11690c1af1002f9030c2db4c5,Log message formatting available by protected method.,"@@ -533,7 +533,7 @@ public final class Timber {
         message = getStackTraceString(t);
       } else {
         if (args.length > 0) {
-          message = String.format(message, args);
+          message = formatMessage(message, args);
         }
         if (t != null) {
           message += ""\n"" + getStackTraceString(t);
@@ -543,6 +543,13 @@ public final class Timber {
       log(priority, tag, message, t);
     }
 
+    /**
+     * Formats a log message with optional arguments.
+     */
+    protected String formatMessage(String message, Object[] args) {
+      return String.format(message, args);
+    }
+
     private String getStackTraceString(Throwable t) {
       // Don't replace this with Log.getStackTraceString() - it hides
       // UnknownHostException, which is not what we want.","@@ -533,7 +533,7 @@ public final class Timber {
         message = getStackTraceString(t);
       } else {
         if (args.length > 0) {
-          message = String.format(message, args);
+          message = formatMessage(message, args);
         }
         if (t != null) {
           message += ""\n"" + getStackTraceString(t);
@@ -543,6 +543,13 @@ public final class Timber {
       log(priority, tag, message, t);
     }
 
+    /**
+     * Formats a log message with optional arguments.
+     */
+    protected String formatMessage(String message, Object[] args) {
+      return String.format(message, args);
+    }
+
     private String getStackTraceString(Throwable t) {
       // Don't replace this with Log.getStackTraceString() - it hides
       // UnknownHostException, which is not what we want.",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,08e633fb23f91a22a84e90a8b69ad9288a50168d,c02eeaab4a7d6bc11690c1af1002f9030c2db4c5,Log message formatting available by protected method.,"@@ -429,6 +429,19 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void logsWithCustomFormatter() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override
+      protected String formatMessage(String message, Object[] args) {
+        return String.format(""Test formatting: ""+message, args);
+      }
+    });
+    Timber.d(""Test message logged. %d"", 100);
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"");
+  }
+
   private static String repeat(char c, int number) {
     char[] data = new char[number];
     Arrays.fill(data, c);","@@ -429,6 +429,19 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void logsWithCustomFormatter() {
+    Timber.plant(new Timber.DebugTree() {
+      @Override
+      protected String formatMessage(String message, Object[] args) {
+        return String.format(""Test formatting: ""+message, args);
+      }
+    });
+    Timber.d(""Test message logged. %d"", 100);
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"");
+  }
+
   private static String repeat(char c, int number) {
     char[] data = new char[number];
     Arrays.fill(data, c);",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,84ce73dda4381c87165bdbe6a6235f3457843679,08e633fb23f91a22a84e90a8b69ad9288a50168d,"Fix linter crash

Fixes #163","@@ -500,7 +500,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
       if (argument instanceof VariableReference) {
         VariableReference variableReference = (VariableReference) argument;
-        if (isSubclassOf(context, variableReference, Throwable.class) && index > 0) {
+        if (index > 0 && isSubclassOf(context, variableReference, Throwable.class)) {
           context.report(ISSUE_THROWABLE, node, context.getLocation(node),
               ""Throwable should be first argument"");
         }","@@ -500,7 +500,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
       if (argument instanceof VariableReference) {
         VariableReference variableReference = (VariableReference) argument;
-        if (isSubclassOf(context, variableReference, Throwable.class) && index > 0) {
+        if (index > 0 && isSubclassOf(context, variableReference, Throwable.class)) {
           context.report(ISSUE_THROWABLE, node, context.getLocation(node),
               ""Throwable should be first argument"");
         }",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,86b5368f811f5d3c66f02e859c9fee9a1765740f,c99e5b62a0d702b4ade86c77cf23af019717a184,Fix class cast exception due to too eager typing.,"@@ -106,9 +106,12 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       context.report(ISSUE_FORMAT, node, context.getLocation(node),
           ""Using 'String#format' inside of 'Timber'"");
     } else if (""tag"".equals(methodName)) {
-      VariableReference ref = (VariableReference) node.astOperand();
-      if (!""Timber"".equals(ref.astIdentifier().astValue())) {
-        return;
+      Object expression = node.astOperand();
+      if (expression instanceof VariableReference) {
+        VariableReference ref = (VariableReference) expression;
+        if (!""Timber"".equals(ref.astIdentifier().astValue())) {
+          return;
+        }
       }
       Node argument = node.astArguments().iterator().next();
       String tag = findLiteralValue(context, argument);","@@ -106,9 +106,12 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       context.report(ISSUE_FORMAT, node, context.getLocation(node),
           ""Using 'String#format' inside of 'Timber'"");
     } else if (""tag"".equals(methodName)) {
-      VariableReference ref = (VariableReference) node.astOperand();
-      if (!""Timber"".equals(ref.astIdentifier().astValue())) {
-        return;
+      Object expression = node.astOperand();
+      if (expression instanceof VariableReference) {
+        VariableReference ref = (VariableReference) expression;
+        if (!""Timber"".equals(ref.astIdentifier().astValue())) {
+          return;
+        }
       }
       Node argument = node.astArguments().iterator().next();
       String tag = findLiteralValue(context, argument);",False,source
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,f10e7af1aec0e3628b5597cc8103bc5d2ea3828d,fa7f6576279ee7c017eb76b14da4533ed999f47b,"Simple implementation

Replace with android.text.TextUtils 

```
/**
 * Returns true if the string is null or 0-length.
 * @param str the string to be examined
 * @return true if str is null or zero length
 */
public static boolean isEmpty(@Nullable CharSequence str) {
    if (str == null || str.length() == 0)
        return true;
    else
        return false;
}
```","@@ -1,5 +1,6 @@
 package timber.log;
 
+import android.text.TextUtils;
 import android.util.Log;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -523,10 +524,7 @@ public final class Timber {
       if (!isLoggable(tag, priority)) {
         return;
       }
-      if (message != null && message.length() == 0) {
-        message = null;
-      }
-      if (message == null) {
+      if (TextUtils.isEmpty(message)) {
         if (t == null) {
           return; // Swallow message if it's null and there's no throwable.
         }","@@ -1,5 +1,6 @@
 package timber.log;
 
+import android.text.TextUtils;
 import android.util.Log;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -523,10 +524,7 @@ public final class Timber {
       if (!isLoggable(tag, priority)) {
         return;
       }
-      if (message != null && message.length() == 0) {
-        message = null;
-      }
-      if (message == null) {
+      if (TextUtils.isEmpty(message)) {
         if (t == null) {
           return; // Swallow message if it's null and there's no throwable.
         }",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,03f398dfe82bd30edeb9ca28d4685066190063cf,eb8cbe8cfdfdbd6094eae7112c1d5aab1c83f972,"Migrate LogNotTimber lint check from class to source scan

Fixes #187","@@ -5,7 +5,6 @@ import com.android.annotations.Nullable;
 import com.android.tools.lint.checks.StringFormatDetector;
 import com.android.tools.lint.client.api.JavaParser;
 import com.android.tools.lint.detector.api.Category;
-import com.android.tools.lint.detector.api.ClassContext;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
 import com.android.tools.lint.detector.api.Issue;
@@ -37,9 +36,6 @@ import lombok.ast.NullLiteral;
 import lombok.ast.StrictListAccessor;
 import lombok.ast.StringLiteral;
 import lombok.ast.VariableReference;
-import org.objectweb.asm.tree.ClassNode;
-import org.objectweb.asm.tree.MethodInsnNode;
-import org.objectweb.asm.tree.MethodNode;
 
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
@@ -53,8 +49,7 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 
-public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner,
-    Detector.ClassScanner {
+public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner {
   private final static String GET_STRING_METHOD = ""getString"";
   private final static String TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)"";
 
@@ -62,23 +57,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return Speed.NORMAL;
   }
 
-  @Override public List<String> getApplicableCallNames() {
-    return Arrays.asList(""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
-  }
-
   @Override public List<String> getApplicableMethodNames() {
     return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
   }
 
-  @Override public void checkCall(@NonNull ClassContext context, @NonNull ClassNode classNode,
-      @NonNull MethodNode method, @NonNull MethodInsnNode call) {
-    String owner = call.owner;
-    if (owner.startsWith(""android/util/Log"")) {
-      context.report(ISSUE_LOG, method, call, context.getLocation(call),
-          ""Using 'Log' instead of 'Timber'"");
-    }
-  }
-
   @Override public void visitMethod(@NonNull JavaContext context, AstVisitor visitor,
       @NonNull MethodInvocation node) {
     String methodName = node.astName().getDescription();
@@ -123,6 +105,11 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
     } else if (node.astOperand() instanceof VariableReference) {
       VariableReference ref = (VariableReference) node.astOperand();
+      if (""Log"".equals(ref.astIdentifier().astValue())) {
+        context.report(ISSUE_LOG, node, context.getLocation(node),
+            ""Using 'Log' instead of 'Timber'"");
+        return;
+      }
       if (!""Timber"".equals(ref.astIdentifier().astValue())) {
         return;
       }
@@ -551,7 +538,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
           ""Since Timber is included in the project, it is likely that calls to Log should instead""
               + "" be going to Timber."", Category.MESSAGES, 5, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.CLASS_FILE_SCOPE));
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
   public static final Issue ISSUE_FORMAT =
       Issue.create(""StringFormatInTimber"", ""Logging call with Timber contains String#format()"",
           ""Since Timber handles String.format automatically, you may not use String#format()."",","@@ -5,7 +5,6 @@ import com.android.annotations.Nullable;
 import com.android.tools.lint.checks.StringFormatDetector;
 import com.android.tools.lint.client.api.JavaParser;
 import com.android.tools.lint.detector.api.Category;
-import com.android.tools.lint.detector.api.ClassContext;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
 import com.android.tools.lint.detector.api.Issue;
@@ -37,9 +36,6 @@ import lombok.ast.NullLiteral;
 import lombok.ast.StrictListAccessor;
 import lombok.ast.StringLiteral;
 import lombok.ast.VariableReference;
-import org.objectweb.asm.tree.ClassNode;
-import org.objectweb.asm.tree.MethodInsnNode;
-import org.objectweb.asm.tree.MethodNode;
 
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
@@ -53,8 +49,7 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 
-public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner,
-    Detector.ClassScanner {
+public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner {
   private final static String GET_STRING_METHOD = ""getString"";
   private final static String TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)"";
 
@@ -62,23 +57,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return Speed.NORMAL;
   }
 
-  @Override public List<String> getApplicableCallNames() {
-    return Arrays.asList(""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
-  }
-
   @Override public List<String> getApplicableMethodNames() {
     return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
   }
 
-  @Override public void checkCall(@NonNull ClassContext context, @NonNull ClassNode classNode,
-      @NonNull MethodNode method, @NonNull MethodInsnNode call) {
-    String owner = call.owner;
-    if (owner.startsWith(""android/util/Log"")) {
-      context.report(ISSUE_LOG, method, call, context.getLocation(call),
-          ""Using 'Log' instead of 'Timber'"");
-    }
-  }
-
   @Override public void visitMethod(@NonNull JavaContext context, AstVisitor visitor,
       @NonNull MethodInvocation node) {
     String methodName = node.astName().getDescription();
@@ -123,6 +105,11 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
     } else if (node.astOperand() instanceof VariableReference) {
       VariableReference ref = (VariableReference) node.astOperand();
+      if (""Log"".equals(ref.astIdentifier().astValue())) {
+        context.report(ISSUE_LOG, node, context.getLocation(node),
+            ""Using 'Log' instead of 'Timber'"");
+        return;
+      }
       if (!""Timber"".equals(ref.astIdentifier().astValue())) {
         return;
       }
@@ -551,7 +538,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
           ""Since Timber is included in the project, it is likely that calls to Log should instead""
               + "" be going to Timber."", Category.MESSAGES, 5, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.CLASS_FILE_SCOPE));
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
   public static final Issue ISSUE_FORMAT =
       Issue.create(""StringFormatInTimber"", ""Logging call with Timber contains String#format()"",
           ""Since Timber handles String.format automatically, you may not use String#format()."",",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,59273a4e62f95a14c3fc2fb3214e8b42987a042c,a54d0a4a33a9db8e235140356fb9e4fbd3a6e8fa,Make sure timber node has arguments before getting to fix unexpected lint failure.,"@@ -95,6 +95,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
           return;
         }
       }
+
+      if (node.astArguments().isEmpty()) {
+        return;
+      }
       Node argument = node.astArguments().iterator().next();
       String tag = findLiteralValue(context, argument);
       if (tag != null && tag.length() > 23) {","@@ -95,6 +95,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
           return;
         }
       }
+
+      if (node.astArguments().isEmpty()) {
+        return;
+      }
       Node argument = node.astArguments().iterator().next();
       String tag = findLiteralValue(context, argument);
       if (tag != null && tag.length() > 23) {",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,4a1309bd3d9e6dc144b69fe4abcf85a94047c532,59273a4e62f95a14c3fc2fb3214e8b42987a042c,"Limit underline for LogNotTimber (#189)

Fixes #83","@@ -110,7 +110,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     } else if (node.astOperand() instanceof VariableReference) {
       VariableReference ref = (VariableReference) node.astOperand();
       if (""Log"".equals(ref.astIdentifier().astValue())) {
-        context.report(ISSUE_LOG, node, context.getLocation(node),
+        context.report(ISSUE_LOG, node, context.getRangeLocation(node, 0, node.astName(), 0),
             ""Using 'Log' instead of 'Timber'"");
         return;
       }","@@ -110,7 +110,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     } else if (node.astOperand() instanceof VariableReference) {
       VariableReference ref = (VariableReference) node.astOperand();
       if (""Log"".equals(ref.astIdentifier().astValue())) {
-        context.report(ISSUE_LOG, node, context.getLocation(node),
+        context.report(ISSUE_LOG, node, context.getRangeLocation(node, 0, node.astName(), 0),
             ""Using 'Log' instead of 'Timber'"");
         return;
       }",False,source
build.gradle,build.gradle,9495144f4b7741a44c2372072e84bcb00c7510d2,4a1309bd3d9e6dc144b69fe4abcf85a94047c532,"Add unit tests for custom Lint checks (#190)

Fixes #45","@@ -33,5 +33,9 @@ ext.deps = [
 
     // Lint dependencies
     lintapi    : ""com.android.tools.lint:lint-api:${lintVersion}"",
-    lintchecks : ""com.android.tools.lint:lint-checks:${lintVersion}""
+    lintchecks : ""com.android.tools.lint:lint-checks:${lintVersion}"",
+
+    // Lint test dependencies
+    lint       : ""com.android.tools.lint:lint:${lintVersion}"",
+    linttests  : ""com.android.tools.lint:lint-tests:${lintVersion}"",
 ]","@@ -33,5 +33,9 @@ ext.deps = [
 
     // Lint dependencies
     lintapi    : ""com.android.tools.lint:lint-api:${lintVersion}"",
-    lintchecks : ""com.android.tools.lint:lint-checks:${lintVersion}""
+    lintchecks : ""com.android.tools.lint:lint-checks:${lintVersion}"",
+
+    // Lint test dependencies
+    lint       : ""com.android.tools.lint:lint:${lintVersion}"",
+    linttests  : ""com.android.tools.lint:lint-tests:${lintVersion}"",
 ]",False,other
timber-lint/build.gradle,timber-lint/build.gradle,9495144f4b7741a44c2372072e84bcb00c7510d2,4a1309bd3d9e6dc144b69fe4abcf85a94047c532,"Add unit tests for custom Lint checks (#190)

Fixes #45","@@ -10,6 +10,9 @@ configurations {
 dependencies {
   compile deps.lintapi
   compile deps.lintchecks
+  testCompile deps.lint
+  testCompile deps.linttests
+  testCompile deps.festassert
 
   lintChecks files(jar)
 }","@@ -10,6 +10,9 @@ configurations {
 dependencies {
   compile deps.lintapi
   compile deps.lintchecks
+  testCompile deps.lint
+  testCompile deps.linttests
+  testCompile deps.festassert
 
   lintChecks files(jar)
 }",False,other
timber-lint/src/main/java/timber/lint/IssueRegistry.java,timber-lint/src/main/java/timber/lint/IssueRegistry.java,9495144f4b7741a44c2372072e84bcb00c7510d2,4a1309bd3d9e6dc144b69fe4abcf85a94047c532,"Add unit tests for custom Lint checks (#190)

Fixes #45","@@ -7,12 +7,6 @@ import java.util.List;
 
 public final class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
   @Override public List<Issue> getIssues() {
-    return Arrays.asList(WrongTimberUsageDetector.ISSUE_LOG,
-        WrongTimberUsageDetector.ISSUE_ARG_COUNT,
-        WrongTimberUsageDetector.ISSUE_ARG_TYPES,
-        WrongTimberUsageDetector.ISSUE_BINARY,
-        WrongTimberUsageDetector.ISSUE_FORMAT,
-        WrongTimberUsageDetector.ISSUE_THROWABLE,
-        WrongTimberUsageDetector.ISSUE_TAG_LENGTH);
+    return Arrays.asList(WrongTimberUsageDetector.getIssues());
   }
 }","@@ -7,12 +7,6 @@ import java.util.List;
 
 public final class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
   @Override public List<Issue> getIssues() {
-    return Arrays.asList(WrongTimberUsageDetector.ISSUE_LOG,
-        WrongTimberUsageDetector.ISSUE_ARG_COUNT,
-        WrongTimberUsageDetector.ISSUE_ARG_TYPES,
-        WrongTimberUsageDetector.ISSUE_BINARY,
-        WrongTimberUsageDetector.ISSUE_FORMAT,
-        WrongTimberUsageDetector.ISSUE_THROWABLE,
-        WrongTimberUsageDetector.ISSUE_TAG_LENGTH);
+    return Arrays.asList(WrongTimberUsageDetector.getIssues());
   }
 }",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,9495144f4b7741a44c2372072e84bcb00c7510d2,4a1309bd3d9e6dc144b69fe4abcf85a94047c532,"Add unit tests for custom Lint checks (#190)

Fixes #45","@@ -538,6 +538,13 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return checkNode(context, node, elseStatement);
   }
 
+  static Issue[] getIssues() {
+    return new Issue[] {
+        ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,
+        ISSUE_TAG_LENGTH
+    };
+  }
+
   public static final Issue ISSUE_LOG =
       Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
           ""Since Timber is included in the project, it is likely that calls to Log should instead""","@@ -538,6 +538,13 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return checkNode(context, node, elseStatement);
   }
 
+  static Issue[] getIssues() {
+    return new Issue[] {
+        ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,
+        ISSUE_TAG_LENGTH
+    };
+  }
+
   public static final Issue ISSUE_LOG =
       Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
           ""Since Timber is included in the project, it is likely that calls to Log should instead""",False,source
,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,9495144f4b7741a44c2372072e84bcb00c7510d2,4a1309bd3d9e6dc144b69fe4abcf85a94047c532,"Add unit tests for custom Lint checks (#190)

Fixes #45","@@ -0,0 +1,249 @@
+package timber.lint;
+
+import com.android.tools.lint.checks.infrastructure.LintDetectorTest;
+import com.android.tools.lint.detector.api.Detector;
+import com.android.tools.lint.detector.api.Issue;
+import java.util.Arrays;
+import java.util.List;
+import org.intellij.lang.annotations.Language;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class WrongTimberUsageDetectorTest extends LintDetectorTest {
+  private static final String NO_WARNINGS = ""No warnings."";
+  private final TestFile timberStub = java(""""
+      + ""package timber.log;\n""
+      + ""public class Timber {\n""
+      + ""  public static void d(String s) { TREE_OF_SOULS.d(s); }\n""
+      + ""  public static Tree tag(String s) { return new Tree(); }\n""
+      + ""  public static class Tree {\n""
+      + ""    public void d(String s) {}\n""
+      + ""  }\n""
+      + ""  private static final Tree TREE_OF_SOULS = new Tree();\n""
+      + ""}"");
+
+  public void testUsingAndroidLog() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import android.util.Log;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""    Log.d(\""TAG\"", \""msg\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source))).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
+        + ""    Log.d(\""TAG\"", \""msg\"");\n""
+        + ""    ~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testInnerStringFormat() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
+        + ""  }\n""
+        + ""  private String id(String s) { return s; }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+        + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
+        + ""                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testThrowableNotAtBeginning() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(\""%s\"", e);\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
+        + ""     Timber.d(\""%s\"", e);\n""
+        + ""     ~~~~~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testBinaryOperation() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     String s = \""world!\"";\n""
+        + ""     Timber.d(\""Hello, \"" + s);\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+        + ""     Timber.d(\""Hello, \"" + s);\n""
+        + ""              ~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testBinaryOperationInsideTernary() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     String s = \""world!\"";\n""
+        + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+        + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
+        + ""                     ~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testTooManyFormatArgs() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
+        + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
+        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testTooManyArgs() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
+        + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testWrongArgTypes() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.d(\""%d\"", \""arg1\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
+        + ""     Timber.d(\""%d\"", \""arg1\"");\n""
+        + ""                    ~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testTagTooLongLiteralOnly() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
+        + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
+        + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testTagTooLongLiteralPlusField() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  private final String field = \""x\"";""
+        + ""  public void log() {\n""
+        + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
+        + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
+        + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testTooManyFormatArgsInTag() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
+        + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
+        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testTooManyArgsInTag() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
+        + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testWrongArgTypesInTag() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
+        + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
+        + ""                               ~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  @Override protected Detector getDetector() {
+    return new WrongTimberUsageDetector();
+  }
+
+  @Override protected List<Issue> getIssues() {
+    return Arrays.asList(WrongTimberUsageDetector.getIssues());
+  }
+
+  @Override protected boolean allowCompilationErrors() {
+    return true;
+  }
+}","@@ -0,0 +1,249 @@
+package timber.lint;
+
+import com.android.tools.lint.checks.infrastructure.LintDetectorTest;
+import com.android.tools.lint.detector.api.Detector;
+import com.android.tools.lint.detector.api.Issue;
+import java.util.Arrays;
+import java.util.List;
+import org.intellij.lang.annotations.Language;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class WrongTimberUsageDetectorTest extends LintDetectorTest {
+  private static final String NO_WARNINGS = ""No warnings."";
+  private final TestFile timberStub = java(""""
+      + ""package timber.log;\n""
+      + ""public class Timber {\n""
+      + ""  public static void d(String s) { TREE_OF_SOULS.d(s); }\n""
+      + ""  public static Tree tag(String s) { return new Tree(); }\n""
+      + ""  public static class Tree {\n""
+      + ""    public void d(String s) {}\n""
+      + ""  }\n""
+      + ""  private static final Tree TREE_OF_SOULS = new Tree();\n""
+      + ""}"");
+
+  public void testUsingAndroidLog() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import android.util.Log;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""    Log.d(\""TAG\"", \""msg\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source))).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
+        + ""    Log.d(\""TAG\"", \""msg\"");\n""
+        + ""    ~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testInnerStringFormat() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
+        + ""  }\n""
+        + ""  private String id(String s) { return s; }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+        + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
+        + ""                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testThrowableNotAtBeginning() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(\""%s\"", e);\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
+        + ""     Timber.d(\""%s\"", e);\n""
+        + ""     ~~~~~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testBinaryOperation() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     String s = \""world!\"";\n""
+        + ""     Timber.d(\""Hello, \"" + s);\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+        + ""     Timber.d(\""Hello, \"" + s);\n""
+        + ""              ~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testBinaryOperationInsideTernary() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     String s = \""world!\"";\n""
+        + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+        + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
+        + ""                     ~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testTooManyFormatArgs() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
+        + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
+        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testTooManyArgs() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
+        + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testWrongArgTypes() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.d(\""%d\"", \""arg1\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
+        + ""     Timber.d(\""%d\"", \""arg1\"");\n""
+        + ""                    ~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testTagTooLongLiteralOnly() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
+        + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
+        + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testTagTooLongLiteralPlusField() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  private final String field = \""x\"";""
+        + ""  public void log() {\n""
+        + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
+        + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
+        + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testTooManyFormatArgsInTag() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
+        + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
+        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testTooManyArgsInTag() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
+        + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  public void testWrongArgTypesInTag() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
+        + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
+        + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
+        + ""                               ~~~~~~\n""
+        + ""1 errors, 0 warnings\n"");
+  }
+
+  @Override protected Detector getDetector() {
+    return new WrongTimberUsageDetector();
+  }
+
+  @Override protected List<Issue> getIssues() {
+    return Arrays.asList(WrongTimberUsageDetector.getIssues());
+  }
+
+  @Override protected boolean allowCompilationErrors() {
+    return true;
+  }
+}",False,test
build.gradle,build.gradle,8b375a93ec47d3fa8237ccc2ab5f5212da056559,eb28991c8c36e6deb7c7d727114bd2729e6923c8,"Port lint checks from Lombok to PSI (#191)

Fixes #178","@@ -1,15 +1,16 @@
 buildscript {
   repositories {
-    mavenCentral()
+    jcenter()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.1.3'
+    classpath 'com.android.tools.build:gradle:2.2.2'
   }
 }
 
 allprojects {
   repositories {
     mavenCentral()
+    jcenter()
   }
 }
 
@@ -20,7 +21,7 @@ ext {
   buildToolsVersion = '24.0.0'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
-  lintVersion = '25.1.2'
+  lintVersion = '25.2.0'
 }
 
 ext.deps = [","@@ -1,15 +1,16 @@
 buildscript {
   repositories {
-    mavenCentral()
+    jcenter()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.1.3'
+    classpath 'com.android.tools.build:gradle:2.2.2'
   }
 }
 
 allprojects {
   repositories {
     mavenCentral()
+    jcenter()
   }
 }
 
@@ -20,7 +21,7 @@ ext {
   buildToolsVersion = '24.0.0'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
-  lintVersion = '25.1.2'
+  lintVersion = '25.2.0'
 }
 
 ext.deps = [",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,8b375a93ec47d3fa8237ccc2ab5f5212da056559,eb28991c8c36e6deb7c7d727114bd2729e6923c8,"Port lint checks from Lombok to PSI (#191)

Fixes #178","@@ -3,39 +3,35 @@ package timber.lint;
 import com.android.annotations.NonNull;
 import com.android.annotations.Nullable;
 import com.android.tools.lint.checks.StringFormatDetector;
-import com.android.tools.lint.client.api.JavaParser;
 import com.android.tools.lint.detector.api.Category;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
 import com.android.tools.lint.detector.api.Issue;
 import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
-import com.android.tools.lint.detector.api.Speed;
+import com.intellij.psi.JavaElementVisitor;
+import com.intellij.psi.JavaTokenType;
+import com.intellij.psi.PsiBinaryExpression;
+import com.intellij.psi.PsiClass;
+import com.intellij.psi.PsiClassType;
+import com.intellij.psi.PsiConditionalExpression;
+import com.intellij.psi.PsiElement;
+import com.intellij.psi.PsiExpression;
+import com.intellij.psi.PsiExpressionStatement;
+import com.intellij.psi.PsiField;
+import com.intellij.psi.PsiIfStatement;
+import com.intellij.psi.PsiLiteralExpression;
+import com.intellij.psi.PsiMethod;
+import com.intellij.psi.PsiMethodCallExpression;
+import com.intellij.psi.PsiReferenceExpression;
+import com.intellij.psi.PsiType;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import lombok.ast.AstVisitor;
-import lombok.ast.BinaryExpression;
-import lombok.ast.BinaryOperator;
-import lombok.ast.BooleanLiteral;
-import lombok.ast.CharLiteral;
-import lombok.ast.DescribedNode;
-import lombok.ast.Expression;
-import lombok.ast.ExpressionStatement;
-import lombok.ast.FloatingPointLiteral;
-import lombok.ast.If;
-import lombok.ast.InlineIfExpression;
-import lombok.ast.IntegralLiteral;
-import lombok.ast.MethodInvocation;
-import lombok.ast.Node;
-import lombok.ast.NullLiteral;
-import lombok.ast.StrictListAccessor;
-import lombok.ast.StringLiteral;
-import lombok.ast.VariableReference;
 
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
@@ -49,156 +45,103 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 
-public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner {
+public final class WrongTimberUsageDetector extends Detector implements Detector.JavaPsiScanner {
   private final static String GET_STRING_METHOD = ""getString"";
   private final static String TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)"";
 
-  @NonNull @Override public Speed getSpeed() {
-    return Speed.NORMAL;
-  }
-
   @Override public List<String> getApplicableMethodNames() {
     return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
   }
 
-  @Override public void visitMethod(@NonNull JavaContext context, AstVisitor visitor,
-      @NonNull MethodInvocation node) {
-    String methodName = node.astName().getDescription();
-    if (""format"".equals(methodName)) {
-      if (!(node.astOperand() instanceof VariableReference)) {
-        return;
-      }
-      VariableReference ref = (VariableReference) node.astOperand();
-      if (!""String"".equals(ref.astIdentifier().astValue())) {
-        return;
-      }
-      // Found a String.format call
-      // Look outside to see if we inside of a Timber call
-      Node current = node.getParent();
-      while (current != null && !(current instanceof ExpressionStatement)) {
-        current = current.getParent();
-      }
-      if (current == null) {
-        return;
-      }
-      ExpressionStatement statement = (ExpressionStatement) current;
-      if (!Pattern.matches(""^Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP + "".*"", statement.toString())) {
-        return;
-      }
-      context.report(ISSUE_FORMAT, node, context.getLocation(node),
-          ""Using 'String#format' inside of 'Timber'"");
-    } else if (""tag"".equals(methodName)) {
-      Object expression = node.astOperand();
-      if (expression instanceof VariableReference) {
-        VariableReference ref = (VariableReference) expression;
-        if (!""Timber"".equals(ref.astIdentifier().astValue())) {
-          return;
-        }
-      }
-
-      if (node.astArguments().isEmpty()) {
-        return;
-      }
-      Node argument = node.astArguments().iterator().next();
-      String tag = findLiteralValue(context, argument);
-      if (tag != null && tag.length() > 23) {
-        String message = String.format(
-            ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
-            tag.length(), tag);
-        context.report(ISSUE_TAG_LENGTH, node, context.getLocation(argument), message);
-      }
-    } else if (node.astOperand() instanceof VariableReference) {
-      VariableReference ref = (VariableReference) node.astOperand();
-      if (""Log"".equals(ref.astIdentifier().astValue())) {
-        context.report(ISSUE_LOG, node, context.getRangeLocation(node, 0, node.astName(), 0),
-            ""Using 'Log' instead of 'Timber'"");
-        return;
-      }
-      if (!""Timber"".equals(ref.astIdentifier().astValue())) {
-        return;
-      }
-      checkThrowablePosition(context, node);
-      checkArguments(context, node);
-    } else if (isAstOperandTimberTagLogPattern(node)) {
-      List<Node> siblings = node.astOperand().getParent().getChildren();
-
-      List<Node> logNodes = siblings.subList(1, siblings.size());
-      List<Expression> expressionNodes = new ArrayList<>(); // casted version of logNodes
-
-      List<Node> logArgs = logNodes.subList(1, logNodes.size());
-      for (Node n : logArgs) {
-        if (!(n instanceof lombok.ast.Expression)) {
-          continue; // this is a failure; see `if` guard just outside of this loop
-        }
-        expressionNodes.add((Expression) n);
-      }
-
-      // If we're short an Expression, then our guess about this node and its siblings may be wrong,
-      if (expressionNodes.size() == logArgs.size()) {
-        checkStringFormatArguments(
-            context, node, expressionNodes.iterator(), expressionNodes.size());
-      }
+  @Override public void visitMethod(JavaContext context, JavaElementVisitor visitor,
+      PsiMethodCallExpression call, PsiMethod method) {
+    PsiReferenceExpression methodExpression = call.getMethodExpression();
+    String fullyQualifiedMethodName = methodExpression.getQualifiedName();
+    if (""java.lang.String.format"".equals(fullyQualifiedMethodName)) {
+      checkNestedStringFormat(context, call);
+      return;
+    }
+    if (fullyQualifiedMethodName.startsWith(""timber.log.Timber.tag"")) {
+      checkTagLength(context, call);
+      return;
+    }
+    if (fullyQualifiedMethodName.startsWith(""android.util.Log."")) {
+      context.report(ISSUE_LOG, methodExpression, context.getLocation(methodExpression),
+          ""Using 'Log' instead of 'Timber'"");
+      return;
+    }
+    // Handles Timber.X(..) and Timber.tag(..).X(..) where X in (v|d|i|w|e|wtf).
+    if (fullyQualifiedMethodName.startsWith(""timber.log.Timber."")) {
+      checkMethodArguments(context, call);
+      checkFormatArguments(context, call);
+      return;
     }
   }
 
-  /**
-   * Rough guess as to whether node represents a `Timber.tag(TAG).v(...)` style log experssion.
-   *
-   * TODO: ""Rough guess"" because a proper check would check that `v` is being called on an instance
-   * of a planted tree, but this is a quick & dirty hack in place of that (eg: generalized something
-   * like a JavaContext.resolve check on `node`?).
-   */
-  private static boolean isAstOperandTimberTagLogPattern(MethodInvocation node) {
-    Expression astOperand = node.astOperand();
-    if (!(astOperand instanceof MethodInvocation)) {
-      return false;
+  private static void checkNestedStringFormat(JavaContext context, PsiMethodCallExpression call) {
+    // PsiExpressionList
+    PsiElement current = LintUtils.skipParentheses(call.getParent());
+    while (current != null && !(current instanceof PsiExpressionStatement)) {
+      // PsiMethodCallExpression
+      current = LintUtils.skipParentheses(current.getParent());
+      // PsiExpressionList or PsiExpressionStatement
+      current = LintUtils.skipParentheses(current.getParent());
     }
-    MethodInvocation m = (MethodInvocation) astOperand;
-
-    if (!""Timber"".equals(m.rawOperand().toString())
-        || !""tag"".equals(m.astName().toString())
-        || !Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, node.astName().getDescription())) {
-      // Is not of the form ""Timber.tag(...).w(...)"" (where ""w()"" can be any valid log method)
-      return false;
+    if (current == null) {
+      return;
     }
-
-    return (m.getParent().getChildren().get(1) instanceof DescribedNode);
+    PsiExpressionStatement expressionStatement = (PsiExpressionStatement) current;
+    PsiMethodCallExpression outerCall =
+        (PsiMethodCallExpression) expressionStatement.getExpression();
+    PsiReferenceExpression maybeTimberLog = outerCall.getMethodExpression();
+    if (!Pattern.matches(""timber\\.log\\.Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP,
+        maybeTimberLog.getQualifiedName())) {
+      return;
+    }
+    context.report(ISSUE_FORMAT, call, context.getLocation(call),
+        ""Using 'String#format' inside of 'Timber'"");
   }
 
-  private static void checkArguments(JavaContext context, MethodInvocation node) {
-    StrictListAccessor<Expression, MethodInvocation> astArguments = node.astArguments();
-    checkStringFormatArguments(context, node, astArguments.iterator(), astArguments.size());
+  private static void checkTagLength(JavaContext context, PsiMethodCallExpression call) {
+    PsiExpression argument = call.getArgumentList().getExpressions()[0];
+    String tag = findLiteralValue(argument);
+    if (tag != null && tag.length() > 23) {
+      String message =
+          String.format(""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
+              tag.length(), tag);
+      context.report(ISSUE_TAG_LENGTH, argument, context.getLocation(argument), message);
+    }
   }
 
-  private static void checkStringFormatArguments(
-      JavaContext context,
-      MethodInvocation reportNode,
-      Iterator<Expression> logArguments,
-      int originalArgSize) {
-    if (!logArguments.hasNext()) {
+  private static void checkFormatArguments(JavaContext context, PsiMethodCallExpression call) {
+    PsiExpression[] arguments = call.getArgumentList().getExpressions();
+    if (arguments.length == 0) {
       return;
     }
+
     int startIndexOfArguments = 1;
-    Expression formatStringArg = logArguments.next();
-    if (formatStringArg instanceof VariableReference) {
-      if (isSubclassOf(context, (VariableReference) formatStringArg, Throwable.class)) {
-        formatStringArg = logArguments.next();
-        startIndexOfArguments++;
+    PsiExpression formatStringArg = arguments[0];
+    if (isSubclassOf(context, formatStringArg, Throwable.class)) {
+      if (arguments.length == 1) {
+        return;
       }
+      formatStringArg = arguments[1];
+      startIndexOfArguments++;
     }
 
-    String formatString = findLiteralValue(context, formatStringArg);
+    String formatString = findLiteralValue(formatStringArg);
     // We passed for example a method call
     if (formatString == null) {
       return;
     }
+
     int argumentCount = getFormatArgumentCount(formatString);
-    int passedArgCount = originalArgSize - startIndexOfArguments;
+    int passedArgCount = arguments.length - startIndexOfArguments;
     if (argumentCount < passedArgCount) {
-      context.report(ISSUE_ARG_COUNT, reportNode, context.getLocation(reportNode), String.format(
-              ""Wrong argument count, format string `%1$s` requires ""
-                  + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
-              passedArgCount));
+      context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
+          ""Wrong argument count, format string `%1$s` requires ""
+              + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+          passedArgCount));
       return;
     }
 
@@ -207,17 +150,18 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
 
     List<String> types = getStringArgumentTypes(formatString);
-    Expression argument = null;
+    PsiExpression argument = null;
+    int argumentIndex = startIndexOfArguments;
     boolean valid;
     for (int i = 0; i < types.size(); i++) {
       String formatType = types.get(i);
-      if (logArguments.hasNext()) {
-        argument = logArguments.next();
+      if (argumentIndex != arguments.length) {
+        argument = arguments[argumentIndex++];
       } else {
-        context.report(ISSUE_ARG_COUNT, reportNode, context.getLocation(reportNode), String.format(
-                ""Wrong argument count, format string `%1$s` requires ""
-                    + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
-                passedArgCount));
+        context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
+            ""Wrong argument count, format string `%1$s` requires ""
+                + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+            passedArgCount));
       }
 
       char last = formatType.charAt(formatType.length() - 1);
@@ -227,7 +171,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         // TODO
         continue;
       }
-      Class type = getType(context, argument);
+      Class type = getType(argument);
       if (type != null) {
         switch (last) {
           case 'b':
@@ -270,55 +214,56 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
                   + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
                   + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
               type.getSimpleName(), startIndexOfArguments + i + 1);
-          context.report(ISSUE_ARG_TYPES, reportNode, context.getLocation(argument), message);
+          context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
         }
       }
     }
   }
 
-  private static Class<?> getType(JavaContext context, Expression expression) {
+  private static Class<?> getType(PsiExpression expression) {
     if (expression == null) {
       return null;
     }
-
-    if (expression instanceof MethodInvocation) {
-      MethodInvocation method = (MethodInvocation) expression;
-      String methodName = method.astName().astValue();
+    if (expression instanceof PsiMethodCallExpression) {
+      PsiMethodCallExpression call = (PsiMethodCallExpression) expression;
+      PsiMethod method = call.resolveMethod();
+      if (method == null) {
+        return null;
+      }
+      String methodName = method.getName();
       if (methodName.equals(GET_STRING_METHOD)) {
         return String.class;
       }
-    } else if (expression instanceof StringLiteral) {
-      return String.class;
-    } else if (expression instanceof IntegralLiteral) {
-      return Integer.TYPE;
-    } else if (expression instanceof FloatingPointLiteral) {
-      return Float.TYPE;
-    } else if (expression instanceof CharLiteral) {
-      return Character.TYPE;
-    } else if (expression instanceof BooleanLiteral) {
-      return Boolean.TYPE;
-    } else if (expression instanceof NullLiteral) {
-      return Object.class;
+    } else if (expression instanceof PsiLiteralExpression) {
+      PsiLiteralExpression literalExpression = (PsiLiteralExpression) expression;
+      PsiType expressionType = literalExpression.getType();
+      if (LintUtils.isString(expressionType)) {
+        return String.class;
+      } else if (expressionType == PsiType.INT) {
+        return Integer.TYPE;
+      } else if (expressionType == PsiType.FLOAT) {
+        return Float.TYPE;
+      } else if (expressionType == PsiType.CHAR) {
+        return Character.TYPE;
+      } else if (expressionType == PsiType.BOOLEAN) {
+        return Boolean.TYPE;
+      } else if (expressionType == PsiType.NULL) {
+        return Object.class;
+      }
     }
 
-    if (context != null) {
-      JavaParser.TypeDescriptor type = context.getType(expression);
-      if (type != null) {
-        Class<?> typeClass = getTypeClass(type);
-        if (typeClass != null) {
-          return typeClass;
-        } else {
-          return Object.class;
-        }
-      }
+    PsiType type = expression.getType();
+    if (type != null) {
+      Class<?> typeClass = getTypeClass(type);
+      return typeClass != null ? typeClass : Object.class;
     }
 
     return null;
   }
 
-  private static Class<?> getTypeClass(@Nullable JavaParser.TypeDescriptor type) {
+  private static Class<?> getTypeClass(@Nullable PsiType type) {
     if (type != null) {
-      return getTypeClass(type.getName());
+      return getTypeClass(type.getCanonicalText());
     }
     return null;
   }
@@ -369,13 +314,12 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static boolean isSubclassOf(JavaContext context, VariableReference variableReference,
-      Class<?> clazz) {
-    JavaParser.ResolvedNode resolved = context.resolve(variableReference);
-    if (resolved instanceof JavaParser.ResolvedVariable) {
-      JavaParser.ResolvedVariable resolvedVariable = (JavaParser.ResolvedVariable) resolved;
-      JavaParser.ResolvedClass typeClass = resolvedVariable.getType().getTypeClass();
-      return (typeClass != null && typeClass.isSubclassOf(clazz.getName(), false));
+  private static boolean isSubclassOf(JavaContext context, PsiExpression expression, Class<?> cls) {
+    PsiType expressionType = expression.getType();
+    if (expressionType instanceof PsiClassType) {
+      PsiClassType classType = (PsiClassType) expressionType;
+      PsiClass resolvedClass = classType.resolve();
+      return context.getEvaluator().extendsClass(resolvedClass, cls.getName(), false);
     }
     return false;
   }
@@ -413,23 +357,28 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return types;
   }
 
-  private static String findLiteralValue(@NonNull JavaContext context, @NonNull Node argument) {
-    if (argument instanceof StringLiteral) {
-      return ((StringLiteral) argument).astValue();
-    } else if (argument instanceof BinaryExpression) {
-      BinaryExpression expression = (BinaryExpression) argument;
-      if (expression.astOperator() == BinaryOperator.PLUS) {
-        String left = findLiteralValue(context, expression.astLeft());
-        String right = findLiteralValue(context, expression.astRight());
+  private static String findLiteralValue(PsiExpression argument) {
+    if (argument instanceof PsiLiteralExpression) {
+      PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument;
+      Object value = literalExpression.getValue();
+      if (value instanceof String) {
+        return (String) value;
+      }
+    } else if (argument instanceof PsiBinaryExpression) {
+      PsiBinaryExpression binaryExpression = (PsiBinaryExpression) argument;
+      if (binaryExpression.getOperationTokenType() == JavaTokenType.PLUS) {
+        String left = findLiteralValue(binaryExpression.getLOperand());
+        String right = findLiteralValue(binaryExpression.getROperand());
         if (left != null && right != null) {
           return left + right;
         }
       }
-    } else {
-      JavaParser.ResolvedNode resolved = context.resolve(argument);
-      if (resolved instanceof JavaParser.ResolvedField) {
-        JavaParser.ResolvedField field = (JavaParser.ResolvedField) resolved;
-        Object value = field.getValue();
+    } else if (argument instanceof PsiReferenceExpression) {
+      PsiReferenceExpression referenceExpression = (PsiReferenceExpression) argument;
+      PsiElement resolved = referenceExpression.resolve();
+      if (resolved instanceof PsiField) {
+        PsiField field = (PsiField) resolved;
+        Object value = field.computeConstantValue();
         if (value instanceof String) {
           return (String) value;
         }
@@ -486,56 +435,54 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return max;
   }
 
-  private static void checkThrowablePosition(JavaContext context, MethodInvocation node) {
-    int index = 0;
-    for (Node argument : node.astArguments()) {
-      if (checkNode(context, node, argument)) {
+  private static void checkMethodArguments(JavaContext context, PsiMethodCallExpression call) {
+    PsiExpression[] arguments = call.getArgumentList().getExpressions();
+    for (int i = 0; i < arguments.length; i++) {
+      PsiExpression argument = arguments[i];
+      if (checkElement(context, call, argument)) {
         break;
       }
-      if (argument instanceof VariableReference) {
-        VariableReference variableReference = (VariableReference) argument;
-        if (index > 0 && isSubclassOf(context, variableReference, Throwable.class)) {
-          context.report(ISSUE_THROWABLE, node, context.getLocation(node),
-              ""Throwable should be first argument"");
-        }
+      if (i > 0 && isSubclassOf(context, argument, Throwable.class)) {
+        context.report(ISSUE_THROWABLE, call, context.getLocation(call),
+            ""Throwable should be first argument"");
       }
-      index++;
     }
   }
 
-  private static boolean checkNode(JavaContext context, MethodInvocation node, Node argument) {
-    if (argument instanceof BinaryExpression) {
-      Class argumentType = getType(context, (BinaryExpression) argument);
+  private static boolean checkElement(JavaContext context, PsiMethodCallExpression call,
+      PsiElement element) {
+    if (element instanceof PsiBinaryExpression) {
+      Class argumentType = getType((PsiBinaryExpression) element);
       if (argumentType == String.class) {
-        context.report(ISSUE_BINARY, node, context.getLocation(argument),
+        context.report(ISSUE_BINARY, call, context.getLocation(element),
             ""Replace String concatenation with Timber's string formatting"");
         return true;
       }
-    } else if (argument instanceof If || argument instanceof InlineIfExpression) {
-      return checkConditionalUsage(context, node, argument);
+    } else if (element instanceof PsiIfStatement || element instanceof PsiConditionalExpression) {
+      return checkConditionalUsage(context, call, element);
     }
     return false;
   }
 
-  private static boolean checkConditionalUsage(JavaContext context, MethodInvocation node,
-      Node arg) {
-    Node thenStatement;
-    Node elseStatement;
-    if (arg instanceof If) {
-      If ifArg = (If) arg;
-      thenStatement = ifArg.astStatement();
-      elseStatement = ifArg.astElseStatement();
-    } else if (arg instanceof InlineIfExpression) {
-      InlineIfExpression inlineIfArg = (InlineIfExpression) arg;
-      thenStatement = inlineIfArg.astIfFalse();
-      elseStatement = inlineIfArg.astIfTrue();
+  private static boolean checkConditionalUsage(JavaContext context, PsiMethodCallExpression call,
+      PsiElement element) {
+    PsiElement thenElement;
+    PsiElement elseElement;
+    if (element instanceof PsiIfStatement) {
+      PsiIfStatement ifArg = (PsiIfStatement) element;
+      thenElement = ifArg.getThenBranch();
+      elseElement = ifArg.getElseBranch();
+    } else if (element instanceof PsiConditionalExpression) {
+      PsiConditionalExpression inlineIfArg = (PsiConditionalExpression) element;
+      thenElement = inlineIfArg.getThenExpression();
+      elseElement = inlineIfArg.getElseExpression();
     } else {
       return false;
     }
-    if (checkNode(context, node, thenStatement)) {
+    if (checkElement(context, call, thenElement)) {
       return false;
     }
-    return checkNode(context, node, elseStatement);
+    return checkElement(context, call, elseElement);
   }
 
   static Issue[] getIssues() {","@@ -3,39 +3,35 @@ package timber.lint;
 import com.android.annotations.NonNull;
 import com.android.annotations.Nullable;
 import com.android.tools.lint.checks.StringFormatDetector;
-import com.android.tools.lint.client.api.JavaParser;
 import com.android.tools.lint.detector.api.Category;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
 import com.android.tools.lint.detector.api.Issue;
 import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
-import com.android.tools.lint.detector.api.Speed;
+import com.intellij.psi.JavaElementVisitor;
+import com.intellij.psi.JavaTokenType;
+import com.intellij.psi.PsiBinaryExpression;
+import com.intellij.psi.PsiClass;
+import com.intellij.psi.PsiClassType;
+import com.intellij.psi.PsiConditionalExpression;
+import com.intellij.psi.PsiElement;
+import com.intellij.psi.PsiExpression;
+import com.intellij.psi.PsiExpressionStatement;
+import com.intellij.psi.PsiField;
+import com.intellij.psi.PsiIfStatement;
+import com.intellij.psi.PsiLiteralExpression;
+import com.intellij.psi.PsiMethod;
+import com.intellij.psi.PsiMethodCallExpression;
+import com.intellij.psi.PsiReferenceExpression;
+import com.intellij.psi.PsiType;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import lombok.ast.AstVisitor;
-import lombok.ast.BinaryExpression;
-import lombok.ast.BinaryOperator;
-import lombok.ast.BooleanLiteral;
-import lombok.ast.CharLiteral;
-import lombok.ast.DescribedNode;
-import lombok.ast.Expression;
-import lombok.ast.ExpressionStatement;
-import lombok.ast.FloatingPointLiteral;
-import lombok.ast.If;
-import lombok.ast.InlineIfExpression;
-import lombok.ast.IntegralLiteral;
-import lombok.ast.MethodInvocation;
-import lombok.ast.Node;
-import lombok.ast.NullLiteral;
-import lombok.ast.StrictListAccessor;
-import lombok.ast.StringLiteral;
-import lombok.ast.VariableReference;
 
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
@@ -49,156 +45,103 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 
-public final class WrongTimberUsageDetector extends Detector implements Detector.JavaScanner {
+public final class WrongTimberUsageDetector extends Detector implements Detector.JavaPsiScanner {
   private final static String GET_STRING_METHOD = ""getString"";
   private final static String TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)"";
 
-  @NonNull @Override public Speed getSpeed() {
-    return Speed.NORMAL;
-  }
-
   @Override public List<String> getApplicableMethodNames() {
     return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
   }
 
-  @Override public void visitMethod(@NonNull JavaContext context, AstVisitor visitor,
-      @NonNull MethodInvocation node) {
-    String methodName = node.astName().getDescription();
-    if (""format"".equals(methodName)) {
-      if (!(node.astOperand() instanceof VariableReference)) {
-        return;
-      }
-      VariableReference ref = (VariableReference) node.astOperand();
-      if (!""String"".equals(ref.astIdentifier().astValue())) {
-        return;
-      }
-      // Found a String.format call
-      // Look outside to see if we inside of a Timber call
-      Node current = node.getParent();
-      while (current != null && !(current instanceof ExpressionStatement)) {
-        current = current.getParent();
-      }
-      if (current == null) {
-        return;
-      }
-      ExpressionStatement statement = (ExpressionStatement) current;
-      if (!Pattern.matches(""^Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP + "".*"", statement.toString())) {
-        return;
-      }
-      context.report(ISSUE_FORMAT, node, context.getLocation(node),
-          ""Using 'String#format' inside of 'Timber'"");
-    } else if (""tag"".equals(methodName)) {
-      Object expression = node.astOperand();
-      if (expression instanceof VariableReference) {
-        VariableReference ref = (VariableReference) expression;
-        if (!""Timber"".equals(ref.astIdentifier().astValue())) {
-          return;
-        }
-      }
-
-      if (node.astArguments().isEmpty()) {
-        return;
-      }
-      Node argument = node.astArguments().iterator().next();
-      String tag = findLiteralValue(context, argument);
-      if (tag != null && tag.length() > 23) {
-        String message = String.format(
-            ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
-            tag.length(), tag);
-        context.report(ISSUE_TAG_LENGTH, node, context.getLocation(argument), message);
-      }
-    } else if (node.astOperand() instanceof VariableReference) {
-      VariableReference ref = (VariableReference) node.astOperand();
-      if (""Log"".equals(ref.astIdentifier().astValue())) {
-        context.report(ISSUE_LOG, node, context.getRangeLocation(node, 0, node.astName(), 0),
-            ""Using 'Log' instead of 'Timber'"");
-        return;
-      }
-      if (!""Timber"".equals(ref.astIdentifier().astValue())) {
-        return;
-      }
-      checkThrowablePosition(context, node);
-      checkArguments(context, node);
-    } else if (isAstOperandTimberTagLogPattern(node)) {
-      List<Node> siblings = node.astOperand().getParent().getChildren();
-
-      List<Node> logNodes = siblings.subList(1, siblings.size());
-      List<Expression> expressionNodes = new ArrayList<>(); // casted version of logNodes
-
-      List<Node> logArgs = logNodes.subList(1, logNodes.size());
-      for (Node n : logArgs) {
-        if (!(n instanceof lombok.ast.Expression)) {
-          continue; // this is a failure; see `if` guard just outside of this loop
-        }
-        expressionNodes.add((Expression) n);
-      }
-
-      // If we're short an Expression, then our guess about this node and its siblings may be wrong,
-      if (expressionNodes.size() == logArgs.size()) {
-        checkStringFormatArguments(
-            context, node, expressionNodes.iterator(), expressionNodes.size());
-      }
+  @Override public void visitMethod(JavaContext context, JavaElementVisitor visitor,
+      PsiMethodCallExpression call, PsiMethod method) {
+    PsiReferenceExpression methodExpression = call.getMethodExpression();
+    String fullyQualifiedMethodName = methodExpression.getQualifiedName();
+    if (""java.lang.String.format"".equals(fullyQualifiedMethodName)) {
+      checkNestedStringFormat(context, call);
+      return;
+    }
+    if (fullyQualifiedMethodName.startsWith(""timber.log.Timber.tag"")) {
+      checkTagLength(context, call);
+      return;
+    }
+    if (fullyQualifiedMethodName.startsWith(""android.util.Log."")) {
+      context.report(ISSUE_LOG, methodExpression, context.getLocation(methodExpression),
+          ""Using 'Log' instead of 'Timber'"");
+      return;
+    }
+    // Handles Timber.X(..) and Timber.tag(..).X(..) where X in (v|d|i|w|e|wtf).
+    if (fullyQualifiedMethodName.startsWith(""timber.log.Timber."")) {
+      checkMethodArguments(context, call);
+      checkFormatArguments(context, call);
+      return;
     }
   }
 
-  /**
-   * Rough guess as to whether node represents a `Timber.tag(TAG).v(...)` style log experssion.
-   *
-   * TODO: ""Rough guess"" because a proper check would check that `v` is being called on an instance
-   * of a planted tree, but this is a quick & dirty hack in place of that (eg: generalized something
-   * like a JavaContext.resolve check on `node`?).
-   */
-  private static boolean isAstOperandTimberTagLogPattern(MethodInvocation node) {
-    Expression astOperand = node.astOperand();
-    if (!(astOperand instanceof MethodInvocation)) {
-      return false;
+  private static void checkNestedStringFormat(JavaContext context, PsiMethodCallExpression call) {
+    // PsiExpressionList
+    PsiElement current = LintUtils.skipParentheses(call.getParent());
+    while (current != null && !(current instanceof PsiExpressionStatement)) {
+      // PsiMethodCallExpression
+      current = LintUtils.skipParentheses(current.getParent());
+      // PsiExpressionList or PsiExpressionStatement
+      current = LintUtils.skipParentheses(current.getParent());
     }
-    MethodInvocation m = (MethodInvocation) astOperand;
-
-    if (!""Timber"".equals(m.rawOperand().toString())
-        || !""tag"".equals(m.astName().toString())
-        || !Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, node.astName().getDescription())) {
-      // Is not of the form ""Timber.tag(...).w(...)"" (where ""w()"" can be any valid log method)
-      return false;
+    if (current == null) {
+      return;
     }
-
-    return (m.getParent().getChildren().get(1) instanceof DescribedNode);
+    PsiExpressionStatement expressionStatement = (PsiExpressionStatement) current;
+    PsiMethodCallExpression outerCall =
+        (PsiMethodCallExpression) expressionStatement.getExpression();
+    PsiReferenceExpression maybeTimberLog = outerCall.getMethodExpression();
+    if (!Pattern.matches(""timber\\.log\\.Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP,
+        maybeTimberLog.getQualifiedName())) {
+      return;
+    }
+    context.report(ISSUE_FORMAT, call, context.getLocation(call),
+        ""Using 'String#format' inside of 'Timber'"");
   }
 
-  private static void checkArguments(JavaContext context, MethodInvocation node) {
-    StrictListAccessor<Expression, MethodInvocation> astArguments = node.astArguments();
-    checkStringFormatArguments(context, node, astArguments.iterator(), astArguments.size());
+  private static void checkTagLength(JavaContext context, PsiMethodCallExpression call) {
+    PsiExpression argument = call.getArgumentList().getExpressions()[0];
+    String tag = findLiteralValue(argument);
+    if (tag != null && tag.length() > 23) {
+      String message =
+          String.format(""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
+              tag.length(), tag);
+      context.report(ISSUE_TAG_LENGTH, argument, context.getLocation(argument), message);
+    }
   }
 
-  private static void checkStringFormatArguments(
-      JavaContext context,
-      MethodInvocation reportNode,
-      Iterator<Expression> logArguments,
-      int originalArgSize) {
-    if (!logArguments.hasNext()) {
+  private static void checkFormatArguments(JavaContext context, PsiMethodCallExpression call) {
+    PsiExpression[] arguments = call.getArgumentList().getExpressions();
+    if (arguments.length == 0) {
       return;
     }
+
     int startIndexOfArguments = 1;
-    Expression formatStringArg = logArguments.next();
-    if (formatStringArg instanceof VariableReference) {
-      if (isSubclassOf(context, (VariableReference) formatStringArg, Throwable.class)) {
-        formatStringArg = logArguments.next();
-        startIndexOfArguments++;
+    PsiExpression formatStringArg = arguments[0];
+    if (isSubclassOf(context, formatStringArg, Throwable.class)) {
+      if (arguments.length == 1) {
+        return;
       }
+      formatStringArg = arguments[1];
+      startIndexOfArguments++;
     }
 
-    String formatString = findLiteralValue(context, formatStringArg);
+    String formatString = findLiteralValue(formatStringArg);
     // We passed for example a method call
     if (formatString == null) {
       return;
     }
+
     int argumentCount = getFormatArgumentCount(formatString);
-    int passedArgCount = originalArgSize - startIndexOfArguments;
+    int passedArgCount = arguments.length - startIndexOfArguments;
     if (argumentCount < passedArgCount) {
-      context.report(ISSUE_ARG_COUNT, reportNode, context.getLocation(reportNode), String.format(
-              ""Wrong argument count, format string `%1$s` requires ""
-                  + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
-              passedArgCount));
+      context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
+          ""Wrong argument count, format string `%1$s` requires ""
+              + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+          passedArgCount));
       return;
     }
 
@@ -207,17 +150,18 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
 
     List<String> types = getStringArgumentTypes(formatString);
-    Expression argument = null;
+    PsiExpression argument = null;
+    int argumentIndex = startIndexOfArguments;
     boolean valid;
     for (int i = 0; i < types.size(); i++) {
       String formatType = types.get(i);
-      if (logArguments.hasNext()) {
-        argument = logArguments.next();
+      if (argumentIndex != arguments.length) {
+        argument = arguments[argumentIndex++];
       } else {
-        context.report(ISSUE_ARG_COUNT, reportNode, context.getLocation(reportNode), String.format(
-                ""Wrong argument count, format string `%1$s` requires ""
-                    + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
-                passedArgCount));
+        context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
+            ""Wrong argument count, format string `%1$s` requires ""
+                + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+            passedArgCount));
       }
 
       char last = formatType.charAt(formatType.length() - 1);
@@ -227,7 +171,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         // TODO
         continue;
       }
-      Class type = getType(context, argument);
+      Class type = getType(argument);
       if (type != null) {
         switch (last) {
           case 'b':
@@ -270,55 +214,56 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
                   + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
                   + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
               type.getSimpleName(), startIndexOfArguments + i + 1);
-          context.report(ISSUE_ARG_TYPES, reportNode, context.getLocation(argument), message);
+          context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
         }
       }
     }
   }
 
-  private static Class<?> getType(JavaContext context, Expression expression) {
+  private static Class<?> getType(PsiExpression expression) {
     if (expression == null) {
       return null;
     }
-
-    if (expression instanceof MethodInvocation) {
-      MethodInvocation method = (MethodInvocation) expression;
-      String methodName = method.astName().astValue();
+    if (expression instanceof PsiMethodCallExpression) {
+      PsiMethodCallExpression call = (PsiMethodCallExpression) expression;
+      PsiMethod method = call.resolveMethod();
+      if (method == null) {
+        return null;
+      }
+      String methodName = method.getName();
       if (methodName.equals(GET_STRING_METHOD)) {
         return String.class;
       }
-    } else if (expression instanceof StringLiteral) {
-      return String.class;
-    } else if (expression instanceof IntegralLiteral) {
-      return Integer.TYPE;
-    } else if (expression instanceof FloatingPointLiteral) {
-      return Float.TYPE;
-    } else if (expression instanceof CharLiteral) {
-      return Character.TYPE;
-    } else if (expression instanceof BooleanLiteral) {
-      return Boolean.TYPE;
-    } else if (expression instanceof NullLiteral) {
-      return Object.class;
+    } else if (expression instanceof PsiLiteralExpression) {
+      PsiLiteralExpression literalExpression = (PsiLiteralExpression) expression;
+      PsiType expressionType = literalExpression.getType();
+      if (LintUtils.isString(expressionType)) {
+        return String.class;
+      } else if (expressionType == PsiType.INT) {
+        return Integer.TYPE;
+      } else if (expressionType == PsiType.FLOAT) {
+        return Float.TYPE;
+      } else if (expressionType == PsiType.CHAR) {
+        return Character.TYPE;
+      } else if (expressionType == PsiType.BOOLEAN) {
+        return Boolean.TYPE;
+      } else if (expressionType == PsiType.NULL) {
+        return Object.class;
+      }
     }
 
-    if (context != null) {
-      JavaParser.TypeDescriptor type = context.getType(expression);
-      if (type != null) {
-        Class<?> typeClass = getTypeClass(type);
-        if (typeClass != null) {
-          return typeClass;
-        } else {
-          return Object.class;
-        }
-      }
+    PsiType type = expression.getType();
+    if (type != null) {
+      Class<?> typeClass = getTypeClass(type);
+      return typeClass != null ? typeClass : Object.class;
     }
 
     return null;
   }
 
-  private static Class<?> getTypeClass(@Nullable JavaParser.TypeDescriptor type) {
+  private static Class<?> getTypeClass(@Nullable PsiType type) {
     if (type != null) {
-      return getTypeClass(type.getName());
+      return getTypeClass(type.getCanonicalText());
     }
     return null;
   }
@@ -369,13 +314,12 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static boolean isSubclassOf(JavaContext context, VariableReference variableReference,
-      Class<?> clazz) {
-    JavaParser.ResolvedNode resolved = context.resolve(variableReference);
-    if (resolved instanceof JavaParser.ResolvedVariable) {
-      JavaParser.ResolvedVariable resolvedVariable = (JavaParser.ResolvedVariable) resolved;
-      JavaParser.ResolvedClass typeClass = resolvedVariable.getType().getTypeClass();
-      return (typeClass != null && typeClass.isSubclassOf(clazz.getName(), false));
+  private static boolean isSubclassOf(JavaContext context, PsiExpression expression, Class<?> cls) {
+    PsiType expressionType = expression.getType();
+    if (expressionType instanceof PsiClassType) {
+      PsiClassType classType = (PsiClassType) expressionType;
+      PsiClass resolvedClass = classType.resolve();
+      return context.getEvaluator().extendsClass(resolvedClass, cls.getName(), false);
     }
     return false;
   }
@@ -413,23 +357,28 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return types;
   }
 
-  private static String findLiteralValue(@NonNull JavaContext context, @NonNull Node argument) {
-    if (argument instanceof StringLiteral) {
-      return ((StringLiteral) argument).astValue();
-    } else if (argument instanceof BinaryExpression) {
-      BinaryExpression expression = (BinaryExpression) argument;
-      if (expression.astOperator() == BinaryOperator.PLUS) {
-        String left = findLiteralValue(context, expression.astLeft());
-        String right = findLiteralValue(context, expression.astRight());
+  private static String findLiteralValue(PsiExpression argument) {
+    if (argument instanceof PsiLiteralExpression) {
+      PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument;
+      Object value = literalExpression.getValue();
+      if (value instanceof String) {
+        return (String) value;
+      }
+    } else if (argument instanceof PsiBinaryExpression) {
+      PsiBinaryExpression binaryExpression = (PsiBinaryExpression) argument;
+      if (binaryExpression.getOperationTokenType() == JavaTokenType.PLUS) {
+        String left = findLiteralValue(binaryExpression.getLOperand());
+        String right = findLiteralValue(binaryExpression.getROperand());
         if (left != null && right != null) {
           return left + right;
         }
       }
-    } else {
-      JavaParser.ResolvedNode resolved = context.resolve(argument);
-      if (resolved instanceof JavaParser.ResolvedField) {
-        JavaParser.ResolvedField field = (JavaParser.ResolvedField) resolved;
-        Object value = field.getValue();
+    } else if (argument instanceof PsiReferenceExpression) {
+      PsiReferenceExpression referenceExpression = (PsiReferenceExpression) argument;
+      PsiElement resolved = referenceExpression.resolve();
+      if (resolved instanceof PsiField) {
+        PsiField field = (PsiField) resolved;
+        Object value = field.computeConstantValue();
         if (value instanceof String) {
           return (String) value;
         }
@@ -486,56 +435,54 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return max;
   }
 
-  private static void checkThrowablePosition(JavaContext context, MethodInvocation node) {
-    int index = 0;
-    for (Node argument : node.astArguments()) {
-      if (checkNode(context, node, argument)) {
+  private static void checkMethodArguments(JavaContext context, PsiMethodCallExpression call) {
+    PsiExpression[] arguments = call.getArgumentList().getExpressions();
+    for (int i = 0; i < arguments.length; i++) {
+      PsiExpression argument = arguments[i];
+      if (checkElement(context, call, argument)) {
         break;
       }
-      if (argument instanceof VariableReference) {
-        VariableReference variableReference = (VariableReference) argument;
-        if (index > 0 && isSubclassOf(context, variableReference, Throwable.class)) {
-          context.report(ISSUE_THROWABLE, node, context.getLocation(node),
-              ""Throwable should be first argument"");
-        }
+      if (i > 0 && isSubclassOf(context, argument, Throwable.class)) {
+        context.report(ISSUE_THROWABLE, call, context.getLocation(call),
+            ""Throwable should be first argument"");
       }
-      index++;
     }
   }
 
-  private static boolean checkNode(JavaContext context, MethodInvocation node, Node argument) {
-    if (argument instanceof BinaryExpression) {
-      Class argumentType = getType(context, (BinaryExpression) argument);
+  private static boolean checkElement(JavaContext context, PsiMethodCallExpression call,
+      PsiElement element) {
+    if (element instanceof PsiBinaryExpression) {
+      Class argumentType = getType((PsiBinaryExpression) element);
       if (argumentType == String.class) {
-        context.report(ISSUE_BINARY, node, context.getLocation(argument),
+        context.report(ISSUE_BINARY, call, context.getLocation(element),
             ""Replace String concatenation with Timber's string formatting"");
         return true;
       }
-    } else if (argument instanceof If || argument instanceof InlineIfExpression) {
-      return checkConditionalUsage(context, node, argument);
+    } else if (element instanceof PsiIfStatement || element instanceof PsiConditionalExpression) {
+      return checkConditionalUsage(context, call, element);
     }
     return false;
   }
 
-  private static boolean checkConditionalUsage(JavaContext context, MethodInvocation node,
-      Node arg) {
-    Node thenStatement;
-    Node elseStatement;
-    if (arg instanceof If) {
-      If ifArg = (If) arg;
-      thenStatement = ifArg.astStatement();
-      elseStatement = ifArg.astElseStatement();
-    } else if (arg instanceof InlineIfExpression) {
-      InlineIfExpression inlineIfArg = (InlineIfExpression) arg;
-      thenStatement = inlineIfArg.astIfFalse();
-      elseStatement = inlineIfArg.astIfTrue();
+  private static boolean checkConditionalUsage(JavaContext context, PsiMethodCallExpression call,
+      PsiElement element) {
+    PsiElement thenElement;
+    PsiElement elseElement;
+    if (element instanceof PsiIfStatement) {
+      PsiIfStatement ifArg = (PsiIfStatement) element;
+      thenElement = ifArg.getThenBranch();
+      elseElement = ifArg.getElseBranch();
+    } else if (element instanceof PsiConditionalExpression) {
+      PsiConditionalExpression inlineIfArg = (PsiConditionalExpression) element;
+      thenElement = inlineIfArg.getThenExpression();
+      elseElement = inlineIfArg.getElseExpression();
     } else {
       return false;
     }
-    if (checkNode(context, node, thenStatement)) {
+    if (checkElement(context, call, thenElement)) {
       return false;
     }
-    return checkNode(context, node, elseStatement);
+    return checkElement(context, call, elseElement);
   }
 
   static Issue[] getIssues() {",False,source
CHANGELOG.md,CHANGELOG.md,75e4a4a2524de9b361d87164c9411c73566f81b9,f13c73bf127c189503c333defa0f554ce7b0677d,Prepare version 4.4.0.,"@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 4.4.0 *(2016-12-06)*
+----------------------------
+
+ * New: `Tree.formatMessage` method allows customization of message formatting and rendering.
+ * New: Lint checks ported to new IntelliJ PSI infrastructure.
+
+
 Version 4.3.1 *(2016-09-19)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 4.4.0 *(2016-12-06)*
+----------------------------
+
+ * New: `Tree.formatMessage` method allows customization of message formatting and rendering.
+ * New: Lint checks ported to new IntelliJ PSI infrastructure.
+
+
 Version 4.3.1 *(2016-09-19)*
 ----------------------------",False,other
README.md,README.md,75e4a4a2524de9b361d87164c9411c73566f81b9,f13c73bf127c189503c333defa0f554ce7b0677d,Prepare version 4.4.0.,"@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.3.1'
+compile 'com.jakewharton.timber:timber:4.4.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -76,7 +76,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.3.1'
+compile 'com.jakewharton.timber:timber:4.4.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,75e4a4a2524de9b361d87164c9411c73566f81b9,f13c73bf127c189503c333defa0f554ce7b0677d,Prepare version 4.4.0.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.3.2-SNAPSHOT
+VERSION_NAME=4.4.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.3.2-SNAPSHOT
+VERSION_NAME=4.4.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,4743696ef20d22676e99f0c2077c79782ce0f77c,75e4a4a2524de9b361d87164c9411c73566f81b9,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.4.0
+VERSION_NAME=4.4.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.4.0
+VERSION_NAME=4.4.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,3ac72d5237f2ef128ce5739ccbeb5369d23bfbc4,4743696ef20d22676e99f0c2077c79782ce0f77c,"Revert ""Simple implementation""

This reverts commit f10e7af1aec0e3628b5597cc8103bc5d2ea3828d.","@@ -1,6 +1,5 @@
 package timber.log;
 
-import android.text.TextUtils;
 import android.util.Log;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -524,7 +523,10 @@ public final class Timber {
       if (!isLoggable(tag, priority)) {
         return;
       }
-      if (TextUtils.isEmpty(message)) {
+      if (message != null && message.length() == 0) {
+        message = null;
+      }
+      if (message == null) {
         if (t == null) {
           return; // Swallow message if it's null and there's no throwable.
         }","@@ -1,6 +1,5 @@
 package timber.log;
 
-import android.text.TextUtils;
 import android.util.Log;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -524,7 +523,10 @@ public final class Timber {
       if (!isLoggable(tag, priority)) {
         return;
       }
-      if (TextUtils.isEmpty(message)) {
+      if (message != null && message.length() == 0) {
+        message = null;
+      }
+      if (message == null) {
         if (t == null) {
           return; // Swallow message if it's null and there's no throwable.
         }",False,source
build.gradle,build.gradle,2d62cb5ed9a697aab18a9a5d63a3771397124d79,025796b7e2f411c711ae3cf18d4ad5619908ad1a,Bump Android Gradle Plugin to 2.2.3,"@@ -3,7 +3,7 @@ buildscript {
     jcenter()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.2.2'
+    classpath 'com.android.tools.build:gradle:2.2.3'
   }
 }","@@ -3,7 +3,7 @@ buildscript {
     jcenter()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.2.2'
+    classpath 'com.android.tools.build:gradle:2.2.3'
   }
 }",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,2efea064b87b0089f815316cabaf86ecd65940e0,025796b7e2f411c711ae3cf18d4ad5619908ad1a,"Fix NPE when String.format inside block or nested assignment (#194)

Fixes #193","@@ -16,10 +16,10 @@ import com.intellij.psi.JavaTokenType;
 import com.intellij.psi.PsiBinaryExpression;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
+import com.intellij.psi.PsiCodeBlock;
 import com.intellij.psi.PsiConditionalExpression;
 import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiExpression;
-import com.intellij.psi.PsiExpressionStatement;
 import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiIfStatement;
 import com.intellij.psi.PsiLiteralExpression;
@@ -79,27 +79,23 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   }
 
   private static void checkNestedStringFormat(JavaContext context, PsiMethodCallExpression call) {
-    // PsiExpressionList
-    PsiElement current = LintUtils.skipParentheses(call.getParent());
-    while (current != null && !(current instanceof PsiExpressionStatement)) {
-      // PsiMethodCallExpression
-      current = LintUtils.skipParentheses(current.getParent());
-      // PsiExpressionList or PsiExpressionStatement
+    PsiElement current = call;
+    while (true) {
       current = LintUtils.skipParentheses(current.getParent());
+      if (current == null || current instanceof PsiCodeBlock) {
+        // Reached AST root or code block node; String.format not inside Timber.X(..).
+        return;
+      }
+      if (current instanceof PsiMethodCallExpression) {
+        PsiMethodCallExpression maybeTimberLog = (PsiMethodCallExpression) current;
+        if (Pattern.matches(""timber\\.log\\.Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP,
+            maybeTimberLog.getMethodExpression().getQualifiedName())) {
+          context.report(ISSUE_FORMAT, call, context.getLocation(call),
+              ""Using 'String#format' inside of 'Timber'"");
+          return;
+        }
+      }
     }
-    if (current == null) {
-      return;
-    }
-    PsiExpressionStatement expressionStatement = (PsiExpressionStatement) current;
-    PsiMethodCallExpression outerCall =
-        (PsiMethodCallExpression) expressionStatement.getExpression();
-    PsiReferenceExpression maybeTimberLog = outerCall.getMethodExpression();
-    if (!Pattern.matches(""timber\\.log\\.Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP,
-        maybeTimberLog.getQualifiedName())) {
-      return;
-    }
-    context.report(ISSUE_FORMAT, call, context.getLocation(call),
-        ""Using 'String#format' inside of 'Timber'"");
   }
 
   private static void checkTagLength(JavaContext context, PsiMethodCallExpression call) {","@@ -16,10 +16,10 @@ import com.intellij.psi.JavaTokenType;
 import com.intellij.psi.PsiBinaryExpression;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
+import com.intellij.psi.PsiCodeBlock;
 import com.intellij.psi.PsiConditionalExpression;
 import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiExpression;
-import com.intellij.psi.PsiExpressionStatement;
 import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiIfStatement;
 import com.intellij.psi.PsiLiteralExpression;
@@ -79,27 +79,23 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   }
 
   private static void checkNestedStringFormat(JavaContext context, PsiMethodCallExpression call) {
-    // PsiExpressionList
-    PsiElement current = LintUtils.skipParentheses(call.getParent());
-    while (current != null && !(current instanceof PsiExpressionStatement)) {
-      // PsiMethodCallExpression
-      current = LintUtils.skipParentheses(current.getParent());
-      // PsiExpressionList or PsiExpressionStatement
+    PsiElement current = call;
+    while (true) {
       current = LintUtils.skipParentheses(current.getParent());
+      if (current == null || current instanceof PsiCodeBlock) {
+        // Reached AST root or code block node; String.format not inside Timber.X(..).
+        return;
+      }
+      if (current instanceof PsiMethodCallExpression) {
+        PsiMethodCallExpression maybeTimberLog = (PsiMethodCallExpression) current;
+        if (Pattern.matches(""timber\\.log\\.Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP,
+            maybeTimberLog.getMethodExpression().getQualifiedName())) {
+          context.report(ISSUE_FORMAT, call, context.getLocation(call),
+              ""Using 'String#format' inside of 'Timber'"");
+          return;
+        }
+      }
     }
-    if (current == null) {
-      return;
-    }
-    PsiExpressionStatement expressionStatement = (PsiExpressionStatement) current;
-    PsiMethodCallExpression outerCall =
-        (PsiMethodCallExpression) expressionStatement.getExpression();
-    PsiReferenceExpression maybeTimberLog = outerCall.getMethodExpression();
-    if (!Pattern.matches(""timber\\.log\\.Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP,
-        maybeTimberLog.getQualifiedName())) {
-      return;
-    }
-    context.report(ISSUE_FORMAT, call, context.getLocation(call),
-        ""Using 'String#format' inside of 'Timber'"");
   }
 
   private static void checkTagLength(JavaContext context, PsiMethodCallExpression call) {",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,2efea064b87b0089f815316cabaf86ecd65940e0,025796b7e2f411c711ae3cf18d4ad5619908ad1a,"Fix NPE when String.format inside block or nested assignment (#194)

Fixes #193","@@ -38,7 +38,7 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
         + ""0 errors, 1 warnings\n"");
   }
 
-  public void testInnerStringFormat() throws Exception {
+  public void testInnerStringFormatInNestedMethods() throws Exception {
     @Language(""JAVA"") String source = """"
         + ""package foo;\n""
         + ""import timber.log.Timber;\n""
@@ -55,6 +55,37 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
         + ""0 errors, 1 warnings\n"");
   }
 
+  public void testInnerStringFormatInNestedAssignment() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""    String msg = null;\n""
+        + ""    Timber.d(msg = String.format(\""msg\""));\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+        + ""    Timber.d(msg = String.format(\""msg\""));\n""
+        + ""                   ~~~~~~~~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testValidStringFormatInCodeBlock() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""    for(;;) {\n""
+        + ""      String name = String.format(\""msg\"");\n""
+        + ""    }\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  }
+
   public void testThrowableNotAtBeginning() throws Exception {
     @Language(""JAVA"") String source = """"
         + ""package foo;\n""","@@ -38,7 +38,7 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
         + ""0 errors, 1 warnings\n"");
   }
 
-  public void testInnerStringFormat() throws Exception {
+  public void testInnerStringFormatInNestedMethods() throws Exception {
     @Language(""JAVA"") String source = """"
         + ""package foo;\n""
         + ""import timber.log.Timber;\n""
@@ -55,6 +55,37 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
         + ""0 errors, 1 warnings\n"");
   }
 
+  public void testInnerStringFormatInNestedAssignment() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""    String msg = null;\n""
+        + ""    Timber.d(msg = String.format(\""msg\""));\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+        + ""    Timber.d(msg = String.format(\""msg\""));\n""
+        + ""                   ~~~~~~~~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testValidStringFormatInCodeBlock() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""    for(;;) {\n""
+        + ""      String name = String.format(\""msg\"");\n""
+        + ""    }\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  }
+
   public void testThrowableNotAtBeginning() throws Exception {
     @Language(""JAVA"") String source = """"
         + ""package foo;\n""",False,test
.travis.yml,.travis.yml,966598f9165dc0200c663dec38e18a01c60ee92f,353f8798924b5bd68a46d934c508d193cadbd36c,Latest build tools,"@@ -4,8 +4,8 @@ android:
   components:
     - tools
     - platform-tools
-    - build-tools-24.0.0
-    - android-24
+    - build-tools-25.0.1
+    - android-25
 
 jdk:
   - oraclejdk8","@@ -4,8 +4,8 @@ android:
   components:
     - tools
     - platform-tools
-    - build-tools-24.0.0
-    - android-24
+    - build-tools-25.0.1
+    - android-25
 
 jdk:
   - oraclejdk8",False,other
build.gradle,build.gradle,966598f9165dc0200c663dec38e18a01c60ee92f,353f8798924b5bd68a46d934c508d193cadbd36c,Latest build tools,"@@ -16,9 +16,9 @@ allprojects {
 
 ext {
   minSdkVersion = 9
-  targetSdkVersion = 24
-  compileSdkVersion = 24
-  buildToolsVersion = '24.0.0'
+  targetSdkVersion = 25
+  compileSdkVersion = 25
+  buildToolsVersion = '25.0.1'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
   lintVersion = '25.2.0'
@@ -26,7 +26,7 @@ ext {
 
 ext.deps = [
     // Test dependencies
-    junit      : 'junit:junit:4.11',
+    junit      : 'junit:junit:4.12',
     festassert : 'org.easytesting:fest-assert-core:2.0M10',
     festandroid: 'com.squareup:fest-android:1.0.7',
     mockitocore: 'org.mockito:mockito-core:1.9.5',","@@ -16,9 +16,9 @@ allprojects {
 
 ext {
   minSdkVersion = 9
-  targetSdkVersion = 24
-  compileSdkVersion = 24
-  buildToolsVersion = '24.0.0'
+  targetSdkVersion = 25
+  compileSdkVersion = 25
+  buildToolsVersion = '25.0.1'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
   lintVersion = '25.2.0'
@@ -26,7 +26,7 @@ ext {
 
 ext.deps = [
     // Test dependencies
-    junit      : 'junit:junit:4.11',
+    junit      : 'junit:junit:4.12',
     festassert : 'org.easytesting:fest-assert-core:2.0M10',
     festandroid: 'com.squareup:fest-android:1.0.7',
     mockitocore: 'org.mockito:mockito-core:1.9.5',",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,966598f9165dc0200c663dec38e18a01c60ee92f,353f8798924b5bd68a46d934c508d193cadbd36c,Latest build tools,"@@ -1,6 +1,6 @@
-#Wed Sep 14 14:53:41 PDT 2016
+#Tue Dec 20 11:28:45 CET 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.2.1-bin.zip","@@ -1,6 +1,6 @@
-#Wed Sep 14 14:53:41 PDT 2016
+#Tue Dec 20 11:28:45 CET 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.2.1-bin.zip",False,other
gradlew,gradlew,966598f9165dc0200c663dec38e18a01c60ee92f,353f8798924b5bd68a46d934c508d193cadbd36c,Latest build tools,"@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -154,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=(""$@"")
+# Escape application args
+save ( ) {
+    for i do printf %s\\n ""$i"" | sed ""s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"" ; done
+    echo "" ""
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]=""-Dorg.gradle.appname=$APP_BASE_NAME""
+APP_ARGS=$(save ""$@"")
 
-exec ""$JAVACMD"" ""${JVM_OPTS[@]}"" -classpath ""$CLASSPATH"" org.gradle.wrapper.GradleWrapperMain ""$@""
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS ""\""-Dorg.gradle.appname=$APP_BASE_NAME\"""" -classpath ""\""$CLASSPATH\"""" org.gradle.wrapper.GradleWrapperMain ""$APP_ARGS""
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ ""$(uname)"" = ""Darwin"" ] && [ ""$HOME"" = ""$PWD"" ]; then
+  cd ""$(dirname ""$0"")""
+fi
+
+exec ""$JAVACMD"" ""$@""","@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -154,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=(""$@"")
+# Escape application args
+save ( ) {
+    for i do printf %s\\n ""$i"" | sed ""s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"" ; done
+    echo "" ""
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]=""-Dorg.gradle.appname=$APP_BASE_NAME""
+APP_ARGS=$(save ""$@"")
 
-exec ""$JAVACMD"" ""${JVM_OPTS[@]}"" -classpath ""$CLASSPATH"" org.gradle.wrapper.GradleWrapperMain ""$@""
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS ""\""-Dorg.gradle.appname=$APP_BASE_NAME\"""" -classpath ""\""$CLASSPATH\"""" org.gradle.wrapper.GradleWrapperMain ""$APP_ARGS""
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ ""$(uname)"" = ""Darwin"" ] && [ ""$HOME"" = ""$PWD"" ]; then
+  cd ""$(dirname ""$0"")""
+fi
+
+exec ""$JAVACMD"" ""$@""",False,other
gradlew.bat,gradlew.bat,966598f9165dc0200c663dec38e18a01c60ee92f,353f8798924b5bd68a46d934c508d193cadbd36c,Latest build tools,"@@ -49,7 +49,6 @@ goto fail
 @rem Get command-line arguments, handling Windows variants
 
 if not ""%OS%"" == ""Windows_NT"" goto win9xME_args
-if ""%@eval[2+2]"" == ""4"" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if ""x%~1"" == ""x"" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line","@@ -49,7 +49,6 @@ goto fail
 @rem Get command-line arguments, handling Windows variants
 
 if not ""%OS%"" == ""Windows_NT"" goto win9xME_args
-if ""%@eval[2+2]"" == ""4"" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if ""x%~1"" == ""x"" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line",True,other
CHANGELOG.md,CHANGELOG.md,207ef6ffce0c72fb0a39ff8bbd075b09105c1664,0474be9323dc12455a3c6a5f2603632ca22ed4df,Fix typo in changelog,"@@ -11,7 +11,7 @@ Version 4.4.0 *(2016-12-06)*
 Version 4.3.1 *(2016-09-19)*
 ----------------------------
 
- * New: Add convenience method `isLoggable` convenience method which also provides the tag.
+ * New: Add `isLoggable` convenience method which also provides the tag.
 
 
 Version 4.3.0 *(2016-08-18)*","@@ -11,7 +11,7 @@ Version 4.4.0 *(2016-12-06)*
 Version 4.3.1 *(2016-09-19)*
 ----------------------------
 
- * New: Add convenience method `isLoggable` convenience method which also provides the tag.
+ * New: Add `isLoggable` convenience method which also provides the tag.
 
 
 Version 4.3.0 *(2016-08-18)*",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,e70072cda4354a72ebcdb696197bf90c600a9dda,bcb41b8fdf8149ca9ebb106259d350f1a8d89419,Add Timber Lint Check for exception logging (#200),"@@ -74,6 +74,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     if (fullyQualifiedMethodName.startsWith(""timber.log.Timber."")) {
       checkMethodArguments(context, call);
       checkFormatArguments(context, call);
+      checkExceptionLogging(context, call);
       return;
     }
   }
@@ -445,6 +446,34 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
+  private static void checkExceptionLogging(JavaContext context, PsiMethodCallExpression call) {
+    PsiExpression[] arguments = call.getArgumentList().getExpressions();
+
+    if (arguments.length > 1) {
+      boolean isFirstParameterThrowable = isSubclassOf(context, arguments[0], Throwable.class);
+
+      if (isFirstParameterThrowable) {
+        PsiExpression secondArgument = arguments[1];
+        String message = findLiteralValue(secondArgument);
+
+        boolean callsGetMessage = false;
+
+        if (secondArgument instanceof PsiMethodCallExpression) {
+          PsiMethodCallExpression callExpression = (PsiMethodCallExpression) secondArgument;
+          callsGetMessage = callExpression.getMethodExpression().getCanonicalText().endsWith(""getMessage"");
+        }
+
+        if (callsGetMessage) {
+          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
+              ""Explicitly logging exception message is redundant"");
+        } else if (message == null || """".equals(message)) {
+          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
+              ""Use single-argument log method instead of null/empty message"");
+        }
+      }
+    }
+  }
+
   private static boolean checkElement(JavaContext context, PsiMethodCallExpression call,
       PsiElement element) {
     if (element instanceof PsiBinaryExpression) {
@@ -484,7 +513,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   static Issue[] getIssues() {
     return new Issue[] {
         ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,
-        ISSUE_TAG_LENGTH
+        ISSUE_TAG_LENGTH, ISSUE_EXCEPTION_LOGGING
     };
   }
 
@@ -523,4 +552,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       Issue.create(""TimberTagLength"", ""Too Long Log Tags"", ""Log tags are only allowed to be at most""
               + "" 23 tag characters long."", Category.CORRECTNESS, 5, Severity.ERROR,
           new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_EXCEPTION_LOGGING =
+      Issue.create(""TimberExceptionLogging"", ""Exception Logging"", ""Explicitly including the""
+              + "" exception message is redundant when supplying an exception to log."",
+          Category.CORRECTNESS, 3, Severity.WARNING,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
 }","@@ -74,6 +74,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     if (fullyQualifiedMethodName.startsWith(""timber.log.Timber."")) {
       checkMethodArguments(context, call);
       checkFormatArguments(context, call);
+      checkExceptionLogging(context, call);
       return;
     }
   }
@@ -445,6 +446,34 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
+  private static void checkExceptionLogging(JavaContext context, PsiMethodCallExpression call) {
+    PsiExpression[] arguments = call.getArgumentList().getExpressions();
+
+    if (arguments.length > 1) {
+      boolean isFirstParameterThrowable = isSubclassOf(context, arguments[0], Throwable.class);
+
+      if (isFirstParameterThrowable) {
+        PsiExpression secondArgument = arguments[1];
+        String message = findLiteralValue(secondArgument);
+
+        boolean callsGetMessage = false;
+
+        if (secondArgument instanceof PsiMethodCallExpression) {
+          PsiMethodCallExpression callExpression = (PsiMethodCallExpression) secondArgument;
+          callsGetMessage = callExpression.getMethodExpression().getCanonicalText().endsWith(""getMessage"");
+        }
+
+        if (callsGetMessage) {
+          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
+              ""Explicitly logging exception message is redundant"");
+        } else if (message == null || """".equals(message)) {
+          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
+              ""Use single-argument log method instead of null/empty message"");
+        }
+      }
+    }
+  }
+
   private static boolean checkElement(JavaContext context, PsiMethodCallExpression call,
       PsiElement element) {
     if (element instanceof PsiBinaryExpression) {
@@ -484,7 +513,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   static Issue[] getIssues() {
     return new Issue[] {
         ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,
-        ISSUE_TAG_LENGTH
+        ISSUE_TAG_LENGTH, ISSUE_EXCEPTION_LOGGING
     };
   }
 
@@ -523,4 +552,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       Issue.create(""TimberTagLength"", ""Too Long Log Tags"", ""Log tags are only allowed to be at most""
               + "" 23 tag characters long."", Category.CORRECTNESS, 5, Severity.ERROR,
           new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_EXCEPTION_LOGGING =
+      Issue.create(""TimberExceptionLogging"", ""Exception Logging"", ""Explicitly including the""
+              + "" exception message is redundant when supplying an exception to log."",
+          Category.CORRECTNESS, 3, Severity.WARNING,
+          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
 }",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,e70072cda4354a72ebcdb696197bf90c600a9dda,bcb41b8fdf8149ca9ebb106259d350f1a8d89419,Add Timber Lint Check for exception logging (#200),"@@ -266,6 +266,70 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
         + ""1 errors, 0 warnings\n"");
   }
 
+  public void testExceptionLoggingUsingMessage() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(e, e.getMessage());\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
+        + ""     Timber.d(e, e.getMessage());\n""
+        + ""                 ~~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testExceptionLoggingUsingEmptyStringMessage() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(e, \""\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
+        + ""     Timber.d(e, \""\"");\n""
+        + ""                 ~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testExceptionLoggingUsingNullMessage() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(e, null);\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
+        + ""     Timber.d(e, null);\n""
+        + ""                 ~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testExceptionLoggingUsingValidMessage() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(e, \""Valid message\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  }
+
   @Override protected Detector getDetector() {
     return new WrongTimberUsageDetector();
   }","@@ -266,6 +266,70 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
         + ""1 errors, 0 warnings\n"");
   }
 
+  public void testExceptionLoggingUsingMessage() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(e, e.getMessage());\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
+        + ""     Timber.d(e, e.getMessage());\n""
+        + ""                 ~~~~~~~~~~~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testExceptionLoggingUsingEmptyStringMessage() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(e, \""\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
+        + ""     Timber.d(e, \""\"");\n""
+        + ""                 ~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testExceptionLoggingUsingNullMessage() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(e, null);\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
+        + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
+        + ""     Timber.d(e, null);\n""
+        + ""                 ~~~~\n""
+        + ""0 errors, 1 warnings\n"");
+  }
+
+  public void testExceptionLoggingUsingValidMessage() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(e, \""Valid message\"");\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  }
+
   @Override protected Detector getDetector() {
     return new WrongTimberUsageDetector();
   }",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,8c53bf58b6854444bb1703dd3bb908f0e70dc888,e70072cda4354a72ebcdb696197bf90c600a9dda,Truncate auto-generated log tags over 23 characters (#197),"@@ -1,6 +1,9 @@
 package timber.log;
 
 import android.util.Log;
+
+import org.jetbrains.annotations.NonNls;
+
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.ArrayList;
@@ -8,7 +11,6 @@ import java.util.Collections;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.jetbrains.annotations.NonNls;
 
 import static java.util.Collections.unmodifiableList;
 
@@ -574,6 +576,7 @@ public final class Timber {
   /** A {@link Tree Tree} for debug builds. Automatically infers the tag from the calling class. */
   public static class DebugTree extends Tree {
     private static final int MAX_LOG_LENGTH = 4000;
+    private static final int MAX_TAG_LENGTH = 23;
     private static final int CALL_STACK_INDEX = 5;
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"");
 
@@ -590,7 +593,8 @@ public final class Timber {
       if (m.find()) {
         tag = m.replaceAll("""");
       }
-      return tag.substring(tag.lastIndexOf('.') + 1);
+      tag = tag.substring(tag.lastIndexOf('.') + 1);
+      return tag.length() > MAX_TAG_LENGTH ? tag.substring(0, MAX_TAG_LENGTH) : tag;
     }
 
     @Override final String getTag() {","@@ -1,6 +1,9 @@
 package timber.log;
 
 import android.util.Log;
+
+import org.jetbrains.annotations.NonNls;
+
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.ArrayList;
@@ -8,7 +11,6 @@ import java.util.Collections;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.jetbrains.annotations.NonNls;
 
 import static java.util.Collections.unmodifiableList;
 
@@ -574,6 +576,7 @@ public final class Timber {
   /** A {@link Tree Tree} for debug builds. Automatically infers the tag from the calling class. */
   public static class DebugTree extends Tree {
     private static final int MAX_LOG_LENGTH = 4000;
+    private static final int MAX_TAG_LENGTH = 23;
     private static final int CALL_STACK_INDEX = 5;
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"");
 
@@ -590,7 +593,8 @@ public final class Timber {
       if (m.find()) {
         tag = m.replaceAll("""");
       }
-      return tag.substring(tag.lastIndexOf('.') + 1);
+      tag = tag.substring(tag.lastIndexOf('.') + 1);
+      return tag.length() > MAX_TAG_LENGTH ? tag.substring(0, MAX_TAG_LENGTH) : tag;
     }
 
     @Override final String getTag() {",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,8c53bf58b6854444bb1703dd3bb908f0e70dc888,e70072cda4354a72ebcdb696197bf90c600a9dda,Truncate auto-generated log tags over 23 characters (#197),"@@ -51,7 +51,7 @@ public class TimberTest {
       assertThat(e).hasMessage(""Cannot plant Timber into itself."");
     }
     try {
-      Timber.plant(new Timber.Tree[] { timber });
+      Timber.plant(new Timber.Tree[]{timber});
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(""Cannot plant Timber into itself."");
@@ -61,7 +61,7 @@ public class TimberTest {
   @Test public void treeCount() {
     // inserts trees and checks if the amount of returned trees matches.
     assertThat(Timber.treeCount()).isEqualTo(0);
-    for(int i= 1 ; i < 50 ; i++){
+    for (int i = 1; i < 50; i++) {
       Timber.plant(new Timber.DebugTree());
       assertThat(Timber.treeCount()).isEqualTo(i);
     }
@@ -89,7 +89,7 @@ public class TimberTest {
     } catch (NullPointerException e) {
       assertThat(e).hasMessage(""trees == null"");
     }
-    nullTrees = new Timber.Tree[] { null };
+    nullTrees = new Timber.Tree[]{null};
     try {
       Timber.plant(nullTrees);
       fail();
@@ -193,6 +193,31 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void debugTreeGeneratedTagIsLoggable() {
+    Timber.plant(new Timber.DebugTree() {
+      private static final int MAX_TAG_LENGTH = 23;
+
+      @Override protected void log(int priority, String tag, String message, Throwable t) {
+        try {
+          assertThat(Log.isLoggable(tag, priority));
+          assertThat(tag.length() <= MAX_TAG_LENGTH);
+        } catch (IllegalArgumentException e) {
+          fail(e.getMessage());
+        }
+        super.log(priority, tag, message, t);
+      }
+    });
+    class ClassNameThatIsReallyReallyReallyLong {
+      {
+        Timber.d(""Hello, world!"");
+      }
+    }
+    new ClassNameThatIsReallyReallyReallyLong();
+    assertLog()
+        .hasDebugMessage(""TimberTest$1ClassNameTh"", ""Hello, world!"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void debugTreeCustomTag() {
     Timber.plant(new Timber.DebugTree());
     Timber.tag(""Custom"").d(""Hello, world!"");
@@ -433,7 +458,7 @@ public class TimberTest {
     Timber.plant(new Timber.DebugTree() {
       @Override
       protected String formatMessage(String message, Object[] args) {
-        return String.format(""Test formatting: ""+message, args);
+        return String.format(""Test formatting: "" + message, args);
       }
     });
     Timber.d(""Test message logged. %d"", 100);
@@ -452,7 +477,8 @@ public class TimberTest {
     assertExceptionLogged(logType, message, exceptionClassname, null, 0);
   }
 
-  private static void assertExceptionLogged(int logType, String message, String exceptionClassname, String tag, int index) {
+  private static void assertExceptionLogged(int logType, String message, String exceptionClassname, String tag,
+                                            int index) {
     List<LogItem> logs = ShadowLog.getLogs();
     assertThat(logs).hasSize(index + 1);
     LogItem log = logs.get(index);","@@ -51,7 +51,7 @@ public class TimberTest {
       assertThat(e).hasMessage(""Cannot plant Timber into itself."");
     }
     try {
-      Timber.plant(new Timber.Tree[] { timber });
+      Timber.plant(new Timber.Tree[]{timber});
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(""Cannot plant Timber into itself."");
@@ -61,7 +61,7 @@ public class TimberTest {
   @Test public void treeCount() {
     // inserts trees and checks if the amount of returned trees matches.
     assertThat(Timber.treeCount()).isEqualTo(0);
-    for(int i= 1 ; i < 50 ; i++){
+    for (int i = 1; i < 50; i++) {
       Timber.plant(new Timber.DebugTree());
       assertThat(Timber.treeCount()).isEqualTo(i);
     }
@@ -89,7 +89,7 @@ public class TimberTest {
     } catch (NullPointerException e) {
       assertThat(e).hasMessage(""trees == null"");
     }
-    nullTrees = new Timber.Tree[] { null };
+    nullTrees = new Timber.Tree[]{null};
     try {
       Timber.plant(nullTrees);
       fail();
@@ -193,6 +193,31 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Test public void debugTreeGeneratedTagIsLoggable() {
+    Timber.plant(new Timber.DebugTree() {
+      private static final int MAX_TAG_LENGTH = 23;
+
+      @Override protected void log(int priority, String tag, String message, Throwable t) {
+        try {
+          assertThat(Log.isLoggable(tag, priority));
+          assertThat(tag.length() <= MAX_TAG_LENGTH);
+        } catch (IllegalArgumentException e) {
+          fail(e.getMessage());
+        }
+        super.log(priority, tag, message, t);
+      }
+    });
+    class ClassNameThatIsReallyReallyReallyLong {
+      {
+        Timber.d(""Hello, world!"");
+      }
+    }
+    new ClassNameThatIsReallyReallyReallyLong();
+    assertLog()
+        .hasDebugMessage(""TimberTest$1ClassNameTh"", ""Hello, world!"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void debugTreeCustomTag() {
     Timber.plant(new Timber.DebugTree());
     Timber.tag(""Custom"").d(""Hello, world!"");
@@ -433,7 +458,7 @@ public class TimberTest {
     Timber.plant(new Timber.DebugTree() {
       @Override
       protected String formatMessage(String message, Object[] args) {
-        return String.format(""Test formatting: ""+message, args);
+        return String.format(""Test formatting: "" + message, args);
       }
     });
     Timber.d(""Test message logged. %d"", 100);
@@ -452,7 +477,8 @@ public class TimberTest {
     assertExceptionLogged(logType, message, exceptionClassname, null, 0);
   }
 
-  private static void assertExceptionLogged(int logType, String message, String exceptionClassname, String tag, int index) {
+  private static void assertExceptionLogged(int logType, String message, String exceptionClassname, String tag,
+                                            int index) {
     List<LogItem> logs = ShadowLog.getLogs();
     assertThat(logs).hasSize(index + 1);
     LogItem log = logs.get(index);",False,test
CHANGELOG.md,CHANGELOG.md,65f586fa0c96b85d1af88a7d95601e10aba611e0,8c53bf58b6854444bb1703dd3bb908f0e70dc888,Prepare for version 4.5.0.,"@@ -1,6 +1,15 @@
 Change Log
 ==========
 
+Version 4.5.0 *(2017-01-09)*
+----------------------------
+
+ * New: Automatically truncate class name tags to Android's limit of 23 characters.
+ * New: Lint check for detecting null/empty messages or using the exception message when logging an
+   exception. Use the single-argument logging overloads instead.
+ * Fix: Correct NPE in lint check when using String.format.
+
+
 Version 4.4.0 *(2016-12-06)*
 ----------------------------","@@ -1,6 +1,15 @@
 Change Log
 ==========
 
+Version 4.5.0 *(2017-01-09)*
+----------------------------
+
+ * New: Automatically truncate class name tags to Android's limit of 23 characters.
+ * New: Lint check for detecting null/empty messages or using the exception message when logging an
+   exception. Use the single-argument logging overloads instead.
+ * Fix: Correct NPE in lint check when using String.format.
+
+
 Version 4.4.0 *(2016-12-06)*
 ----------------------------",False,other
README.md,README.md,65f586fa0c96b85d1af88a7d95601e10aba611e0,8c53bf58b6854444bb1703dd3bb908f0e70dc888,Prepare for version 4.5.0.,"@@ -71,12 +71,19 @@ Timber ships with embedded lint rules to detect problems in your app.
             Timber.d(""Hello "" + firstName + "" "" + lastName + ""!"");
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+  * **TimberExceptionLogging** (Warning) - Detects the use of null or empty messages, or using the exception message
+    when logging an exception.
+
+        Example.java:35: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+             Timber.d(e, e.getMessage());
+                         ~~~~~~~~~~~~~~
+
 
 Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.4.0'
+compile 'com.jakewharton.timber:timber:4.5.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -71,12 +71,19 @@ Timber ships with embedded lint rules to detect problems in your app.
             Timber.d(""Hello "" + firstName + "" "" + lastName + ""!"");
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+  * **TimberExceptionLogging** (Warning) - Detects the use of null or empty messages, or using the exception message
+    when logging an exception.
+
+        Example.java:35: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+             Timber.d(e, e.getMessage());
+                         ~~~~~~~~~~~~~~
+
 
 Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.4.0'
+compile 'com.jakewharton.timber:timber:4.5.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,65f586fa0c96b85d1af88a7d95601e10aba611e0,8c53bf58b6854444bb1703dd3bb908f0e70dc888,Prepare for version 4.5.0.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.4.1-SNAPSHOT
+VERSION_NAME=4.5.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.4.1-SNAPSHOT
+VERSION_NAME=4.5.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,68892254ea0315c9d34908cfa0ad01598d4ea65c,65f586fa0c96b85d1af88a7d95601e10aba611e0,Next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.5.0
+VERSION_NAME=4.5.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.5.0
+VERSION_NAME=4.5.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,44d05fcf98d9904c2de9fbc151b9006c7f19e0f3,68892254ea0315c9d34908cfa0ad01598d4ea65c,"Fix lint warning with dates

Date format token always start with a `t`/`T` and is followed by
a char that will specify the actual format [1].
Adding this will avoid false positive on dates.

[1] https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html","@@ -29,6 +29,8 @@ import com.intellij.psi.PsiReferenceExpression;
 import com.intellij.psi.PsiType;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Calendar;
+import java.util.Date;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -161,58 +163,112 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
             passedArgCount));
       }
 
+      Class type = getType(argument);
+      if (type == null) {
+        continue;
+      }
+
       char last = formatType.charAt(formatType.length() - 1);
       if (formatType.length() >= 2
           && Character.toLowerCase(formatType.charAt(formatType.length() - 2)) == 't') {
         // Date time conversion.
-        // TODO
-        continue;
-      }
-      Class type = getType(argument);
-      if (type != null) {
-        switch (last) {
-          case 'b':
+        switch(last) {
+          // time
+          case 'H':
+          case 'I':
+          case 'k':
+          case 'l':
+          case 'M':
+          case 'S':
+          case 'L':
+          case 'N':
+          case 'p':
+          case 'z':
+          case 'Z':
+          case 's':
+          case 'Q':
+            // date
           case 'B':
-            valid = type == Boolean.TYPE;
-            break;
-          case 'x':
-          case 'X':
+          case 'b':
+          case 'h':
+          case 'A':
+          case 'a':
+          case 'C':
+          case 'Y':
+          case 'y':
+          case 'j':
+          case 'm':
           case 'd':
-          case 'o':
           case 'e':
-          case 'E':
-          case 'f':
-          case 'g':
-          case 'G':
-          case 'a':
-          case 'A':
-            valid = type == Integer.TYPE
-                || type == Float.TYPE
-                || type == Double.TYPE
-                || type == Long.TYPE
-                || type == Byte.TYPE
-                || type == Short.TYPE;
-            break;
+            // date/time
+          case 'R':
+          case 'T':
+          case 'r':
+          case 'D':
+          case 'F':
           case 'c':
-          case 'C':
-            valid = type == Character.TYPE;
-            break;
-          case 'h':
-          case 'H':
-            valid = type != Boolean.TYPE && !Number.class.isAssignableFrom(type);
+            valid = type == Integer.TYPE
+                    || type == Calendar.class
+                    || type == Date.class;
+            if (!valid) {
+              String message = String.format(""Wrong argument type for date formatting argument '#%1$d' ""
+                              + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                              + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
+                      type.getSimpleName(), startIndexOfArguments + i + 1);
+              context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
+            }
             break;
-          case 's':
-          case 'S':
           default:
-            valid = true;
-        }
-        if (!valid) {
-          String message = String.format(""Wrong argument type for formatting argument '#%1$d' ""
-                  + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                  + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-              type.getSimpleName(), startIndexOfArguments + i + 1);
-          context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
+            String message = String.format(""Wrong suffix for date format '#%1$d' ""
+                            + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                            + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
+                    type.getSimpleName(), startIndexOfArguments + i + 1);
+            context.report(ISSUE_FORMAT, call, context.getLocation(argument), message);
         }
+        continue;
+      }
+      switch (last) {
+        case 'b':
+        case 'B':
+          valid = type == Boolean.TYPE;
+          break;
+        case 'x':
+        case 'X':
+        case 'd':
+        case 'o':
+        case 'e':
+        case 'E':
+        case 'f':
+        case 'g':
+        case 'G':
+        case 'a':
+        case 'A':
+          valid = type == Integer.TYPE
+              || type == Float.TYPE
+              || type == Double.TYPE
+              || type == Long.TYPE
+              || type == Byte.TYPE
+              || type == Short.TYPE;
+          break;
+        case 'c':
+        case 'C':
+          valid = type == Character.TYPE;
+          break;
+        case 'h':
+        case 'H':
+          valid = type != Boolean.TYPE && !Number.class.isAssignableFrom(type);
+          break;
+        case 's':
+        case 'S':
+        default:
+          valid = true;
+      }
+      if (!valid) {
+        String message = String.format(""Wrong argument type for formatting argument '#%1$d' ""
+                + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
+            type.getSimpleName(), startIndexOfArguments + i + 1);
+        context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
       }
     }
   }
@@ -306,6 +362,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return Byte.TYPE;
     } else if (typeClassName.equals(TYPE_SHORT)) {
       return Short.TYPE;
+    } else if (""Date"".equals(typeClassName) || ""java.util.Date"".equals(typeClassName)) {
+      return Date.class;
+    } else if (""Calendar"".equals(typeClassName) || ""java.util.Calendar"".equals(typeClassName)) {
+      return Calendar.class;
     } else {
       return null;
     }
@@ -346,7 +406,12 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         if (""%%"".equals(str) || ""%n"".equals(str)) {
           continue;
         }
-        types.add(matcher.group(6));
+        String time = matcher.group(5);
+        if (""t"".equalsIgnoreCase(time)) {
+          types.add(time + matcher.group(6));
+        } else {
+          types.add(matcher.group(6));
+        }
       } else {
         break;
       }","@@ -29,6 +29,8 @@ import com.intellij.psi.PsiReferenceExpression;
 import com.intellij.psi.PsiType;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Calendar;
+import java.util.Date;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -161,58 +163,112 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
             passedArgCount));
       }
 
+      Class type = getType(argument);
+      if (type == null) {
+        continue;
+      }
+
       char last = formatType.charAt(formatType.length() - 1);
       if (formatType.length() >= 2
           && Character.toLowerCase(formatType.charAt(formatType.length() - 2)) == 't') {
         // Date time conversion.
-        // TODO
-        continue;
-      }
-      Class type = getType(argument);
-      if (type != null) {
-        switch (last) {
-          case 'b':
+        switch(last) {
+          // time
+          case 'H':
+          case 'I':
+          case 'k':
+          case 'l':
+          case 'M':
+          case 'S':
+          case 'L':
+          case 'N':
+          case 'p':
+          case 'z':
+          case 'Z':
+          case 's':
+          case 'Q':
+            // date
           case 'B':
-            valid = type == Boolean.TYPE;
-            break;
-          case 'x':
-          case 'X':
+          case 'b':
+          case 'h':
+          case 'A':
+          case 'a':
+          case 'C':
+          case 'Y':
+          case 'y':
+          case 'j':
+          case 'm':
           case 'd':
-          case 'o':
           case 'e':
-          case 'E':
-          case 'f':
-          case 'g':
-          case 'G':
-          case 'a':
-          case 'A':
-            valid = type == Integer.TYPE
-                || type == Float.TYPE
-                || type == Double.TYPE
-                || type == Long.TYPE
-                || type == Byte.TYPE
-                || type == Short.TYPE;
-            break;
+            // date/time
+          case 'R':
+          case 'T':
+          case 'r':
+          case 'D':
+          case 'F':
           case 'c':
-          case 'C':
-            valid = type == Character.TYPE;
-            break;
-          case 'h':
-          case 'H':
-            valid = type != Boolean.TYPE && !Number.class.isAssignableFrom(type);
+            valid = type == Integer.TYPE
+                    || type == Calendar.class
+                    || type == Date.class;
+            if (!valid) {
+              String message = String.format(""Wrong argument type for date formatting argument '#%1$d' ""
+                              + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                              + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
+                      type.getSimpleName(), startIndexOfArguments + i + 1);
+              context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
+            }
             break;
-          case 's':
-          case 'S':
           default:
-            valid = true;
-        }
-        if (!valid) {
-          String message = String.format(""Wrong argument type for formatting argument '#%1$d' ""
-                  + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                  + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-              type.getSimpleName(), startIndexOfArguments + i + 1);
-          context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
+            String message = String.format(""Wrong suffix for date format '#%1$d' ""
+                            + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                            + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
+                    type.getSimpleName(), startIndexOfArguments + i + 1);
+            context.report(ISSUE_FORMAT, call, context.getLocation(argument), message);
         }
+        continue;
+      }
+      switch (last) {
+        case 'b':
+        case 'B':
+          valid = type == Boolean.TYPE;
+          break;
+        case 'x':
+        case 'X':
+        case 'd':
+        case 'o':
+        case 'e':
+        case 'E':
+        case 'f':
+        case 'g':
+        case 'G':
+        case 'a':
+        case 'A':
+          valid = type == Integer.TYPE
+              || type == Float.TYPE
+              || type == Double.TYPE
+              || type == Long.TYPE
+              || type == Byte.TYPE
+              || type == Short.TYPE;
+          break;
+        case 'c':
+        case 'C':
+          valid = type == Character.TYPE;
+          break;
+        case 'h':
+        case 'H':
+          valid = type != Boolean.TYPE && !Number.class.isAssignableFrom(type);
+          break;
+        case 's':
+        case 'S':
+        default:
+          valid = true;
+      }
+      if (!valid) {
+        String message = String.format(""Wrong argument type for formatting argument '#%1$d' ""
+                + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
+            type.getSimpleName(), startIndexOfArguments + i + 1);
+        context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
       }
     }
   }
@@ -306,6 +362,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return Byte.TYPE;
     } else if (typeClassName.equals(TYPE_SHORT)) {
       return Short.TYPE;
+    } else if (""Date"".equals(typeClassName) || ""java.util.Date"".equals(typeClassName)) {
+      return Date.class;
+    } else if (""Calendar"".equals(typeClassName) || ""java.util.Calendar"".equals(typeClassName)) {
+      return Calendar.class;
     } else {
       return null;
     }
@@ -346,7 +406,12 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         if (""%%"".equals(str) || ""%n"".equals(str)) {
           continue;
         }
-        types.add(matcher.group(6));
+        String time = matcher.group(5);
+        if (""t"".equalsIgnoreCase(time)) {
+          types.add(time + matcher.group(6));
+        } else {
+          types.add(matcher.group(6));
+        }
       } else {
         break;
       }",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,44d05fcf98d9904c2de9fbc151b9006c7f19e0f3,68892254ea0315c9d34908cfa0ad01598d4ea65c,"Fix lint warning with dates

Date format token always start with a `t`/`T` and is followed by
a char that will specify the actual format [1].
Adding this will avoid false positive on dates.

[1] https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html","@@ -330,6 +330,18 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
     assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
   }
 
+  public void testDateFormatNotDisplayingWarning() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""    Timber.d(\""%tc\"", new java.util.Date());\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  }
+
   @Override protected Detector getDetector() {
     return new WrongTimberUsageDetector();
   }","@@ -330,6 +330,18 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
     assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
   }
 
+  public void testDateFormatNotDisplayingWarning() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""    Timber.d(\""%tc\"", new java.util.Date());\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  }
+
   @Override protected Detector getDetector() {
     return new WrongTimberUsageDetector();
   }",False,test
CHANGELOG.md,CHANGELOG.md,e1e9f5b890d093a6f811885c82617a6b2599597f,c436db21ff8156ff4f0a30cb0021f370cfa1a7e0,Prepare version 4.5.1.,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 4.5.1 *(2017-01-20)*
+----------------------------
+
+ Fix: String formatting lint check now correctly works with dates.
+
+
 Version 4.5.0 *(2017-01-09)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 4.5.1 *(2017-01-20)*
+----------------------------
+
+ Fix: String formatting lint check now correctly works with dates.
+
+
 Version 4.5.0 *(2017-01-09)*
 ----------------------------",False,other
README.md,README.md,e1e9f5b890d093a6f811885c82617a6b2599597f,c436db21ff8156ff4f0a30cb0021f370cfa1a7e0,Prepare version 4.5.1.,"@@ -83,7 +83,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.5.0'
+compile 'com.jakewharton.timber:timber:4.5.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -83,7 +83,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.5.0'
+compile 'com.jakewharton.timber:timber:4.5.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,e1e9f5b890d093a6f811885c82617a6b2599597f,c436db21ff8156ff4f0a30cb0021f370cfa1a7e0,Prepare version 4.5.1.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.5.1-SNAPSHOT
+VERSION_NAME=4.5.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.5.1-SNAPSHOT
+VERSION_NAME=4.5.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,65f1e5cc4b56d976902abf6728557d33bd65b923,e1e9f5b890d093a6f811885c82617a6b2599597f,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.5.1
+VERSION_NAME=4.5.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.5.1
+VERSION_NAME=4.5.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,915a1c65179451205a3c87000760e92d9901ba4b,65f1e5cc4b56d976902abf6728557d33bd65b923,Handle wrapped boolean in lint,"@@ -355,6 +355,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       } else if (""java.lang.Float"".equals(typeClassName) || ""java.lang.Double"".equals(
           typeClassName)) {
         return Float.TYPE;
+      } else if (""java.lang.Boolean"".equals(typeClassName)) {
+        return Boolean.TYPE;
       } else {
         return null;
       }","@@ -355,6 +355,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       } else if (""java.lang.Float"".equals(typeClassName) || ""java.lang.Double"".equals(
           typeClassName)) {
         return Float.TYPE;
+      } else if (""java.lang.Boolean"".equals(typeClassName)) {
+        return Boolean.TYPE;
       } else {
         return null;
       }",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,915a1c65179451205a3c87000760e92d9901ba4b,65f1e5cc4b56d976902abf6728557d33bd65b923,Handle wrapped boolean in lint,"@@ -342,6 +342,18 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
     assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
   }
 
+  public void testWrappedBooleanType() throws Exception {
+    @Language(""JAVA"") String source = """"
+            + ""package foo;\n""
+            + ""import timber.log.Timber;\n""
+            + ""public class Example {\n""
+            + ""  public void log() {\n""
+            + ""     Timber.d(\""%b\"", Boolean.valueOf(true));\n""
+            + ""  }\n""
+            + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  }
+
   @Override protected Detector getDetector() {
     return new WrongTimberUsageDetector();
   }","@@ -342,6 +342,18 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
     assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
   }
 
+  public void testWrappedBooleanType() throws Exception {
+    @Language(""JAVA"") String source = """"
+            + ""package foo;\n""
+            + ""import timber.log.Timber;\n""
+            + ""public class Example {\n""
+            + ""  public void log() {\n""
+            + ""     Timber.d(\""%b\"", Boolean.valueOf(true));\n""
+            + ""  }\n""
+            + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  }
+
   @Override protected Detector getDetector() {
     return new WrongTimberUsageDetector();
   }",False,test
build.gradle,build.gradle,5118df4e1030261c22f15d4f6ed01602d6a92ab2,ebac543c0455df41d614780bfa0afcf90ce60bc9,Bump lint tools to 25.3.0,"@@ -21,7 +21,7 @@ ext {
   buildToolsVersion = '25.0.1'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
-  lintVersion = '25.2.0'
+  lintVersion = '25.3.0'
 }
 
 ext.deps = [","@@ -21,7 +21,7 @@ ext {
   buildToolsVersion = '25.0.1'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
-  lintVersion = '25.2.0'
+  lintVersion = '25.3.0'
 }
 
 ext.deps = [",False,other
README.md,README.md,5e43d4a79dc3f430ae32584d4a3571d190f81aaa,7596e8740dab8a0f9b691dfe27e89ff976db7760,Fix indention of TimberExceptionLogging in README.,"@@ -71,7 +71,7 @@ Timber ships with embedded lint rules to detect problems in your app.
             Timber.d(""Hello "" + firstName + "" "" + lastName + ""!"");
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-  * **TimberExceptionLogging** (Warning) - Detects the use of null or empty messages, or using the exception message
+ *  **TimberExceptionLogging** (Warning) - Detects the use of null or empty messages, or using the exception message
     when logging an exception.
 
         Example.java:35: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]","@@ -71,7 +71,7 @@ Timber ships with embedded lint rules to detect problems in your app.
             Timber.d(""Hello "" + firstName + "" "" + lastName + ""!"");
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-  * **TimberExceptionLogging** (Warning) - Detects the use of null or empty messages, or using the exception message
+ *  **TimberExceptionLogging** (Warning) - Detects the use of null or empty messages, or using the exception message
     when logging an exception.
 
         Example.java:35: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]",False,readme
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,2ac6745e87b3abe3111ffdb1cd1b71ae124bfc98,df0f0be801754fe7de7f10221087cace59b8a578,"Fix lint warning on d(ex, msg)","@@ -452,6 +452,33 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return null;
   }
 
+  private static boolean isLiteralValueEmpty(PsiExpression argument) {
+    if (argument instanceof PsiLiteralExpression) {
+      PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument;
+      Object value = literalExpression.getValue();
+      return value == null || """".equals(value);
+    } else if (argument instanceof PsiBinaryExpression) {
+      PsiBinaryExpression binaryExpression = (PsiBinaryExpression) argument;
+      if (binaryExpression.getOperationTokenType() == JavaTokenType.PLUS) {
+        String left = findLiteralValue(binaryExpression.getLOperand());
+        String right = findLiteralValue(binaryExpression.getROperand());
+        if (left == null && right == null) {
+          return true;
+        }
+      }
+    } else if (argument instanceof PsiReferenceExpression) {
+      PsiReferenceExpression referenceExpression = (PsiReferenceExpression) argument;
+      PsiElement resolved = referenceExpression.resolve();
+      if (resolved instanceof PsiField) {
+        PsiField field = (PsiField) resolved;
+        Object value = field.computeConstantValue();
+        return value == null || """".equals(value);
+      }
+    }
+
+    return false;
+  }
+
   private static int getFormatArgumentCount(@NonNull String s) {
     Matcher matcher = StringFormatDetector.FORMAT.matcher(s);
     int index = 0;
@@ -521,7 +548,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
       if (isFirstParameterThrowable) {
         PsiExpression secondArgument = arguments[1];
-        String message = findLiteralValue(secondArgument);
+        boolean isMessageEmpty = isLiteralValueEmpty(secondArgument);
 
         boolean callsGetMessage = false;
 
@@ -533,7 +560,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         if (callsGetMessage) {
           context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
               ""Explicitly logging exception message is redundant"");
-        } else if (message == null || """".equals(message)) {
+        } else if (isMessageEmpty) {
           context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
               ""Use single-argument log method instead of null/empty message"");
         }","@@ -452,6 +452,33 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return null;
   }
 
+  private static boolean isLiteralValueEmpty(PsiExpression argument) {
+    if (argument instanceof PsiLiteralExpression) {
+      PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument;
+      Object value = literalExpression.getValue();
+      return value == null || """".equals(value);
+    } else if (argument instanceof PsiBinaryExpression) {
+      PsiBinaryExpression binaryExpression = (PsiBinaryExpression) argument;
+      if (binaryExpression.getOperationTokenType() == JavaTokenType.PLUS) {
+        String left = findLiteralValue(binaryExpression.getLOperand());
+        String right = findLiteralValue(binaryExpression.getROperand());
+        if (left == null && right == null) {
+          return true;
+        }
+      }
+    } else if (argument instanceof PsiReferenceExpression) {
+      PsiReferenceExpression referenceExpression = (PsiReferenceExpression) argument;
+      PsiElement resolved = referenceExpression.resolve();
+      if (resolved instanceof PsiField) {
+        PsiField field = (PsiField) resolved;
+        Object value = field.computeConstantValue();
+        return value == null || """".equals(value);
+      }
+    }
+
+    return false;
+  }
+
   private static int getFormatArgumentCount(@NonNull String s) {
     Matcher matcher = StringFormatDetector.FORMAT.matcher(s);
     int index = 0;
@@ -521,7 +548,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
       if (isFirstParameterThrowable) {
         PsiExpression secondArgument = arguments[1];
-        String message = findLiteralValue(secondArgument);
+        boolean isMessageEmpty = isLiteralValueEmpty(secondArgument);
 
         boolean callsGetMessage = false;
 
@@ -533,7 +560,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         if (callsGetMessage) {
           context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
               ""Explicitly logging exception message is redundant"");
-        } else if (message == null || """".equals(message)) {
+        } else if (isMessageEmpty) {
           context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
               ""Use single-argument log method instead of null/empty message"");
         }",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,2ac6745e87b3abe3111ffdb1cd1b71ae124bfc98,df0f0be801754fe7de7f10221087cace59b8a578,"Fix lint warning on d(ex, msg)","@@ -283,6 +283,20 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
         + ""0 errors, 1 warnings\n"");
   }
 
+  public void testExceptionLoggingUsingVariable() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     String msg = \""Hello\"";\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(e, msg);\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  }
+
   public void testExceptionLoggingUsingEmptyStringMessage() throws Exception {
     @Language(""JAVA"") String source = """"
         + ""package foo;\n""","@@ -283,6 +283,20 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
         + ""0 errors, 1 warnings\n"");
   }
 
+  public void testExceptionLoggingUsingVariable() throws Exception {
+    @Language(""JAVA"") String source = """"
+        + ""package foo;\n""
+        + ""import timber.log.Timber;\n""
+        + ""public class Example {\n""
+        + ""  public void log() {\n""
+        + ""     String msg = \""Hello\"";\n""
+        + ""     Exception e = new Exception();\n""
+        + ""     Timber.d(e, msg);\n""
+        + ""  }\n""
+        + ""}"";
+    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  }
+
   public void testExceptionLoggingUsingEmptyStringMessage() throws Exception {
     @Language(""JAVA"") String source = """"
         + ""package foo;\n""",False,test
.travis.yml,.travis.yml,ca90800caf774e2a621f54b243da8950f8189d9f,2ac6745e87b3abe3111ffdb1cd1b71ae124bfc98,"Bump deps; tidying up (#233)

* Add gradle-versions-plugin; bump some dependencies

* Increase Gradle daemon heap to run dex in process

* Shut up Lint

* Bump to Gradle 3.3, AGP 2.3.3, SDK 26, Build Tools 26.0.1","@@ -4,8 +4,10 @@ android:
   components:
     - tools
     - platform-tools
-    - build-tools-25.0.1
-    - android-25
+
+before_install:
+  - mkdir ""$ANDROID_HOME/licenses"" || true
+  - echo ""8933bad161af4178b1185d1a37fbf41ea5269c55"" > ""$ANDROID_HOME/licenses/android-sdk-license""
 
 jdk:
   - oraclejdk8","@@ -4,8 +4,10 @@ android:
   components:
     - tools
     - platform-tools
-    - build-tools-25.0.1
-    - android-25
+
+before_install:
+  - mkdir ""$ANDROID_HOME/licenses"" || true
+  - echo ""8933bad161af4178b1185d1a37fbf41ea5269c55"" > ""$ANDROID_HOME/licenses/android-sdk-license""
 
 jdk:
   - oraclejdk8",False,other
build.gradle,build.gradle,ca90800caf774e2a621f54b243da8950f8189d9f,2ac6745e87b3abe3111ffdb1cd1b71ae124bfc98,"Bump deps; tidying up (#233)

* Add gradle-versions-plugin; bump some dependencies

* Increase Gradle daemon heap to run dex in process

* Shut up Lint

* Bump to Gradle 3.3, AGP 2.3.3, SDK 26, Build Tools 26.0.1","@@ -1,9 +1,12 @@
+apply plugin: 'com.github.ben-manes.versions'
+
 buildscript {
   repositories {
     jcenter()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.2.3'
+    classpath 'com.android.tools.build:gradle:2.3.3'
+    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
   }
 }
 
@@ -16,9 +19,9 @@ allprojects {
 
 ext {
   minSdkVersion = 9
-  targetSdkVersion = 25
-  compileSdkVersion = 25
-  buildToolsVersion = '25.0.1'
+  targetSdkVersion = 26
+  compileSdkVersion = 26
+  buildToolsVersion = '26.0.1'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
   lintVersion = '25.3.0'
@@ -28,7 +31,7 @@ ext.deps = [
     // Test dependencies
     junit      : 'junit:junit:4.12',
     festassert : 'org.easytesting:fest-assert-core:2.0M10',
-    festandroid: 'com.squareup:fest-android:1.0.7',
+    festandroid: 'com.squareup:fest-android:1.0.8',
     mockitocore: 'org.mockito:mockito-core:1.9.5',
     robolectric: 'org.robolectric:robolectric:3.0',","@@ -1,9 +1,12 @@
+apply plugin: 'com.github.ben-manes.versions'
+
 buildscript {
   repositories {
     jcenter()
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.2.3'
+    classpath 'com.android.tools.build:gradle:2.3.3'
+    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
   }
 }
 
@@ -16,9 +19,9 @@ allprojects {
 
 ext {
   minSdkVersion = 9
-  targetSdkVersion = 25
-  compileSdkVersion = 25
-  buildToolsVersion = '25.0.1'
+  targetSdkVersion = 26
+  compileSdkVersion = 26
+  buildToolsVersion = '26.0.1'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
   lintVersion = '25.3.0'
@@ -28,7 +31,7 @@ ext.deps = [
     // Test dependencies
     junit      : 'junit:junit:4.12',
     festassert : 'org.easytesting:fest-assert-core:2.0M10',
-    festandroid: 'com.squareup:fest-android:1.0.7',
+    festandroid: 'com.squareup:fest-android:1.0.8',
     mockitocore: 'org.mockito:mockito-core:1.9.5',
     robolectric: 'org.robolectric:robolectric:3.0',",False,other
gradle.properties,gradle.properties,ca90800caf774e2a621f54b243da8950f8189d9f,2ac6745e87b3abe3111ffdb1cd1b71ae124bfc98,"Bump deps; tidying up (#233)

* Add gradle-versions-plugin; bump some dependencies

* Increase Gradle daemon heap to run dex in process

* Shut up Lint

* Bump to Gradle 3.3, AGP 2.3.3, SDK 26, Build Tools 26.0.1","@@ -14,3 +14,5 @@ POM_LICENCE_DIST=repo
 
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
+
+org.gradle.jvmargs=-Xmx1536M
\ No newline at end of file","@@ -14,3 +14,5 @@ POM_LICENCE_DIST=repo
 
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
+
+org.gradle.jvmargs=-Xmx1536M
\ No newline at end of file",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,ca90800caf774e2a621f54b243da8950f8189d9f,2ac6745e87b3abe3111ffdb1cd1b71ae124bfc98,"Bump deps; tidying up (#233)

* Add gradle-versions-plugin; bump some dependencies

* Increase Gradle daemon heap to run dex in process

* Shut up Lint

* Bump to Gradle 3.3, AGP 2.3.3, SDK 26, Build Tools 26.0.1","@@ -1,6 +1,6 @@
-#Tue Dec 20 11:28:45 CET 2016
+#Tue Jul 25 03:01:36 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.2.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-bin.zip","@@ -1,6 +1,6 @@
-#Tue Dec 20 11:28:45 CET 2016
+#Tue Jul 25 03:01:36 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.2.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-bin.zip",False,other
timber-sample/build.gradle,timber-sample/build.gradle,ca90800caf774e2a621f54b243da8950f8189d9f,2ac6745e87b3abe3111ffdb1cd1b71ae124bfc98,"Bump deps; tidying up (#233)

* Add gradle-versions-plugin; bump some dependencies

* Increase Gradle daemon heap to run dex in process

* Shut up Lint

* Bump to Gradle 3.3, AGP 2.3.3, SDK 26, Build Tools 26.0.1","@@ -26,5 +26,6 @@ android {
 
 dependencies {
   compile project(':timber')
-  compile 'com.jakewharton:butterknife:7.0.1'
+  compile 'com.jakewharton:butterknife:8.7.0'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
 }","@@ -26,5 +26,6 @@ android {
 
 dependencies {
   compile project(':timber')
-  compile 'com.jakewharton:butterknife:7.0.1'
+  compile 'com.jakewharton:butterknife:8.7.0'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
 }",False,other
timber-sample/src/main/AndroidManifest.xml,timber-sample/src/main/AndroidManifest.xml,ca90800caf774e2a621f54b243da8950f8189d9f,2ac6745e87b3abe3111ffdb1cd1b71ae124bfc98,"Bump deps; tidying up (#233)

* Add gradle-versions-plugin; bump some dependencies

* Increase Gradle daemon heap to run dex in process

* Shut up Lint

* Bump to Gradle 3.3, AGP 2.3.3, SDK 26, Build Tools 26.0.1","@@ -1,11 +1,14 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
 
 <manifest xmlns:android=""http://schemas.android.com/apk/res/android""
+    xmlns:tools=""http://schemas.android.com/tools""
     package=""com.example.timber"">
 
   <application
+      android:allowBackup=""false""
       android:label=""@string/app_name""
-      android:name="".ExampleApp"">
+      android:name="".ExampleApp""
+      tools:ignore=""GoogleAppIndexingWarning,MissingApplicationIcon"">
     <activity
         android:label=""@string/app_name""
         android:name="".ui.DemoActivity"">","@@ -1,11 +1,14 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
 
 <manifest xmlns:android=""http://schemas.android.com/apk/res/android""
+    xmlns:tools=""http://schemas.android.com/tools""
     package=""com.example.timber"">
 
   <application
+      android:allowBackup=""false""
       android:label=""@string/app_name""
-      android:name="".ExampleApp"">
+      android:name="".ExampleApp""
+      tools:ignore=""GoogleAppIndexingWarning,MissingApplicationIcon"">
     <activity
         android:label=""@string/app_name""
         android:name="".ui.DemoActivity"">",False,source
timber/build.gradle,timber/build.gradle,ca90800caf774e2a621f54b243da8950f8189d9f,2ac6745e87b3abe3111ffdb1cd1b71ae124bfc98,"Bump deps; tidying up (#233)

* Add gradle-versions-plugin; bump some dependencies

* Increase Gradle daemon heap to run dex in process

* Shut up Lint

* Bump to Gradle 3.3, AGP 2.3.3, SDK 26, Build Tools 26.0.1","@@ -37,7 +37,7 @@ configurations {
 }
 
 dependencies {
-  provided 'org.jetbrains:annotations:13.0'
+  provided 'org.jetbrains:annotations:15.0'
 
   testCompile deps.festandroid
   testCompile deps.festassert","@@ -37,7 +37,7 @@ configurations {
 }
 
 dependencies {
-  provided 'org.jetbrains:annotations:13.0'
+  provided 'org.jetbrains:annotations:15.0'
 
   testCompile deps.festandroid
   testCompile deps.festassert",False,other
build.gradle,build.gradle,72c8dbc5b12d28de04ebe60cb44c58d642d836c9,ca90800caf774e2a621f54b243da8950f8189d9f,Replace custom lint config with plugin (#235),"@@ -3,10 +3,14 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   repositories {
     jcenter()
+    maven {
+      url 'https://plugins.gradle.org/m2/'
+    }
   }
   dependencies {
     classpath 'com.android.tools.build:gradle:2.3.3'
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
+    classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
   }
 }","@@ -3,10 +3,14 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   repositories {
     jcenter()
+    maven {
+      url 'https://plugins.gradle.org/m2/'
+    }
   }
   dependencies {
     classpath 'com.android.tools.build:gradle:2.3.3'
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
+    classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
   }
 }",False,other
timber-lint/build.gradle,timber-lint/build.gradle,72c8dbc5b12d28de04ebe60cb44c58d642d836c9,ca90800caf774e2a621f54b243da8950f8189d9f,Replace custom lint config with plugin (#235),"@@ -3,18 +3,12 @@ apply plugin: 'java'
 targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7
 
-configurations {
-  lintChecks
-}
-
 dependencies {
   compile deps.lintapi
   compile deps.lintchecks
   testCompile deps.lint
   testCompile deps.linttests
   testCompile deps.festassert
-
-  lintChecks files(jar)
 }
 
 jar {","@@ -3,18 +3,12 @@ apply plugin: 'java'
 targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7
 
-configurations {
-  lintChecks
-}
-
 dependencies {
   compile deps.lintapi
   compile deps.lintchecks
   testCompile deps.lint
   testCompile deps.linttests
   testCompile deps.festassert
-
-  lintChecks files(jar)
 }
 
 jar {",False,other
timber/build.gradle,timber/build.gradle,72c8dbc5b12d28de04ebe60cb44c58d642d836c9,ca90800caf774e2a621f54b243da8950f8189d9f,Replace custom lint config with plugin (#235),"@@ -1,4 +1,5 @@
 apply plugin: 'com.android.library'
+apply plugin: 'com.kageiit.lintrules'
 apply plugin: 'checkstyle'
 
 task checkstyle(type: Checkstyle) {
@@ -32,10 +33,6 @@ android {
   }
 }
 
-configurations {
-  lintChecks
-}
-
 dependencies {
   provided 'org.jetbrains:annotations:15.0'
 
@@ -44,19 +41,7 @@ dependencies {
   testCompile deps.junit
   testCompile deps.robolectric
 
-  lintChecks project(path: ':timber-lint', configuration: 'lintChecks')
-}
-
-task copyLintJar(type: Copy) {
-  from(configurations.lintChecks) {
-    rename { 'lint.jar' }
-  }
-  into 'build/intermediates/lint/'
-}
-
-project.afterEvaluate {
-  def compileLintTask = project.tasks.find { it.name == 'compileLint' }
-  compileLintTask.dependsOn(copyLintJar)
+  lintRules project(':timber-lint')
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -1,4 +1,5 @@
 apply plugin: 'com.android.library'
+apply plugin: 'com.kageiit.lintrules'
 apply plugin: 'checkstyle'
 
 task checkstyle(type: Checkstyle) {
@@ -32,10 +33,6 @@ android {
   }
 }
 
-configurations {
-  lintChecks
-}
-
 dependencies {
   provided 'org.jetbrains:annotations:15.0'
 
@@ -44,19 +41,7 @@ dependencies {
   testCompile deps.junit
   testCompile deps.robolectric
 
-  lintChecks project(path: ':timber-lint', configuration: 'lintChecks')
-}
-
-task copyLintJar(type: Copy) {
-  from(configurations.lintChecks) {
-    rename { 'lint.jar' }
-  }
-  into 'build/intermediates/lint/'
-}
-
-project.afterEvaluate {
-  def compileLintTask = project.tasks.find { it.name == 'compileLint' }
-  compileLintTask.dependsOn(copyLintJar)
+  lintRules project(':timber-lint')
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,c8879320cb874add1437568336574a4b7d0e88e0,72c8dbc5b12d28de04ebe60cb44c58d642d836c9,"Bump to Gradle 3.4-rc-1

Unit tests are updated because the created exceptions now have a longer
stack trace due to https://github.com/gradle/gradle/commit/23920dc74bed318ad5238dcd30f3349a606001a3.
The longer trace passes the Timber.MAX_LOG_LENGTH threshold and is
split into lines ultimately failing assertions over log size.","@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.4-rc-1-bin.zip","@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.4-rc-1-bin.zip",False,other
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,c8879320cb874add1437568336574a4b7d0e88e0,72c8dbc5b12d28de04ebe60cb44c58d642d836c9,"Bump to Gradle 3.4-rc-1

Unit tests are updated because the created exceptions now have a longer
stack trace due to https://github.com/gradle/gradle/commit/23920dc74bed318ad5238dcd30f3349a606001a3.
The longer trace passes the Timber.MAX_LOG_LENGTH threshold and is
split into lines ultimately failing assertions over log size.","@@ -229,7 +229,7 @@ public class TimberTest {
 
   @Test public void messageWithException() {
     Timber.plant(new Timber.DebugTree());
-    NullPointerException datThrowable = new NullPointerException();
+    NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
     Timber.e(datThrowable, ""OMFG!"");
 
     assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
@@ -238,50 +238,50 @@ public class TimberTest {
   @Test public void exceptionOnly() {
     Timber.plant(new Timber.DebugTree());
 
-    Timber.v(new IllegalArgumentException());
+    Timber.v(truncatedThrowable(IllegalArgumentException.class));
     assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""TimberTest"", 0);
 
-    Timber.i(new NullPointerException());
+    Timber.i(truncatedThrowable(NullPointerException.class));
     assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""TimberTest"", 1);
 
-    Timber.d(new UnsupportedOperationException());
+    Timber.d(truncatedThrowable(UnsupportedOperationException.class));
     assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""TimberTest"", 2);
 
-    Timber.w(new UnknownHostException());
+    Timber.w(truncatedThrowable(UnknownHostException.class));
     assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""TimberTest"", 3);
 
-    Timber.e(new ConnectException());
+    Timber.e(truncatedThrowable(ConnectException.class));
     assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""TimberTest"", 4);
 
-    Timber.wtf(new AssertionError());
+    Timber.wtf(truncatedThrowable(AssertionError.class));
     assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""TimberTest"", 5);
   }
 
   @Test public void exceptionOnlyCustomTag() {
     Timber.plant(new Timber.DebugTree());
 
-    Timber.tag(""Custom"").v(new IllegalArgumentException());
+    Timber.tag(""Custom"").v(truncatedThrowable(IllegalArgumentException.class));
     assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""Custom"", 0);
 
-    Timber.tag(""Custom"").i(new NullPointerException());
+    Timber.tag(""Custom"").i(truncatedThrowable(NullPointerException.class));
     assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""Custom"", 1);
 
-    Timber.tag(""Custom"").d(new UnsupportedOperationException());
+    Timber.tag(""Custom"").d(truncatedThrowable(UnsupportedOperationException.class));
     assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""Custom"", 2);
 
-    Timber.tag(""Custom"").w(new UnknownHostException());
+    Timber.tag(""Custom"").w(truncatedThrowable(UnknownHostException.class));
     assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""Custom"", 3);
 
-    Timber.tag(""Custom"").e(new ConnectException());
+    Timber.tag(""Custom"").e(truncatedThrowable(ConnectException.class));
     assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""Custom"", 4);
 
-    Timber.tag(""Custom"").wtf(new AssertionError());
+    Timber.tag(""Custom"").wtf(truncatedThrowable(AssertionError.class));
     assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""Custom"", 5);
   }
 
   @Test public void exceptionFromSpawnedThread() throws InterruptedException {
     Timber.plant(new Timber.DebugTree());
-    final NullPointerException datThrowable = new NullPointerException();
+    final NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
     final CountDownLatch latch = new CountDownLatch(1);
     new Thread() {
       @Override public void run() {
@@ -295,7 +295,7 @@ public class TimberTest {
 
   @Test public void nullMessageWithThrowable() {
     Timber.plant(new Timber.DebugTree());
-    final NullPointerException datThrowable = new NullPointerException();
+    NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
     Timber.e(datThrowable, null);
 
     assertExceptionLogged(Log.ERROR, """", ""java.lang.NullPointerException"");
@@ -434,7 +434,7 @@ public class TimberTest {
 
   @Test public void logsUnknownHostExceptions() {
     Timber.plant(new Timber.DebugTree());
-    Timber.e(new UnknownHostException(), null);
+    Timber.e(truncatedThrowable(UnknownHostException.class), null);
 
     assertExceptionLogged(Log.ERROR, """", ""UnknownHostException"");
   }
@@ -467,6 +467,18 @@ public class TimberTest {
         .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"");
   }
 
+  private static <T extends Throwable> T truncatedThrowable(Class<T> throwableClass) {
+    try {
+      T throwable = throwableClass.newInstance();
+      StackTraceElement[] stackTrace = throwable.getStackTrace();
+      int traceLength = stackTrace.length > 5 ? 5 : stackTrace.length;
+      throwable.setStackTrace(Arrays.copyOf(stackTrace, traceLength));
+      return throwable;
+    } catch (InstantiationException | IllegalAccessException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
   private static String repeat(char c, int number) {
     char[] data = new char[number];
     Arrays.fill(data, c);","@@ -229,7 +229,7 @@ public class TimberTest {
 
   @Test public void messageWithException() {
     Timber.plant(new Timber.DebugTree());
-    NullPointerException datThrowable = new NullPointerException();
+    NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
     Timber.e(datThrowable, ""OMFG!"");
 
     assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
@@ -238,50 +238,50 @@ public class TimberTest {
   @Test public void exceptionOnly() {
     Timber.plant(new Timber.DebugTree());
 
-    Timber.v(new IllegalArgumentException());
+    Timber.v(truncatedThrowable(IllegalArgumentException.class));
     assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""TimberTest"", 0);
 
-    Timber.i(new NullPointerException());
+    Timber.i(truncatedThrowable(NullPointerException.class));
     assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""TimberTest"", 1);
 
-    Timber.d(new UnsupportedOperationException());
+    Timber.d(truncatedThrowable(UnsupportedOperationException.class));
     assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""TimberTest"", 2);
 
-    Timber.w(new UnknownHostException());
+    Timber.w(truncatedThrowable(UnknownHostException.class));
     assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""TimberTest"", 3);
 
-    Timber.e(new ConnectException());
+    Timber.e(truncatedThrowable(ConnectException.class));
     assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""TimberTest"", 4);
 
-    Timber.wtf(new AssertionError());
+    Timber.wtf(truncatedThrowable(AssertionError.class));
     assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""TimberTest"", 5);
   }
 
   @Test public void exceptionOnlyCustomTag() {
     Timber.plant(new Timber.DebugTree());
 
-    Timber.tag(""Custom"").v(new IllegalArgumentException());
+    Timber.tag(""Custom"").v(truncatedThrowable(IllegalArgumentException.class));
     assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""Custom"", 0);
 
-    Timber.tag(""Custom"").i(new NullPointerException());
+    Timber.tag(""Custom"").i(truncatedThrowable(NullPointerException.class));
     assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""Custom"", 1);
 
-    Timber.tag(""Custom"").d(new UnsupportedOperationException());
+    Timber.tag(""Custom"").d(truncatedThrowable(UnsupportedOperationException.class));
     assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""Custom"", 2);
 
-    Timber.tag(""Custom"").w(new UnknownHostException());
+    Timber.tag(""Custom"").w(truncatedThrowable(UnknownHostException.class));
     assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""Custom"", 3);
 
-    Timber.tag(""Custom"").e(new ConnectException());
+    Timber.tag(""Custom"").e(truncatedThrowable(ConnectException.class));
     assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""Custom"", 4);
 
-    Timber.tag(""Custom"").wtf(new AssertionError());
+    Timber.tag(""Custom"").wtf(truncatedThrowable(AssertionError.class));
     assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""Custom"", 5);
   }
 
   @Test public void exceptionFromSpawnedThread() throws InterruptedException {
     Timber.plant(new Timber.DebugTree());
-    final NullPointerException datThrowable = new NullPointerException();
+    final NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
     final CountDownLatch latch = new CountDownLatch(1);
     new Thread() {
       @Override public void run() {
@@ -295,7 +295,7 @@ public class TimberTest {
 
   @Test public void nullMessageWithThrowable() {
     Timber.plant(new Timber.DebugTree());
-    final NullPointerException datThrowable = new NullPointerException();
+    NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
     Timber.e(datThrowable, null);
 
     assertExceptionLogged(Log.ERROR, """", ""java.lang.NullPointerException"");
@@ -434,7 +434,7 @@ public class TimberTest {
 
   @Test public void logsUnknownHostExceptions() {
     Timber.plant(new Timber.DebugTree());
-    Timber.e(new UnknownHostException(), null);
+    Timber.e(truncatedThrowable(UnknownHostException.class), null);
 
     assertExceptionLogged(Log.ERROR, """", ""UnknownHostException"");
   }
@@ -467,6 +467,18 @@ public class TimberTest {
         .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"");
   }
 
+  private static <T extends Throwable> T truncatedThrowable(Class<T> throwableClass) {
+    try {
+      T throwable = throwableClass.newInstance();
+      StackTraceElement[] stackTrace = throwable.getStackTrace();
+      int traceLength = stackTrace.length > 5 ? 5 : stackTrace.length;
+      throwable.setStackTrace(Arrays.copyOf(stackTrace, traceLength));
+      return throwable;
+    } catch (InstantiationException | IllegalAccessException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
   private static String repeat(char c, int number) {
     char[] data = new char[number];
     Arrays.fill(data, c);",False,test
checkstyle.xml,checkstyle.xml,87b2e9360ed4152718937e9cd9917a1d6d50c634,c8879320cb874add1437568336574a4b7d0e88e0,"Bump to Gradle 3.5-rc-1

This also upgrades checkstyle from version 5.9 to 6.19 which removes
the RedundantThrows check.

https://github.com/gradle/gradle/commit/12cbf9734b5ea40aadf2a93aecffdbe7d1a959d8
https://github.com/checkstyle/checkstyle/issues/473","@@ -1,7 +1,7 @@
 <?xml version=""1.0""?>
 <!DOCTYPE module PUBLIC
-    ""-//Puppy Crawl//DTD Check Configuration 1.2//EN""
-    ""http://www.puppycrawl.com/dtds/configuration_1_2.dtd"">
+    ""-//Puppy Crawl//DTD Check Configuration 1.3//EN""
+    ""http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd"">
 
 <module name=""Checker"">
   <!--module name=""NewlineAtEndOfFile""/-->
@@ -112,7 +112,7 @@
     <module name=""InnerAssignment""/>
     <!--module name=""MagicNumber""/-->
     <module name=""MissingSwitchDefault""/>
-    <module name=""RedundantThrows""/>
+    <!--<module name=""RedundantThrows""/>-->
     <module name=""SimplifyBooleanExpression""/>
     <module name=""SimplifyBooleanReturn""/>","@@ -1,7 +1,7 @@
 <?xml version=""1.0""?>
 <!DOCTYPE module PUBLIC
-    ""-//Puppy Crawl//DTD Check Configuration 1.2//EN""
-    ""http://www.puppycrawl.com/dtds/configuration_1_2.dtd"">
+    ""-//Puppy Crawl//DTD Check Configuration 1.3//EN""
+    ""http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd"">
 
 <module name=""Checker"">
   <!--module name=""NewlineAtEndOfFile""/-->
@@ -112,7 +112,7 @@
     <module name=""InnerAssignment""/>
     <!--module name=""MagicNumber""/-->
     <module name=""MissingSwitchDefault""/>
-    <module name=""RedundantThrows""/>
+    <!--<module name=""RedundantThrows""/>-->
     <module name=""SimplifyBooleanExpression""/>
     <module name=""SimplifyBooleanReturn""/>",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,87b2e9360ed4152718937e9cd9917a1d6d50c634,c8879320cb874add1437568336574a4b7d0e88e0,"Bump to Gradle 3.5-rc-1

This also upgrades checkstyle from version 5.9 to 6.19 which removes
the RedundantThrows check.

https://github.com/gradle/gradle/commit/12cbf9734b5ea40aadf2a93aecffdbe7d1a959d8
https://github.com/checkstyle/checkstyle/issues/473","@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.4-rc-1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-rc-1-bin.zip","@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.4-rc-1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-rc-1-bin.zip",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,3a7076e877ba20207df2624f2345cf96e4d5891f,87b2e9360ed4152718937e9cd9917a1d6d50c634,Bump to Gradle 4.1-rc-1,"@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-rc-1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-1-bin.zip","@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-rc-1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-1-bin.zip",False,other
gradlew,gradlew,3a7076e877ba20207df2624f2345cf96e4d5891f,87b2e9360ed4152718937e9cd9917a1d6d50c634,Bump to Gradle 4.1-rc-1,"@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD=""maximum""
 
-warn ( ) {
+warn () {
     echo ""$*""
 }
 
-die ( ) {
+die () {
     echo
     echo ""$*""
     echo
@@ -155,7 +155,7 @@ if $cygwin ; then
 fi
 
 # Escape application args
-save ( ) {
+save () {
     for i do printf %s\\n ""$i"" | sed ""s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"" ; done
     echo "" ""
 }","@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD=""maximum""
 
-warn ( ) {
+warn () {
     echo ""$*""
 }
 
-die ( ) {
+die () {
     echo
     echo ""$*""
     echo
@@ -155,7 +155,7 @@ if $cygwin ; then
 fi
 
 # Escape application args
-save ( ) {
+save () {
     for i do printf %s\\n ""$i"" | sed ""s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"" ; done
     echo "" ""
 }",False,other
build.gradle,build.gradle,8a964fc36bbba6993171d924d540692644cacd03,3a7076e877ba20207df2624f2345cf96e4d5891f,Bump to Android Gradle Plugin 3.0.0-a8,"@@ -3,12 +3,13 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   repositories {
     jcenter()
+    google()
     maven {
       url 'https://plugins.gradle.org/m2/'
     }
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.3.3'
+    classpath 'com.android.tools.build:gradle:3.0.0-alpha8'
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
     classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
   }
@@ -18,6 +19,7 @@ allprojects {
   repositories {
     mavenCentral()
     jcenter()
+    google()
   }
 }","@@ -3,12 +3,13 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   repositories {
     jcenter()
+    google()
     maven {
       url 'https://plugins.gradle.org/m2/'
     }
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:2.3.3'
+    classpath 'com.android.tools.build:gradle:3.0.0-alpha8'
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
     classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
   }
@@ -18,6 +19,7 @@ allprojects {
   repositories {
     mavenCentral()
     jcenter()
+    google()
   }
 }",False,other
timber-lint/build.gradle,timber-lint/build.gradle,8a964fc36bbba6993171d924d540692644cacd03,3a7076e877ba20207df2624f2345cf96e4d5891f,Bump to Android Gradle Plugin 3.0.0-a8,"@@ -4,11 +4,11 @@ targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7
 
 dependencies {
-  compile deps.lintapi
-  compile deps.lintchecks
-  testCompile deps.lint
-  testCompile deps.linttests
-  testCompile deps.festassert
+  implementation deps.lintapi
+  implementation deps.lintchecks
+  testImplementation deps.lint
+  testImplementation deps.linttests
+  testImplementation deps.festassert
 }
 
 jar {","@@ -4,11 +4,11 @@ targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7
 
 dependencies {
-  compile deps.lintapi
-  compile deps.lintchecks
-  testCompile deps.lint
-  testCompile deps.linttests
-  testCompile deps.festassert
+  implementation deps.lintapi
+  implementation deps.lintchecks
+  testImplementation deps.lint
+  testImplementation deps.linttests
+  testImplementation deps.festassert
 }
 
 jar {",False,other
timber-sample/build.gradle,timber-sample/build.gradle,8a964fc36bbba6993171d924d540692644cacd03,3a7076e877ba20207df2624f2345cf96e4d5891f,Bump to Android Gradle Plugin 3.0.0-a8,"@@ -25,7 +25,7 @@ android {
 }
 
 dependencies {
-  compile project(':timber')
-  compile 'com.jakewharton:butterknife:8.7.0'
+  implementation project(':timber')
+  implementation 'com.jakewharton:butterknife:8.7.0'
   annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
 }","@@ -25,7 +25,7 @@ android {
 }
 
 dependencies {
-  compile project(':timber')
-  compile 'com.jakewharton:butterknife:8.7.0'
+  implementation project(':timber')
+  implementation 'com.jakewharton:butterknife:8.7.0'
   annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
 }",False,other
timber/build.gradle,timber/build.gradle,8a964fc36bbba6993171d924d540692644cacd03,3a7076e877ba20207df2624f2345cf96e4d5891f,Bump to Android Gradle Plugin 3.0.0-a8,"@@ -34,12 +34,12 @@ android {
 }
 
 dependencies {
-  provided 'org.jetbrains:annotations:15.0'
+  compileOnly 'org.jetbrains:annotations:15.0'
 
-  testCompile deps.festandroid
-  testCompile deps.festassert
-  testCompile deps.junit
-  testCompile deps.robolectric
+  testImplementation deps.festandroid
+  testImplementation deps.festassert
+  testImplementation deps.junit
+  testImplementation deps.robolectric
 
   lintRules project(':timber-lint')
 }","@@ -34,12 +34,12 @@ android {
 }
 
 dependencies {
-  provided 'org.jetbrains:annotations:15.0'
+  compileOnly 'org.jetbrains:annotations:15.0'
 
-  testCompile deps.festandroid
-  testCompile deps.festassert
-  testCompile deps.junit
-  testCompile deps.robolectric
+  testImplementation deps.festandroid
+  testImplementation deps.festassert
+  testImplementation deps.junit
+  testImplementation deps.robolectric
 
   lintRules project(':timber-lint')
 }",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,5e8b96c3a57e63047df55c42afe1a1ebf8c5bc57,f3f8652530d0527b73e4fbe00d7d51ced9ecd171,Remove unnecessary return,"@@ -77,7 +77,6 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       checkMethodArguments(context, call);
       checkFormatArguments(context, call);
       checkExceptionLogging(context, call);
-      return;
     }
   }","@@ -77,7 +77,6 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       checkMethodArguments(context, call);
       checkFormatArguments(context, call);
       checkExceptionLogging(context, call);
-      return;
     }
   }",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,0fc26f9e32b6c22f8a164b61c96a7a4c4b6308dd,5e8b96c3a57e63047df55c42afe1a1ebf8c5bc57,"Check fully-qualified method names properly

Prior to 3.0, this happened to work by accident due to the underlying
PSI implementation. For a method call, getQualifiedName() returns the
qualified name found in the source instead of the resolved type, e.g.,

Timber.tag(""Foo"")
-> qualified name: ""Timber.tag""

timber.log.Timber.tag(""Foo"")
-> qualified name: ""timber.log.Timber.tag""

This fix uses the fully-qualified name of the method call after
resolving types.

See: https://issuetracker.google.com/issues/62914381#comment10","@@ -3,6 +3,7 @@ package timber.lint;
 import com.android.annotations.NonNull;
 import com.android.annotations.Nullable;
 import com.android.tools.lint.checks.StringFormatDetector;
+import com.android.tools.lint.client.api.JavaEvaluator;
 import com.android.tools.lint.detector.api.Category;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
@@ -58,22 +59,25 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   @Override public void visitMethod(JavaContext context, JavaElementVisitor visitor,
       PsiMethodCallExpression call, PsiMethod method) {
     PsiReferenceExpression methodExpression = call.getMethodExpression();
-    String fullyQualifiedMethodName = methodExpression.getQualifiedName();
-    if (""java.lang.String.format"".equals(fullyQualifiedMethodName)) {
+    String methodName = methodExpression.getReferenceName();
+    JavaEvaluator evaluator = context.getEvaluator();
+
+    if (""format"".equals(methodName) && evaluator.isMemberInClass(method, ""java.lang.String"")) {
       checkNestedStringFormat(context, call);
       return;
     }
-    if (fullyQualifiedMethodName.startsWith(""timber.log.Timber.tag"")) {
+    if (""tag"".equals(methodName) && evaluator.isMemberInClass(method, ""timber.log.Timber"")) {
       checkTagLength(context, call);
       return;
     }
-    if (fullyQualifiedMethodName.startsWith(""android.util.Log."")) {
+    if (evaluator.isMemberInClass(method, ""android.util.Log"")) {
       context.report(ISSUE_LOG, methodExpression, context.getLocation(methodExpression),
           ""Using 'Log' instead of 'Timber'"");
       return;
     }
     // Handles Timber.X(..) and Timber.tag(..).X(..) where X in (v|d|i|w|e|wtf).
-    if (fullyQualifiedMethodName.startsWith(""timber.log.Timber."")) {
+    if (evaluator.isMemberInClass(method, ""timber.log.Timber"") //
+        || evaluator.isMemberInClass(method, ""timber.log.Timber.Tree"")) {
       checkMethodArguments(context, call);
       checkFormatArguments(context, call);
       checkExceptionLogging(context, call);","@@ -3,6 +3,7 @@ package timber.lint;
 import com.android.annotations.NonNull;
 import com.android.annotations.Nullable;
 import com.android.tools.lint.checks.StringFormatDetector;
+import com.android.tools.lint.client.api.JavaEvaluator;
 import com.android.tools.lint.detector.api.Category;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
@@ -58,22 +59,25 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   @Override public void visitMethod(JavaContext context, JavaElementVisitor visitor,
       PsiMethodCallExpression call, PsiMethod method) {
     PsiReferenceExpression methodExpression = call.getMethodExpression();
-    String fullyQualifiedMethodName = methodExpression.getQualifiedName();
-    if (""java.lang.String.format"".equals(fullyQualifiedMethodName)) {
+    String methodName = methodExpression.getReferenceName();
+    JavaEvaluator evaluator = context.getEvaluator();
+
+    if (""format"".equals(methodName) && evaluator.isMemberInClass(method, ""java.lang.String"")) {
       checkNestedStringFormat(context, call);
       return;
     }
-    if (fullyQualifiedMethodName.startsWith(""timber.log.Timber.tag"")) {
+    if (""tag"".equals(methodName) && evaluator.isMemberInClass(method, ""timber.log.Timber"")) {
       checkTagLength(context, call);
       return;
     }
-    if (fullyQualifiedMethodName.startsWith(""android.util.Log."")) {
+    if (evaluator.isMemberInClass(method, ""android.util.Log"")) {
       context.report(ISSUE_LOG, methodExpression, context.getLocation(methodExpression),
           ""Using 'Log' instead of 'Timber'"");
       return;
     }
     // Handles Timber.X(..) and Timber.tag(..).X(..) where X in (v|d|i|w|e|wtf).
-    if (fullyQualifiedMethodName.startsWith(""timber.log.Timber."")) {
+    if (evaluator.isMemberInClass(method, ""timber.log.Timber"") //
+        || evaluator.isMemberInClass(method, ""timber.log.Timber.Tree"")) {
       checkMethodArguments(context, call);
       checkFormatArguments(context, call);
       checkExceptionLogging(context, call);",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,7d6e54da8551d22273cc3c75e34ba3885e13ea8f,0fc26f9e32b6c22f8a164b61c96a7a4c4b6308dd,"Replace custom String literal logic with built-in ConstantEvaluator

See: https://issuetracker.google.com/issues/62914381#comment10","@@ -13,7 +13,6 @@ import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.intellij.psi.JavaElementVisitor;
-import com.intellij.psi.JavaTokenType;
 import com.intellij.psi.PsiBinaryExpression;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
@@ -21,7 +20,6 @@ import com.intellij.psi.PsiCodeBlock;
 import com.intellij.psi.PsiConditionalExpression;
 import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiExpression;
-import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiIfStatement;
 import com.intellij.psi.PsiLiteralExpression;
 import com.intellij.psi.PsiMethod;
@@ -47,6 +45,7 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_NULL;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
+import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
 
 public final class WrongTimberUsageDetector extends Detector implements Detector.JavaPsiScanner {
   private final static String GET_STRING_METHOD = ""getString"";
@@ -106,7 +105,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
   private static void checkTagLength(JavaContext context, PsiMethodCallExpression call) {
     PsiExpression argument = call.getArgumentList().getExpressions()[0];
-    String tag = findLiteralValue(argument);
+    String tag = evaluateString(context, argument, true);
     if (tag != null && tag.length() > 23) {
       String message =
           String.format(""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
@@ -131,7 +130,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       startIndexOfArguments++;
     }
 
-    String formatString = findLiteralValue(formatStringArg);
+    String formatString = evaluateString(context, formatStringArg, true);
     // We passed for example a method call
     if (formatString == null) {
       return;
@@ -424,64 +423,6 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return types;
   }
 
-  private static String findLiteralValue(PsiExpression argument) {
-    if (argument instanceof PsiLiteralExpression) {
-      PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument;
-      Object value = literalExpression.getValue();
-      if (value instanceof String) {
-        return (String) value;
-      }
-    } else if (argument instanceof PsiBinaryExpression) {
-      PsiBinaryExpression binaryExpression = (PsiBinaryExpression) argument;
-      if (binaryExpression.getOperationTokenType() == JavaTokenType.PLUS) {
-        String left = findLiteralValue(binaryExpression.getLOperand());
-        String right = findLiteralValue(binaryExpression.getROperand());
-        if (left != null && right != null) {
-          return left + right;
-        }
-      }
-    } else if (argument instanceof PsiReferenceExpression) {
-      PsiReferenceExpression referenceExpression = (PsiReferenceExpression) argument;
-      PsiElement resolved = referenceExpression.resolve();
-      if (resolved instanceof PsiField) {
-        PsiField field = (PsiField) resolved;
-        Object value = field.computeConstantValue();
-        if (value instanceof String) {
-          return (String) value;
-        }
-      }
-    }
-
-    return null;
-  }
-
-  private static boolean isLiteralValueEmpty(PsiExpression argument) {
-    if (argument instanceof PsiLiteralExpression) {
-      PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument;
-      Object value = literalExpression.getValue();
-      return value == null || """".equals(value);
-    } else if (argument instanceof PsiBinaryExpression) {
-      PsiBinaryExpression binaryExpression = (PsiBinaryExpression) argument;
-      if (binaryExpression.getOperationTokenType() == JavaTokenType.PLUS) {
-        String left = findLiteralValue(binaryExpression.getLOperand());
-        String right = findLiteralValue(binaryExpression.getROperand());
-        if (left == null && right == null) {
-          return true;
-        }
-      }
-    } else if (argument instanceof PsiReferenceExpression) {
-      PsiReferenceExpression referenceExpression = (PsiReferenceExpression) argument;
-      PsiElement resolved = referenceExpression.resolve();
-      if (resolved instanceof PsiField) {
-        PsiField field = (PsiField) resolved;
-        Object value = field.computeConstantValue();
-        return value == null || """".equals(value);
-      }
-    }
-
-    return false;
-  }
-
   private static int getFormatArgumentCount(@NonNull String s) {
     Matcher matcher = StringFormatDetector.FORMAT.matcher(s);
     int index = 0;
@@ -551,7 +492,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
       if (isFirstParameterThrowable) {
         PsiExpression secondArgument = arguments[1];
-        boolean isMessageEmpty = isLiteralValueEmpty(secondArgument);
+        String secondArgAsString = evaluateString(context, secondArgument, true);
+        boolean isMessageEmpty = secondArgAsString == null || secondArgAsString.isEmpty();
 
         boolean callsGetMessage = false;","@@ -13,7 +13,6 @@ import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.intellij.psi.JavaElementVisitor;
-import com.intellij.psi.JavaTokenType;
 import com.intellij.psi.PsiBinaryExpression;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
@@ -21,7 +20,6 @@ import com.intellij.psi.PsiCodeBlock;
 import com.intellij.psi.PsiConditionalExpression;
 import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiExpression;
-import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiIfStatement;
 import com.intellij.psi.PsiLiteralExpression;
 import com.intellij.psi.PsiMethod;
@@ -47,6 +45,7 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_NULL;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
+import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
 
 public final class WrongTimberUsageDetector extends Detector implements Detector.JavaPsiScanner {
   private final static String GET_STRING_METHOD = ""getString"";
@@ -106,7 +105,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
   private static void checkTagLength(JavaContext context, PsiMethodCallExpression call) {
     PsiExpression argument = call.getArgumentList().getExpressions()[0];
-    String tag = findLiteralValue(argument);
+    String tag = evaluateString(context, argument, true);
     if (tag != null && tag.length() > 23) {
       String message =
           String.format(""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
@@ -131,7 +130,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       startIndexOfArguments++;
     }
 
-    String formatString = findLiteralValue(formatStringArg);
+    String formatString = evaluateString(context, formatStringArg, true);
     // We passed for example a method call
     if (formatString == null) {
       return;
@@ -424,64 +423,6 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return types;
   }
 
-  private static String findLiteralValue(PsiExpression argument) {
-    if (argument instanceof PsiLiteralExpression) {
-      PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument;
-      Object value = literalExpression.getValue();
-      if (value instanceof String) {
-        return (String) value;
-      }
-    } else if (argument instanceof PsiBinaryExpression) {
-      PsiBinaryExpression binaryExpression = (PsiBinaryExpression) argument;
-      if (binaryExpression.getOperationTokenType() == JavaTokenType.PLUS) {
-        String left = findLiteralValue(binaryExpression.getLOperand());
-        String right = findLiteralValue(binaryExpression.getROperand());
-        if (left != null && right != null) {
-          return left + right;
-        }
-      }
-    } else if (argument instanceof PsiReferenceExpression) {
-      PsiReferenceExpression referenceExpression = (PsiReferenceExpression) argument;
-      PsiElement resolved = referenceExpression.resolve();
-      if (resolved instanceof PsiField) {
-        PsiField field = (PsiField) resolved;
-        Object value = field.computeConstantValue();
-        if (value instanceof String) {
-          return (String) value;
-        }
-      }
-    }
-
-    return null;
-  }
-
-  private static boolean isLiteralValueEmpty(PsiExpression argument) {
-    if (argument instanceof PsiLiteralExpression) {
-      PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument;
-      Object value = literalExpression.getValue();
-      return value == null || """".equals(value);
-    } else if (argument instanceof PsiBinaryExpression) {
-      PsiBinaryExpression binaryExpression = (PsiBinaryExpression) argument;
-      if (binaryExpression.getOperationTokenType() == JavaTokenType.PLUS) {
-        String left = findLiteralValue(binaryExpression.getLOperand());
-        String right = findLiteralValue(binaryExpression.getROperand());
-        if (left == null && right == null) {
-          return true;
-        }
-      }
-    } else if (argument instanceof PsiReferenceExpression) {
-      PsiReferenceExpression referenceExpression = (PsiReferenceExpression) argument;
-      PsiElement resolved = referenceExpression.resolve();
-      if (resolved instanceof PsiField) {
-        PsiField field = (PsiField) resolved;
-        Object value = field.computeConstantValue();
-        return value == null || """".equals(value);
-      }
-    }
-
-    return false;
-  }
-
   private static int getFormatArgumentCount(@NonNull String s) {
     Matcher matcher = StringFormatDetector.FORMAT.matcher(s);
     int index = 0;
@@ -551,7 +492,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
       if (isFirstParameterThrowable) {
         PsiExpression secondArgument = arguments[1];
-        boolean isMessageEmpty = isLiteralValueEmpty(secondArgument);
+        String secondArgAsString = evaluateString(context, secondArgument, true);
+        boolean isMessageEmpty = secondArgAsString == null || secondArgAsString.isEmpty();
 
         boolean callsGetMessage = false;",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,9ba3453a3251d6e14deaa57a14af5cc7fd36f17e,7d6e54da8551d22273cc3c75e34ba3885e13ea8f,Cleanup checkExceptionLogging,"@@ -487,29 +487,28 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   private static void checkExceptionLogging(JavaContext context, PsiMethodCallExpression call) {
     PsiExpression[] arguments = call.getArgumentList().getExpressions();
 
-    if (arguments.length > 1) {
-      boolean isFirstParameterThrowable = isSubclassOf(context, arguments[0], Throwable.class);
-
-      if (isFirstParameterThrowable) {
-        PsiExpression secondArgument = arguments[1];
-        String secondArgAsString = evaluateString(context, secondArgument, true);
-        boolean isMessageEmpty = secondArgAsString == null || secondArgAsString.isEmpty();
-
-        boolean callsGetMessage = false;
-
-        if (secondArgument instanceof PsiMethodCallExpression) {
-          PsiMethodCallExpression callExpression = (PsiMethodCallExpression) secondArgument;
-          callsGetMessage = callExpression.getMethodExpression().getCanonicalText().endsWith(""getMessage"");
-        }
-
-        if (callsGetMessage) {
-          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
+    if (arguments.length > 1 && isSubclassOf(context, arguments[0], Throwable.class)) {
+      PsiExpression secondArgument = arguments[1];
+
+      if (secondArgument instanceof PsiMethodCallExpression) {
+        PsiMethodCallExpression secondArgumentCall = (PsiMethodCallExpression) secondArgument;
+        JavaEvaluator evaluator = context.getEvaluator();
+        PsiMethod method = secondArgumentCall.resolveMethod();
+        if (method != null //
+            && ""getMessage"".equals(secondArgumentCall.getMethodExpression().getReferenceName()) //
+            && evaluator.isMemberInSubClassOf(method, ""java.lang.Throwable"", false)) {
+          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument,
+              context.getLocation(secondArgument),
               ""Explicitly logging exception message is redundant"");
-        } else if (isMessageEmpty) {
-          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
-              ""Use single-argument log method instead of null/empty message"");
+          return;
         }
       }
+
+      String s = evaluateString(context, secondArgument, true);
+      if (s == null || s.isEmpty()) {
+        context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
+            ""Use single-argument log method instead of null/empty message"");
+      }
     }
   }","@@ -487,29 +487,28 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   private static void checkExceptionLogging(JavaContext context, PsiMethodCallExpression call) {
     PsiExpression[] arguments = call.getArgumentList().getExpressions();
 
-    if (arguments.length > 1) {
-      boolean isFirstParameterThrowable = isSubclassOf(context, arguments[0], Throwable.class);
-
-      if (isFirstParameterThrowable) {
-        PsiExpression secondArgument = arguments[1];
-        String secondArgAsString = evaluateString(context, secondArgument, true);
-        boolean isMessageEmpty = secondArgAsString == null || secondArgAsString.isEmpty();
-
-        boolean callsGetMessage = false;
-
-        if (secondArgument instanceof PsiMethodCallExpression) {
-          PsiMethodCallExpression callExpression = (PsiMethodCallExpression) secondArgument;
-          callsGetMessage = callExpression.getMethodExpression().getCanonicalText().endsWith(""getMessage"");
-        }
-
-        if (callsGetMessage) {
-          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
+    if (arguments.length > 1 && isSubclassOf(context, arguments[0], Throwable.class)) {
+      PsiExpression secondArgument = arguments[1];
+
+      if (secondArgument instanceof PsiMethodCallExpression) {
+        PsiMethodCallExpression secondArgumentCall = (PsiMethodCallExpression) secondArgument;
+        JavaEvaluator evaluator = context.getEvaluator();
+        PsiMethod method = secondArgumentCall.resolveMethod();
+        if (method != null //
+            && ""getMessage"".equals(secondArgumentCall.getMethodExpression().getReferenceName()) //
+            && evaluator.isMemberInSubClassOf(method, ""java.lang.Throwable"", false)) {
+          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument,
+              context.getLocation(secondArgument),
               ""Explicitly logging exception message is redundant"");
-        } else if (isMessageEmpty) {
-          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
-              ""Use single-argument log method instead of null/empty message"");
+          return;
         }
       }
+
+      String s = evaluateString(context, secondArgument, true);
+      if (s == null || s.isEmpty()) {
+        context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
+            ""Use single-argument log method instead of null/empty message"");
+      }
     }
   }",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,596b483b8225ed14d007955d28699326d13d89f8,9ba3453a3251d6e14deaa57a14af5cc7fd36f17e,Extract method for method call checks,"@@ -491,12 +491,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       PsiExpression secondArgument = arguments[1];
 
       if (secondArgument instanceof PsiMethodCallExpression) {
-        PsiMethodCallExpression secondArgumentCall = (PsiMethodCallExpression) secondArgument;
-        JavaEvaluator evaluator = context.getEvaluator();
-        PsiMethod method = secondArgumentCall.resolveMethod();
-        if (method != null //
-            && ""getMessage"".equals(secondArgumentCall.getMethodExpression().getReferenceName()) //
-            && evaluator.isMemberInSubClassOf(method, ""java.lang.Throwable"", false)) {
+        PsiMethodCallExpression arg2Call = (PsiMethodCallExpression) secondArgument;
+
+        if (isCallFromMethodInSubclassOf(context, arg2Call, ""getMessage"", ""java.lang.Throwable"")) {
           context.report(ISSUE_EXCEPTION_LOGGING, secondArgument,
               context.getLocation(secondArgument),
               ""Explicitly logging exception message is redundant"");
@@ -512,6 +509,15 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
+  private static boolean isCallFromMethodInSubclassOf(JavaContext context,
+      PsiMethodCallExpression call, String methodName, String className) {
+    JavaEvaluator evaluator = context.getEvaluator();
+    PsiMethod method = call.resolveMethod();
+    return method != null //
+        && methodName.equals(call.getMethodExpression().getReferenceName()) //
+        && evaluator.isMemberInSubClassOf(method, className, false);
+  }
+
   private static boolean checkElement(JavaContext context, PsiMethodCallExpression call,
       PsiElement element) {
     if (element instanceof PsiBinaryExpression) {","@@ -491,12 +491,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       PsiExpression secondArgument = arguments[1];
 
       if (secondArgument instanceof PsiMethodCallExpression) {
-        PsiMethodCallExpression secondArgumentCall = (PsiMethodCallExpression) secondArgument;
-        JavaEvaluator evaluator = context.getEvaluator();
-        PsiMethod method = secondArgumentCall.resolveMethod();
-        if (method != null //
-            && ""getMessage"".equals(secondArgumentCall.getMethodExpression().getReferenceName()) //
-            && evaluator.isMemberInSubClassOf(method, ""java.lang.Throwable"", false)) {
+        PsiMethodCallExpression arg2Call = (PsiMethodCallExpression) secondArgument;
+
+        if (isCallFromMethodInSubclassOf(context, arg2Call, ""getMessage"", ""java.lang.Throwable"")) {
           context.report(ISSUE_EXCEPTION_LOGGING, secondArgument,
               context.getLocation(secondArgument),
               ""Explicitly logging exception message is redundant"");
@@ -512,6 +509,15 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
+  private static boolean isCallFromMethodInSubclassOf(JavaContext context,
+      PsiMethodCallExpression call, String methodName, String className) {
+    JavaEvaluator evaluator = context.getEvaluator();
+    PsiMethod method = call.resolveMethod();
+    return method != null //
+        && methodName.equals(call.getMethodExpression().getReferenceName()) //
+        && evaluator.isMemberInSubClassOf(method, className, false);
+  }
+
   private static boolean checkElement(JavaContext context, PsiMethodCallExpression call,
       PsiElement element) {
     if (element instanceof PsiBinaryExpression) {",False,source
,timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,236791d21ec7976fa940a5020307df150667375d,f3f8652530d0527b73e4fbe00d7d51ced9ecd171,"Add Timber lint failure examples

Lint failures should display in the IDE again once the fix discussed here
is released: https://issuetracker.google.com/issues/62914381#comment10

This commit showcases the current suite of checks with some failure
examples.","@@ -0,0 +1,45 @@
+package com.example.timber.ui;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.Log;
+import timber.log.Timber;
+
+@SuppressLint(""Registered"") //
+public class LintActivity extends Activity {
+  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+
+    // Below are some examples of how NOT to use Timber
+    /*
+    Log.d(""TAG"", ""msg"");
+
+    Timber.w(String.format(""%s"", ""arg0""));
+
+    Exception e = new Exception();
+    Timber.d(""%s"", e);
+
+    Timber.d(""Hello, "" + ""world!"");
+
+    Timber.d(""%s %s"", ""arg0"");
+
+    Timber.d(""%s"", ""arg0"", ""arg1"");
+
+    Timber.d(""%d"", ""arg0"");
+
+    Timber.tag(""abcdefghijklmnopqrstuvwx"");
+
+    Timber.tag(""tag"").d(""%s %s"", ""arg0"");
+
+    Timber.tag(""tag"").d(""%s"", ""arg0"", ""arg1"");
+
+    Timber.tag(""tag"").d(""%d"", ""arg0"");
+
+    Timber.tag(""abcdefghijklmnopqrstuvw"" + ""x"");
+
+    Timber.tag(""abcdefghijklmnopqrstuvw"" + new String(""x""));
+    */
+  }
+}","@@ -0,0 +1,45 @@
+package com.example.timber.ui;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.Log;
+import timber.log.Timber;
+
+@SuppressLint(""Registered"") //
+public class LintActivity extends Activity {
+  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+
+    // Below are some examples of how NOT to use Timber
+    /*
+    Log.d(""TAG"", ""msg"");
+
+    Timber.w(String.format(""%s"", ""arg0""));
+
+    Exception e = new Exception();
+    Timber.d(""%s"", e);
+
+    Timber.d(""Hello, "" + ""world!"");
+
+    Timber.d(""%s %s"", ""arg0"");
+
+    Timber.d(""%s"", ""arg0"", ""arg1"");
+
+    Timber.d(""%d"", ""arg0"");
+
+    Timber.tag(""abcdefghijklmnopqrstuvwx"");
+
+    Timber.tag(""tag"").d(""%s %s"", ""arg0"");
+
+    Timber.tag(""tag"").d(""%s"", ""arg0"", ""arg1"");
+
+    Timber.tag(""tag"").d(""%d"", ""arg0"");
+
+    Timber.tag(""abcdefghijklmnopqrstuvw"" + ""x"");
+
+    Timber.tag(""abcdefghijklmnopqrstuvw"" + new String(""x""));
+    */
+  }
+}",False,source
build.gradle,build.gradle,ad36516d4d244a55757e28383caa02f74d6f88b8,1de4f1aeb195d82783fb19216bb756bf06a6257a,Bump dependencies,"@@ -9,7 +9,7 @@ buildscript {
     }
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:3.0.0-alpha8'
+    classpath 'com.android.tools.build:gradle:3.0.0-beta5'
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
     classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
   }
@@ -39,7 +39,7 @@ ext.deps = [
     festassert : 'org.easytesting:fest-assert-core:2.0M10',
     festandroid: 'com.squareup:fest-android:1.0.8',
     mockitocore: 'org.mockito:mockito-core:1.9.5',
-    robolectric: 'org.robolectric:robolectric:3.0',
+    robolectric: 'org.robolectric:robolectric:3.4.2',
 
     // Lint dependencies
     lintapi    : ""com.android.tools.lint:lint-api:${lintVersion}"",","@@ -9,7 +9,7 @@ buildscript {
     }
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:3.0.0-alpha8'
+    classpath 'com.android.tools.build:gradle:3.0.0-beta5'
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
     classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
   }
@@ -39,7 +39,7 @@ ext.deps = [
     festassert : 'org.easytesting:fest-assert-core:2.0M10',
     festandroid: 'com.squareup:fest-android:1.0.8',
     mockitocore: 'org.mockito:mockito-core:1.9.5',
-    robolectric: 'org.robolectric:robolectric:3.0',
+    robolectric: 'org.robolectric:robolectric:3.4.2',
 
     // Lint dependencies
     lintapi    : ""com.android.tools.lint:lint-api:${lintVersion}"",",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,ad36516d4d244a55757e28383caa02f74d6f88b8,1de4f1aeb195d82783fb19216bb756bf06a6257a,Bump dependencies,"@@ -1,6 +1,6 @@
-#Tue Jul 25 03:01:36 PDT 2017
+#Sun Aug 27 16:59:02 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip","@@ -1,6 +1,6 @@
-#Tue Jul 25 03:01:36 PDT 2017
+#Sun Aug 27 16:59:02 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip",False,other
timber-sample/build.gradle,timber-sample/build.gradle,ad36516d4d244a55757e28383caa02f74d6f88b8,1de4f1aeb195d82783fb19216bb756bf06a6257a,Bump dependencies,"@@ -26,6 +26,6 @@ android {
 
 dependencies {
   implementation project(':timber')
-  implementation 'com.jakewharton:butterknife:8.7.0'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
+  implementation 'com.jakewharton:butterknife:8.8.1'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
 }","@@ -26,6 +26,6 @@ android {
 
 dependencies {
   implementation project(':timber')
-  implementation 'com.jakewharton:butterknife:8.7.0'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
+  implementation 'com.jakewharton:butterknife:8.8.1'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
 }",False,other
timber-lint/build.gradle,timber-lint/build.gradle,5956f0742e0791b1e78d77934e104dffb6c3ea14,5e616d2c750b7b5857a9ef6868214a6f459683b8,Update lint dependencies to 'compileOnly' configuration,"@@ -1,11 +1,11 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 
 targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7
 
 dependencies {
-  implementation deps.lintapi
-  implementation deps.lintchecks
+  compileOnly deps.lintapi
+  compileOnly deps.lintchecks
   testImplementation deps.lint
   testImplementation deps.linttests
   testImplementation deps.festassert","@@ -1,11 +1,11 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 
 targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7
 
 dependencies {
-  implementation deps.lintapi
-  implementation deps.lintchecks
+  compileOnly deps.lintapi
+  compileOnly deps.lintchecks
   testImplementation deps.lint
   testImplementation deps.linttests
   testImplementation deps.festassert",False,other
timber-sample/build.gradle,timber-sample/build.gradle,759e85068c17e8705d59a235f811427fab3bae99,5956f0742e0791b1e78d77934e104dffb6c3ea14,Update custom lint checks to run on :timber-sample,"@@ -27,5 +27,8 @@ android {
 dependencies {
   implementation project(':timber')
   implementation 'com.jakewharton:butterknife:8.8.1'
+
   annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
+  
+  lintChecks project(':timber-lint')
 }","@@ -27,5 +27,8 @@ android {
 dependencies {
   implementation project(':timber')
   implementation 'com.jakewharton:butterknife:8.8.1'
+
   annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
+  
+  lintChecks project(':timber-lint')
 }",False,other
build.gradle,build.gradle,6d2d1a46bf0724abea3cae0ee6bd474ed2a211c7,030a7fac543c4590224df762e08a686c854ffa08,Clean up versions and deps,"@@ -1,6 +1,38 @@
 apply plugin: 'com.github.ben-manes.versions'
 
 buildscript {
+  ext.versions = [
+      'minSdk': 9,
+      'compileSdk': 26,
+      'buildTools': '26.0.1',
+
+      'androidPlugin': '3.0.0-beta6',
+      'androidTools': '25.3.0',
+
+      'butterknife': '8.8.1',
+  ]
+
+  ext.deps = [
+      androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
+      'butterknife': [
+          'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
+          'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
+      ],
+      'lint': [
+          'core': ""com.android.tools.lint:lint:${versions.androidTools}"",
+          'api': ""com.android.tools.lint:lint-api:${versions.androidTools}"",
+          'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
+          'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
+      ],
+      annotations: 'org.jetbrains:annotations:15.0',
+
+      junit      : 'junit:junit:4.12',
+      festassert : 'org.easytesting:fest-assert-core:2.0M10',
+      festandroid: 'com.squareup:fest-android:1.0.8',
+      mockitocore: 'org.mockito:mockito-core:1.9.5',
+      robolectric: 'org.robolectric:robolectric:3.4.2',
+  ]
+
   repositories {
     jcenter()
     google()
@@ -9,7 +41,7 @@ buildscript {
     }
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:3.0.0-beta5'
+    classpath deps.androidPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
     classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
   }
@@ -22,30 +54,3 @@ allprojects {
     google()
   }
 }
-
-ext {
-  minSdkVersion = 9
-  targetSdkVersion = 26
-  compileSdkVersion = 26
-  buildToolsVersion = '26.0.1'
-  sourceCompatibilityVersion = JavaVersion.VERSION_1_7
-  targetCompatibilityVersion = JavaVersion.VERSION_1_7
-  lintVersion = '25.3.0'
-}
-
-ext.deps = [
-    // Test dependencies
-    junit      : 'junit:junit:4.12',
-    festassert : 'org.easytesting:fest-assert-core:2.0M10',
-    festandroid: 'com.squareup:fest-android:1.0.8',
-    mockitocore: 'org.mockito:mockito-core:1.9.5',
-    robolectric: 'org.robolectric:robolectric:3.4.2',
-
-    // Lint dependencies
-    lintapi    : ""com.android.tools.lint:lint-api:${lintVersion}"",
-    lintchecks : ""com.android.tools.lint:lint-checks:${lintVersion}"",
-
-    // Lint test dependencies
-    lint       : ""com.android.tools.lint:lint:${lintVersion}"",
-    linttests  : ""com.android.tools.lint:lint-tests:${lintVersion}"",
-]","@@ -1,6 +1,38 @@
 apply plugin: 'com.github.ben-manes.versions'
 
 buildscript {
+  ext.versions = [
+      'minSdk': 9,
+      'compileSdk': 26,
+      'buildTools': '26.0.1',
+
+      'androidPlugin': '3.0.0-beta6',
+      'androidTools': '25.3.0',
+
+      'butterknife': '8.8.1',
+  ]
+
+  ext.deps = [
+      androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
+      'butterknife': [
+          'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
+          'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
+      ],
+      'lint': [
+          'core': ""com.android.tools.lint:lint:${versions.androidTools}"",
+          'api': ""com.android.tools.lint:lint-api:${versions.androidTools}"",
+          'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
+          'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
+      ],
+      annotations: 'org.jetbrains:annotations:15.0',
+
+      junit      : 'junit:junit:4.12',
+      festassert : 'org.easytesting:fest-assert-core:2.0M10',
+      festandroid: 'com.squareup:fest-android:1.0.8',
+      mockitocore: 'org.mockito:mockito-core:1.9.5',
+      robolectric: 'org.robolectric:robolectric:3.4.2',
+  ]
+
   repositories {
     jcenter()
     google()
@@ -9,7 +41,7 @@ buildscript {
     }
   }
   dependencies {
-    classpath 'com.android.tools.build:gradle:3.0.0-beta5'
+    classpath deps.androidPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
     classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
   }
@@ -22,30 +54,3 @@ allprojects {
     google()
   }
 }
-
-ext {
-  minSdkVersion = 9
-  targetSdkVersion = 26
-  compileSdkVersion = 26
-  buildToolsVersion = '26.0.1'
-  sourceCompatibilityVersion = JavaVersion.VERSION_1_7
-  targetCompatibilityVersion = JavaVersion.VERSION_1_7
-  lintVersion = '25.3.0'
-}
-
-ext.deps = [
-    // Test dependencies
-    junit      : 'junit:junit:4.12',
-    festassert : 'org.easytesting:fest-assert-core:2.0M10',
-    festandroid: 'com.squareup:fest-android:1.0.8',
-    mockitocore: 'org.mockito:mockito-core:1.9.5',
-    robolectric: 'org.robolectric:robolectric:3.4.2',
-
-    // Lint dependencies
-    lintapi    : ""com.android.tools.lint:lint-api:${lintVersion}"",
-    lintchecks : ""com.android.tools.lint:lint-checks:${lintVersion}"",
-
-    // Lint test dependencies
-    lint       : ""com.android.tools.lint:lint:${lintVersion}"",
-    linttests  : ""com.android.tools.lint:lint-tests:${lintVersion}"",
-]",False,other
timber-lint/build.gradle,timber-lint/build.gradle,6d2d1a46bf0724abea3cae0ee6bd474ed2a211c7,030a7fac543c4590224df762e08a686c854ffa08,Clean up versions and deps,"@@ -4,10 +4,10 @@ targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7
 
 dependencies {
-  compileOnly deps.lintapi
-  compileOnly deps.lintchecks
-  testImplementation deps.lint
-  testImplementation deps.linttests
+  compileOnly deps.lint.api
+  compileOnly deps.lint.checks
+  testImplementation deps.lint.core
+  testImplementation deps.lint.tests
   testImplementation deps.festassert
 }","@@ -4,10 +4,10 @@ targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7
 
 dependencies {
-  compileOnly deps.lintapi
-  compileOnly deps.lintchecks
-  testImplementation deps.lint
-  testImplementation deps.linttests
+  compileOnly deps.lint.api
+  compileOnly deps.lint.checks
+  testImplementation deps.lint.core
+  testImplementation deps.lint.tests
   testImplementation deps.festassert
 }",False,other
timber-sample/build.gradle,timber-sample/build.gradle,6d2d1a46bf0724abea3cae0ee6bd474ed2a211c7,030a7fac543c4590224df762e08a686c854ffa08,Clean up versions and deps,"@@ -1,18 +1,18 @@
 apply plugin: 'com.android.application'
 
 android {
-  compileSdkVersion rootProject.ext.compileSdkVersion
-  buildToolsVersion rootProject.ext.buildToolsVersion
+  compileSdkVersion versions.compileSdk
+  buildToolsVersion versions.buildTools
 
   compileOptions {
-    sourceCompatibility rootProject.ext.sourceCompatibilityVersion
-    targetCompatibility rootProject.ext.targetCompatibilityVersion
+    sourceCompatibility JavaVersion.VERSION_1_7
+    targetCompatibility JavaVersion.VERSION_1_7
   }
 
   defaultConfig {
     applicationId 'com.example.timber'
-    minSdkVersion rootProject.ext.minSdkVersion
-    targetSdkVersion rootProject.ext.targetSdkVersion
+    minSdkVersion versions.minSdk
+    targetSdkVersion versions.compileSdk
     versionCode 1
     versionName '1.0.0'
   }
@@ -26,9 +26,8 @@ android {
 
 dependencies {
   implementation project(':timber')
-  implementation 'com.jakewharton:butterknife:8.8.1'
-
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
+  implementation deps.butterknife.runtime
+  annotationProcessor deps.butterknife.compiler
   
   lintChecks project(':timber-lint')
 }","@@ -1,18 +1,18 @@
 apply plugin: 'com.android.application'
 
 android {
-  compileSdkVersion rootProject.ext.compileSdkVersion
-  buildToolsVersion rootProject.ext.buildToolsVersion
+  compileSdkVersion versions.compileSdk
+  buildToolsVersion versions.buildTools
 
   compileOptions {
-    sourceCompatibility rootProject.ext.sourceCompatibilityVersion
-    targetCompatibility rootProject.ext.targetCompatibilityVersion
+    sourceCompatibility JavaVersion.VERSION_1_7
+    targetCompatibility JavaVersion.VERSION_1_7
   }
 
   defaultConfig {
     applicationId 'com.example.timber'
-    minSdkVersion rootProject.ext.minSdkVersion
-    targetSdkVersion rootProject.ext.targetSdkVersion
+    minSdkVersion versions.minSdk
+    targetSdkVersion versions.compileSdk
     versionCode 1
     versionName '1.0.0'
   }
@@ -26,9 +26,8 @@ android {
 
 dependencies {
   implementation project(':timber')
-  implementation 'com.jakewharton:butterknife:8.8.1'
-
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
+  implementation deps.butterknife.runtime
+  annotationProcessor deps.butterknife.compiler
   
   lintChecks project(':timber-lint')
 }",False,other
timber/build.gradle,timber/build.gradle,6d2d1a46bf0724abea3cae0ee6bd474ed2a211c7,030a7fac543c4590224df762e08a686c854ffa08,Clean up versions and deps,"@@ -19,11 +19,11 @@ afterEvaluate {
 }
 
 android {
-  compileSdkVersion rootProject.ext.compileSdkVersion
-  buildToolsVersion rootProject.ext.buildToolsVersion
+  compileSdkVersion versions.compileSdk
+  buildToolsVersion versions.buildTools
 
   defaultConfig {
-    minSdkVersion rootProject.ext.minSdkVersion
+    minSdkVersion versions.minSdk
     consumerProguardFiles 'consumer-proguard-rules.pro'
   }
 
@@ -34,7 +34,7 @@ android {
 }
 
 dependencies {
-  compileOnly 'org.jetbrains:annotations:15.0'
+  compileOnly deps.annotations
 
   testImplementation deps.festandroid
   testImplementation deps.festassert","@@ -19,11 +19,11 @@ afterEvaluate {
 }
 
 android {
-  compileSdkVersion rootProject.ext.compileSdkVersion
-  buildToolsVersion rootProject.ext.buildToolsVersion
+  compileSdkVersion versions.compileSdk
+  buildToolsVersion versions.buildTools
 
   defaultConfig {
-    minSdkVersion rootProject.ext.minSdkVersion
+    minSdkVersion versions.minSdk
     consumerProguardFiles 'consumer-proguard-rules.pro'
   }
 
@@ -34,7 +34,7 @@ android {
 }
 
 dependencies {
-  compileOnly 'org.jetbrains:annotations:15.0'
+  compileOnly deps.annotations
 
   testImplementation deps.festandroid
   testImplementation deps.festassert",False,other
build.gradle,build.gradle,74d6f53b1f851c6a6bb4942031ae978cf32d110c,5a7c481fc982e631e67084332c412a5ddc5962fe,Replace lintrules plugin with built-in lint configuration,"@@ -36,14 +36,11 @@ buildscript {
   repositories {
     jcenter()
     google()
-    maven {
-      url 'https://plugins.gradle.org/m2/'
-    }
   }
+
   dependencies {
     classpath deps.androidPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
-    classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
   }
 }","@@ -36,14 +36,11 @@ buildscript {
   repositories {
     jcenter()
     google()
-    maven {
-      url 'https://plugins.gradle.org/m2/'
-    }
   }
+
   dependencies {
     classpath deps.androidPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
-    classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
   }
 }",False,other
timber/build.gradle,timber/build.gradle,74d6f53b1f851c6a6bb4942031ae978cf32d110c,5a7c481fc982e631e67084332c412a5ddc5962fe,Replace lintrules plugin with built-in lint configuration,"@@ -1,5 +1,4 @@
 apply plugin: 'com.android.library'
-apply plugin: 'com.kageiit.lintrules'
 apply plugin: 'checkstyle'
 
 task checkstyle(type: Checkstyle) {
@@ -41,7 +40,7 @@ dependencies {
   testImplementation deps.junit
   testImplementation deps.robolectric
 
-  lintRules project(':timber-lint')
+  lintChecks project(':timber-lint')
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -1,5 +1,4 @@
 apply plugin: 'com.android.library'
-apply plugin: 'com.kageiit.lintrules'
 apply plugin: 'checkstyle'
 
 task checkstyle(type: Checkstyle) {
@@ -41,7 +40,7 @@ dependencies {
   testImplementation deps.junit
   testImplementation deps.robolectric
 
-  lintRules project(':timber-lint')
+  lintChecks project(':timber-lint')
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
timber-lint/build.gradle,timber-lint/build.gradle,c60efdcb8d252b384333a54bfddd418e4cad7324,74d6f53b1f851c6a6bb4942031ae978cf32d110c,Update to new Lint Registry for UAST support,"@@ -13,6 +13,6 @@ dependencies {
 
 jar {
   manifest {
-    attributes('Lint-Registry': 'timber.lint.IssueRegistry')
+    attributes('Lint-Registry-v2': 'timber.lint.IssueRegistry')
   }
 }","@@ -13,6 +13,6 @@ dependencies {
 
 jar {
   manifest {
-    attributes('Lint-Registry': 'timber.lint.IssueRegistry')
+    attributes('Lint-Registry-v2': 'timber.lint.IssueRegistry')
   }
 }",False,other
build.gradle,build.gradle,80fc0857bfe1f3088e1380af2362f1f441bf4b79,c60efdcb8d252b384333a54bfddd418e4cad7324,Port lint checks to UAST,"@@ -7,7 +7,7 @@ buildscript {
       'buildTools': '26.0.1',
 
       'androidPlugin': '3.0.0-beta6',
-      'androidTools': '25.3.0',
+      'androidTools': '26.0.0-beta6',
 
       'butterknife': '8.8.1',
   ]","@@ -7,7 +7,7 @@ buildscript {
       'buildTools': '26.0.1',
 
       'androidPlugin': '3.0.0-beta6',
-      'androidTools': '25.3.0',
+      'androidTools': '26.0.0-beta6',
 
       'butterknife': '8.8.1',
   ]",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,80fc0857bfe1f3088e1380af2362f1f441bf4b79,c60efdcb8d252b384333a54bfddd418e4cad7324,Port lint checks to UAST,"@@ -12,19 +12,11 @@ import com.android.tools.lint.detector.api.JavaContext;
 import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
-import com.intellij.psi.JavaElementVisitor;
-import com.intellij.psi.PsiBinaryExpression;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
-import com.intellij.psi.PsiCodeBlock;
-import com.intellij.psi.PsiConditionalExpression;
-import com.intellij.psi.PsiElement;
-import com.intellij.psi.PsiExpression;
-import com.intellij.psi.PsiIfStatement;
 import com.intellij.psi.PsiLiteralExpression;
 import com.intellij.psi.PsiMethod;
 import com.intellij.psi.PsiMethodCallExpression;
-import com.intellij.psi.PsiReferenceExpression;
 import com.intellij.psi.PsiType;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -33,6 +25,14 @@ import java.util.Date;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.jetbrains.uast.UBinaryExpression;
+import org.jetbrains.uast.UCallExpression;
+import org.jetbrains.uast.UElement;
+import org.jetbrains.uast.UExpression;
+import org.jetbrains.uast.UIfExpression;
+import org.jetbrains.uast.UMethod;
+import org.jetbrains.uast.UQualifiedReferenceExpression;
+import org.jetbrains.uast.UastBinaryOperator;
 
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
@@ -46,8 +46,10 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
+import static org.jetbrains.uast.UastBinaryOperator.PLUS;
+import static org.jetbrains.uast.UastBinaryOperator.PLUS_ASSIGN;
 
-public final class WrongTimberUsageDetector extends Detector implements Detector.JavaPsiScanner {
+public final class WrongTimberUsageDetector extends Detector implements Detector.UastScanner {
   private final static String GET_STRING_METHOD = ""getString"";
   private final static String TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)"";
 
@@ -55,10 +57,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
   }
 
-  @Override public void visitMethod(JavaContext context, JavaElementVisitor visitor,
-      PsiMethodCallExpression call, PsiMethod method) {
-    PsiReferenceExpression methodExpression = call.getMethodExpression();
-    String methodName = methodExpression.getReferenceName();
+  @Override public void visitMethod(JavaContext context, UCallExpression call, PsiMethod method) {
+    String methodName = call.getMethodName();
     JavaEvaluator evaluator = context.getEvaluator();
 
     if (""format"".equals(methodName) && evaluator.isMemberInClass(method, ""java.lang.String"")) {
@@ -70,7 +70,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return;
     }
     if (evaluator.isMemberInClass(method, ""android.util.Log"")) {
-      context.report(ISSUE_LOG, methodExpression, context.getLocation(methodExpression),
+      context.report(ISSUE_LOG, context.getLocation(call.getReceiver()),
           ""Using 'Log' instead of 'Timber'"");
       return;
     }
@@ -83,18 +83,19 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkNestedStringFormat(JavaContext context, PsiMethodCallExpression call) {
-    PsiElement current = call;
+  private static void checkNestedStringFormat(JavaContext context, UCallExpression call) {
+    UElement current = call;
     while (true) {
-      current = LintUtils.skipParentheses(current.getParent());
-      if (current == null || current instanceof PsiCodeBlock) {
+      current = LintUtils.skipParentheses(current.getUastParent());
+      if (current == null || current instanceof UMethod) {
         // Reached AST root or code block node; String.format not inside Timber.X(..).
         return;
       }
-      if (current instanceof PsiMethodCallExpression) {
-        PsiMethodCallExpression maybeTimberLog = (PsiMethodCallExpression) current;
-        if (Pattern.matches(""timber\\.log\\.Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP,
-            maybeTimberLog.getMethodExpression().getQualifiedName())) {
+      if (current instanceof UCallExpression) {
+        UCallExpression maybeTimberLogCall = (UCallExpression) current;
+        JavaEvaluator evaluator = context.getEvaluator();
+        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, maybeTimberLogCall.getMethodName())
+            && evaluator.isMemberInClass(maybeTimberLogCall.resolve(), ""timber.log.Timber"")) {
           context.report(ISSUE_FORMAT, call, context.getLocation(call),
               ""Using 'String#format' inside of 'Timber'"");
           return;
@@ -103,8 +104,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkTagLength(JavaContext context, PsiMethodCallExpression call) {
-    PsiExpression argument = call.getArgumentList().getExpressions()[0];
+  private static void checkTagLength(JavaContext context, UCallExpression call) {
+    List<UExpression> arguments = call.getValueArguments();
+    UExpression argument = arguments.get(0);
     String tag = evaluateString(context, argument, true);
     if (tag != null && tag.length() > 23) {
       String message =
@@ -114,19 +116,20 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkFormatArguments(JavaContext context, PsiMethodCallExpression call) {
-    PsiExpression[] arguments = call.getArgumentList().getExpressions();
-    if (arguments.length == 0) {
+  private static void checkFormatArguments(JavaContext context, UCallExpression call) {
+    List<UExpression> arguments = call.getValueArguments();
+    int numArguments = arguments.size();
+    if (numArguments == 0) {
       return;
     }
 
     int startIndexOfArguments = 1;
-    PsiExpression formatStringArg = arguments[0];
+    UExpression formatStringArg = arguments.get(0);
     if (isSubclassOf(context, formatStringArg, Throwable.class)) {
-      if (arguments.length == 1) {
+      if (numArguments == 1) {
         return;
       }
-      formatStringArg = arguments[1];
+      formatStringArg = arguments.get(1);
       startIndexOfArguments++;
     }
 
@@ -136,32 +139,32 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return;
     }
 
-    int argumentCount = getFormatArgumentCount(formatString);
-    int passedArgCount = arguments.length - startIndexOfArguments;
-    if (argumentCount < passedArgCount) {
+    int formatArgumentCount = getFormatArgumentCount(formatString);
+    int passedArgCount = numArguments - startIndexOfArguments;
+    if (formatArgumentCount < passedArgCount) {
       context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
           ""Wrong argument count, format string `%1$s` requires ""
-              + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+              + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
           passedArgCount));
       return;
     }
 
-    if (argumentCount == 0) {
+    if (formatArgumentCount == 0) {
       return;
     }
 
     List<String> types = getStringArgumentTypes(formatString);
-    PsiExpression argument = null;
+    UExpression argument = null;
     int argumentIndex = startIndexOfArguments;
     boolean valid;
     for (int i = 0; i < types.size(); i++) {
       String formatType = types.get(i);
-      if (argumentIndex != arguments.length) {
-        argument = arguments[argumentIndex++];
+      if (argumentIndex != numArguments) {
+        argument = arguments.get(argumentIndex++);
       } else {
         context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
             ""Wrong argument count, format string `%1$s` requires ""
-                + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+                + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
             passedArgCount));
       }
 
@@ -174,7 +177,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       if (formatType.length() >= 2
           && Character.toLowerCase(formatType.charAt(formatType.length() - 2)) == 't') {
         // Date time conversion.
-        switch(last) {
+        switch (last) {
           // time
           case 'H':
           case 'I':
@@ -209,22 +212,21 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
           case 'D':
           case 'F':
           case 'c':
-            valid = type == Integer.TYPE
-                    || type == Calendar.class
-                    || type == Date.class;
+            valid = type == Integer.TYPE || type == Calendar.class || type == Date.class;
             if (!valid) {
-              String message = String.format(""Wrong argument type for date formatting argument '#%1$d' ""
-                              + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                              + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-                      type.getSimpleName(), startIndexOfArguments + i + 1);
+              String message = String.format(
+                  ""Wrong argument type for date formatting argument '#%1$d' ""
+                      + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                      + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
+                  type.getSimpleName(), startIndexOfArguments + i + 1);
               context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
             }
             break;
           default:
             String message = String.format(""Wrong suffix for date format '#%1$d' ""
-                            + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                            + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-                    type.getSimpleName(), startIndexOfArguments + i + 1);
+                    + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                    + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
+                type.getSimpleName(), startIndexOfArguments + i + 1);
             context.report(ISSUE_FORMAT, call, context.getLocation(argument), message);
         }
         continue;
@@ -275,7 +277,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static Class<?> getType(PsiExpression expression) {
+  private static Class<?> getType(UExpression expression) {
     if (expression == null) {
       return null;
     }
@@ -307,7 +309,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
     }
 
-    PsiType type = expression.getType();
+    PsiType type = expression.getExpressionType();
     if (type != null) {
       Class<?> typeClass = getTypeClass(type);
       return typeClass != null ? typeClass : Object.class;
@@ -375,8 +377,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static boolean isSubclassOf(JavaContext context, PsiExpression expression, Class<?> cls) {
-    PsiType expressionType = expression.getType();
+  private static boolean isSubclassOf(JavaContext context, UExpression expression, Class<?> cls) {
+    PsiType expressionType = expression.getExpressionType();
     if (expressionType instanceof PsiClassType) {
       PsiClassType classType = (PsiClassType) expressionType;
       PsiClass resolvedClass = classType.resolve();
@@ -470,10 +472,11 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return max;
   }
 
-  private static void checkMethodArguments(JavaContext context, PsiMethodCallExpression call) {
-    PsiExpression[] arguments = call.getArgumentList().getExpressions();
-    for (int i = 0; i < arguments.length; i++) {
-      PsiExpression argument = arguments[i];
+  private static void checkMethodArguments(JavaContext context, UCallExpression call) {
+    List<UExpression> arguments = call.getValueArguments();
+    int numArguments = arguments.size();
+    for (int i = 0; i < numArguments; i++) {
+      UExpression argument = arguments.get(i);
       if (checkElement(context, call, argument)) {
         break;
       }
@@ -484,67 +487,67 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkExceptionLogging(JavaContext context, PsiMethodCallExpression call) {
-    PsiExpression[] arguments = call.getArgumentList().getExpressions();
+  private static void checkExceptionLogging(JavaContext context, UCallExpression call) {
+    List<UExpression> arguments = call.getValueArguments();
 
-    if (arguments.length > 1 && isSubclassOf(context, arguments[0], Throwable.class)) {
-      PsiExpression secondArgument = arguments[1];
+    if (arguments.size() > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
+      UExpression arg2 = arguments.get(1);
 
-      if (secondArgument instanceof PsiMethodCallExpression) {
-        PsiMethodCallExpression arg2Call = (PsiMethodCallExpression) secondArgument;
-
-        if (isCallFromMethodInSubclassOf(context, arg2Call, ""getMessage"", ""java.lang.Throwable"")) {
-          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument,
-              context.getLocation(secondArgument),
+      if (arg2 instanceof UQualifiedReferenceExpression) {
+        UQualifiedReferenceExpression arg2Expression = (UQualifiedReferenceExpression) arg2;
+        UExpression selector = arg2Expression.getSelector();
+        // what other UExpressions could be a selector?
+        if (isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
+            ""java.lang.Throwable"")) {
+          context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(arg2),
               ""Explicitly logging exception message is redundant"");
           return;
         }
       }
 
-      String s = evaluateString(context, secondArgument, true);
+      String s = evaluateString(context, arg2, true);
       if (s == null || s.isEmpty()) {
-        context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
+        context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(arg2),
             ""Use single-argument log method instead of null/empty message"");
       }
     }
   }
 
-  private static boolean isCallFromMethodInSubclassOf(JavaContext context,
-      PsiMethodCallExpression call, String methodName, String className) {
+  private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,
+      String methodName, String className) {
     JavaEvaluator evaluator = context.getEvaluator();
-    PsiMethod method = call.resolveMethod();
+    PsiMethod method = call.resolve();
     return method != null //
-        && methodName.equals(call.getMethodExpression().getReferenceName()) //
+        && methodName.equals(call.getMethodName()) //
         && evaluator.isMemberInSubClassOf(method, className, false);
   }
 
-  private static boolean checkElement(JavaContext context, PsiMethodCallExpression call,
-      PsiElement element) {
-    if (element instanceof PsiBinaryExpression) {
-      Class argumentType = getType((PsiBinaryExpression) element);
-      if (argumentType == String.class) {
-        context.report(ISSUE_BINARY, call, context.getLocation(element),
-            ""Replace String concatenation with Timber's string formatting"");
-        return true;
+  private static boolean checkElement(JavaContext context, UCallExpression call, UElement element) {
+    if (element instanceof UBinaryExpression) {
+      UBinaryExpression binaryExpression = (UBinaryExpression) element;
+      UastBinaryOperator operator = binaryExpression.getOperator();
+      if (operator == PLUS || operator == PLUS_ASSIGN) {
+        Class argumentType = getType(binaryExpression);
+        if (argumentType == String.class) {
+          context.report(ISSUE_BINARY, call, context.getLocation(element),
+              ""Replace String concatenation with Timber's string formatting"");
+          return true;
+        }
       }
-    } else if (element instanceof PsiIfStatement || element instanceof PsiConditionalExpression) {
+    } else if (element instanceof UIfExpression) {
       return checkConditionalUsage(context, call, element);
     }
     return false;
   }
 
-  private static boolean checkConditionalUsage(JavaContext context, PsiMethodCallExpression call,
-      PsiElement element) {
-    PsiElement thenElement;
-    PsiElement elseElement;
-    if (element instanceof PsiIfStatement) {
-      PsiIfStatement ifArg = (PsiIfStatement) element;
-      thenElement = ifArg.getThenBranch();
-      elseElement = ifArg.getElseBranch();
-    } else if (element instanceof PsiConditionalExpression) {
-      PsiConditionalExpression inlineIfArg = (PsiConditionalExpression) element;
-      thenElement = inlineIfArg.getThenExpression();
-      elseElement = inlineIfArg.getElseExpression();
+  private static boolean checkConditionalUsage(JavaContext context, UCallExpression call,
+      UElement element) {
+    UElement thenElement;
+    UElement elseElement;
+    if (element instanceof UIfExpression) {
+      UIfExpression ifArg = (UIfExpression) element;
+      thenElement = ifArg.getThenExpression();
+      elseElement = ifArg.getElseExpression();
     } else {
       return false;
     }
@@ -592,10 +595,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
               + "" of the arguments that you passed to your formatting call."", Category.MESSAGES, 9,
           Severity.ERROR,
           new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_TAG_LENGTH =
-      Issue.create(""TimberTagLength"", ""Too Long Log Tags"", ""Log tags are only allowed to be at most""
-              + "" 23 tag characters long."", Category.CORRECTNESS, 5, Severity.ERROR,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_TAG_LENGTH = Issue.create(""TimberTagLength"", ""Too Long Log Tags"",
+      ""Log tags are only allowed to be at most"" + "" 23 tag characters long."", Category.CORRECTNESS,
+      5, Severity.ERROR, new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
   public static final Issue ISSUE_EXCEPTION_LOGGING =
       Issue.create(""TimberExceptionLogging"", ""Exception Logging"", ""Explicitly including the""
               + "" exception message is redundant when supplying an exception to log."",","@@ -12,19 +12,11 @@ import com.android.tools.lint.detector.api.JavaContext;
 import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
-import com.intellij.psi.JavaElementVisitor;
-import com.intellij.psi.PsiBinaryExpression;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
-import com.intellij.psi.PsiCodeBlock;
-import com.intellij.psi.PsiConditionalExpression;
-import com.intellij.psi.PsiElement;
-import com.intellij.psi.PsiExpression;
-import com.intellij.psi.PsiIfStatement;
 import com.intellij.psi.PsiLiteralExpression;
 import com.intellij.psi.PsiMethod;
 import com.intellij.psi.PsiMethodCallExpression;
-import com.intellij.psi.PsiReferenceExpression;
 import com.intellij.psi.PsiType;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -33,6 +25,14 @@ import java.util.Date;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.jetbrains.uast.UBinaryExpression;
+import org.jetbrains.uast.UCallExpression;
+import org.jetbrains.uast.UElement;
+import org.jetbrains.uast.UExpression;
+import org.jetbrains.uast.UIfExpression;
+import org.jetbrains.uast.UMethod;
+import org.jetbrains.uast.UQualifiedReferenceExpression;
+import org.jetbrains.uast.UastBinaryOperator;
 
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
@@ -46,8 +46,10 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
+import static org.jetbrains.uast.UastBinaryOperator.PLUS;
+import static org.jetbrains.uast.UastBinaryOperator.PLUS_ASSIGN;
 
-public final class WrongTimberUsageDetector extends Detector implements Detector.JavaPsiScanner {
+public final class WrongTimberUsageDetector extends Detector implements Detector.UastScanner {
   private final static String GET_STRING_METHOD = ""getString"";
   private final static String TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)"";
 
@@ -55,10 +57,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
   }
 
-  @Override public void visitMethod(JavaContext context, JavaElementVisitor visitor,
-      PsiMethodCallExpression call, PsiMethod method) {
-    PsiReferenceExpression methodExpression = call.getMethodExpression();
-    String methodName = methodExpression.getReferenceName();
+  @Override public void visitMethod(JavaContext context, UCallExpression call, PsiMethod method) {
+    String methodName = call.getMethodName();
     JavaEvaluator evaluator = context.getEvaluator();
 
     if (""format"".equals(methodName) && evaluator.isMemberInClass(method, ""java.lang.String"")) {
@@ -70,7 +70,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return;
     }
     if (evaluator.isMemberInClass(method, ""android.util.Log"")) {
-      context.report(ISSUE_LOG, methodExpression, context.getLocation(methodExpression),
+      context.report(ISSUE_LOG, context.getLocation(call.getReceiver()),
           ""Using 'Log' instead of 'Timber'"");
       return;
     }
@@ -83,18 +83,19 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkNestedStringFormat(JavaContext context, PsiMethodCallExpression call) {
-    PsiElement current = call;
+  private static void checkNestedStringFormat(JavaContext context, UCallExpression call) {
+    UElement current = call;
     while (true) {
-      current = LintUtils.skipParentheses(current.getParent());
-      if (current == null || current instanceof PsiCodeBlock) {
+      current = LintUtils.skipParentheses(current.getUastParent());
+      if (current == null || current instanceof UMethod) {
         // Reached AST root or code block node; String.format not inside Timber.X(..).
         return;
       }
-      if (current instanceof PsiMethodCallExpression) {
-        PsiMethodCallExpression maybeTimberLog = (PsiMethodCallExpression) current;
-        if (Pattern.matches(""timber\\.log\\.Timber\\."" + TIMBER_TREE_LOG_METHOD_REGEXP,
-            maybeTimberLog.getMethodExpression().getQualifiedName())) {
+      if (current instanceof UCallExpression) {
+        UCallExpression maybeTimberLogCall = (UCallExpression) current;
+        JavaEvaluator evaluator = context.getEvaluator();
+        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, maybeTimberLogCall.getMethodName())
+            && evaluator.isMemberInClass(maybeTimberLogCall.resolve(), ""timber.log.Timber"")) {
           context.report(ISSUE_FORMAT, call, context.getLocation(call),
               ""Using 'String#format' inside of 'Timber'"");
           return;
@@ -103,8 +104,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkTagLength(JavaContext context, PsiMethodCallExpression call) {
-    PsiExpression argument = call.getArgumentList().getExpressions()[0];
+  private static void checkTagLength(JavaContext context, UCallExpression call) {
+    List<UExpression> arguments = call.getValueArguments();
+    UExpression argument = arguments.get(0);
     String tag = evaluateString(context, argument, true);
     if (tag != null && tag.length() > 23) {
       String message =
@@ -114,19 +116,20 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkFormatArguments(JavaContext context, PsiMethodCallExpression call) {
-    PsiExpression[] arguments = call.getArgumentList().getExpressions();
-    if (arguments.length == 0) {
+  private static void checkFormatArguments(JavaContext context, UCallExpression call) {
+    List<UExpression> arguments = call.getValueArguments();
+    int numArguments = arguments.size();
+    if (numArguments == 0) {
       return;
     }
 
     int startIndexOfArguments = 1;
-    PsiExpression formatStringArg = arguments[0];
+    UExpression formatStringArg = arguments.get(0);
     if (isSubclassOf(context, formatStringArg, Throwable.class)) {
-      if (arguments.length == 1) {
+      if (numArguments == 1) {
         return;
       }
-      formatStringArg = arguments[1];
+      formatStringArg = arguments.get(1);
       startIndexOfArguments++;
     }
 
@@ -136,32 +139,32 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return;
     }
 
-    int argumentCount = getFormatArgumentCount(formatString);
-    int passedArgCount = arguments.length - startIndexOfArguments;
-    if (argumentCount < passedArgCount) {
+    int formatArgumentCount = getFormatArgumentCount(formatString);
+    int passedArgCount = numArguments - startIndexOfArguments;
+    if (formatArgumentCount < passedArgCount) {
       context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
           ""Wrong argument count, format string `%1$s` requires ""
-              + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+              + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
           passedArgCount));
       return;
     }
 
-    if (argumentCount == 0) {
+    if (formatArgumentCount == 0) {
       return;
     }
 
     List<String> types = getStringArgumentTypes(formatString);
-    PsiExpression argument = null;
+    UExpression argument = null;
     int argumentIndex = startIndexOfArguments;
     boolean valid;
     for (int i = 0; i < types.size(); i++) {
       String formatType = types.get(i);
-      if (argumentIndex != arguments.length) {
-        argument = arguments[argumentIndex++];
+      if (argumentIndex != numArguments) {
+        argument = arguments.get(argumentIndex++);
       } else {
         context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
             ""Wrong argument count, format string `%1$s` requires ""
-                + ""`%2$d` but format call supplies `%3$d`"", formatString, argumentCount,
+                + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
             passedArgCount));
       }
 
@@ -174,7 +177,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       if (formatType.length() >= 2
           && Character.toLowerCase(formatType.charAt(formatType.length() - 2)) == 't') {
         // Date time conversion.
-        switch(last) {
+        switch (last) {
           // time
           case 'H':
           case 'I':
@@ -209,22 +212,21 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
           case 'D':
           case 'F':
           case 'c':
-            valid = type == Integer.TYPE
-                    || type == Calendar.class
-                    || type == Date.class;
+            valid = type == Integer.TYPE || type == Calendar.class || type == Date.class;
             if (!valid) {
-              String message = String.format(""Wrong argument type for date formatting argument '#%1$d' ""
-                              + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                              + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-                      type.getSimpleName(), startIndexOfArguments + i + 1);
+              String message = String.format(
+                  ""Wrong argument type for date formatting argument '#%1$d' ""
+                      + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                      + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
+                  type.getSimpleName(), startIndexOfArguments + i + 1);
               context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
             }
             break;
           default:
             String message = String.format(""Wrong suffix for date format '#%1$d' ""
-                            + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                            + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-                    type.getSimpleName(), startIndexOfArguments + i + 1);
+                    + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
+                    + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
+                type.getSimpleName(), startIndexOfArguments + i + 1);
             context.report(ISSUE_FORMAT, call, context.getLocation(argument), message);
         }
         continue;
@@ -275,7 +277,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static Class<?> getType(PsiExpression expression) {
+  private static Class<?> getType(UExpression expression) {
     if (expression == null) {
       return null;
     }
@@ -307,7 +309,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
     }
 
-    PsiType type = expression.getType();
+    PsiType type = expression.getExpressionType();
     if (type != null) {
       Class<?> typeClass = getTypeClass(type);
       return typeClass != null ? typeClass : Object.class;
@@ -375,8 +377,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static boolean isSubclassOf(JavaContext context, PsiExpression expression, Class<?> cls) {
-    PsiType expressionType = expression.getType();
+  private static boolean isSubclassOf(JavaContext context, UExpression expression, Class<?> cls) {
+    PsiType expressionType = expression.getExpressionType();
     if (expressionType instanceof PsiClassType) {
       PsiClassType classType = (PsiClassType) expressionType;
       PsiClass resolvedClass = classType.resolve();
@@ -470,10 +472,11 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return max;
   }
 
-  private static void checkMethodArguments(JavaContext context, PsiMethodCallExpression call) {
-    PsiExpression[] arguments = call.getArgumentList().getExpressions();
-    for (int i = 0; i < arguments.length; i++) {
-      PsiExpression argument = arguments[i];
+  private static void checkMethodArguments(JavaContext context, UCallExpression call) {
+    List<UExpression> arguments = call.getValueArguments();
+    int numArguments = arguments.size();
+    for (int i = 0; i < numArguments; i++) {
+      UExpression argument = arguments.get(i);
       if (checkElement(context, call, argument)) {
         break;
       }
@@ -484,67 +487,67 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkExceptionLogging(JavaContext context, PsiMethodCallExpression call) {
-    PsiExpression[] arguments = call.getArgumentList().getExpressions();
+  private static void checkExceptionLogging(JavaContext context, UCallExpression call) {
+    List<UExpression> arguments = call.getValueArguments();
 
-    if (arguments.length > 1 && isSubclassOf(context, arguments[0], Throwable.class)) {
-      PsiExpression secondArgument = arguments[1];
+    if (arguments.size() > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
+      UExpression arg2 = arguments.get(1);
 
-      if (secondArgument instanceof PsiMethodCallExpression) {
-        PsiMethodCallExpression arg2Call = (PsiMethodCallExpression) secondArgument;
-
-        if (isCallFromMethodInSubclassOf(context, arg2Call, ""getMessage"", ""java.lang.Throwable"")) {
-          context.report(ISSUE_EXCEPTION_LOGGING, secondArgument,
-              context.getLocation(secondArgument),
+      if (arg2 instanceof UQualifiedReferenceExpression) {
+        UQualifiedReferenceExpression arg2Expression = (UQualifiedReferenceExpression) arg2;
+        UExpression selector = arg2Expression.getSelector();
+        // what other UExpressions could be a selector?
+        if (isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
+            ""java.lang.Throwable"")) {
+          context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(arg2),
               ""Explicitly logging exception message is redundant"");
           return;
         }
       }
 
-      String s = evaluateString(context, secondArgument, true);
+      String s = evaluateString(context, arg2, true);
       if (s == null || s.isEmpty()) {
-        context.report(ISSUE_EXCEPTION_LOGGING, secondArgument, context.getLocation(secondArgument),
+        context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(arg2),
             ""Use single-argument log method instead of null/empty message"");
       }
     }
   }
 
-  private static boolean isCallFromMethodInSubclassOf(JavaContext context,
-      PsiMethodCallExpression call, String methodName, String className) {
+  private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,
+      String methodName, String className) {
     JavaEvaluator evaluator = context.getEvaluator();
-    PsiMethod method = call.resolveMethod();
+    PsiMethod method = call.resolve();
     return method != null //
-        && methodName.equals(call.getMethodExpression().getReferenceName()) //
+        && methodName.equals(call.getMethodName()) //
         && evaluator.isMemberInSubClassOf(method, className, false);
   }
 
-  private static boolean checkElement(JavaContext context, PsiMethodCallExpression call,
-      PsiElement element) {
-    if (element instanceof PsiBinaryExpression) {
-      Class argumentType = getType((PsiBinaryExpression) element);
-      if (argumentType == String.class) {
-        context.report(ISSUE_BINARY, call, context.getLocation(element),
-            ""Replace String concatenation with Timber's string formatting"");
-        return true;
+  private static boolean checkElement(JavaContext context, UCallExpression call, UElement element) {
+    if (element instanceof UBinaryExpression) {
+      UBinaryExpression binaryExpression = (UBinaryExpression) element;
+      UastBinaryOperator operator = binaryExpression.getOperator();
+      if (operator == PLUS || operator == PLUS_ASSIGN) {
+        Class argumentType = getType(binaryExpression);
+        if (argumentType == String.class) {
+          context.report(ISSUE_BINARY, call, context.getLocation(element),
+              ""Replace String concatenation with Timber's string formatting"");
+          return true;
+        }
       }
-    } else if (element instanceof PsiIfStatement || element instanceof PsiConditionalExpression) {
+    } else if (element instanceof UIfExpression) {
       return checkConditionalUsage(context, call, element);
     }
     return false;
   }
 
-  private static boolean checkConditionalUsage(JavaContext context, PsiMethodCallExpression call,
-      PsiElement element) {
-    PsiElement thenElement;
-    PsiElement elseElement;
-    if (element instanceof PsiIfStatement) {
-      PsiIfStatement ifArg = (PsiIfStatement) element;
-      thenElement = ifArg.getThenBranch();
-      elseElement = ifArg.getElseBranch();
-    } else if (element instanceof PsiConditionalExpression) {
-      PsiConditionalExpression inlineIfArg = (PsiConditionalExpression) element;
-      thenElement = inlineIfArg.getThenExpression();
-      elseElement = inlineIfArg.getElseExpression();
+  private static boolean checkConditionalUsage(JavaContext context, UCallExpression call,
+      UElement element) {
+    UElement thenElement;
+    UElement elseElement;
+    if (element instanceof UIfExpression) {
+      UIfExpression ifArg = (UIfExpression) element;
+      thenElement = ifArg.getThenExpression();
+      elseElement = ifArg.getElseExpression();
     } else {
       return false;
     }
@@ -592,10 +595,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
               + "" of the arguments that you passed to your formatting call."", Category.MESSAGES, 9,
           Severity.ERROR,
           new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_TAG_LENGTH =
-      Issue.create(""TimberTagLength"", ""Too Long Log Tags"", ""Log tags are only allowed to be at most""
-              + "" 23 tag characters long."", Category.CORRECTNESS, 5, Severity.ERROR,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
+  public static final Issue ISSUE_TAG_LENGTH = Issue.create(""TimberTagLength"", ""Too Long Log Tags"",
+      ""Log tags are only allowed to be at most"" + "" 23 tag characters long."", Category.CORRECTNESS,
+      5, Severity.ERROR, new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
   public static final Issue ISSUE_EXCEPTION_LOGGING =
       Issue.create(""TimberExceptionLogging"", ""Exception Logging"", ""Explicitly including the""
               + "" exception message is redundant when supplying an exception to log."",",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,80fc0857bfe1f3088e1380af2362f1f441bf4b79,c60efdcb8d252b384333a54bfddd418e4cad7324,Port lint checks to UAST,"@@ -34,7 +34,7 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
     assertThat(lintProject(java(source))).isEqualTo(""src/foo/Example.java:5: ""
         + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
         + ""    Log.d(\""TAG\"", \""msg\"");\n""
-        + ""    ~~~~~\n""
+        + ""    ~~~\n""
         + ""0 errors, 1 warnings\n"");
   }","@@ -34,7 +34,7 @@ public class WrongTimberUsageDetectorTest extends LintDetectorTest {
     assertThat(lintProject(java(source))).isEqualTo(""src/foo/Example.java:5: ""
         + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
         + ""    Log.d(\""TAG\"", \""msg\"");\n""
-        + ""    ~~~~~\n""
+        + ""    ~~~\n""
         + ""0 errors, 1 warnings\n"");
   }",False,test
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,709781a569afeb8a28ee2d208860203da21611d5,80fc0857bfe1f3088e1380af2362f1f441bf4b79,Migrate lint tests to new TestLintTask style,"@@ -1,382 +1,476 @@
 package timber.lint;
 
-import com.android.tools.lint.checks.infrastructure.LintDetectorTest;
-import com.android.tools.lint.detector.api.Detector;
-import com.android.tools.lint.detector.api.Issue;
-import java.util.Arrays;
-import java.util.List;
-import org.intellij.lang.annotations.Language;
+import com.android.tools.lint.checks.infrastructure.TestFile;
+import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
+import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
 
-public class WrongTimberUsageDetectorTest extends LintDetectorTest {
-  private static final String NO_WARNINGS = ""No warnings."";
-  private final TestFile timberStub = java(""""
+public final class WrongTimberUsageDetectorTest {
+  private static final TestFile TIMBER_STUB = java(""""
       + ""package timber.log;\n""
       + ""public class Timber {\n""
-      + ""  public static void d(String s) { TREE_OF_SOULS.d(s); }\n""
-      + ""  public static Tree tag(String s) { return new Tree(); }\n""
+      + ""  public static void d(String s, Object... args) {}\n""
+      + ""  public static void d(Throwable t, String s, Object... args) {}\n""
+      + ""  public static Tree tag(String tag) { return new Tree(); }\n""
       + ""  public static class Tree {\n""
-      + ""    public void d(String s) {}\n""
+      + ""    public void d(String s, Object... args) {}\n""
+      + ""    public void d(Throwable t, String s, Object... args) {}""
       + ""  }\n""
       + ""  private static final Tree TREE_OF_SOULS = new Tree();\n""
       + ""}"");
 
-  public void testUsingAndroidLog() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import android.util.Log;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""    Log.d(\""TAG\"", \""msg\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source))).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-        + ""    Log.d(\""TAG\"", \""msg\"");\n""
-        + ""    ~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void usingAndroidLog() {
+    lint() //
+        .files( //
+            java(""""
+                + ""package foo;\n""
+                + ""import android.util.Log;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    Log.d(\""TAG\"", \""msg\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
+            + ""    Log.d(\""TAG\"", \""msg\"");\n""
+            + ""    ~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testInnerStringFormatInNestedMethods() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-        + ""  }\n""
-        + ""  private String id(String s) { return s; }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-        + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-        + ""                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void innerStringFormatInNestedMethods() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
+                + ""  }\n""
+                + ""  private String id(String s) { return s; }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+            + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
+            + ""                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testInnerStringFormatInNestedAssignment() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""    String msg = null;\n""
-        + ""    Timber.d(msg = String.format(\""msg\""));\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-        + ""    Timber.d(msg = String.format(\""msg\""));\n""
-        + ""                   ~~~~~~~~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void innerStringFormatInNestedAssignment() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    String msg = null;\n""
+                + ""    Timber.d(msg = String.format(\""msg\""));\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+            + ""    Timber.d(msg = String.format(\""msg\""));\n""
+            + ""                   ~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testValidStringFormatInCodeBlock() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""    for(;;) {\n""
-        + ""      String name = String.format(\""msg\"");\n""
-        + ""    }\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  @Test public void validStringFormatInCodeBlock() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    for(;;) {\n""
+                + ""      String name = String.format(\""msg\"");\n""
+                + ""    }\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
+        .run() //
+        .expectClean();
   }
 
-  public void testThrowableNotAtBeginning() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(\""%s\"", e);\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
-        + ""     Timber.d(\""%s\"", e);\n""
-        + ""     ~~~~~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void throwableNotAtBeginning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(\""%s\"", e);\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
+            + ""     Timber.d(\""%s\"", e);\n""
+            + ""     ~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testBinaryOperation() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     String s = \""world!\"";\n""
-        + ""     Timber.d(\""Hello, \"" + s);\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-        + ""     Timber.d(\""Hello, \"" + s);\n""
-        + ""              ~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void binaryOperation() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String s = \""world!\"";\n""
+                + ""     Timber.d(\""Hello, \"" + s);\n""
+                + ""  }\n""
+                + ""}""))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+            + ""     Timber.d(\""Hello, \"" + s);\n""
+            + ""              ~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testBinaryOperationInsideTernary() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     String s = \""world!\"";\n""
-        + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-        + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-        + ""                     ~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void binaryOperationInsideTernary() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String s = \""world!\"";\n""
+                + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+            + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
+            + ""                     ~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testTooManyFormatArgs() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-        + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tooManyFormatArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
+            + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
+            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testTooManyArgs() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-        + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tooManyArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
+            + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testWrongArgTypes() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-        + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-        + ""                    ~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void wrongArgTypes() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(\""%d\"", \""arg1\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
+            + ""     Timber.d(\""%d\"", \""arg1\"");\n""
+            + ""                    ~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testTagTooLongLiteralOnly() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-        + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-        + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tagTooLongLiteralOnly() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
+            + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
+            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testTagTooLongLiteralPlusField() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  private final String field = \""x\"";""
-        + ""  public void log() {\n""
-        + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-        + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-        + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tagTooLongLiteralPlusField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  private final String field = \""x\"";""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
+            + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
+            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testTooManyFormatArgsInTag() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-        + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tooManyFormatArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
+            + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
+            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testTooManyArgsInTag() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-        + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tooManyArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
+            + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testWrongArgTypesInTag() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-        + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-        + ""                               ~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void wrongArgTypesInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
+            + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
+            + ""                               ~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testExceptionLoggingUsingMessage() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(e, e.getMessage());\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
-        + ""     Timber.d(e, e.getMessage());\n""
-        + ""                 ~~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void exceptionLoggingUsingMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, e.getMessage());\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
+            + ""     Timber.d(e, e.getMessage());\n""
+            + ""                 ~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testExceptionLoggingUsingVariable() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     String msg = \""Hello\"";\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(e, msg);\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  @Test public void exceptionLoggingUsingVariable() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String msg = \""Hello\"";\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, msg);\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean();
   }
 
-  public void testExceptionLoggingUsingEmptyStringMessage() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(e, \""\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-        + ""     Timber.d(e, \""\"");\n""
-        + ""                 ~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void exceptionLoggingUsingEmptyStringMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, \""\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
+            + ""     Timber.d(e, \""\"");\n""
+            + ""                 ~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testExceptionLoggingUsingNullMessage() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(e, null);\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-        + ""     Timber.d(e, null);\n""
-        + ""                 ~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void exceptionLoggingUsingNullMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, null);\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
+            + ""     Timber.d(e, null);\n""
+            + ""                 ~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testExceptionLoggingUsingValidMessage() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(e, \""Valid message\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  @Test public void exceptionLoggingUsingValidMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, \""Valid message\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean();
   }
 
-  public void testDateFormatNotDisplayingWarning() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""    Timber.d(\""%tc\"", new java.util.Date());\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  @Test public void dateFormatNotDisplayingWarning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    Timber.d(\""%tc\"", new java.util.Date());\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean();
   }
 
-  public void testWrappedBooleanType() throws Exception {
-    @Language(""JAVA"") String source = """"
-            + ""package foo;\n""
-            + ""import timber.log.Timber;\n""
-            + ""public class Example {\n""
-            + ""  public void log() {\n""
-            + ""     Timber.d(\""%b\"", Boolean.valueOf(true));\n""
-            + ""  }\n""
-            + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
-  }
-
-  @Override protected Detector getDetector() {
-    return new WrongTimberUsageDetector();
-  }
-
-  @Override protected List<Issue> getIssues() {
-    return Arrays.asList(WrongTimberUsageDetector.getIssues());
-  }
-
-  @Override protected boolean allowCompilationErrors() {
-    return true;
+  @Test public void wrappedBooleanType() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(\""%b\"", Boolean.valueOf(true));\n""
+                + ""  }\n""
+                + ""}"")) //
+        .issues(WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean();
   }
 }","@@ -1,382 +1,476 @@
 package timber.lint;
 
-import com.android.tools.lint.checks.infrastructure.LintDetectorTest;
-import com.android.tools.lint.detector.api.Detector;
-import com.android.tools.lint.detector.api.Issue;
-import java.util.Arrays;
-import java.util.List;
-import org.intellij.lang.annotations.Language;
+import com.android.tools.lint.checks.infrastructure.TestFile;
+import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
+import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
 
-public class WrongTimberUsageDetectorTest extends LintDetectorTest {
-  private static final String NO_WARNINGS = ""No warnings."";
-  private final TestFile timberStub = java(""""
+public final class WrongTimberUsageDetectorTest {
+  private static final TestFile TIMBER_STUB = java(""""
       + ""package timber.log;\n""
       + ""public class Timber {\n""
-      + ""  public static void d(String s) { TREE_OF_SOULS.d(s); }\n""
-      + ""  public static Tree tag(String s) { return new Tree(); }\n""
+      + ""  public static void d(String s, Object... args) {}\n""
+      + ""  public static void d(Throwable t, String s, Object... args) {}\n""
+      + ""  public static Tree tag(String tag) { return new Tree(); }\n""
       + ""  public static class Tree {\n""
-      + ""    public void d(String s) {}\n""
+      + ""    public void d(String s, Object... args) {}\n""
+      + ""    public void d(Throwable t, String s, Object... args) {}""
       + ""  }\n""
       + ""  private static final Tree TREE_OF_SOULS = new Tree();\n""
       + ""}"");
 
-  public void testUsingAndroidLog() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import android.util.Log;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""    Log.d(\""TAG\"", \""msg\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source))).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-        + ""    Log.d(\""TAG\"", \""msg\"");\n""
-        + ""    ~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void usingAndroidLog() {
+    lint() //
+        .files( //
+            java(""""
+                + ""package foo;\n""
+                + ""import android.util.Log;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    Log.d(\""TAG\"", \""msg\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
+            + ""    Log.d(\""TAG\"", \""msg\"");\n""
+            + ""    ~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testInnerStringFormatInNestedMethods() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-        + ""  }\n""
-        + ""  private String id(String s) { return s; }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-        + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-        + ""                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void innerStringFormatInNestedMethods() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
+                + ""  }\n""
+                + ""  private String id(String s) { return s; }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+            + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
+            + ""                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testInnerStringFormatInNestedAssignment() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""    String msg = null;\n""
-        + ""    Timber.d(msg = String.format(\""msg\""));\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-        + ""    Timber.d(msg = String.format(\""msg\""));\n""
-        + ""                   ~~~~~~~~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void innerStringFormatInNestedAssignment() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    String msg = null;\n""
+                + ""    Timber.d(msg = String.format(\""msg\""));\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+            + ""    Timber.d(msg = String.format(\""msg\""));\n""
+            + ""                   ~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testValidStringFormatInCodeBlock() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""    for(;;) {\n""
-        + ""      String name = String.format(\""msg\"");\n""
-        + ""    }\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  @Test public void validStringFormatInCodeBlock() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    for(;;) {\n""
+                + ""      String name = String.format(\""msg\"");\n""
+                + ""    }\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
+        .run() //
+        .expectClean();
   }
 
-  public void testThrowableNotAtBeginning() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(\""%s\"", e);\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
-        + ""     Timber.d(\""%s\"", e);\n""
-        + ""     ~~~~~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void throwableNotAtBeginning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(\""%s\"", e);\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
+            + ""     Timber.d(\""%s\"", e);\n""
+            + ""     ~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testBinaryOperation() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     String s = \""world!\"";\n""
-        + ""     Timber.d(\""Hello, \"" + s);\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-        + ""     Timber.d(\""Hello, \"" + s);\n""
-        + ""              ~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void binaryOperation() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String s = \""world!\"";\n""
+                + ""     Timber.d(\""Hello, \"" + s);\n""
+                + ""  }\n""
+                + ""}""))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+            + ""     Timber.d(\""Hello, \"" + s);\n""
+            + ""              ~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testBinaryOperationInsideTernary() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     String s = \""world!\"";\n""
-        + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-        + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-        + ""                     ~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void binaryOperationInsideTernary() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String s = \""world!\"";\n""
+                + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+            + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
+            + ""                     ~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testTooManyFormatArgs() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-        + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tooManyFormatArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
+            + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
+            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testTooManyArgs() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-        + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tooManyArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
+            + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testWrongArgTypes() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-        + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-        + ""                    ~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void wrongArgTypes() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(\""%d\"", \""arg1\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
+            + ""     Timber.d(\""%d\"", \""arg1\"");\n""
+            + ""                    ~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testTagTooLongLiteralOnly() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-        + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-        + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tagTooLongLiteralOnly() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
+            + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
+            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testTagTooLongLiteralPlusField() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  private final String field = \""x\"";""
-        + ""  public void log() {\n""
-        + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-        + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-        + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tagTooLongLiteralPlusField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  private final String field = \""x\"";""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
+            + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
+            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testTooManyFormatArgsInTag() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-        + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tooManyFormatArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
+            + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
+            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testTooManyArgsInTag() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-        + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-        + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void tooManyArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
+            + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
+            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testWrongArgTypesInTag() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:5: ""
-        + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-        + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-        + ""                               ~~~~~~\n""
-        + ""1 errors, 0 warnings\n"");
+  @Test public void wrongArgTypesInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
+            + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
+            + ""                               ~~~~~~\n""
+            + ""1 errors, 0 warnings\n"");
   }
 
-  public void testExceptionLoggingUsingMessage() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(e, e.getMessage());\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
-        + ""     Timber.d(e, e.getMessage());\n""
-        + ""                 ~~~~~~~~~~~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void exceptionLoggingUsingMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, e.getMessage());\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
+            + ""     Timber.d(e, e.getMessage());\n""
+            + ""                 ~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testExceptionLoggingUsingVariable() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     String msg = \""Hello\"";\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(e, msg);\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  @Test public void exceptionLoggingUsingVariable() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String msg = \""Hello\"";\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, msg);\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean();
   }
 
-  public void testExceptionLoggingUsingEmptyStringMessage() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(e, \""\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-        + ""     Timber.d(e, \""\"");\n""
-        + ""                 ~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void exceptionLoggingUsingEmptyStringMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, \""\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
+            + ""     Timber.d(e, \""\"");\n""
+            + ""                 ~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testExceptionLoggingUsingNullMessage() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(e, null);\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(""src/foo/Example.java:6: ""
-        + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-        + ""     Timber.d(e, null);\n""
-        + ""                 ~~~~\n""
-        + ""0 errors, 1 warnings\n"");
+  @Test public void exceptionLoggingUsingNullMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, null);\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
+            + ""     Timber.d(e, null);\n""
+            + ""                 ~~~~\n""
+            + ""0 errors, 1 warnings\n"");
   }
 
-  public void testExceptionLoggingUsingValidMessage() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""     Exception e = new Exception();\n""
-        + ""     Timber.d(e, \""Valid message\"");\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  @Test public void exceptionLoggingUsingValidMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, \""Valid message\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean();
   }
 
-  public void testDateFormatNotDisplayingWarning() throws Exception {
-    @Language(""JAVA"") String source = """"
-        + ""package foo;\n""
-        + ""import timber.log.Timber;\n""
-        + ""public class Example {\n""
-        + ""  public void log() {\n""
-        + ""    Timber.d(\""%tc\"", new java.util.Date());\n""
-        + ""  }\n""
-        + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
+  @Test public void dateFormatNotDisplayingWarning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    Timber.d(\""%tc\"", new java.util.Date());\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean();
   }
 
-  public void testWrappedBooleanType() throws Exception {
-    @Language(""JAVA"") String source = """"
-            + ""package foo;\n""
-            + ""import timber.log.Timber;\n""
-            + ""public class Example {\n""
-            + ""  public void log() {\n""
-            + ""     Timber.d(\""%b\"", Boolean.valueOf(true));\n""
-            + ""  }\n""
-            + ""}"";
-    assertThat(lintProject(java(source), timberStub)).isEqualTo(NO_WARNINGS);
-  }
-
-  @Override protected Detector getDetector() {
-    return new WrongTimberUsageDetector();
-  }
-
-  @Override protected List<Issue> getIssues() {
-    return Arrays.asList(WrongTimberUsageDetector.getIssues());
-  }
-
-  @Override protected boolean allowCompilationErrors() {
-    return true;
+  @Test public void wrappedBooleanType() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(\""%b\"", Boolean.valueOf(true));\n""
+                + ""  }\n""
+                + ""}"")) //
+        .issues(WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean();
   }
 }",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,7bc5062e7429400b613fd3fe1050d4163387ff0e,d14c7863745d6223b56d0567e0cb4a820ddb5cbc,"Limit ISSUE_LOG check to API <= 23

Fixes #247","@@ -65,7 +65,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       checkNestedStringFormat(context, call);
       return;
     }
-    if (""tag"".equals(methodName) && evaluator.isMemberInClass(method, ""timber.log.Timber"")) {
+    // As of API 24, Log tags are no longer limited to 23 chars
+    if (""tag"".equals(methodName)
+        && evaluator.isMemberInClass(method, ""timber.log.Timber"")
+        && context.getMainProject().getMinSdk() <= 23) {
       checkTagLength(context, call);
       return;
     }","@@ -65,7 +65,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       checkNestedStringFormat(context, call);
       return;
     }
-    if (""tag"".equals(methodName) && evaluator.isMemberInClass(method, ""timber.log.Timber"")) {
+    // As of API 24, Log tags are no longer limited to 23 chars
+    if (""tag"".equals(methodName)
+        && evaluator.isMemberInClass(method, ""timber.log.Timber"")
+        && context.getMainProject().getMinSdk() <= 23) {
       checkTagLength(context, call);
       return;
     }",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,7bc5062e7429400b613fd3fe1050d4163387ff0e,d14c7863745d6223b56d0567e0cb4a820ddb5cbc,"Limit ISSUE_LOG check to API <= 23

Fixes #247","@@ -4,6 +4,7 @@ import com.android.tools.lint.checks.infrastructure.TestFile;
 import org.junit.Test;
 
 import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
+import static com.android.tools.lint.checks.infrastructure.TestFiles.manifest;
 import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
 
 public final class WrongTimberUsageDetectorTest {
@@ -275,6 +276,24 @@ public final class WrongTimberUsageDetectorTest {
             + ""1 errors, 0 warnings\n"");
   }
 
+  @Test public void tagTooLongLiteralOnlyAfterApi23() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
+                + ""  }\n""
+                + ""}""), //
+            manifest().minSdk(24) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expectClean();
+  }
+
   @Test public void tooManyFormatArgsInTag() {
     lint() //
         .files(TIMBER_STUB, //","@@ -4,6 +4,7 @@ import com.android.tools.lint.checks.infrastructure.TestFile;
 import org.junit.Test;
 
 import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
+import static com.android.tools.lint.checks.infrastructure.TestFiles.manifest;
 import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
 
 public final class WrongTimberUsageDetectorTest {
@@ -275,6 +276,24 @@ public final class WrongTimberUsageDetectorTest {
             + ""1 errors, 0 warnings\n"");
   }
 
+  @Test public void tagTooLongLiteralOnlyAfterApi23() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
+                + ""  }\n""
+                + ""}""), //
+            manifest().minSdk(24) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expectClean();
+  }
+
   @Test public void tooManyFormatArgsInTag() {
     lint() //
         .files(TIMBER_STUB, //",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,6b253c7882d4a93a1035d42454b958b9209ca829,97849914aab0b5531dc67fb5879d2b449f491151,Only truncate log tag to 23 on API 23 and earlier.,"@@ -1,5 +1,6 @@
 package timber.log;
 
+import android.os.Build;
 import android.util.Log;
 
 import org.jetbrains.annotations.NonNls;
@@ -594,7 +595,11 @@ public final class Timber {
         tag = m.replaceAll("""");
       }
       tag = tag.substring(tag.lastIndexOf('.') + 1);
-      return tag.length() > MAX_TAG_LENGTH ? tag.substring(0, MAX_TAG_LENGTH) : tag;
+      // Tag length limit was removed in API 24.
+      if (tag.length() <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+        return tag;
+      }
+      return tag.substring(0, MAX_TAG_LENGTH);
     }
 
     @Override final String getTag() {","@@ -1,5 +1,6 @@
 package timber.log;
 
+import android.os.Build;
 import android.util.Log;
 
 import org.jetbrains.annotations.NonNls;
@@ -594,7 +595,11 @@ public final class Timber {
         tag = m.replaceAll("""");
       }
       tag = tag.substring(tag.lastIndexOf('.') + 1);
-      return tag.length() > MAX_TAG_LENGTH ? tag.substring(0, MAX_TAG_LENGTH) : tag;
+      // Tag length limit was removed in API 24.
+      if (tag.length() <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+        return tag;
+      }
+      return tag.substring(0, MAX_TAG_LENGTH);
     }
 
     @Override final String getTag() {",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,6b253c7882d4a93a1035d42454b958b9209ca829,97849914aab0b5531dc67fb5879d2b449f491151,Only truncate log tag to 23 on API 23 and earlier.,"@@ -173,6 +173,34 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  class ThisIsAReallyLongClassName {
+    public void run() {
+      Timber.d(""Hello, world!"");
+    }
+  }
+
+  @Config(sdk = 23)
+  @Test public void debugTreeTagTruncation() {
+    Timber.plant(new Timber.DebugTree());
+
+    new ThisIsAReallyLongClassName().run();
+
+    assertLog()
+        .hasDebugMessage(""TimberTest$ThisIsAReall"", ""Hello, world!"")
+        .hasNoMoreMessages();
+  }
+
+  @Config(sdk = 24)
+  @Test public void debugTreeTagNoTruncation() {
+    Timber.plant(new Timber.DebugTree());
+
+    new ThisIsAReallyLongClassName().run();
+
+    assertLog()
+        .hasDebugMessage(""TimberTest$ThisIsAReallyLongClassName"", ""Hello, world!"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void debugTreeTagGenerationStripsAnonymousClassMarker() {
     Timber.plant(new Timber.DebugTree());
     new Runnable() {","@@ -173,6 +173,34 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  class ThisIsAReallyLongClassName {
+    public void run() {
+      Timber.d(""Hello, world!"");
+    }
+  }
+
+  @Config(sdk = 23)
+  @Test public void debugTreeTagTruncation() {
+    Timber.plant(new Timber.DebugTree());
+
+    new ThisIsAReallyLongClassName().run();
+
+    assertLog()
+        .hasDebugMessage(""TimberTest$ThisIsAReall"", ""Hello, world!"")
+        .hasNoMoreMessages();
+  }
+
+  @Config(sdk = 24)
+  @Test public void debugTreeTagNoTruncation() {
+    Timber.plant(new Timber.DebugTree());
+
+    new ThisIsAReallyLongClassName().run();
+
+    assertLog()
+        .hasDebugMessage(""TimberTest$ThisIsAReallyLongClassName"", ""Hello, world!"")
+        .hasNoMoreMessages();
+  }
+
   @Test public void debugTreeTagGenerationStripsAnonymousClassMarker() {
     Timber.plant(new Timber.DebugTree());
     new Runnable() {",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,7f35bc793cdfa3c87f838c302bd4303a7e3651cf,b77b1e87dceebaa5e18b5f71d4fa774dfd3782a9,"Supply quickfixes for lint checks

Closes #228","@@ -9,6 +9,7 @@ import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
 import com.android.tools.lint.detector.api.Issue;
 import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.LintFix;
 import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
@@ -48,6 +49,8 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS_ASSIGN;
+import static org.jetbrains.uast.UastLiteralUtils.isStringLiteral;
+import static org.jetbrains.uast.UastUtils.evaluateString;
 
 public final class WrongTimberUsageDetector extends Detector implements Detector.UastScanner {
   private final static String GET_STRING_METHOD = ""getString"";
@@ -65,7 +68,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       checkNestedStringFormat(context, call);
       return;
     }
-    // As of API 24, Log tags are no longer limited to 23 chars
+    // As of API 24, Log tags are no longer limited to 23 chars.
     if (""tag"".equals(methodName)
         && evaluator.isMemberInClass(method, ""timber.log.Timber"")
         && context.getMainProject().getMinSdk() <= 23) {
@@ -73,8 +76,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return;
     }
     if (evaluator.isMemberInClass(method, ""android.util.Log"")) {
-      context.report(ISSUE_LOG, context.getLocation(call.getReceiver()),
-          ""Using 'Log' instead of 'Timber'"");
+      LintFix fix = quickFixIssueLog(call);
+      context.report(ISSUE_LOG, call, context.getLocation(call), ""Using 'Log' instead of 'Timber'"",
+          fix);
       return;
     }
     // Handles Timber.X(..) and Timber.tag(..).X(..) where X in (v|d|i|w|e|wtf).
@@ -99,8 +103,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         JavaEvaluator evaluator = context.getEvaluator();
         if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, maybeTimberLogCall.getMethodName())
             && evaluator.isMemberInClass(maybeTimberLogCall.resolve(), ""timber.log.Timber"")) {
+          LintFix fix = quickFixIssueFormat(call);
           context.report(ISSUE_FORMAT, call, context.getLocation(call),
-              ""Using 'String#format' inside of 'Timber'"");
+              ""Using 'String#format' inside of 'Timber'"", fix);
           return;
         }
       }
@@ -115,7 +120,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       String message =
           String.format(""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
               tag.length(), tag);
-      context.report(ISSUE_TAG_LENGTH, argument, context.getLocation(argument), message);
+      LintFix fix = quickFixIssueTagLength(argument, tag);
+      context.report(ISSUE_TAG_LENGTH, argument, context.getLocation(argument), message, fix);
     }
   }
 
@@ -484,8 +490,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         break;
       }
       if (i > 0 && isSubclassOf(context, argument, Throwable.class)) {
+        LintFix fix = quickFixIssueThrowable(call, arguments, argument);
         context.report(ISSUE_THROWABLE, call, context.getLocation(call),
-            ""Throwable should be first argument"");
+            ""Throwable should be first argument"", fix);
       }
     }
   }
@@ -502,16 +509,18 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         // what other UExpressions could be a selector?
         if (isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
             ""java.lang.Throwable"")) {
-          context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(arg2),
-              ""Explicitly logging exception message is redundant"");
+          LintFix fix = quickFixIssueExceptionLogging(arg2);
+          context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
+              ""Explicitly logging exception message is redundant"", fix);
           return;
         }
       }
 
       String s = evaluateString(context, arg2, true);
       if (s == null || s.isEmpty()) {
-        context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(arg2),
-            ""Use single-argument log method instead of null/empty message"");
+        LintFix fix = quickFixIssueExceptionLogging(arg2);
+        context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
+            ""Use single-argument log method instead of null/empty message"", fix);
       }
     }
   }
@@ -532,8 +541,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       if (operator == PLUS || operator == PLUS_ASSIGN) {
         Class argumentType = getType(binaryExpression);
         if (argumentType == String.class) {
+          LintFix fix = quickFixIssueBinary(binaryExpression);
           context.report(ISSUE_BINARY, call, context.getLocation(element),
-              ""Replace String concatenation with Timber's string formatting"");
+              ""Replace String concatenation with Timber's string formatting"", fix);
           return true;
         }
       }
@@ -560,6 +570,110 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return checkElement(context, call, elseElement);
   }
 
+  private static LintFix quickFixIssueLog(UCallExpression logCall) {
+    List<UExpression> arguments = logCall.getValueArguments();
+    String methodName = logCall.getMethodName();
+    UExpression tag = arguments.get(0);
+
+    // 1st suggestion respects author's tag preference.
+    // 2nd suggestion drops it (Timber defaults to calling class name).
+    String fixSource1 = ""Timber.tag("" + tag.asSourceString() + "")."";
+    String fixSource2 = ""Timber."";
+
+    int numArguments = arguments.size();
+    if (numArguments == 2) {
+      UExpression msgOrThrowable = arguments.get(1);
+      fixSource1 += methodName + ""("" + msgOrThrowable.asSourceString() + "")"";
+      fixSource2 += methodName + ""("" + msgOrThrowable.asSourceString() + "")"";
+    } else if (numArguments == 3) {
+      UExpression msg = arguments.get(1);
+      UExpression throwable = arguments.get(2);
+      fixSource1 +=
+          methodName + ""("" + throwable.asSourceString() + "", "" + msg.asSourceString() + "")"";
+      fixSource2 +=
+          methodName + ""("" + throwable.asSourceString() + "", "" + msg.asSourceString() + "")"";
+    } else {
+      throw new IllegalStateException(""android.util.Log overloads should have 2 or 3 arguments"");
+    }
+
+    String logCallSource = logCall.asSourceString();
+    LintFix.GroupBuilder fixGrouper = fix().group();
+    fixGrouper.add(
+        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource1).build());
+    fixGrouper.add(
+        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource2).build());
+    return fixGrouper.build();
+  }
+
+  private static LintFix quickFixIssueFormat(UCallExpression stringFormatCall) {
+    // Handles:
+    // 1) String.format(..)
+    // 2) format(...) [static import]
+    UExpression callReceiver = stringFormatCall.getReceiver();
+    String callSourceString = callReceiver == null ? """" : callReceiver.asSourceString() + ""."";
+    callSourceString += stringFormatCall.getMethodName();
+
+    return fix().name(""Remove String.format(...)"").composite() //
+        // Delete closing parenthesis of String.format(...)
+        .add(fix().replace().pattern(callSourceString + ""\\(.*(\\))"").with("""").build())
+        // Delete ""String.format(""
+        .add(fix().replace().text(callSourceString + ""("").with("""").build()).build();
+  }
+
+  private static LintFix quickFixIssueThrowable(UCallExpression call, List<UExpression> arguments,
+      UExpression throwable) {
+    String rearrangedArgs = throwable.asSourceString();
+    for (UExpression arg : arguments) {
+      if (arg != throwable) {
+        rearrangedArgs += ("", "" + arg.asSourceString());
+      }
+    }
+    return fix().replace() //
+        .pattern(""\\."" + call.getMethodName() + ""\\((.*)\\)"").with(rearrangedArgs).build();
+  }
+
+  private static LintFix quickFixIssueBinary(UBinaryExpression binaryExpression) {
+    UExpression leftOperand = binaryExpression.getLeftOperand();
+    UExpression rightOperand = binaryExpression.getRightOperand();
+    boolean isLeftLiteral = isStringLiteral(leftOperand);
+    boolean isRightLiteral = isStringLiteral(rightOperand);
+
+    // ""a"" + ""b"" => ""ab""
+    if (isLeftLiteral && isRightLiteral) {
+      return fix().replace() //
+          .text(binaryExpression.asSourceString())
+          .with(""\"""" + evaluateString(binaryExpression) + ""\"""")
+          .build();
+    }
+
+    String args;
+    if (isLeftLiteral) {
+      args = ""\"""" + evaluateString(leftOperand) + ""%s\"", "" + rightOperand.asSourceString();
+    } else if (isRightLiteral) {
+      args = ""\""%s"" + evaluateString(rightOperand) + ""\"", "" + leftOperand.asSourceString();
+    } else {
+      args = ""\""%s%s\"", "" + leftOperand.asSourceString() + "", "" + rightOperand.asSourceString();
+    }
+    return fix().replace().text(binaryExpression.asSourceString()).with(args).build();
+  }
+
+  private static LintFix quickFixIssueTagLength(UExpression argument, String tag) {
+    int numCharsToTrim = tag.length() - 23;
+    return fix().replace()
+        .name(""Strip last "" + (numCharsToTrim == 1 ? ""char"" : numCharsToTrim + "" chars""))
+        .text(argument.asSourceString())
+        .with(""\"""" + tag.substring(0, 23) + ""\"""")
+        .build();
+  }
+
+  private static LintFix quickFixIssueExceptionLogging(UExpression arg2) {
+    return fix().replace()
+        .name(""Remove redundant argument"")
+        .text("", "" + arg2.asSourceString())
+        .with("""")
+        .build();
+  }
+
   static Issue[] getIssues() {
     return new Issue[] {
         ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,","@@ -9,6 +9,7 @@ import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
 import com.android.tools.lint.detector.api.Issue;
 import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.LintFix;
 import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
@@ -48,6 +49,8 @@ import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
 import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS_ASSIGN;
+import static org.jetbrains.uast.UastLiteralUtils.isStringLiteral;
+import static org.jetbrains.uast.UastUtils.evaluateString;
 
 public final class WrongTimberUsageDetector extends Detector implements Detector.UastScanner {
   private final static String GET_STRING_METHOD = ""getString"";
@@ -65,7 +68,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       checkNestedStringFormat(context, call);
       return;
     }
-    // As of API 24, Log tags are no longer limited to 23 chars
+    // As of API 24, Log tags are no longer limited to 23 chars.
     if (""tag"".equals(methodName)
         && evaluator.isMemberInClass(method, ""timber.log.Timber"")
         && context.getMainProject().getMinSdk() <= 23) {
@@ -73,8 +76,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return;
     }
     if (evaluator.isMemberInClass(method, ""android.util.Log"")) {
-      context.report(ISSUE_LOG, context.getLocation(call.getReceiver()),
-          ""Using 'Log' instead of 'Timber'"");
+      LintFix fix = quickFixIssueLog(call);
+      context.report(ISSUE_LOG, call, context.getLocation(call), ""Using 'Log' instead of 'Timber'"",
+          fix);
       return;
     }
     // Handles Timber.X(..) and Timber.tag(..).X(..) where X in (v|d|i|w|e|wtf).
@@ -99,8 +103,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         JavaEvaluator evaluator = context.getEvaluator();
         if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, maybeTimberLogCall.getMethodName())
             && evaluator.isMemberInClass(maybeTimberLogCall.resolve(), ""timber.log.Timber"")) {
+          LintFix fix = quickFixIssueFormat(call);
           context.report(ISSUE_FORMAT, call, context.getLocation(call),
-              ""Using 'String#format' inside of 'Timber'"");
+              ""Using 'String#format' inside of 'Timber'"", fix);
           return;
         }
       }
@@ -115,7 +120,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       String message =
           String.format(""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
               tag.length(), tag);
-      context.report(ISSUE_TAG_LENGTH, argument, context.getLocation(argument), message);
+      LintFix fix = quickFixIssueTagLength(argument, tag);
+      context.report(ISSUE_TAG_LENGTH, argument, context.getLocation(argument), message, fix);
     }
   }
 
@@ -484,8 +490,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         break;
       }
       if (i > 0 && isSubclassOf(context, argument, Throwable.class)) {
+        LintFix fix = quickFixIssueThrowable(call, arguments, argument);
         context.report(ISSUE_THROWABLE, call, context.getLocation(call),
-            ""Throwable should be first argument"");
+            ""Throwable should be first argument"", fix);
       }
     }
   }
@@ -502,16 +509,18 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         // what other UExpressions could be a selector?
         if (isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
             ""java.lang.Throwable"")) {
-          context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(arg2),
-              ""Explicitly logging exception message is redundant"");
+          LintFix fix = quickFixIssueExceptionLogging(arg2);
+          context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
+              ""Explicitly logging exception message is redundant"", fix);
           return;
         }
       }
 
       String s = evaluateString(context, arg2, true);
       if (s == null || s.isEmpty()) {
-        context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(arg2),
-            ""Use single-argument log method instead of null/empty message"");
+        LintFix fix = quickFixIssueExceptionLogging(arg2);
+        context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
+            ""Use single-argument log method instead of null/empty message"", fix);
       }
     }
   }
@@ -532,8 +541,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       if (operator == PLUS || operator == PLUS_ASSIGN) {
         Class argumentType = getType(binaryExpression);
         if (argumentType == String.class) {
+          LintFix fix = quickFixIssueBinary(binaryExpression);
           context.report(ISSUE_BINARY, call, context.getLocation(element),
-              ""Replace String concatenation with Timber's string formatting"");
+              ""Replace String concatenation with Timber's string formatting"", fix);
           return true;
         }
       }
@@ -560,6 +570,110 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return checkElement(context, call, elseElement);
   }
 
+  private static LintFix quickFixIssueLog(UCallExpression logCall) {
+    List<UExpression> arguments = logCall.getValueArguments();
+    String methodName = logCall.getMethodName();
+    UExpression tag = arguments.get(0);
+
+    // 1st suggestion respects author's tag preference.
+    // 2nd suggestion drops it (Timber defaults to calling class name).
+    String fixSource1 = ""Timber.tag("" + tag.asSourceString() + "")."";
+    String fixSource2 = ""Timber."";
+
+    int numArguments = arguments.size();
+    if (numArguments == 2) {
+      UExpression msgOrThrowable = arguments.get(1);
+      fixSource1 += methodName + ""("" + msgOrThrowable.asSourceString() + "")"";
+      fixSource2 += methodName + ""("" + msgOrThrowable.asSourceString() + "")"";
+    } else if (numArguments == 3) {
+      UExpression msg = arguments.get(1);
+      UExpression throwable = arguments.get(2);
+      fixSource1 +=
+          methodName + ""("" + throwable.asSourceString() + "", "" + msg.asSourceString() + "")"";
+      fixSource2 +=
+          methodName + ""("" + throwable.asSourceString() + "", "" + msg.asSourceString() + "")"";
+    } else {
+      throw new IllegalStateException(""android.util.Log overloads should have 2 or 3 arguments"");
+    }
+
+    String logCallSource = logCall.asSourceString();
+    LintFix.GroupBuilder fixGrouper = fix().group();
+    fixGrouper.add(
+        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource1).build());
+    fixGrouper.add(
+        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource2).build());
+    return fixGrouper.build();
+  }
+
+  private static LintFix quickFixIssueFormat(UCallExpression stringFormatCall) {
+    // Handles:
+    // 1) String.format(..)
+    // 2) format(...) [static import]
+    UExpression callReceiver = stringFormatCall.getReceiver();
+    String callSourceString = callReceiver == null ? """" : callReceiver.asSourceString() + ""."";
+    callSourceString += stringFormatCall.getMethodName();
+
+    return fix().name(""Remove String.format(...)"").composite() //
+        // Delete closing parenthesis of String.format(...)
+        .add(fix().replace().pattern(callSourceString + ""\\(.*(\\))"").with("""").build())
+        // Delete ""String.format(""
+        .add(fix().replace().text(callSourceString + ""("").with("""").build()).build();
+  }
+
+  private static LintFix quickFixIssueThrowable(UCallExpression call, List<UExpression> arguments,
+      UExpression throwable) {
+    String rearrangedArgs = throwable.asSourceString();
+    for (UExpression arg : arguments) {
+      if (arg != throwable) {
+        rearrangedArgs += ("", "" + arg.asSourceString());
+      }
+    }
+    return fix().replace() //
+        .pattern(""\\."" + call.getMethodName() + ""\\((.*)\\)"").with(rearrangedArgs).build();
+  }
+
+  private static LintFix quickFixIssueBinary(UBinaryExpression binaryExpression) {
+    UExpression leftOperand = binaryExpression.getLeftOperand();
+    UExpression rightOperand = binaryExpression.getRightOperand();
+    boolean isLeftLiteral = isStringLiteral(leftOperand);
+    boolean isRightLiteral = isStringLiteral(rightOperand);
+
+    // ""a"" + ""b"" => ""ab""
+    if (isLeftLiteral && isRightLiteral) {
+      return fix().replace() //
+          .text(binaryExpression.asSourceString())
+          .with(""\"""" + evaluateString(binaryExpression) + ""\"""")
+          .build();
+    }
+
+    String args;
+    if (isLeftLiteral) {
+      args = ""\"""" + evaluateString(leftOperand) + ""%s\"", "" + rightOperand.asSourceString();
+    } else if (isRightLiteral) {
+      args = ""\""%s"" + evaluateString(rightOperand) + ""\"", "" + leftOperand.asSourceString();
+    } else {
+      args = ""\""%s%s\"", "" + leftOperand.asSourceString() + "", "" + rightOperand.asSourceString();
+    }
+    return fix().replace().text(binaryExpression.asSourceString()).with(args).build();
+  }
+
+  private static LintFix quickFixIssueTagLength(UExpression argument, String tag) {
+    int numCharsToTrim = tag.length() - 23;
+    return fix().replace()
+        .name(""Strip last "" + (numCharsToTrim == 1 ? ""char"" : numCharsToTrim + "" chars""))
+        .text(argument.asSourceString())
+        .with(""\"""" + tag.substring(0, 23) + ""\"""")
+        .build();
+  }
+
+  private static LintFix quickFixIssueExceptionLogging(UExpression arg2) {
+    return fix().replace()
+        .name(""Remove redundant argument"")
+        .text("", "" + arg2.asSourceString())
+        .with("""")
+        .build();
+  }
+
   static Issue[] getIssues() {
     return new Issue[] {
         ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,7f35bc793cdfa3c87f838c302bd4303a7e3651cf,b77b1e87dceebaa5e18b5f71d4fa774dfd3782a9,"Supply quickfixes for lint checks

Closes #228","@@ -21,7 +21,7 @@ public final class WrongTimberUsageDetectorTest {
       + ""  private static final Tree TREE_OF_SOULS = new Tree();\n""
       + ""}"");
 
-  @Test public void usingAndroidLog() {
+  @Test public void usingAndroidLogWithTwoArguments() {
     lint() //
         .files( //
             java(""""
@@ -38,8 +38,156 @@ public final class WrongTimberUsageDetectorTest {
         .expect(""src/foo/Example.java:5: ""
             + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
             + ""    Log.d(\""TAG\"", \""msg\"");\n""
-            + ""    ~~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""    ~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(
+            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
+                + ""@@ -5 +5\n""
+                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
+                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
+                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(\""msg\""):\n""
+                + ""@@ -5 +5\n""
+                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
+                + ""+     Timber.d(\""msg\"");\n"");
+  }
+
+  @Test public void usingAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""
+                + ""package foo;\n""
+                + ""import android.util.Log;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
+            + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(
+            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
+                + ""@@ -5 +5\n""
+                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
+                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), \""msg\""):\n""
+                + ""@@ -5 +5\n""
+                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
+  }
+
+  @Test public void usingFullyQualifiedAndroidLogWithTwoArguments() {
+    lint() //
+        .files( //
+            java(""""
+                + ""package foo;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""src/foo/Example.java:4: ""
+            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
+            + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
+            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(
+            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
+                + ""@@ -4 +4\n""
+                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
+                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
+                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(\""msg\""):\n""
+                + ""@@ -4 +4\n""
+                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
+                + ""+     Timber.d(\""msg\"");\n"");
+  }
+
+  @Test public void usingFullyQualifiedAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""
+                + ""package foo;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""src/foo/Example.java:4: ""
+            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
+            + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(
+            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
+                + ""@@ -4 +4\n""
+                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
+                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), \""msg\""):\n""
+                + ""@@ -4 +4\n""
+                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
+  }
+
+  @Test public void innerStringFormat() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+            + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
+            + ""              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Remove String.format(...):\n""
+            + ""@@ -5 +5\n""
+            + ""-      Timber.d(String.format(\""%s\"", \""arg1\""));\n""
+            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
+  }
+
+  @Test public void innerStringFormatWithStaticImport() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""import static java.lang.String.format;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+            + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
+            + ""              ~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove String.format(...):\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(format(\""%s\"", \""arg1\""));\n""
+            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
   }
 
   @Test public void innerStringFormatInNestedMethods() {
@@ -124,10 +272,14 @@ public final class WrongTimberUsageDetectorTest {
             + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
             + ""     Timber.d(\""%s\"", e);\n""
             + ""     ~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with e, \""%s\"":\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(\""%s\"", e);\n""
+            + ""+      Timber.d(e, \""%s\"");\n"");
   }
 
-  @Test public void binaryOperation() {
+  @Test public void stringConcatenationBothLiterals() {
     lint() //
         .files(TIMBER_STUB, //
             java(""""
@@ -135,20 +287,99 @@ public final class WrongTimberUsageDetectorTest {
                 + ""import timber.log.Timber;\n""
                 + ""public class Example {\n""
                 + ""  public void log() {\n""
-                + ""     String s = \""world!\"";\n""
-                + ""     Timber.d(\""Hello, \"" + s);\n""
+                + ""     Timber.d(\""foo\"" + \""bar\"");\n""
                 + ""  }\n""
                 + ""}""))
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
-        .expect(""src/foo/Example.java:6: ""
+        .expect(""src/foo/Example.java:5: ""
             + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(\""Hello, \"" + s);\n""
+            + ""     Timber.d(\""foo\"" + \""bar\"");\n""
             + ""              ~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Replace with \""foobar\"":\n""
+            + ""@@ -5 +5\n""
+            + ""-      Timber.d(\""foo\"" + \""bar\"");\n""
+            + ""+      Timber.d(\""foobar\"");\n"");
   }
 
-  @Test public void binaryOperationInsideTernary() {
+  @Test public void stringConcatenationLeftLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String foo = \""foo\"";\n""
+                + ""     Timber.d(foo + \""bar\"");\n""
+                + ""  }\n""
+                + ""}""))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+            + ""     Timber.d(foo + \""bar\"");\n""
+            + ""              ~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""%sbar\"", foo:\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(foo + \""bar\"");\n""
+            + ""+      Timber.d(\""%sbar\"", foo);\n"");
+  }
+
+  @Test public void stringConcatenationRightLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String bar = \""bar\"";\n""
+                + ""     Timber.d(\""foo\"" + bar);\n""
+                + ""  }\n""
+                + ""}""))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+            + ""     Timber.d(\""foo\"" + bar);\n""
+            + ""              ~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""foo%s\"", bar:\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(\""foo\"" + bar);\n""
+            + ""+      Timber.d(\""foo%s\"", bar);\n"");
+  }
+
+  @Test public void stringConcatenationBothVariables() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String foo = \""foo\"";\n""
+                + ""     String bar = \""bar\"";\n""
+                + ""     Timber.d(foo + bar);\n""
+                + ""  }\n""
+                + ""}""))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""src/foo/Example.java:7: ""
+            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+            + ""     Timber.d(foo + bar);\n""
+            + ""              ~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 6: Replace with \""%s%s\"", foo, bar:\n""
+            + ""@@ -7 +7\n""
+            + ""-      Timber.d(foo + bar);\n""
+            + ""+      Timber.d(\""%s%s\"", foo, bar);\n"");
+  }
+
+  @Test public void stringConcatenationInsideTernary() {
     lint() //
         .files(TIMBER_STUB, //
             java(""""
@@ -357,7 +588,7 @@ public final class WrongTimberUsageDetectorTest {
             + ""1 errors, 0 warnings\n"");
   }
 
-  @Test public void exceptionLoggingUsingMessage() {
+  @Test public void exceptionLoggingUsingExceptionMessage() {
     lint() //
         .files(TIMBER_STUB, //
             java(""""
@@ -375,8 +606,12 @@ public final class WrongTimberUsageDetectorTest {
         .expect(""src/foo/Example.java:6: ""
             + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
             + ""     Timber.d(e, e.getMessage());\n""
-            + ""                 ~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(e, e.getMessage());\n""
+            + ""+      Timber.d(e);\n"");
   }
 
   @Test public void exceptionLoggingUsingVariable() {
@@ -416,8 +651,12 @@ public final class WrongTimberUsageDetectorTest {
         .expect(""src/foo/Example.java:6: ""
             + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
             + ""     Timber.d(e, \""\"");\n""
-            + ""                 ~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""     ~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(e, \""\"");\n""
+            + ""+      Timber.d(e);\n"");
   }
 
   @Test public void exceptionLoggingUsingNullMessage() {
@@ -438,8 +677,12 @@ public final class WrongTimberUsageDetectorTest {
         .expect(""src/foo/Example.java:6: ""
             + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
             + ""     Timber.d(e, null);\n""
-            + ""                 ~~~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""     ~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(e, null);\n""
+            + ""+      Timber.d(e);\n"");
   }
 
   @Test public void exceptionLoggingUsingValidMessage() {","@@ -21,7 +21,7 @@ public final class WrongTimberUsageDetectorTest {
       + ""  private static final Tree TREE_OF_SOULS = new Tree();\n""
       + ""}"");
 
-  @Test public void usingAndroidLog() {
+  @Test public void usingAndroidLogWithTwoArguments() {
     lint() //
         .files( //
             java(""""
@@ -38,8 +38,156 @@ public final class WrongTimberUsageDetectorTest {
         .expect(""src/foo/Example.java:5: ""
             + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
             + ""    Log.d(\""TAG\"", \""msg\"");\n""
-            + ""    ~~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""    ~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(
+            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
+                + ""@@ -5 +5\n""
+                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
+                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
+                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(\""msg\""):\n""
+                + ""@@ -5 +5\n""
+                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
+                + ""+     Timber.d(\""msg\"");\n"");
+  }
+
+  @Test public void usingAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""
+                + ""package foo;\n""
+                + ""import android.util.Log;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
+            + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(
+            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
+                + ""@@ -5 +5\n""
+                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
+                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), \""msg\""):\n""
+                + ""@@ -5 +5\n""
+                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
+  }
+
+  @Test public void usingFullyQualifiedAndroidLogWithTwoArguments() {
+    lint() //
+        .files( //
+            java(""""
+                + ""package foo;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""src/foo/Example.java:4: ""
+            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
+            + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
+            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(
+            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
+                + ""@@ -4 +4\n""
+                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
+                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
+                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(\""msg\""):\n""
+                + ""@@ -4 +4\n""
+                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
+                + ""+     Timber.d(\""msg\"");\n"");
+  }
+
+  @Test public void usingFullyQualifiedAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""
+                + ""package foo;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""src/foo/Example.java:4: ""
+            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
+            + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(
+            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
+                + ""@@ -4 +4\n""
+                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
+                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), \""msg\""):\n""
+                + ""@@ -4 +4\n""
+                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
+                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
+  }
+
+  @Test public void innerStringFormat() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""src/foo/Example.java:5: ""
+            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+            + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
+            + ""              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Remove String.format(...):\n""
+            + ""@@ -5 +5\n""
+            + ""-      Timber.d(String.format(\""%s\"", \""arg1\""));\n""
+            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
+  }
+
+  @Test public void innerStringFormatWithStaticImport() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""import static java.lang.String.format;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
+            + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
+            + ""              ~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove String.format(...):\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(format(\""%s\"", \""arg1\""));\n""
+            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
   }
 
   @Test public void innerStringFormatInNestedMethods() {
@@ -124,10 +272,14 @@ public final class WrongTimberUsageDetectorTest {
             + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
             + ""     Timber.d(\""%s\"", e);\n""
             + ""     ~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with e, \""%s\"":\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(\""%s\"", e);\n""
+            + ""+      Timber.d(e, \""%s\"");\n"");
   }
 
-  @Test public void binaryOperation() {
+  @Test public void stringConcatenationBothLiterals() {
     lint() //
         .files(TIMBER_STUB, //
             java(""""
@@ -135,20 +287,99 @@ public final class WrongTimberUsageDetectorTest {
                 + ""import timber.log.Timber;\n""
                 + ""public class Example {\n""
                 + ""  public void log() {\n""
-                + ""     String s = \""world!\"";\n""
-                + ""     Timber.d(\""Hello, \"" + s);\n""
+                + ""     Timber.d(\""foo\"" + \""bar\"");\n""
                 + ""  }\n""
                 + ""}""))
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
-        .expect(""src/foo/Example.java:6: ""
+        .expect(""src/foo/Example.java:5: ""
             + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(\""Hello, \"" + s);\n""
+            + ""     Timber.d(\""foo\"" + \""bar\"");\n""
             + ""              ~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Replace with \""foobar\"":\n""
+            + ""@@ -5 +5\n""
+            + ""-      Timber.d(\""foo\"" + \""bar\"");\n""
+            + ""+      Timber.d(\""foobar\"");\n"");
   }
 
-  @Test public void binaryOperationInsideTernary() {
+  @Test public void stringConcatenationLeftLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String foo = \""foo\"";\n""
+                + ""     Timber.d(foo + \""bar\"");\n""
+                + ""  }\n""
+                + ""}""))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+            + ""     Timber.d(foo + \""bar\"");\n""
+            + ""              ~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""%sbar\"", foo:\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(foo + \""bar\"");\n""
+            + ""+      Timber.d(\""%sbar\"", foo);\n"");
+  }
+
+  @Test public void stringConcatenationRightLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String bar = \""bar\"";\n""
+                + ""     Timber.d(\""foo\"" + bar);\n""
+                + ""  }\n""
+                + ""}""))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""src/foo/Example.java:6: ""
+            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+            + ""     Timber.d(\""foo\"" + bar);\n""
+            + ""              ~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""foo%s\"", bar:\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(\""foo\"" + bar);\n""
+            + ""+      Timber.d(\""foo%s\"", bar);\n"");
+  }
+
+  @Test public void stringConcatenationBothVariables() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""     String foo = \""foo\"";\n""
+                + ""     String bar = \""bar\"";\n""
+                + ""     Timber.d(foo + bar);\n""
+                + ""  }\n""
+                + ""}""))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""src/foo/Example.java:7: ""
+            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
+            + ""     Timber.d(foo + bar);\n""
+            + ""              ~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 6: Replace with \""%s%s\"", foo, bar:\n""
+            + ""@@ -7 +7\n""
+            + ""-      Timber.d(foo + bar);\n""
+            + ""+      Timber.d(\""%s%s\"", foo, bar);\n"");
+  }
+
+  @Test public void stringConcatenationInsideTernary() {
     lint() //
         .files(TIMBER_STUB, //
             java(""""
@@ -357,7 +588,7 @@ public final class WrongTimberUsageDetectorTest {
             + ""1 errors, 0 warnings\n"");
   }
 
-  @Test public void exceptionLoggingUsingMessage() {
+  @Test public void exceptionLoggingUsingExceptionMessage() {
     lint() //
         .files(TIMBER_STUB, //
             java(""""
@@ -375,8 +606,12 @@ public final class WrongTimberUsageDetectorTest {
         .expect(""src/foo/Example.java:6: ""
             + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
             + ""     Timber.d(e, e.getMessage());\n""
-            + ""                 ~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(e, e.getMessage());\n""
+            + ""+      Timber.d(e);\n"");
   }
 
   @Test public void exceptionLoggingUsingVariable() {
@@ -416,8 +651,12 @@ public final class WrongTimberUsageDetectorTest {
         .expect(""src/foo/Example.java:6: ""
             + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
             + ""     Timber.d(e, \""\"");\n""
-            + ""                 ~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""     ~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(e, \""\"");\n""
+            + ""+      Timber.d(e);\n"");
   }
 
   @Test public void exceptionLoggingUsingNullMessage() {
@@ -438,8 +677,12 @@ public final class WrongTimberUsageDetectorTest {
         .expect(""src/foo/Example.java:6: ""
             + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
             + ""     Timber.d(e, null);\n""
-            + ""                 ~~~~\n""
-            + ""0 errors, 1 warnings\n"");
+            + ""     ~~~~~~~~~~~~~~~~~\n""
+            + ""0 errors, 1 warnings\n"")
+        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
+            + ""@@ -6 +6\n""
+            + ""-      Timber.d(e, null);\n""
+            + ""+      Timber.d(e);\n"");
   }
 
   @Test public void exceptionLoggingUsingValidMessage() {",False,test
timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,7f35bc793cdfa3c87f838c302bd4303a7e3651cf,b77b1e87dceebaa5e18b5f71d4fa774dfd3782a9,"Supply quickfixes for lint checks

Closes #228","@@ -7,39 +7,66 @@ import android.support.annotation.Nullable;
 import android.util.Log;
 import timber.log.Timber;
 
+import static java.lang.String.format;
+
 @SuppressLint(""Registered"") //
 public class LintActivity extends Activity {
+  /**
+   * Below are some examples of how NOT to use Timber.
+   *
+   * Currently, locally-packaged lint checks don't work in Studio. Once
+   * https://issuetracker.google.com/issues/65941946 is fixed, you will need to run
+   * ""./gradlew :timber-sample:lint"" first, before Lint IDE highlighting will work.
+   *
+   * A future release will eliminate the 'command-line first' workaround.
+   */
   @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
 
-    // Below are some examples of how NOT to use Timber
     /*
+    // LogNotTimber
     Log.d(""TAG"", ""msg"");
+    Log.d(""TAG"", ""msg"", new Exception());
+    android.util.Log.d(""TAG"", ""msg"");
+    android.util.Log.d(""TAG"", ""msg"", new Exception());
 
-    Timber.w(String.format(""%s"", ""arg0""));
+    // StringFormatInTimber
+    Timber.w(String.format(""%s"", getString()));
+    Timber.w(format(""%s"", getString()));
 
-    Exception e = new Exception();
-    Timber.d(""%s"", e);
+    // ThrowableNotAtBeginning
+    Timber.d(""%s"", new Exception());
 
-    Timber.d(""Hello, "" + ""world!"");
+    // BinaryOperationInTimber
+    String foo = ""foo"";
+    String bar = ""bar"";
+    Timber.d(""foo"" + ""bar"");
+    Timber.d(""foo"" + bar);
+    Timber.d(foo + ""bar"");
+    Timber.d(foo + bar);
 
+    // TimberArgCount
     Timber.d(""%s %s"", ""arg0"");
-
     Timber.d(""%s"", ""arg0"", ""arg1"");
-
-    Timber.d(""%d"", ""arg0"");
-
-    Timber.tag(""abcdefghijklmnopqrstuvwx"");
-
     Timber.tag(""tag"").d(""%s %s"", ""arg0"");
-
     Timber.tag(""tag"").d(""%s"", ""arg0"", ""arg1"");
 
+    // TimberArgTypes
+    Timber.d(""%d"", ""arg0"");
     Timber.tag(""tag"").d(""%d"", ""arg0"");
 
+    // TimberTagLength
+    Timber.tag(""abcdefghijklmnopqrstuvwx"");
     Timber.tag(""abcdefghijklmnopqrstuvw"" + ""x"");
 
-    Timber.tag(""abcdefghijklmnopqrstuvw"" + new String(""x""));
+    // TimberExceptionLogging
+    Timber.d(new Exception(), new Exception().getMessage());
+    Timber.d(new Exception(), """");
+    Timber.d(new Exception(), null);
     */
   }
+
+  private String getString() {
+    return ""foo"";
+  }
 }","@@ -7,39 +7,66 @@ import android.support.annotation.Nullable;
 import android.util.Log;
 import timber.log.Timber;
 
+import static java.lang.String.format;
+
 @SuppressLint(""Registered"") //
 public class LintActivity extends Activity {
+  /**
+   * Below are some examples of how NOT to use Timber.
+   *
+   * Currently, locally-packaged lint checks don't work in Studio. Once
+   * https://issuetracker.google.com/issues/65941946 is fixed, you will need to run
+   * ""./gradlew :timber-sample:lint"" first, before Lint IDE highlighting will work.
+   *
+   * A future release will eliminate the 'command-line first' workaround.
+   */
   @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
 
-    // Below are some examples of how NOT to use Timber
     /*
+    // LogNotTimber
     Log.d(""TAG"", ""msg"");
+    Log.d(""TAG"", ""msg"", new Exception());
+    android.util.Log.d(""TAG"", ""msg"");
+    android.util.Log.d(""TAG"", ""msg"", new Exception());
 
-    Timber.w(String.format(""%s"", ""arg0""));
+    // StringFormatInTimber
+    Timber.w(String.format(""%s"", getString()));
+    Timber.w(format(""%s"", getString()));
 
-    Exception e = new Exception();
-    Timber.d(""%s"", e);
+    // ThrowableNotAtBeginning
+    Timber.d(""%s"", new Exception());
 
-    Timber.d(""Hello, "" + ""world!"");
+    // BinaryOperationInTimber
+    String foo = ""foo"";
+    String bar = ""bar"";
+    Timber.d(""foo"" + ""bar"");
+    Timber.d(""foo"" + bar);
+    Timber.d(foo + ""bar"");
+    Timber.d(foo + bar);
 
+    // TimberArgCount
     Timber.d(""%s %s"", ""arg0"");
-
     Timber.d(""%s"", ""arg0"", ""arg1"");
-
-    Timber.d(""%d"", ""arg0"");
-
-    Timber.tag(""abcdefghijklmnopqrstuvwx"");
-
     Timber.tag(""tag"").d(""%s %s"", ""arg0"");
-
     Timber.tag(""tag"").d(""%s"", ""arg0"", ""arg1"");
 
+    // TimberArgTypes
+    Timber.d(""%d"", ""arg0"");
     Timber.tag(""tag"").d(""%d"", ""arg0"");
 
+    // TimberTagLength
+    Timber.tag(""abcdefghijklmnopqrstuvwx"");
     Timber.tag(""abcdefghijklmnopqrstuvw"" + ""x"");
 
-    Timber.tag(""abcdefghijklmnopqrstuvw"" + new String(""x""));
+    // TimberExceptionLogging
+    Timber.d(new Exception(), new Exception().getMessage());
+    Timber.d(new Exception(), """");
+    Timber.d(new Exception(), null);
     */
   }
+
+  private String getString() {
+    return ""foo"";
+  }
 }",False,source
build.gradle,build.gradle,d48c4628bd120453acfefe59a8749beed69d702c,db1b3e4dde956d98b1af05b292a89530b7034e20,Update dependencies and remove unnecessary build tools declaration,"@@ -4,10 +4,9 @@ buildscript {
   ext.versions = [
       'minSdk': 9,
       'compileSdk': 26,
-      'buildTools': '26.0.1',
 
-      'androidPlugin': '3.0.0-beta6',
-      'androidTools': '26.0.0-beta6',
+      'androidPlugin': '3.0.0-beta7',
+      'androidTools': '26.0.0-beta7',
 
       'butterknife': '8.8.1',
   ]","@@ -4,10 +4,9 @@ buildscript {
   ext.versions = [
       'minSdk': 9,
       'compileSdk': 26,
-      'buildTools': '26.0.1',
 
-      'androidPlugin': '3.0.0-beta6',
-      'androidTools': '26.0.0-beta6',
+      'androidPlugin': '3.0.0-beta7',
+      'androidTools': '26.0.0-beta7',
 
       'butterknife': '8.8.1',
   ]",False,other
timber-sample/build.gradle,timber-sample/build.gradle,d48c4628bd120453acfefe59a8749beed69d702c,db1b3e4dde956d98b1af05b292a89530b7034e20,Update dependencies and remove unnecessary build tools declaration,"@@ -2,7 +2,6 @@ apply plugin: 'com.android.application'
 
 android {
   compileSdkVersion versions.compileSdk
-  buildToolsVersion versions.buildTools
 
   compileOptions {
     sourceCompatibility JavaVersion.VERSION_1_7","@@ -2,7 +2,6 @@ apply plugin: 'com.android.application'
 
 android {
   compileSdkVersion versions.compileSdk
-  buildToolsVersion versions.buildTools
 
   compileOptions {
     sourceCompatibility JavaVersion.VERSION_1_7",False,other
timber/build.gradle,timber/build.gradle,d48c4628bd120453acfefe59a8749beed69d702c,db1b3e4dde956d98b1af05b292a89530b7034e20,Update dependencies and remove unnecessary build tools declaration,"@@ -19,7 +19,6 @@ afterEvaluate {
 
 android {
   compileSdkVersion versions.compileSdk
-  buildToolsVersion versions.buildTools
 
   defaultConfig {
     minSdkVersion versions.minSdk","@@ -19,7 +19,6 @@ afterEvaluate {
 
 android {
   compileSdkVersion versions.compileSdk
-  buildToolsVersion versions.buildTools
 
   defaultConfig {
     minSdkVersion versions.minSdk",False,other
build.gradle,build.gradle,42b87083e07cedf7cd124e6aa9fb9e7804fc5a87,a693e5d24edcbc909d1956270cd955b1f4a83fb2,"Bump AGP to 3.0.0-rc1

Also, update comment in LintActivity now that
https://issuetracker.google.com/issues/65941946 is fixed.","@@ -5,8 +5,8 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 26,
 
-      'androidPlugin': '3.0.0-beta7',
-      'androidTools': '26.0.0-beta7',
+      'androidPlugin': '3.0.0-rc1',
+      'androidTools': '26.0.0-rc1',
 
       'butterknife': '8.8.1',
   ]","@@ -5,8 +5,8 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 26,
 
-      'androidPlugin': '3.0.0-beta7',
-      'androidTools': '26.0.0-beta7',
+      'androidPlugin': '3.0.0-rc1',
+      'androidTools': '26.0.0-rc1',
 
       'butterknife': '8.8.1',
   ]",False,other
timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,42b87083e07cedf7cd124e6aa9fb9e7804fc5a87,a693e5d24edcbc909d1956270cd955b1f4a83fb2,"Bump AGP to 3.0.0-rc1

Also, update comment in LintActivity now that
https://issuetracker.google.com/issues/65941946 is fixed.","@@ -14,9 +14,9 @@ public class LintActivity extends Activity {
   /**
    * Below are some examples of how NOT to use Timber.
    *
-   * Currently, locally-packaged lint checks don't work in Studio. Once
-   * https://issuetracker.google.com/issues/65941946 is fixed, you will need to run
-   * ""./gradlew :timber-sample:lint"" first, before Lint IDE highlighting will work.
+   * Currently, locally-packaged lint checks don't work in Studio. As a workaround,
+   * you will need to run ""./gradlew :timber-sample:lint"" first, before Lint IDE
+   * highlighting will work.
    *
    * A future release will eliminate the 'command-line first' workaround.
    */","@@ -14,9 +14,9 @@ public class LintActivity extends Activity {
   /**
    * Below are some examples of how NOT to use Timber.
    *
-   * Currently, locally-packaged lint checks don't work in Studio. Once
-   * https://issuetracker.google.com/issues/65941946 is fixed, you will need to run
-   * ""./gradlew :timber-sample:lint"" first, before Lint IDE highlighting will work.
+   * Currently, locally-packaged lint checks don't work in Studio. As a workaround,
+   * you will need to run ""./gradlew :timber-sample:lint"" first, before Lint IDE
+   * highlighting will work.
    *
    * A future release will eliminate the 'command-line first' workaround.
    */",False,source
.travis.yml,.travis.yml,662f74509129154687df64aed5611b120259ddf3,a693e5d24edcbc909d1956270cd955b1f4a83fb2,Update SDK license hash,"@@ -7,7 +7,7 @@ android:
 
 before_install:
   - mkdir ""$ANDROID_HOME/licenses"" || true
-  - echo ""8933bad161af4178b1185d1a37fbf41ea5269c55"" > ""$ANDROID_HOME/licenses/android-sdk-license""
+  - echo ""d56f5187479451eabf01fb78af6dfcb131a6481e"" > ""$ANDROID_HOME/licenses/android-sdk-license""
 
 jdk:
   - oraclejdk8","@@ -7,7 +7,7 @@ android:
 
 before_install:
   - mkdir ""$ANDROID_HOME/licenses"" || true
-  - echo ""8933bad161af4178b1185d1a37fbf41ea5269c55"" > ""$ANDROID_HOME/licenses/android-sdk-license""
+  - echo ""d56f5187479451eabf01fb78af6dfcb131a6481e"" > ""$ANDROID_HOME/licenses/android-sdk-license""
 
 jdk:
   - oraclejdk8",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,e1fc57941316f2dbde1aa4539616ae26a199a7e0,e8d93e3b02670e7d18137a4f7d5daa00292d2598,"Fix NPE in checkNestedStringFormat lint check

UCallExpression.getMethodName() returns null when the expression is a
JavaConstructorUCallExpression.

Fixes #256","@@ -101,8 +101,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       if (current instanceof UCallExpression) {
         UCallExpression maybeTimberLogCall = (UCallExpression) current;
         JavaEvaluator evaluator = context.getEvaluator();
-        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, maybeTimberLogCall.getMethodName())
-            && evaluator.isMemberInClass(maybeTimberLogCall.resolve(), ""timber.log.Timber"")) {
+        PsiMethod psiMethod = maybeTimberLogCall.resolve();
+        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
+            && evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")) {
           LintFix fix = quickFixIssueFormat(call);
           context.report(ISSUE_FORMAT, call, context.getLocation(call),
               ""Using 'String#format' inside of 'Timber'"", fix);","@@ -101,8 +101,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       if (current instanceof UCallExpression) {
         UCallExpression maybeTimberLogCall = (UCallExpression) current;
         JavaEvaluator evaluator = context.getEvaluator();
-        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, maybeTimberLogCall.getMethodName())
-            && evaluator.isMemberInClass(maybeTimberLogCall.resolve(), ""timber.log.Timber"")) {
+        PsiMethod psiMethod = maybeTimberLogCall.resolve();
+        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
+            && evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")) {
           LintFix fix = quickFixIssueFormat(call);
           context.report(ISSUE_FORMAT, call, context.getLocation(call),
               ""Using 'String#format' inside of 'Timber'"", fix);",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,e1fc57941316f2dbde1aa4539616ae26a199a7e0,e8d93e3b02670e7d18137a4f7d5daa00292d2598,"Fix NPE in checkNestedStringFormat lint check

UCallExpression.getMethodName() returns null when the expression is a
JavaConstructorUCallExpression.

Fixes #256","@@ -253,6 +253,22 @@ public final class WrongTimberUsageDetectorTest {
         .expectClean();
   }
 
+  @Test public void validStringFormatInConstructorCall() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    new Exception(String.format(\""msg\""));\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean();
+  }
+
   @Test public void throwableNotAtBeginning() {
     lint() //
         .files(TIMBER_STUB, //","@@ -253,6 +253,22 @@ public final class WrongTimberUsageDetectorTest {
         .expectClean();
   }
 
+  @Test public void validStringFormatInConstructorCall() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""public class Example {\n""
+                + ""  public void log() {\n""
+                + ""    new Exception(String.format(\""msg\""));\n""
+                + ""  }\n""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean();
+  }
+
   @Test public void throwableNotAtBeginning() {
     lint() //
         .files(TIMBER_STUB, //",False,test
build.gradle,build.gradle,4dca5c0ea964b55c365ea812f5c6406ae8aea07e,a69776572a184016190127ce6e165f5bebf97287,Bump dependencies,"@@ -5,8 +5,8 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 26,
 
-      'androidPlugin': '3.0.0-rc1',
-      'androidTools': '26.0.0-rc1',
+      'androidPlugin': '3.0.0',
+      'androidTools': '26.0.0',
 
       'butterknife': '8.8.1',
   ]
@@ -29,7 +29,7 @@ buildscript {
       festassert : 'org.easytesting:fest-assert-core:2.0M10',
       festandroid: 'com.squareup:fest-android:1.0.8',
       mockitocore: 'org.mockito:mockito-core:1.9.5',
-      robolectric: 'org.robolectric:robolectric:3.4.2',
+      robolectric: 'org.robolectric:robolectric:3.5',
   ]
 
   repositories {
@@ -39,7 +39,7 @@ buildscript {
 
   dependencies {
     classpath deps.androidPlugin
-    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
+    classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
   }
 }","@@ -5,8 +5,8 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 26,
 
-      'androidPlugin': '3.0.0-rc1',
-      'androidTools': '26.0.0-rc1',
+      'androidPlugin': '3.0.0',
+      'androidTools': '26.0.0',
 
       'butterknife': '8.8.1',
   ]
@@ -29,7 +29,7 @@ buildscript {
       festassert : 'org.easytesting:fest-assert-core:2.0M10',
       festandroid: 'com.squareup:fest-android:1.0.8',
       mockitocore: 'org.mockito:mockito-core:1.9.5',
-      robolectric: 'org.robolectric:robolectric:3.4.2',
+      robolectric: 'org.robolectric:robolectric:3.5',
   ]
 
   repositories {
@@ -39,7 +39,7 @@ buildscript {
 
   dependencies {
     classpath deps.androidPlugin
-    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
+    classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
   }
 }",False,other
build.gradle,build.gradle,98390c5da717d2f1e7dd2964b50817000a282394,44711644a3997a37d1bcdaa3eb3b889ff8cd4e6f,"Get rid of FEST, test improvements.","@@ -25,9 +25,8 @@ buildscript {
       ],
       annotations: 'org.jetbrains:annotations:15.0',
 
-      junit      : 'junit:junit:4.12',
-      festassert : 'org.easytesting:fest-assert-core:2.0M10',
-      festandroid: 'com.squareup:fest-android:1.0.8',
+      junit: 'junit:junit:4.12',
+      truth: 'com.google.truth:truth:0.36',
       mockitocore: 'org.mockito:mockito-core:1.9.5',
       robolectric: 'org.robolectric:robolectric:3.5',
   ]","@@ -25,9 +25,8 @@ buildscript {
       ],
       annotations: 'org.jetbrains:annotations:15.0',
 
-      junit      : 'junit:junit:4.12',
-      festassert : 'org.easytesting:fest-assert-core:2.0M10',
-      festandroid: 'com.squareup:fest-android:1.0.8',
+      junit: 'junit:junit:4.12',
+      truth: 'com.google.truth:truth:0.36',
       mockitocore: 'org.mockito:mockito-core:1.9.5',
       robolectric: 'org.robolectric:robolectric:3.5',
   ]",False,other
timber-lint/build.gradle,timber-lint/build.gradle,98390c5da717d2f1e7dd2964b50817000a282394,44711644a3997a37d1bcdaa3eb3b889ff8cd4e6f,"Get rid of FEST, test improvements.","@@ -8,7 +8,6 @@ dependencies {
   compileOnly deps.lint.checks
   testImplementation deps.lint.core
   testImplementation deps.lint.tests
-  testImplementation deps.festassert
 }
 
 jar {","@@ -8,7 +8,6 @@ dependencies {
   compileOnly deps.lint.checks
   testImplementation deps.lint.core
   testImplementation deps.lint.tests
-  testImplementation deps.festassert
 }
 
 jar {",False,other
timber/build.gradle,timber/build.gradle,98390c5da717d2f1e7dd2964b50817000a282394,44711644a3997a37d1bcdaa3eb3b889ff8cd4e6f,"Get rid of FEST, test improvements.","@@ -34,9 +34,8 @@ android {
 dependencies {
   compileOnly deps.annotations
 
-  testImplementation deps.festandroid
-  testImplementation deps.festassert
   testImplementation deps.junit
+  testImplementation deps.truth
   testImplementation deps.robolectric
 
   lintChecks project(':timber-lint')","@@ -34,9 +34,8 @@ android {
 dependencies {
   compileOnly deps.annotations
 
-  testImplementation deps.festandroid
-  testImplementation deps.festassert
   testImplementation deps.junit
+  testImplementation deps.truth
   testImplementation deps.robolectric
 
   lintChecks project(':timber-lint')",False,other
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,98390c5da717d2f1e7dd2964b50817000a282394,44711644a3997a37d1bcdaa3eb3b889ff8cd4e6f,"Get rid of FEST, test improvements.","@@ -1,5 +1,6 @@
 package timber.log;
 
+import android.os.Build;
 import android.util.Log;
 
 import java.net.UnknownHostException;
@@ -10,13 +11,15 @@ import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.robolectric.shadows.ShadowLog.LogItem;
 
@@ -38,7 +41,7 @@ public class TimberTest {
     Timber.d(""Test"");
 
     assertLog()
-        .hasDebugMessage(""TimberTest:38"", ""Test"")
+        .hasDebugMessage(""TimberTest:41"", ""Test"")
         .hasNoMoreMessages();
   }
 
@@ -48,13 +51,13 @@ public class TimberTest {
       Timber.plant(timber);
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(""Cannot plant Timber into itself."");
+      assertThat(e).hasMessageThat().isEqualTo(""Cannot plant Timber into itself."");
     }
     try {
       Timber.plant(new Timber.Tree[]{timber});
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(""Cannot plant Timber into itself."");
+      assertThat(e).hasMessageThat().isEqualTo(""Cannot plant Timber into itself."");
     }
   }
 
@@ -76,7 +79,7 @@ public class TimberTest {
       Timber.plant(nullTree);
       fail();
     } catch (NullPointerException e) {
-      assertThat(e).hasMessage(""tree == null"");
+      assertThat(e).hasMessageThat().isEqualTo(""tree == null"");
     }
   }
 
@@ -87,14 +90,14 @@ public class TimberTest {
       Timber.plant(nullTrees);
       fail();
     } catch (NullPointerException e) {
-      assertThat(e).hasMessage(""trees == null"");
+      assertThat(e).hasMessageThat().isEqualTo(""trees == null"");
     }
     nullTrees = new Timber.Tree[]{null};
     try {
       Timber.plant(nullTrees);
       fail();
     } catch (NullPointerException e) {
-      assertThat(e).hasMessage(""trees contains null"");
+      assertThat(e).hasMessageThat().isEqualTo(""trees contains null"");
     }
   }
 
@@ -120,7 +123,7 @@ public class TimberTest {
       Timber.uproot(new Timber.DebugTree());
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessageStartingWith(""Cannot uproot tree which is not planted: "");
+      assertThat(e).hasMessageThat().startsWith(""Cannot uproot tree which is not planted: "");
     }
   }
 
@@ -174,7 +177,7 @@ public class TimberTest {
   }
 
   class ThisIsAReallyLongClassName {
-    public void run() {
+    void run() {
       Timber.d(""Hello, world!"");
     }
   }
@@ -221,14 +224,17 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Ignore(""Currently failing because wasn't actually asserting before"")
   @Test public void debugTreeGeneratedTagIsLoggable() {
     Timber.plant(new Timber.DebugTree() {
       private static final int MAX_TAG_LENGTH = 23;
 
       @Override protected void log(int priority, String tag, String message, Throwable t) {
         try {
-          assertThat(Log.isLoggable(tag, priority));
-          assertThat(tag.length() <= MAX_TAG_LENGTH);
+          assertTrue(Log.isLoggable(tag, priority));
+          if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
+            assertTrue(tag.length() <= MAX_TAG_LENGTH);
+          }
         } catch (IllegalArgumentException e) {
           fail(e.getMessage());
         }
@@ -349,7 +355,7 @@ public class TimberTest {
   }
 
   @Test public void logMessageCallback() {
-    final List<String> logs = new ArrayList<String>();
+    final List<String> logs = new ArrayList<>();
     Timber.plant(new Timber.DebugTree() {
       @Override protected void log(int priority, String tag, String message, Throwable t) {
         logs.add(priority + "" "" + tag + "" "" + message);
@@ -424,6 +430,7 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @SuppressWarnings(""deprecation"") // Explicitly testing deprecated variant.
   @Test public void isLoggableControlsLogging() {
     Timber.plant(new Timber.DebugTree() {
       @Override protected boolean isLoggable(int priority) {
@@ -470,7 +477,7 @@ public class TimberTest {
   @Test public void tagIsClearedWhenNotLoggable() {
     Timber.plant(new Timber.DebugTree() {
       @Override
-      protected boolean isLoggable(int priority) {
+      protected boolean isLoggable(String tag, int priority) {
         return priority >= Log.WARN;
       }
     });","@@ -1,5 +1,6 @@
 package timber.log;
 
+import android.os.Build;
 import android.util.Log;
 
 import java.net.UnknownHostException;
@@ -10,13 +11,15 @@ import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.robolectric.shadows.ShadowLog.LogItem;
 
@@ -38,7 +41,7 @@ public class TimberTest {
     Timber.d(""Test"");
 
     assertLog()
-        .hasDebugMessage(""TimberTest:38"", ""Test"")
+        .hasDebugMessage(""TimberTest:41"", ""Test"")
         .hasNoMoreMessages();
   }
 
@@ -48,13 +51,13 @@ public class TimberTest {
       Timber.plant(timber);
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(""Cannot plant Timber into itself."");
+      assertThat(e).hasMessageThat().isEqualTo(""Cannot plant Timber into itself."");
     }
     try {
       Timber.plant(new Timber.Tree[]{timber});
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(""Cannot plant Timber into itself."");
+      assertThat(e).hasMessageThat().isEqualTo(""Cannot plant Timber into itself."");
     }
   }
 
@@ -76,7 +79,7 @@ public class TimberTest {
       Timber.plant(nullTree);
       fail();
     } catch (NullPointerException e) {
-      assertThat(e).hasMessage(""tree == null"");
+      assertThat(e).hasMessageThat().isEqualTo(""tree == null"");
     }
   }
 
@@ -87,14 +90,14 @@ public class TimberTest {
       Timber.plant(nullTrees);
       fail();
     } catch (NullPointerException e) {
-      assertThat(e).hasMessage(""trees == null"");
+      assertThat(e).hasMessageThat().isEqualTo(""trees == null"");
     }
     nullTrees = new Timber.Tree[]{null};
     try {
       Timber.plant(nullTrees);
       fail();
     } catch (NullPointerException e) {
-      assertThat(e).hasMessage(""trees contains null"");
+      assertThat(e).hasMessageThat().isEqualTo(""trees contains null"");
     }
   }
 
@@ -120,7 +123,7 @@ public class TimberTest {
       Timber.uproot(new Timber.DebugTree());
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessageStartingWith(""Cannot uproot tree which is not planted: "");
+      assertThat(e).hasMessageThat().startsWith(""Cannot uproot tree which is not planted: "");
     }
   }
 
@@ -174,7 +177,7 @@ public class TimberTest {
   }
 
   class ThisIsAReallyLongClassName {
-    public void run() {
+    void run() {
       Timber.d(""Hello, world!"");
     }
   }
@@ -221,14 +224,17 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @Ignore(""Currently failing because wasn't actually asserting before"")
   @Test public void debugTreeGeneratedTagIsLoggable() {
     Timber.plant(new Timber.DebugTree() {
       private static final int MAX_TAG_LENGTH = 23;
 
       @Override protected void log(int priority, String tag, String message, Throwable t) {
         try {
-          assertThat(Log.isLoggable(tag, priority));
-          assertThat(tag.length() <= MAX_TAG_LENGTH);
+          assertTrue(Log.isLoggable(tag, priority));
+          if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
+            assertTrue(tag.length() <= MAX_TAG_LENGTH);
+          }
         } catch (IllegalArgumentException e) {
           fail(e.getMessage());
         }
@@ -349,7 +355,7 @@ public class TimberTest {
   }
 
   @Test public void logMessageCallback() {
-    final List<String> logs = new ArrayList<String>();
+    final List<String> logs = new ArrayList<>();
     Timber.plant(new Timber.DebugTree() {
       @Override protected void log(int priority, String tag, String message, Throwable t) {
         logs.add(priority + "" "" + tag + "" "" + message);
@@ -424,6 +430,7 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
+  @SuppressWarnings(""deprecation"") // Explicitly testing deprecated variant.
   @Test public void isLoggableControlsLogging() {
     Timber.plant(new Timber.DebugTree() {
       @Override protected boolean isLoggable(int priority) {
@@ -470,7 +477,7 @@ public class TimberTest {
   @Test public void tagIsClearedWhenNotLoggable() {
     Timber.plant(new Timber.DebugTree() {
       @Override
-      protected boolean isLoggable(int priority) {
+      protected boolean isLoggable(String tag, int priority) {
         return priority >= Log.WARN;
       }
     });",False,test
build.gradle,build.gradle,8f3121611f7880fceba73065a9e09daa06e46837,73d849018dca9412c80028801d9463e83e313a4e,Compile against API 27.,"@@ -3,7 +3,7 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   ext.versions = [
       'minSdk': 9,
-      'compileSdk': 26,
+      'compileSdk': 27,
 
       'androidPlugin': '3.0.0',
       'androidTools': '26.0.0',","@@ -3,7 +3,7 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   ext.versions = [
       'minSdk': 9,
-      'compileSdk': 26,
+      'compileSdk': 27,
 
       'androidPlugin': '3.0.0',
       'androidTools': '26.0.0',",False,other
build.gradle,build.gradle,e56948b2fafa27678be3f98f214330d984edd708,8f3121611f7880fceba73065a9e09daa06e46837,Remove unused Mockito dep.,"@@ -27,7 +27,6 @@ buildscript {
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.36',
-      mockitocore: 'org.mockito:mockito-core:1.9.5',
       robolectric: 'org.robolectric:robolectric:3.5',
   ]","@@ -27,7 +27,6 @@ buildscript {
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.36',
-      mockitocore: 'org.mockito:mockito-core:1.9.5',
       robolectric: 'org.robolectric:robolectric:3.5',
   ]",False,other
timber-sample/src/main/java/com/example/timber/ExampleApp.java,timber-sample/src/main/java/com/example/timber/ExampleApp.java,667b9e530157213a0fd6199eb300c4fcb39fe25a,e56948b2fafa27678be3f98f214330d984edd708,"Spread on nullability annotations.

Re-using the JetBrains ones since we already have a dependency on them.","@@ -1,6 +1,7 @@
 package com.example.timber;
 
 import android.app.Application;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import timber.log.Timber;
 
@@ -19,7 +20,7 @@ public class ExampleApp extends Application {
 
   /** A tree which logs important information for crash reporting. */
   private static class CrashReportingTree extends Timber.Tree {
-    @Override protected void log(int priority, String tag, String message, Throwable t) {
+    @Override protected void log(int priority, String tag, @NonNull String message, Throwable t) {
       if (priority == Log.VERBOSE || priority == Log.DEBUG) {
         return;
       }","@@ -1,6 +1,7 @@
 package com.example.timber;
 
 import android.app.Application;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import timber.log.Timber;
 
@@ -19,7 +20,7 @@ public class ExampleApp extends Application {
 
   /** A tree which logs important information for crash reporting. */
   private static class CrashReportingTree extends Timber.Tree {
-    @Override protected void log(int priority, String tag, String message, Throwable t) {
+    @Override protected void log(int priority, String tag, @NonNull String message, Throwable t) {
       if (priority == Log.VERBOSE || priority == Log.DEBUG) {
         return;
       }",False,source
timber/build.gradle,timber/build.gradle,667b9e530157213a0fd6199eb300c4fcb39fe25a,e56948b2fafa27678be3f98f214330d984edd708,"Spread on nullability annotations.

Re-using the JetBrains ones since we already have a dependency on them.","@@ -34,6 +34,7 @@ android {
 dependencies {
   compileOnly deps.annotations
 
+  testImplementation deps.annotations
   testImplementation deps.junit
   testImplementation deps.truth
   testImplementation deps.robolectric","@@ -34,6 +34,7 @@ android {
 dependencies {
   compileOnly deps.annotations
 
+  testImplementation deps.annotations
   testImplementation deps.junit
   testImplementation deps.truth
   testImplementation deps.robolectric",False,other
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,667b9e530157213a0fd6199eb300c4fcb39fe25a,e56948b2fafa27678be3f98f214330d984edd708,"Spread on nullability annotations.

Re-using the JetBrains ones since we already have a dependency on them.","@@ -2,9 +2,6 @@ package timber.log;
 
 import android.os.Build;
 import android.util.Log;
-
-import org.jetbrains.annotations.NonNls;
-
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.ArrayList;
@@ -12,10 +9,14 @@ import java.util.Collections;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.jetbrains.annotations.NonNls;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import static java.util.Collections.unmodifiableList;
 
 /** Logging for lazy people. */
+@SuppressWarnings({ ""WeakerAccess"", ""unused"" }) // Public API.
 public final class Timber {
   /** Log a verbose message with optional format args. */
   public static void v(@NonNls String message, Object... args) {
@@ -126,11 +127,13 @@ public final class Timber {
    * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
    * instance rather than using static methods or to facilitate testing.
    */
+  @NotNull
   public static Tree asTree() {
     return TREE_OF_SOULS;
   }
 
   /** Set a one-time tag for use on the next logging call. */
+  @NotNull
   public static Tree tag(String tag) {
     Tree[] forest = forestAsArray;
     //noinspection ForLoopReplaceableByForEach
@@ -141,7 +144,8 @@ public final class Timber {
   }
 
   /** Add a new logging tree. */
-  public static void plant(Tree tree) {
+  @SuppressWarnings(""ConstantConditions"") // Validating public API contract.
+  public static void plant(@NotNull Tree tree) {
     if (tree == null) {
       throw new NullPointerException(""tree == null"");
     }
@@ -155,7 +159,8 @@ public final class Timber {
   }
 
   /** Adds new logging trees. */
-  public static void plant(Tree... trees) {
+  @SuppressWarnings(""ConstantConditions"") // Validating public API contract.
+  public static void plant(@NotNull Tree... trees) {
     if (trees == null) {
       throw new NullPointerException(""trees == null"");
     }
@@ -174,7 +179,7 @@ public final class Timber {
   }
 
   /** Remove a planted tree. */
-  public static void uproot(Tree tree) {
+  public static void uproot(@NotNull Tree tree) {
     synchronized (FOREST) {
       if (!FOREST.remove(tree)) {
         throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
@@ -192,6 +197,7 @@ public final class Timber {
   }
 
   /** Return a copy of all planted {@linkplain Tree trees}. */
+  @NotNull
   public static List<Tree> forest() {
     synchronized (FOREST) {
       return unmodifiableList(new ArrayList<>(FOREST));
@@ -379,7 +385,7 @@ public final class Timber {
       }
     }
 
-    @Override protected void log(int priority, String tag, String message, Throwable t) {
+    @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
       throw new AssertionError(""Missing override for log method."");
     }
   };
@@ -392,6 +398,7 @@ public final class Timber {
   public static abstract class Tree {
     final ThreadLocal<String> explicitTag = new ThreadLocal<>();
 
+    @Nullable
     String getTag() {
       String tag = explicitTag.get();
       if (tag != null) {
@@ -515,7 +522,8 @@ public final class Timber {
     }
 
     /** Return whether a message at {@code priority} or {@code tag} should be logged. */
-    protected boolean isLoggable(String tag, int priority) {
+    protected boolean isLoggable(@Nullable String tag, int priority) {
+      //noinspection deprecation
       return isLoggable(priority);
     }
 
@@ -549,7 +557,7 @@ public final class Timber {
     /**
      * Formats a log message with optional arguments.
      */
-    protected String formatMessage(String message, Object[] args) {
+    protected String formatMessage(@NotNull String message, @NotNull Object[] args) {
       return String.format(message, args);
     }
 
@@ -571,7 +579,8 @@ public final class Timber {
      * @param message Formatted log message. May be {@code null}, but then {@code t} will not be.
      * @param t Accompanying exceptions. May be {@code null}, but then {@code message} will not be.
      */
-    protected abstract void log(int priority, String tag, String message, Throwable t);
+    protected abstract void log(int priority, @Nullable String tag, @NotNull String message,
+        @Nullable Throwable t);
   }
 
   /** A {@link Tree Tree} for debug builds. Automatically infers the tag from the calling class. */
@@ -588,7 +597,8 @@ public final class Timber {
      * <p>
      * Note: This will not be called if a {@linkplain #tag(String) manual tag} was specified.
      */
-    protected String createStackElementTag(StackTraceElement element) {
+    @Nullable
+    protected String createStackElementTag(@NotNull StackTraceElement element) {
       String tag = element.getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
@@ -625,7 +635,7 @@ public final class Timber {
      *
      * {@inheritDoc}
      */
-    @Override protected void log(int priority, String tag, String message, Throwable t) {
+    @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
       if (message.length() < MAX_LOG_LENGTH) {
         if (priority == Log.ASSERT) {
           Log.wtf(tag, message);","@@ -2,9 +2,6 @@ package timber.log;
 
 import android.os.Build;
 import android.util.Log;
-
-import org.jetbrains.annotations.NonNls;
-
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.ArrayList;
@@ -12,10 +9,14 @@ import java.util.Collections;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.jetbrains.annotations.NonNls;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import static java.util.Collections.unmodifiableList;
 
 /** Logging for lazy people. */
+@SuppressWarnings({ ""WeakerAccess"", ""unused"" }) // Public API.
 public final class Timber {
   /** Log a verbose message with optional format args. */
   public static void v(@NonNls String message, Object... args) {
@@ -126,11 +127,13 @@ public final class Timber {
    * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
    * instance rather than using static methods or to facilitate testing.
    */
+  @NotNull
   public static Tree asTree() {
     return TREE_OF_SOULS;
   }
 
   /** Set a one-time tag for use on the next logging call. */
+  @NotNull
   public static Tree tag(String tag) {
     Tree[] forest = forestAsArray;
     //noinspection ForLoopReplaceableByForEach
@@ -141,7 +144,8 @@ public final class Timber {
   }
 
   /** Add a new logging tree. */
-  public static void plant(Tree tree) {
+  @SuppressWarnings(""ConstantConditions"") // Validating public API contract.
+  public static void plant(@NotNull Tree tree) {
     if (tree == null) {
       throw new NullPointerException(""tree == null"");
     }
@@ -155,7 +159,8 @@ public final class Timber {
   }
 
   /** Adds new logging trees. */
-  public static void plant(Tree... trees) {
+  @SuppressWarnings(""ConstantConditions"") // Validating public API contract.
+  public static void plant(@NotNull Tree... trees) {
     if (trees == null) {
       throw new NullPointerException(""trees == null"");
     }
@@ -174,7 +179,7 @@ public final class Timber {
   }
 
   /** Remove a planted tree. */
-  public static void uproot(Tree tree) {
+  public static void uproot(@NotNull Tree tree) {
     synchronized (FOREST) {
       if (!FOREST.remove(tree)) {
         throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
@@ -192,6 +197,7 @@ public final class Timber {
   }
 
   /** Return a copy of all planted {@linkplain Tree trees}. */
+  @NotNull
   public static List<Tree> forest() {
     synchronized (FOREST) {
       return unmodifiableList(new ArrayList<>(FOREST));
@@ -379,7 +385,7 @@ public final class Timber {
       }
     }
 
-    @Override protected void log(int priority, String tag, String message, Throwable t) {
+    @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
       throw new AssertionError(""Missing override for log method."");
     }
   };
@@ -392,6 +398,7 @@ public final class Timber {
   public static abstract class Tree {
     final ThreadLocal<String> explicitTag = new ThreadLocal<>();
 
+    @Nullable
     String getTag() {
       String tag = explicitTag.get();
       if (tag != null) {
@@ -515,7 +522,8 @@ public final class Timber {
     }
 
     /** Return whether a message at {@code priority} or {@code tag} should be logged. */
-    protected boolean isLoggable(String tag, int priority) {
+    protected boolean isLoggable(@Nullable String tag, int priority) {
+      //noinspection deprecation
       return isLoggable(priority);
     }
 
@@ -549,7 +557,7 @@ public final class Timber {
     /**
      * Formats a log message with optional arguments.
      */
-    protected String formatMessage(String message, Object[] args) {
+    protected String formatMessage(@NotNull String message, @NotNull Object[] args) {
       return String.format(message, args);
     }
 
@@ -571,7 +579,8 @@ public final class Timber {
      * @param message Formatted log message. May be {@code null}, but then {@code t} will not be.
      * @param t Accompanying exceptions. May be {@code null}, but then {@code message} will not be.
      */
-    protected abstract void log(int priority, String tag, String message, Throwable t);
+    protected abstract void log(int priority, @Nullable String tag, @NotNull String message,
+        @Nullable Throwable t);
   }
 
   /** A {@link Tree Tree} for debug builds. Automatically infers the tag from the calling class. */
@@ -588,7 +597,8 @@ public final class Timber {
      * <p>
      * Note: This will not be called if a {@linkplain #tag(String) manual tag} was specified.
      */
-    protected String createStackElementTag(StackTraceElement element) {
+    @Nullable
+    protected String createStackElementTag(@NotNull StackTraceElement element) {
       String tag = element.getClassName();
       Matcher m = ANONYMOUS_CLASS.matcher(tag);
       if (m.find()) {
@@ -625,7 +635,7 @@ public final class Timber {
      *
      * {@inheritDoc}
      */
-    @Override protected void log(int priority, String tag, String message, Throwable t) {
+    @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
       if (message.length() < MAX_LOG_LENGTH) {
         if (priority == Log.ASSERT) {
           Log.wtf(tag, message);",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,667b9e530157213a0fd6199eb300c4fcb39fe25a,e56948b2fafa27678be3f98f214330d984edd708,"Spread on nullability annotations.

Re-using the JetBrains ones since we already have a dependency on them.","@@ -2,13 +2,13 @@ package timber.log;
 
 import android.os.Build;
 import android.util.Log;
-
-import java.net.UnknownHostException;
 import java.net.ConnectException;
+import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
+import org.jetbrains.annotations.NotNull;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -33,7 +33,7 @@ public class TimberTest {
   // NOTE: This class references the line number. Keep it at the top so it does not change.
   @Test public void debugTreeCanAlterCreatedTag() {
     Timber.plant(new Timber.DebugTree() {
-      @Override protected String createStackElementTag(StackTraceElement element) {
+      @Override protected String createStackElementTag(@NotNull StackTraceElement element) {
         return super.createStackElementTag(element) + ':' + element.getLineNumber();
       }
     });
@@ -229,7 +229,7 @@ public class TimberTest {
     Timber.plant(new Timber.DebugTree() {
       private static final int MAX_TAG_LENGTH = 23;
 
-      @Override protected void log(int priority, String tag, String message, Throwable t) {
+      @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
         try {
           assertTrue(Log.isLoggable(tag, priority));
           if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
@@ -357,7 +357,7 @@ public class TimberTest {
   @Test public void logMessageCallback() {
     final List<String> logs = new ArrayList<>();
     Timber.plant(new Timber.DebugTree() {
-      @Override protected void log(int priority, String tag, String message, Throwable t) {
+      @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
         logs.add(priority + "" "" + tag + "" "" + message);
       }
     });
@@ -492,7 +492,7 @@ public class TimberTest {
   @Test public void logsWithCustomFormatter() {
     Timber.plant(new Timber.DebugTree() {
       @Override
-      protected String formatMessage(String message, Object[] args) {
+      protected String formatMessage(@NotNull String message, @NotNull Object[] args) {
         return String.format(""Test formatting: "" + message, args);
       }
     });","@@ -2,13 +2,13 @@ package timber.log;
 
 import android.os.Build;
 import android.util.Log;
-
-import java.net.UnknownHostException;
 import java.net.ConnectException;
+import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
+import org.jetbrains.annotations.NotNull;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -33,7 +33,7 @@ public class TimberTest {
   // NOTE: This class references the line number. Keep it at the top so it does not change.
   @Test public void debugTreeCanAlterCreatedTag() {
     Timber.plant(new Timber.DebugTree() {
-      @Override protected String createStackElementTag(StackTraceElement element) {
+      @Override protected String createStackElementTag(@NotNull StackTraceElement element) {
         return super.createStackElementTag(element) + ':' + element.getLineNumber();
       }
     });
@@ -229,7 +229,7 @@ public class TimberTest {
     Timber.plant(new Timber.DebugTree() {
       private static final int MAX_TAG_LENGTH = 23;
 
-      @Override protected void log(int priority, String tag, String message, Throwable t) {
+      @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
         try {
           assertTrue(Log.isLoggable(tag, priority));
           if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
@@ -357,7 +357,7 @@ public class TimberTest {
   @Test public void logMessageCallback() {
     final List<String> logs = new ArrayList<>();
     Timber.plant(new Timber.DebugTree() {
-      @Override protected void log(int priority, String tag, String message, Throwable t) {
+      @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
         logs.add(priority + "" "" + tag + "" "" + message);
       }
     });
@@ -492,7 +492,7 @@ public class TimberTest {
   @Test public void logsWithCustomFormatter() {
     Timber.plant(new Timber.DebugTree() {
       @Override
-      protected String formatMessage(String message, Object[] args) {
+      protected String formatMessage(@NotNull String message, @NotNull Object[] args) {
         return String.format(""Test formatting: "" + message, args);
       }
     });",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,f6623e2bdcb46bef7109f151a70c3d910cccc6df,cdf13ba013a4d94bee159267d5af10c72d658efa,"Handle a null args Object[].

It's possible that an optimization elides the empty array and chooses to pass null.","@@ -543,7 +543,7 @@ public final class Timber {
         }
         message = getStackTraceString(t);
       } else {
-        if (args.length > 0) {
+        if (args != null && args.length > 0) {
           message = formatMessage(message, args);
         }
         if (t != null) {","@@ -543,7 +543,7 @@ public final class Timber {
         }
         message = getStackTraceString(t);
       } else {
-        if (args.length > 0) {
+        if (args != null && args.length > 0) {
           message = formatMessage(message, args);
         }
         if (t != null) {",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,f6623e2bdcb46bef7109f151a70c3d910cccc6df,cdf13ba013a4d94bee159267d5af10c72d658efa,"Handle a null args Object[].

It's possible that an optimization elides the empty array and chooses to pass null.","@@ -502,6 +502,14 @@ public class TimberTest {
         .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"");
   }
 
+  @Test public void nullArgumentObjectArray() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.v(""Test"", (Object[]) null);
+    assertLog()
+        .hasVerboseMessage(""TimberTest"", ""Test"")
+        .hasNoMoreMessages();
+  }
+
   private static <T extends Throwable> T truncatedThrowable(Class<T> throwableClass) {
     try {
       T throwable = throwableClass.newInstance();","@@ -502,6 +502,14 @@ public class TimberTest {
         .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"");
   }
 
+  @Test public void nullArgumentObjectArray() {
+    Timber.plant(new Timber.DebugTree());
+    Timber.v(""Test"", (Object[]) null);
+    assertLog()
+        .hasVerboseMessage(""TimberTest"", ""Test"")
+        .hasNoMoreMessages();
+  }
+
   private static <T extends Throwable> T truncatedThrowable(Class<T> throwableClass) {
     try {
       T throwable = throwableClass.newInstance();",False,test
CHANGELOG.md,CHANGELOG.md,85f7288083d892807e409f62fec43fc90fe8aa92,5661b90c4d9003a4303d7a05513ab5d9962f9c8d,Prepare version 4.6.0.,"@@ -1,10 +1,19 @@
 Change Log
 ==========
 
+Version 4.6.0 *(2017-10-30)*
+----------------------------
+
+ * New: Lint checks have been ported to UAST, their stability improved, and quick-fix suggestions added. They require Android Gradle Plugin 3.0 or newer to run.
+ * New: Added nullability annotations for Kotlin users.
+ * Fix: Tag length truncation no longer occurs on API 24 or newer as the system no longer has a length restriction.
+ * FIx: Handle when a `null` array is supplied for the message arguments. This can occur when using various bytecode optimization tools.
+
+
 Version 4.5.1 *(2017-01-20)*
 ----------------------------
 
- Fix: String formatting lint check now correctly works with dates.
+ * Fix: String formatting lint check now correctly works with dates.
 
 
 Version 4.5.0 *(2017-01-09)*","@@ -1,10 +1,19 @@
 Change Log
 ==========
 
+Version 4.6.0 *(2017-10-30)*
+----------------------------
+
+ * New: Lint checks have been ported to UAST, their stability improved, and quick-fix suggestions added. They require Android Gradle Plugin 3.0 or newer to run.
+ * New: Added nullability annotations for Kotlin users.
+ * Fix: Tag length truncation no longer occurs on API 24 or newer as the system no longer has a length restriction.
+ * FIx: Handle when a `null` array is supplied for the message arguments. This can occur when using various bytecode optimization tools.
+
+
 Version 4.5.1 *(2017-01-20)*
 ----------------------------
 
- Fix: String formatting lint check now correctly works with dates.
+ * Fix: String formatting lint check now correctly works with dates.
 
 
 Version 4.5.0 *(2017-01-09)*",False,other
README.md,README.md,85f7288083d892807e409f62fec43fc90fe8aa92,5661b90c4d9003a4303d7a05513ab5d9962f9c8d,Prepare version 4.6.0.,"@@ -83,7 +83,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.5.1'
+implementation 'com.jakewharton.timber:timber:4.6.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -83,7 +83,7 @@ Download
 --------
 
 ```groovy
-compile 'com.jakewharton.timber:timber:4.5.1'
+implementation 'com.jakewharton.timber:timber:4.6.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,85f7288083d892807e409f62fec43fc90fe8aa92,5661b90c4d9003a4303d7a05513ab5d9962f9c8d,Prepare version 4.6.0.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.5.2-SNAPSHOT
+VERSION_NAME=4.6.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.
 
@@ -15,4 +15,4 @@ POM_LICENCE_DIST=repo
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
 
-org.gradle.jvmargs=-Xmx1536M
\ No newline at end of file
+org.gradle.jvmargs=-Xmx1536M","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.5.2-SNAPSHOT
+VERSION_NAME=4.6.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.
 
@@ -15,4 +15,4 @@ POM_LICENCE_DIST=repo
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
 
-org.gradle.jvmargs=-Xmx1536M
\ No newline at end of file
+org.gradle.jvmargs=-Xmx1536M",False,other
gradle.properties,gradle.properties,b0c1944f47a53c9dac8500093f2869ab65b6519d,85f7288083d892807e409f62fec43fc90fe8aa92,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.6.0
+VERSION_NAME=4.6.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.6.0
+VERSION_NAME=4.6.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
CHANGELOG.md,CHANGELOG.md,7475bdff5e1b3a4714ce331cc497e3b08a165a56,b0c1944f47a53c9dac8500093f2869ab65b6519d,Update CHANGELOG.md,"@@ -7,7 +7,7 @@ Version 4.6.0 *(2017-10-30)*
  * New: Lint checks have been ported to UAST, their stability improved, and quick-fix suggestions added. They require Android Gradle Plugin 3.0 or newer to run.
  * New: Added nullability annotations for Kotlin users.
  * Fix: Tag length truncation no longer occurs on API 24 or newer as the system no longer has a length restriction.
- * FIx: Handle when a `null` array is supplied for the message arguments. This can occur when using various bytecode optimization tools.
+ * Fix: Handle when a `null` array is supplied for the message arguments. This can occur when using various bytecode optimization tools.
 
 
 Version 4.5.1 *(2017-01-20)*","@@ -7,7 +7,7 @@ Version 4.6.0 *(2017-10-30)*
  * New: Lint checks have been ported to UAST, their stability improved, and quick-fix suggestions added. They require Android Gradle Plugin 3.0 or newer to run.
  * New: Added nullability annotations for Kotlin users.
  * Fix: Tag length truncation no longer occurs on API 24 or newer as the system no longer has a length restriction.
- * FIx: Handle when a `null` array is supplied for the message arguments. This can occur when using various bytecode optimization tools.
+ * Fix: Handle when a `null` array is supplied for the message arguments. This can occur when using various bytecode optimization tools.
 
 
 Version 4.5.1 *(2017-01-20)*",False,other
.travis.yml,.travis.yml,f49c378e69c71d2b9a2e610cd4a5320fe2f1606a,b566f41af65de253aee54ff0da16092ffe972ab7,Remove unnecessary android components from travis.yml file.,"@@ -1,10 +1,5 @@
 language: android
 
-android:
-  components:
-    - tools
-    - platform-tools
-
 before_install:
   - mkdir ""$ANDROID_HOME/licenses"" || true
   - echo ""d56f5187479451eabf01fb78af6dfcb131a6481e"" > ""$ANDROID_HOME/licenses/android-sdk-license""","@@ -1,10 +1,5 @@
 language: android
 
-android:
-  components:
-    - tools
-    - platform-tools
-
 before_install:
   - mkdir ""$ANDROID_HOME/licenses"" || true
   - echo ""d56f5187479451eabf01fb78af6dfcb131a6481e"" > ""$ANDROID_HOME/licenses/android-sdk-license""",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,e49de3fe481ae066f24c7e4ded3259da47dd177f,d9eecc7662dc6f99d316ca03bb412ca977653eb6,Fix lint npe static string format (#278),"@@ -102,7 +102,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         UCallExpression maybeTimberLogCall = (UCallExpression) current;
         JavaEvaluator evaluator = context.getEvaluator();
         PsiMethod psiMethod = maybeTimberLogCall.resolve();
-        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
+        if (psiMethod != null
+            && Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
             && evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")) {
           LintFix fix = quickFixIssueFormat(call);
           context.report(ISSUE_FORMAT, call, context.getLocation(call),","@@ -102,7 +102,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         UCallExpression maybeTimberLogCall = (UCallExpression) current;
         JavaEvaluator evaluator = context.getEvaluator();
         PsiMethod psiMethod = maybeTimberLogCall.resolve();
-        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
+        if (psiMethod != null
+            && Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
             && evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")) {
           LintFix fix = quickFixIssueFormat(call);
           context.report(ISSUE_FORMAT, call, context.getLocation(call),",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,e49de3fe481ae066f24c7e4ded3259da47dd177f,d9eecc7662dc6f99d316ca03bb412ca977653eb6,Fix lint npe static string format (#278),"@@ -269,6 +269,21 @@ public final class WrongTimberUsageDetectorTest {
         .expectClean();
   }
 
+  @Test public void validStringFormatFromStaticArray() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""public class Example {\n""
+                + ""  static String[] X = { String.format(\""%s\"", 100) };""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean();
+  }
+
+
   @Test public void throwableNotAtBeginning() {
     lint() //
         .files(TIMBER_STUB, //","@@ -269,6 +269,21 @@ public final class WrongTimberUsageDetectorTest {
         .expectClean();
   }
 
+  @Test public void validStringFormatFromStaticArray() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""public class Example {\n""
+                + ""  static String[] X = { String.format(\""%s\"", 100) };""
+                + ""}"") //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean();
+  }
+
+
   @Test public void throwableNotAtBeginning() {
     lint() //
         .files(TIMBER_STUB, //",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,a30220a7370879ba52ea894aaab8e1c788851e6a,e49de3fe481ae066f24c7e4ded3259da47dd177f,"Fix nested String.format check

Cleanup of #278; the underlying issue is that there are many types of
UCallExpression, but this check only cares about explicit method calls.","@@ -34,6 +34,7 @@ import org.jetbrains.uast.UIfExpression;
 import org.jetbrains.uast.UMethod;
 import org.jetbrains.uast.UQualifiedReferenceExpression;
 import org.jetbrains.uast.UastBinaryOperator;
+import org.jetbrains.uast.util.UastExpressionUtils;
 
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
@@ -98,12 +99,11 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         // Reached AST root or code block node; String.format not inside Timber.X(..).
         return;
       }
-      if (current instanceof UCallExpression) {
+      if (UastExpressionUtils.isMethodCall(current)) {
         UCallExpression maybeTimberLogCall = (UCallExpression) current;
         JavaEvaluator evaluator = context.getEvaluator();
         PsiMethod psiMethod = maybeTimberLogCall.resolve();
-        if (psiMethod != null
-            && Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
+        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
             && evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")) {
           LintFix fix = quickFixIssueFormat(call);
           context.report(ISSUE_FORMAT, call, context.getLocation(call),","@@ -34,6 +34,7 @@ import org.jetbrains.uast.UIfExpression;
 import org.jetbrains.uast.UMethod;
 import org.jetbrains.uast.UQualifiedReferenceExpression;
 import org.jetbrains.uast.UastBinaryOperator;
+import org.jetbrains.uast.util.UastExpressionUtils;
 
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
 import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
@@ -98,12 +99,11 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         // Reached AST root or code block node; String.format not inside Timber.X(..).
         return;
       }
-      if (current instanceof UCallExpression) {
+      if (UastExpressionUtils.isMethodCall(current)) {
         UCallExpression maybeTimberLogCall = (UCallExpression) current;
         JavaEvaluator evaluator = context.getEvaluator();
         PsiMethod psiMethod = maybeTimberLogCall.resolve();
-        if (psiMethod != null
-            && Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
+        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
             && evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")) {
           LintFix fix = quickFixIssueFormat(call);
           context.report(ISSUE_FORMAT, call, context.getLocation(call),",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,a30220a7370879ba52ea894aaab8e1c788851e6a,e49de3fe481ae066f24c7e4ded3259da47dd177f,"Fix nested String.format check

Cleanup of #278; the underlying issue is that there are many types of
UCallExpression, but this check only cares about explicit method calls.","@@ -269,7 +269,7 @@ public final class WrongTimberUsageDetectorTest {
         .expectClean();
   }
 
-  @Test public void validStringFormatFromStaticArray() {
+  @Test public void validStringFormatInStaticArray() {
     lint() //
         .files(TIMBER_STUB, //
             java(""""","@@ -269,7 +269,7 @@ public final class WrongTimberUsageDetectorTest {
         .expectClean();
   }
 
-  @Test public void validStringFormatFromStaticArray() {
+  @Test public void validStringFormatInStaticArray() {
     lint() //
         .files(TIMBER_STUB, //
             java(""""",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,92d8849d81f36770458f1fb123d30d7306109894,91dbae0f3cccae58e52d0f4d47d085ce42b6661f,"Don't check non-constant fields as arguments for null

Fixes #254; supersedes #252","@@ -15,6 +15,7 @@ import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
+import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiLiteralExpression;
 import com.intellij.psi.PsiMethod;
 import com.intellij.psi.PsiMethodCallExpression;
@@ -33,6 +34,7 @@ import org.jetbrains.uast.UExpression;
 import org.jetbrains.uast.UIfExpression;
 import org.jetbrains.uast.UMethod;
 import org.jetbrains.uast.UQualifiedReferenceExpression;
+import org.jetbrains.uast.USimpleNameReferenceExpression;
 import org.jetbrains.uast.UastBinaryOperator;
 import org.jetbrains.uast.util.UastExpressionUtils;
 
@@ -519,6 +521,11 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
 
       String s = evaluateString(context, arg2, true);
+      if (s == null && isField(arg2)) {
+        // Non-final fields can't be evaluated.
+        return;
+      }
+
       if (s == null || s.isEmpty()) {
         LintFix fix = quickFixIssueExceptionLogging(arg2);
         context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
@@ -527,6 +534,11 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
+  private static boolean isField(UExpression expression) {
+    return expression instanceof USimpleNameReferenceExpression
+        && (((USimpleNameReferenceExpression) expression).resolve() instanceof PsiField);
+  }
+
   private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,
       String methodName, String className) {
     JavaEvaluator evaluator = context.getEvaluator();","@@ -15,6 +15,7 @@ import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
+import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiLiteralExpression;
 import com.intellij.psi.PsiMethod;
 import com.intellij.psi.PsiMethodCallExpression;
@@ -33,6 +34,7 @@ import org.jetbrains.uast.UExpression;
 import org.jetbrains.uast.UIfExpression;
 import org.jetbrains.uast.UMethod;
 import org.jetbrains.uast.UQualifiedReferenceExpression;
+import org.jetbrains.uast.USimpleNameReferenceExpression;
 import org.jetbrains.uast.UastBinaryOperator;
 import org.jetbrains.uast.util.UastExpressionUtils;
 
@@ -519,6 +521,11 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
 
       String s = evaluateString(context, arg2, true);
+      if (s == null && isField(arg2)) {
+        // Non-final fields can't be evaluated.
+        return;
+      }
+
       if (s == null || s.isEmpty()) {
         LintFix fix = quickFixIssueExceptionLogging(arg2);
         context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
@@ -527,6 +534,11 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
+  private static boolean isField(UExpression expression) {
+    return expression instanceof USimpleNameReferenceExpression
+        && (((USimpleNameReferenceExpression) expression).resolve() instanceof PsiField);
+  }
+
   private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,
       String methodName, String className) {
     JavaEvaluator evaluator = context.getEvaluator();",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,92d8849d81f36770458f1fb123d30d7306109894,91dbae0f3cccae58e52d0f4d47d085ce42b6661f,"Don't check non-constant fields as arguments for null

Fixes #254; supersedes #252","@@ -664,6 +664,44 @@ public final class WrongTimberUsageDetectorTest {
         .expectClean();
   }
 
+  @Test public void exceptionLoggingUsingNonFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  private String message;\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, message);\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean();
+  }
+  
+  @Test public void exceptionLoggingUsingFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  private final String message = \""foo\"";\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, message);\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean();
+  }
+
   @Test public void exceptionLoggingUsingEmptyStringMessage() {
     lint() //
         .files(TIMBER_STUB, //","@@ -664,6 +664,44 @@ public final class WrongTimberUsageDetectorTest {
         .expectClean();
   }
 
+  @Test public void exceptionLoggingUsingNonFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  private String message;\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, message);\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean();
+  }
+  
+  @Test public void exceptionLoggingUsingFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""
+                + ""package foo;\n""
+                + ""import timber.log.Timber;\n""
+                + ""public class Example {\n""
+                + ""  private final String message = \""foo\"";\n""
+                + ""  public void log() {\n""
+                + ""     Exception e = new Exception();\n""
+                + ""     Timber.d(e, message);\n""
+                + ""  }\n""
+                + ""}"") //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean();
+  }
+
   @Test public void exceptionLoggingUsingEmptyStringMessage() {
     lint() //
         .files(TIMBER_STUB, //",False,test
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,2932e78085800da470929d03885e3d125b613f38,42891a8468ca92d3f40d1b2f3c6df429c98f7dd6,Update Gradle to 4.5,"@@ -1,6 +1,5 @@
-#Sun Aug 27 16:59:02 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.5-all.zip","@@ -1,6 +1,5 @@
-#Sun Aug 27 16:59:02 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.5-all.zip",False,other
build.gradle,build.gradle,229ec6a6c90139c8ea54401ce5def4911f0f16b7,c8da8c87a379b20c093dfcedd0f73271ed4cf013,Rewrite WrongTimberUsageDetectorTest to Kotlin.,"@@ -5,6 +5,8 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 27,
 
+      'kotlin': '1.2.21',
+
       'androidPlugin': '3.0.0',
       'androidTools': '26.0.0',
 
@@ -13,6 +15,7 @@ buildscript {
 
   ext.deps = [
       androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
+      kotlinPlugin: ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
       'butterknife': [
           'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
           'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
@@ -37,6 +40,7 @@ buildscript {
 
   dependencies {
     classpath deps.androidPlugin
+    classpath deps.kotlinPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
   }
 }","@@ -5,6 +5,8 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 27,
 
+      'kotlin': '1.2.21',
+
       'androidPlugin': '3.0.0',
       'androidTools': '26.0.0',
 
@@ -13,6 +15,7 @@ buildscript {
 
   ext.deps = [
       androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
+      kotlinPlugin: ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
       'butterknife': [
           'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
           'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
@@ -37,6 +40,7 @@ buildscript {
 
   dependencies {
     classpath deps.androidPlugin
+    classpath deps.kotlinPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
   }
 }",False,other
timber-lint/build.gradle,timber-lint/build.gradle,229ec6a6c90139c8ea54401ce5def4911f0f16b7,c8da8c87a379b20c093dfcedd0f73271ed4cf013,Rewrite WrongTimberUsageDetectorTest to Kotlin.,"@@ -1,4 +1,5 @@
 apply plugin: 'java-library'
+apply plugin: 'kotlin'
 
 targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7","@@ -1,4 +1,5 @@
 apply plugin: 'java-library'
+apply plugin: 'kotlin'
 
 targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7",False,other
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,,229ec6a6c90139c8ea54401ce5def4911f0f16b7,c8da8c87a379b20c093dfcedd0f73271ed4cf013,Rewrite WrongTimberUsageDetectorTest to Kotlin.,"@@ -1,807 +0,0 @@
-package timber.lint;
-
-import com.android.tools.lint.checks.infrastructure.TestFile;
-import org.junit.Test;
-
-import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
-import static com.android.tools.lint.checks.infrastructure.TestFiles.manifest;
-import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
-
-public final class WrongTimberUsageDetectorTest {
-  private static final TestFile TIMBER_STUB = java(""""
-      + ""package timber.log;\n""
-      + ""public class Timber {\n""
-      + ""  public static void d(String s, Object... args) {}\n""
-      + ""  public static void d(Throwable t, String s, Object... args) {}\n""
-      + ""  public static Tree tag(String tag) { return new Tree(); }\n""
-      + ""  public static class Tree {\n""
-      + ""    public void d(String s, Object... args) {}\n""
-      + ""    public void d(Throwable t, String s, Object... args) {}""
-      + ""  }\n""
-      + ""  private static final Tree TREE_OF_SOULS = new Tree();\n""
-      + ""}"");
-
-  @Test public void usingAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""import android.util.Log;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Log.d(\""TAG\"", \""msg\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    Log.d(\""TAG\"", \""msg\"");\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(\""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.d(\""msg\"");\n"");
-  }
-
-  @Test public void usingAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""import android.util.Log;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), \""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
-  }
-
-  @Test public void usingFullyQualifiedAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:4: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(\""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.d(\""msg\"");\n"");
-  }
-
-  @Test public void usingFullyQualifiedAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:4: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), \""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
-  }
-
-  @Test public void innerStringFormat() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-            + ""              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Remove String.format(...):\n""
-            + ""@@ -5 +5\n""
-            + ""-      Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
-  }
-
-  @Test public void innerStringFormatWithStaticImport() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""import static java.lang.String.format;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
-            + ""              ~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove String.format(...):\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(format(\""%s\"", \""arg1\""));\n""
-            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
-  }
-
-  @Test public void innerStringFormatInNestedMethods() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-                + ""  }\n""
-                + ""  private String id(String s) { return s; }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-            + ""                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void innerStringFormatInNestedAssignment() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    String msg = null;\n""
-                + ""    Timber.d(msg = String.format(\""msg\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""    Timber.d(msg = String.format(\""msg\""));\n""
-            + ""                   ~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void validStringFormatInCodeBlock() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    for(;;) {\n""
-                + ""      String name = String.format(\""msg\"");\n""
-                + ""    }\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void validStringFormatInConstructorCall() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    new Exception(String.format(\""msg\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expectClean();
-  }
-
-  @Test public void validStringFormatInStaticArray() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  static String[] X = { String.format(\""%s\"", 100) };""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expectClean();
-  }
-
-
-  @Test public void throwableNotAtBeginning() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(\""%s\"", e);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
-            + ""     Timber.d(\""%s\"", e);\n""
-            + ""     ~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with e, \""%s\"":\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(\""%s\"", e);\n""
-            + ""+      Timber.d(e, \""%s\"");\n"");
-  }
-
-  @Test public void stringConcatenationBothLiterals() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""foo\"" + \""bar\"");\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(\""foo\"" + \""bar\"");\n""
-            + ""              ~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Replace with \""foobar\"":\n""
-            + ""@@ -5 +5\n""
-            + ""-      Timber.d(\""foo\"" + \""bar\"");\n""
-            + ""+      Timber.d(\""foobar\"");\n"");
-  }
-
-  @Test public void stringConcatenationLeftLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String foo = \""foo\"";\n""
-                + ""     Timber.d(foo + \""bar\"");\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(foo + \""bar\"");\n""
-            + ""              ~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""%sbar\"", foo:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(foo + \""bar\"");\n""
-            + ""+      Timber.d(\""%sbar\"", foo);\n"");
-  }
-
-  @Test public void stringConcatenationRightLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String bar = \""bar\"";\n""
-                + ""     Timber.d(\""foo\"" + bar);\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(\""foo\"" + bar);\n""
-            + ""              ~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""foo%s\"", bar:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(\""foo\"" + bar);\n""
-            + ""+      Timber.d(\""foo%s\"", bar);\n"");
-  }
-
-  @Test public void stringConcatenationBothVariables() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String foo = \""foo\"";\n""
-                + ""     String bar = \""bar\"";\n""
-                + ""     Timber.d(foo + bar);\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:7: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(foo + bar);\n""
-            + ""              ~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 6: Replace with \""%s%s\"", foo, bar:\n""
-            + ""@@ -7 +7\n""
-            + ""-      Timber.d(foo + bar);\n""
-            + ""+      Timber.d(\""%s%s\"", foo, bar);\n"");
-  }
-
-  @Test public void stringConcatenationInsideTernary() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String s = \""world!\"";\n""
-                + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-            + ""                     ~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void tooManyFormatArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-            + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tooManyArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-            + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void wrongArgTypes() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-            + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-            + ""                    ~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralOnly() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-            + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralPlusField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private final String field = \""x\"";""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-            + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralOnlyAfterApi23() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-                + ""  }\n""
-                + ""}""), //
-            manifest().minSdk(24) //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expectClean();
-  }
-
-  @Test public void tooManyFormatArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tooManyArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void wrongArgTypesInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-            + ""                               ~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void exceptionLoggingUsingExceptionMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, e.getMessage());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, e.getMessage());\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, e.getMessage());\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingVariable() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String msg = \""Hello\"";\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, msg);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void exceptionLoggingUsingNonFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private String message;\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, message);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-  
-  @Test public void exceptionLoggingUsingFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private final String message = \""foo\"";\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, message);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void exceptionLoggingUsingEmptyStringMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, \""\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, \""\"");\n""
-            + ""     ~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, \""\"");\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingNullMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, null);\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, null);\n""
-            + ""     ~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, null);\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingValidMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, \""Valid message\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void dateFormatNotDisplayingWarning() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Timber.d(\""%tc\"", new java.util.Date());\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.getIssues()) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void wrappedBooleanType() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%b\"", Boolean.valueOf(true));\n""
-                + ""  }\n""
-                + ""}"")) //
-        .issues(WrongTimberUsageDetector.getIssues()) //
-        .run() //
-        .expectClean();
-  }
-}","@@ -1,807 +0,0 @@
-package timber.lint;
-
-import com.android.tools.lint.checks.infrastructure.TestFile;
-import org.junit.Test;
-
-import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
-import static com.android.tools.lint.checks.infrastructure.TestFiles.manifest;
-import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
-
-public final class WrongTimberUsageDetectorTest {
-  private static final TestFile TIMBER_STUB = java(""""
-      + ""package timber.log;\n""
-      + ""public class Timber {\n""
-      + ""  public static void d(String s, Object... args) {}\n""
-      + ""  public static void d(Throwable t, String s, Object... args) {}\n""
-      + ""  public static Tree tag(String tag) { return new Tree(); }\n""
-      + ""  public static class Tree {\n""
-      + ""    public void d(String s, Object... args) {}\n""
-      + ""    public void d(Throwable t, String s, Object... args) {}""
-      + ""  }\n""
-      + ""  private static final Tree TREE_OF_SOULS = new Tree();\n""
-      + ""}"");
-
-  @Test public void usingAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""import android.util.Log;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Log.d(\""TAG\"", \""msg\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    Log.d(\""TAG\"", \""msg\"");\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(\""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.d(\""msg\"");\n"");
-  }
-
-  @Test public void usingAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""import android.util.Log;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), \""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
-  }
-
-  @Test public void usingFullyQualifiedAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:4: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(\""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.d(\""msg\"");\n"");
-  }
-
-  @Test public void usingFullyQualifiedAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:4: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), \""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
-  }
-
-  @Test public void innerStringFormat() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-            + ""              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Remove String.format(...):\n""
-            + ""@@ -5 +5\n""
-            + ""-      Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
-  }
-
-  @Test public void innerStringFormatWithStaticImport() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""import static java.lang.String.format;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
-            + ""              ~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove String.format(...):\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(format(\""%s\"", \""arg1\""));\n""
-            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
-  }
-
-  @Test public void innerStringFormatInNestedMethods() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-                + ""  }\n""
-                + ""  private String id(String s) { return s; }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-            + ""                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void innerStringFormatInNestedAssignment() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    String msg = null;\n""
-                + ""    Timber.d(msg = String.format(\""msg\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""    Timber.d(msg = String.format(\""msg\""));\n""
-            + ""                   ~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void validStringFormatInCodeBlock() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    for(;;) {\n""
-                + ""      String name = String.format(\""msg\"");\n""
-                + ""    }\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void validStringFormatInConstructorCall() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    new Exception(String.format(\""msg\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expectClean();
-  }
-
-  @Test public void validStringFormatInStaticArray() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  static String[] X = { String.format(\""%s\"", 100) };""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expectClean();
-  }
-
-
-  @Test public void throwableNotAtBeginning() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(\""%s\"", e);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
-            + ""     Timber.d(\""%s\"", e);\n""
-            + ""     ~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with e, \""%s\"":\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(\""%s\"", e);\n""
-            + ""+      Timber.d(e, \""%s\"");\n"");
-  }
-
-  @Test public void stringConcatenationBothLiterals() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""foo\"" + \""bar\"");\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(\""foo\"" + \""bar\"");\n""
-            + ""              ~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Replace with \""foobar\"":\n""
-            + ""@@ -5 +5\n""
-            + ""-      Timber.d(\""foo\"" + \""bar\"");\n""
-            + ""+      Timber.d(\""foobar\"");\n"");
-  }
-
-  @Test public void stringConcatenationLeftLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String foo = \""foo\"";\n""
-                + ""     Timber.d(foo + \""bar\"");\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(foo + \""bar\"");\n""
-            + ""              ~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""%sbar\"", foo:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(foo + \""bar\"");\n""
-            + ""+      Timber.d(\""%sbar\"", foo);\n"");
-  }
-
-  @Test public void stringConcatenationRightLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String bar = \""bar\"";\n""
-                + ""     Timber.d(\""foo\"" + bar);\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(\""foo\"" + bar);\n""
-            + ""              ~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""foo%s\"", bar:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(\""foo\"" + bar);\n""
-            + ""+      Timber.d(\""foo%s\"", bar);\n"");
-  }
-
-  @Test public void stringConcatenationBothVariables() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String foo = \""foo\"";\n""
-                + ""     String bar = \""bar\"";\n""
-                + ""     Timber.d(foo + bar);\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:7: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(foo + bar);\n""
-            + ""              ~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 6: Replace with \""%s%s\"", foo, bar:\n""
-            + ""@@ -7 +7\n""
-            + ""-      Timber.d(foo + bar);\n""
-            + ""+      Timber.d(\""%s%s\"", foo, bar);\n"");
-  }
-
-  @Test public void stringConcatenationInsideTernary() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String s = \""world!\"";\n""
-                + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-            + ""                     ~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void tooManyFormatArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-            + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tooManyArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-            + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void wrongArgTypes() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-            + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-            + ""                    ~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralOnly() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-            + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralPlusField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private final String field = \""x\"";""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-            + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralOnlyAfterApi23() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-                + ""  }\n""
-                + ""}""), //
-            manifest().minSdk(24) //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expectClean();
-  }
-
-  @Test public void tooManyFormatArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tooManyArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void wrongArgTypesInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-            + ""                               ~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void exceptionLoggingUsingExceptionMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, e.getMessage());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, e.getMessage());\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, e.getMessage());\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingVariable() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String msg = \""Hello\"";\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, msg);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void exceptionLoggingUsingNonFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private String message;\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, message);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-  
-  @Test public void exceptionLoggingUsingFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private final String message = \""foo\"";\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, message);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void exceptionLoggingUsingEmptyStringMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, \""\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, \""\"");\n""
-            + ""     ~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, \""\"");\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingNullMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, null);\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, null);\n""
-            + ""     ~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, null);\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingValidMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, \""Valid message\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void dateFormatNotDisplayingWarning() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Timber.d(\""%tc\"", new java.util.Date());\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.getIssues()) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void wrappedBooleanType() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%b\"", Boolean.valueOf(true));\n""
-                + ""  }\n""
-                + ""}"")) //
-        .issues(WrongTimberUsageDetector.getIssues()) //
-        .run() //
-        .expectClean();
-  }
-}",False,test
,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,229ec6a6c90139c8ea54401ce5def4911f0f16b7,c8da8c87a379b20c093dfcedd0f73271ed4cf013,Rewrite WrongTimberUsageDetectorTest to Kotlin.,"@@ -0,0 +1,829 @@
+package timber.lint
+
+import com.android.tools.lint.checks.infrastructure.TestFiles.java
+import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
+import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
+import org.junit.Test
+
+class WrongTimberUsageDetectorTest {
+  private val TIMBER_STUB = java(""""""
+      |package timber.log;
+      |public class Timber {
+      |  public static void d(String s, Object... args) {}
+      |  public static void d(Throwable t, String s, Object... args) {}
+      |  public static Tree tag(String tag) { return new Tree(); }
+      |  public static class Tree {
+      |    public void d(String s, Object... args) {}
+      |    public void d(Throwable t, String s, Object... args) {}
+      |  }
+      |  private static final Tree TREE_OF_SOULS = new Tree();
+      |}"""""".trimMargin())
+
+  @Test fun usingAndroidLogWithTwoArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |import android.util.Log;
+                |public class Example {
+                |  public void log() {
+                |    Log.d(""TAG"", ""msg"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"");
+            |    ~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"");
+            |+     Timber.tag(""TAG"").d(""msg"");
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"");
+            |+     Timber.d(""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |import android.util.Log;
+                |public class Example {
+                |  public void log() {
+                |    Log.d(""TAG"", ""msg"", new Exception());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"", new Exception());
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.d(new Exception(), ""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingFullyQualifiedAndroidLogWithTwoArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    android.util.Log.d(""TAG"", ""msg"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"");
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"");
+            |+     Timber.tag(""TAG"").d(""msg"");
+            |Fix for src/foo/Example.java line 3: Replace with Timber.d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"");
+            |+     Timber.d(""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingFullyQualifiedAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    android.util.Log.d(""TAG"", ""msg"", new Exception());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.d(new Exception(), ""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormat() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(String.format(""%s"", ""arg1""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(String.format(""%s"", ""arg1""));
+            |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Remove String.format(...):
+            |@@ -5 +5
+            |-      Timber.d(String.format(""%s"", ""arg1""));
+            |+      Timber.d(""%s"", ""arg1"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatWithStaticImport() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |import static java.lang.String.format;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(format(""%s"", ""arg1""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(format(""%s"", ""arg1""));
+            |              ~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove String.format(...):
+            |@@ -6 +6
+            |-      Timber.d(format(""%s"", ""arg1""));
+            |+      Timber.d(""%s"", ""arg1"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatInNestedMethods() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(id(String.format(""%s"", ""arg1"")));
+                |  }
+                |  private String id(String s) { return s; }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(id(String.format(""%s"", ""arg1"")));
+            |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatInNestedAssignment() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    String msg = null;
+                |    Timber.d(msg = String.format(""msg""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |    Timber.d(msg = String.format(""msg""));
+            |                   ~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun validStringFormatInCodeBlock() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    for(;;) {
+                |      String name = String.format(""msg"");
+                |    }
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun validStringFormatInConstructorCall() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    new Exception(String.format(""msg""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun validStringFormatInStaticArray() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  static String[] X = { String.format(""%s"", 100) };
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean()
+  }
+
+
+  @Test fun throwableNotAtBeginning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(""%s"", e);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
+            |     Timber.d(""%s"", e);
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with e, ""%s"":
+            |@@ -6 +6
+            |-      Timber.d(""%s"", e);
+            |+      Timber.d(e, ""%s"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationBothLiterals() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""foo"" + ""bar"");
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(""foo"" + ""bar"");
+            |              ~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with ""foobar"":
+            |@@ -5 +5
+            |-      Timber.d(""foo"" + ""bar"");
+            |+      Timber.d(""foobar"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationLeftLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String foo = ""foo"";
+                |     Timber.d(foo + ""bar"");
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(foo + ""bar"");
+            |              ~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with ""%sbar"", foo:
+            |@@ -6 +6
+            |-      Timber.d(foo + ""bar"");
+            |+      Timber.d(""%sbar"", foo);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationRightLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String bar = ""bar"";
+                |     Timber.d(""foo"" + bar);
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(""foo"" + bar);
+            |              ~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with ""foo%s"", bar:
+            |@@ -6 +6
+            |-      Timber.d(""foo"" + bar);
+            |+      Timber.d(""foo%s"", bar);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationBothVariables() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String foo = ""foo"";
+                |     String bar = ""bar"";
+                |     Timber.d(foo + bar);
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:7: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(foo + bar);
+            |              ~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 6: Replace with ""%s%s"", foo, bar:
+            |@@ -7 +7
+            |-      Timber.d(foo + bar);
+            |+      Timber.d(""%s%s"", foo, bar);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationInsideTernary() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String s = ""world!"";
+                |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
+            |                     ~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyFormatArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%s %s"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.d(""%s %s"", ""arg1"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%s"", ""arg1"", ""arg2"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.d(""%s"", ""arg1"", ""arg2"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun wrongArgTypes() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%d"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.d(""%d"", ""arg1"");
+            |                    ~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralOnly() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
+            |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+            |                ~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralPlusField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private final String field = ""x"";
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
+            |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
+            |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralOnlyAfterApi23() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+                |  }
+                |}"""""".trimMargin()), //
+            manifest().minSdk(24) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun tooManyFormatArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun wrongArgTypesInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%d"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.tag(""tag"").d(""%d"", ""arg1"");
+            |                               ~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingExceptionMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, e.getMessage());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e, e.getMessage());
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, e.getMessage());
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingVariable() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String msg = ""Hello"";
+                |     Exception e = new Exception();
+                |     Timber.d(e, msg);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingNonFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private String message;
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private final String message = ""foo"";
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingEmptyStringMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, """");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, """");
+            |     ~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, """");
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingNullMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, null);
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, null);
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, null);
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingValidMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, ""Valid message"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun dateFormatNotDisplayingWarning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    Timber.d(""%tc"", new java.util.Date());
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(*WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun wrappedBooleanType() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%b"", Boolean.valueOf(true));
+                |  }
+                |}"""""".trimMargin())) //
+        .issues(*WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean()
+  }
+}","@@ -0,0 +1,829 @@
+package timber.lint
+
+import com.android.tools.lint.checks.infrastructure.TestFiles.java
+import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
+import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
+import org.junit.Test
+
+class WrongTimberUsageDetectorTest {
+  private val TIMBER_STUB = java(""""""
+      |package timber.log;
+      |public class Timber {
+      |  public static void d(String s, Object... args) {}
+      |  public static void d(Throwable t, String s, Object... args) {}
+      |  public static Tree tag(String tag) { return new Tree(); }
+      |  public static class Tree {
+      |    public void d(String s, Object... args) {}
+      |    public void d(Throwable t, String s, Object... args) {}
+      |  }
+      |  private static final Tree TREE_OF_SOULS = new Tree();
+      |}"""""".trimMargin())
+
+  @Test fun usingAndroidLogWithTwoArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |import android.util.Log;
+                |public class Example {
+                |  public void log() {
+                |    Log.d(""TAG"", ""msg"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"");
+            |    ~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"");
+            |+     Timber.tag(""TAG"").d(""msg"");
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"");
+            |+     Timber.d(""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |import android.util.Log;
+                |public class Example {
+                |  public void log() {
+                |    Log.d(""TAG"", ""msg"", new Exception());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"", new Exception());
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.d(new Exception(), ""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingFullyQualifiedAndroidLogWithTwoArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    android.util.Log.d(""TAG"", ""msg"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"");
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"");
+            |+     Timber.tag(""TAG"").d(""msg"");
+            |Fix for src/foo/Example.java line 3: Replace with Timber.d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"");
+            |+     Timber.d(""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingFullyQualifiedAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    android.util.Log.d(""TAG"", ""msg"", new Exception());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.d(new Exception(), ""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormat() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(String.format(""%s"", ""arg1""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(String.format(""%s"", ""arg1""));
+            |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Remove String.format(...):
+            |@@ -5 +5
+            |-      Timber.d(String.format(""%s"", ""arg1""));
+            |+      Timber.d(""%s"", ""arg1"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatWithStaticImport() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |import static java.lang.String.format;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(format(""%s"", ""arg1""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(format(""%s"", ""arg1""));
+            |              ~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove String.format(...):
+            |@@ -6 +6
+            |-      Timber.d(format(""%s"", ""arg1""));
+            |+      Timber.d(""%s"", ""arg1"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatInNestedMethods() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(id(String.format(""%s"", ""arg1"")));
+                |  }
+                |  private String id(String s) { return s; }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(id(String.format(""%s"", ""arg1"")));
+            |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatInNestedAssignment() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    String msg = null;
+                |    Timber.d(msg = String.format(""msg""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |    Timber.d(msg = String.format(""msg""));
+            |                   ~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun validStringFormatInCodeBlock() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    for(;;) {
+                |      String name = String.format(""msg"");
+                |    }
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun validStringFormatInConstructorCall() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    new Exception(String.format(""msg""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun validStringFormatInStaticArray() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  static String[] X = { String.format(""%s"", 100) };
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean()
+  }
+
+
+  @Test fun throwableNotAtBeginning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(""%s"", e);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
+            |     Timber.d(""%s"", e);
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with e, ""%s"":
+            |@@ -6 +6
+            |-      Timber.d(""%s"", e);
+            |+      Timber.d(e, ""%s"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationBothLiterals() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""foo"" + ""bar"");
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(""foo"" + ""bar"");
+            |              ~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with ""foobar"":
+            |@@ -5 +5
+            |-      Timber.d(""foo"" + ""bar"");
+            |+      Timber.d(""foobar"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationLeftLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String foo = ""foo"";
+                |     Timber.d(foo + ""bar"");
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(foo + ""bar"");
+            |              ~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with ""%sbar"", foo:
+            |@@ -6 +6
+            |-      Timber.d(foo + ""bar"");
+            |+      Timber.d(""%sbar"", foo);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationRightLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String bar = ""bar"";
+                |     Timber.d(""foo"" + bar);
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(""foo"" + bar);
+            |              ~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with ""foo%s"", bar:
+            |@@ -6 +6
+            |-      Timber.d(""foo"" + bar);
+            |+      Timber.d(""foo%s"", bar);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationBothVariables() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String foo = ""foo"";
+                |     String bar = ""bar"";
+                |     Timber.d(foo + bar);
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:7: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(foo + bar);
+            |              ~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 6: Replace with ""%s%s"", foo, bar:
+            |@@ -7 +7
+            |-      Timber.d(foo + bar);
+            |+      Timber.d(""%s%s"", foo, bar);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationInsideTernary() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String s = ""world!"";
+                |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
+            |                     ~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyFormatArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%s %s"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.d(""%s %s"", ""arg1"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%s"", ""arg1"", ""arg2"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.d(""%s"", ""arg1"", ""arg2"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun wrongArgTypes() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%d"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.d(""%d"", ""arg1"");
+            |                    ~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralOnly() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
+            |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+            |                ~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralPlusField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private final String field = ""x"";
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
+            |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
+            |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralOnlyAfterApi23() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+                |  }
+                |}"""""".trimMargin()), //
+            manifest().minSdk(24) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun tooManyFormatArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun wrongArgTypesInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%d"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.tag(""tag"").d(""%d"", ""arg1"");
+            |                               ~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingExceptionMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, e.getMessage());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e, e.getMessage());
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, e.getMessage());
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingVariable() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String msg = ""Hello"";
+                |     Exception e = new Exception();
+                |     Timber.d(e, msg);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingNonFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private String message;
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private final String message = ""foo"";
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingEmptyStringMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, """");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, """");
+            |     ~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, """");
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingNullMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, null);
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, null);
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, null);
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingValidMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, ""Valid message"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun dateFormatNotDisplayingWarning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    Timber.d(""%tc"", new java.util.Date());
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(*WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun wrappedBooleanType() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%b"", Boolean.valueOf(true));
+                |  }
+                |}"""""".trimMargin())) //
+        .issues(*WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean()
+  }
+}",False,test
timber/build.gradle,timber/build.gradle,eec62dc7ed744f9f63d471523401cb8cebe566e0,42891a8468ca92d3f40d1b2f3c6df429c98f7dd6,Disable BuildConfig generation.,"@@ -29,6 +29,11 @@ android {
     textReport true
     textOutput 'stdout'
   }
+
+  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
+  libraryVariants.all {
+    it.generateBuildConfig.enabled = false
+  }
 }
 
 dependencies {","@@ -29,6 +29,11 @@ android {
     textReport true
     textOutput 'stdout'
   }
+
+  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
+  libraryVariants.all {
+    it.generateBuildConfig.enabled = false
+  }
 }
 
 dependencies {",False,other
CHANGELOG.md,CHANGELOG.md,a69a447fa86cf3b6d8e2a8de9d15abe7f83e6722,4de2e6a5f2c0c0bc4244ac50d78c2dd252abec64,Prepare version 4.6.1.,"@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 4.6.1 *(2018-02-12)*
+----------------------------
+
+ * Fix: Lint checks now handle more edge cases around exception and message source.
+ * Fix: Useless `BuildConfig` class is no longer included.
+
+
 Version 4.6.0 *(2017-10-30)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 4.6.1 *(2018-02-12)*
+----------------------------
+
+ * Fix: Lint checks now handle more edge cases around exception and message source.
+ * Fix: Useless `BuildConfig` class is no longer included.
+
+
 Version 4.6.0 *(2017-10-30)*
 ----------------------------",False,other
README.md,README.md,a69a447fa86cf3b6d8e2a8de9d15abe7f83e6722,4de2e6a5f2c0c0bc4244ac50d78c2dd252abec64,Prepare version 4.6.1.,"@@ -83,7 +83,7 @@ Download
 --------
 
 ```groovy
-implementation 'com.jakewharton.timber:timber:4.6.0'
+implementation 'com.jakewharton.timber:timber:4.6.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -83,7 +83,7 @@ Download
 --------
 
 ```groovy
-implementation 'com.jakewharton.timber:timber:4.6.0'
+implementation 'com.jakewharton.timber:timber:4.6.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,a69a447fa86cf3b6d8e2a8de9d15abe7f83e6722,4de2e6a5f2c0c0bc4244ac50d78c2dd252abec64,Prepare version 4.6.1.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.6.1-SNAPSHOT
+VERSION_NAME=4.6.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.6.1-SNAPSHOT
+VERSION_NAME=4.6.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,39046850c92042cd3dab98a9cd8f5c462da43198,a69a447fa86cf3b6d8e2a8de9d15abe7f83e6722,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.6.1
+VERSION_NAME=4.6.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.6.1
+VERSION_NAME=4.6.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,e3fec4d2e38ac7a16ff432f6be1019b97646ee6b,39046850c92042cd3dab98a9cd8f5c462da43198,Gradle 4.5.1,"@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip","@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip",False,other
build.gradle,build.gradle,fb6c58088e01a0676a016f230ef755fd8f101807,e3fec4d2e38ac7a16ff432f6be1019b97646ee6b,Bump dependencies,"@@ -5,8 +5,8 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 27,
 
-      'androidPlugin': '3.0.0',
-      'androidTools': '26.0.0',
+      'androidPlugin': '3.1.0-beta2',
+      'androidTools': '26.1.0-beta2',
 
       'butterknife': '8.8.1',
   ]
@@ -26,8 +26,8 @@ buildscript {
       annotations: 'org.jetbrains:annotations:15.0',
 
       junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.36',
-      robolectric: 'org.robolectric:robolectric:3.5',
+      truth: 'com.google.truth:truth:0.39',
+      robolectric: 'org.robolectric:robolectric:3.7',
   ]
 
   repositories {","@@ -5,8 +5,8 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 27,
 
-      'androidPlugin': '3.0.0',
-      'androidTools': '26.0.0',
+      'androidPlugin': '3.1.0-beta2',
+      'androidTools': '26.1.0-beta2',
 
       'butterknife': '8.8.1',
   ]
@@ -26,8 +26,8 @@ buildscript {
       annotations: 'org.jetbrains:annotations:15.0',
 
       junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.36',
-      robolectric: 'org.robolectric:robolectric:3.5',
+      truth: 'com.google.truth:truth:0.39',
+      robolectric: 'org.robolectric:robolectric:3.7',
   ]
 
   repositories {",False,other
timber-lint/src/main/java/timber/lint/IssueRegistry.java,timber-lint/src/main/java/timber/lint/IssueRegistry.java,56cee66957326d3bf55c3ea612db16408a552947,fb6c58088e01a0676a016f230ef755fd8f101807,Update Lint checks to new APIs,"@@ -1,7 +1,7 @@
 package timber.lint;
 
+import com.android.tools.lint.detector.api.ApiKt;
 import com.android.tools.lint.detector.api.Issue;
-
 import java.util.Arrays;
 import java.util.List;
 
@@ -9,4 +9,8 @@ public final class IssueRegistry extends com.android.tools.lint.client.api.Issue
   @Override public List<Issue> getIssues() {
     return Arrays.asList(WrongTimberUsageDetector.getIssues());
   }
+
+  @Override public int getApi() {
+    return ApiKt.CURRENT_API;
+  }
 }","@@ -1,7 +1,7 @@
 package timber.lint;
 
+import com.android.tools.lint.detector.api.ApiKt;
 import com.android.tools.lint.detector.api.Issue;
-
 import java.util.Arrays;
 import java.util.List;
 
@@ -9,4 +9,8 @@ public final class IssueRegistry extends com.android.tools.lint.client.api.Issue
   @Override public List<Issue> getIssues() {
     return Arrays.asList(WrongTimberUsageDetector.getIssues());
   }
+
+  @Override public int getApi() {
+    return ApiKt.CURRENT_API;
+  }
 }",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,56cee66957326d3bf55c3ea612db16408a552947,fb6c58088e01a0676a016f230ef755fd8f101807,Update Lint checks to new APIs,"@@ -38,17 +38,17 @@ import org.jetbrains.uast.USimpleNameReferenceExpression;
 import org.jetbrains.uast.UastBinaryOperator;
 import org.jetbrains.uast.util.UastExpressionUtils;
 
-import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_CHAR;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_DOUBLE;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_FLOAT;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_INT;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_LONG;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_NULL;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_BOOLEAN;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_BYTE;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_CHAR;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_DOUBLE;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_FLOAT;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_INT;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_LONG;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_NULL;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_OBJECT;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_SHORT;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_STRING;
 import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS_ASSIGN;
@@ -93,7 +93,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkNestedStringFormat(JavaContext context, UCallExpression call) {
+  private void checkNestedStringFormat(JavaContext context, UCallExpression call) {
     UElement current = call;
     while (true) {
       current = LintUtils.skipParentheses(current.getUastParent());
@@ -116,7 +116,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkTagLength(JavaContext context, UCallExpression call) {
+  private void checkTagLength(JavaContext context, UCallExpression call) {
     List<UExpression> arguments = call.getValueArguments();
     UExpression argument = arguments.get(0);
     String tag = evaluateString(context, argument, true);
@@ -485,7 +485,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return max;
   }
 
-  private static void checkMethodArguments(JavaContext context, UCallExpression call) {
+  private void checkMethodArguments(JavaContext context, UCallExpression call) {
     List<UExpression> arguments = call.getValueArguments();
     int numArguments = arguments.size();
     for (int i = 0; i < numArguments; i++) {
@@ -501,7 +501,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkExceptionLogging(JavaContext context, UCallExpression call) {
+  private void checkExceptionLogging(JavaContext context, UCallExpression call) {
     List<UExpression> arguments = call.getValueArguments();
 
     if (arguments.size() > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
@@ -548,7 +548,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         && evaluator.isMemberInSubClassOf(method, className, false);
   }
 
-  private static boolean checkElement(JavaContext context, UCallExpression call, UElement element) {
+  private boolean checkElement(JavaContext context, UCallExpression call, UElement element) {
     if (element instanceof UBinaryExpression) {
       UBinaryExpression binaryExpression = (UBinaryExpression) element;
       UastBinaryOperator operator = binaryExpression.getOperator();
@@ -567,7 +567,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return false;
   }
 
-  private static boolean checkConditionalUsage(JavaContext context, UCallExpression call,
+  private boolean checkConditionalUsage(JavaContext context, UCallExpression call,
       UElement element) {
     UElement thenElement;
     UElement elseElement;
@@ -584,7 +584,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return checkElement(context, call, elseElement);
   }
 
-  private static LintFix quickFixIssueLog(UCallExpression logCall) {
+  private LintFix quickFixIssueLog(UCallExpression logCall) {
     List<UExpression> arguments = logCall.getValueArguments();
     String methodName = logCall.getMethodName();
     UExpression tag = arguments.get(0);
@@ -619,7 +619,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return fixGrouper.build();
   }
 
-  private static LintFix quickFixIssueFormat(UCallExpression stringFormatCall) {
+  private LintFix quickFixIssueFormat(UCallExpression stringFormatCall) {
     // Handles:
     // 1) String.format(..)
     // 2) format(...) [static import]
@@ -634,7 +634,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         .add(fix().replace().text(callSourceString + ""("").with("""").build()).build();
   }
 
-  private static LintFix quickFixIssueThrowable(UCallExpression call, List<UExpression> arguments,
+  private LintFix quickFixIssueThrowable(UCallExpression call, List<UExpression> arguments,
       UExpression throwable) {
     String rearrangedArgs = throwable.asSourceString();
     for (UExpression arg : arguments) {
@@ -646,7 +646,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         .pattern(""\\."" + call.getMethodName() + ""\\((.*)\\)"").with(rearrangedArgs).build();
   }
 
-  private static LintFix quickFixIssueBinary(UBinaryExpression binaryExpression) {
+  private LintFix quickFixIssueBinary(UBinaryExpression binaryExpression) {
     UExpression leftOperand = binaryExpression.getLeftOperand();
     UExpression rightOperand = binaryExpression.getRightOperand();
     boolean isLeftLiteral = isStringLiteral(leftOperand);
@@ -671,7 +671,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return fix().replace().text(binaryExpression.asSourceString()).with(args).build();
   }
 
-  private static LintFix quickFixIssueTagLength(UExpression argument, String tag) {
+  private LintFix quickFixIssueTagLength(UExpression argument, String tag) {
     int numCharsToTrim = tag.length() - 23;
     return fix().replace()
         .name(""Strip last "" + (numCharsToTrim == 1 ? ""char"" : numCharsToTrim + "" chars""))
@@ -680,7 +680,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         .build();
   }
 
-  private static LintFix quickFixIssueExceptionLogging(UExpression arg2) {
+  private LintFix quickFixIssueExceptionLogging(UExpression arg2) {
     return fix().replace()
         .name(""Remove redundant argument"")
         .text("", "" + arg2.asSourceString())","@@ -38,17 +38,17 @@ import org.jetbrains.uast.USimpleNameReferenceExpression;
 import org.jetbrains.uast.UastBinaryOperator;
 import org.jetbrains.uast.util.UastExpressionUtils;
 
-import static com.android.tools.lint.client.api.JavaParser.TYPE_BOOLEAN;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_BYTE;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_CHAR;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_DOUBLE;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_FLOAT;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_INT;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_LONG;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_NULL;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_OBJECT;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_SHORT;
-import static com.android.tools.lint.client.api.JavaParser.TYPE_STRING;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_BOOLEAN;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_BYTE;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_CHAR;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_DOUBLE;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_FLOAT;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_INT;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_LONG;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_NULL;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_OBJECT;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_SHORT;
+import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_STRING;
 import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS_ASSIGN;
@@ -93,7 +93,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkNestedStringFormat(JavaContext context, UCallExpression call) {
+  private void checkNestedStringFormat(JavaContext context, UCallExpression call) {
     UElement current = call;
     while (true) {
       current = LintUtils.skipParentheses(current.getUastParent());
@@ -116,7 +116,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkTagLength(JavaContext context, UCallExpression call) {
+  private void checkTagLength(JavaContext context, UCallExpression call) {
     List<UExpression> arguments = call.getValueArguments();
     UExpression argument = arguments.get(0);
     String tag = evaluateString(context, argument, true);
@@ -485,7 +485,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return max;
   }
 
-  private static void checkMethodArguments(JavaContext context, UCallExpression call) {
+  private void checkMethodArguments(JavaContext context, UCallExpression call) {
     List<UExpression> arguments = call.getValueArguments();
     int numArguments = arguments.size();
     for (int i = 0; i < numArguments; i++) {
@@ -501,7 +501,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
   }
 
-  private static void checkExceptionLogging(JavaContext context, UCallExpression call) {
+  private void checkExceptionLogging(JavaContext context, UCallExpression call) {
     List<UExpression> arguments = call.getValueArguments();
 
     if (arguments.size() > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
@@ -548,7 +548,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         && evaluator.isMemberInSubClassOf(method, className, false);
   }
 
-  private static boolean checkElement(JavaContext context, UCallExpression call, UElement element) {
+  private boolean checkElement(JavaContext context, UCallExpression call, UElement element) {
     if (element instanceof UBinaryExpression) {
       UBinaryExpression binaryExpression = (UBinaryExpression) element;
       UastBinaryOperator operator = binaryExpression.getOperator();
@@ -567,7 +567,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return false;
   }
 
-  private static boolean checkConditionalUsage(JavaContext context, UCallExpression call,
+  private boolean checkConditionalUsage(JavaContext context, UCallExpression call,
       UElement element) {
     UElement thenElement;
     UElement elseElement;
@@ -584,7 +584,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return checkElement(context, call, elseElement);
   }
 
-  private static LintFix quickFixIssueLog(UCallExpression logCall) {
+  private LintFix quickFixIssueLog(UCallExpression logCall) {
     List<UExpression> arguments = logCall.getValueArguments();
     String methodName = logCall.getMethodName();
     UExpression tag = arguments.get(0);
@@ -619,7 +619,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return fixGrouper.build();
   }
 
-  private static LintFix quickFixIssueFormat(UCallExpression stringFormatCall) {
+  private LintFix quickFixIssueFormat(UCallExpression stringFormatCall) {
     // Handles:
     // 1) String.format(..)
     // 2) format(...) [static import]
@@ -634,7 +634,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         .add(fix().replace().text(callSourceString + ""("").with("""").build()).build();
   }
 
-  private static LintFix quickFixIssueThrowable(UCallExpression call, List<UExpression> arguments,
+  private LintFix quickFixIssueThrowable(UCallExpression call, List<UExpression> arguments,
       UExpression throwable) {
     String rearrangedArgs = throwable.asSourceString();
     for (UExpression arg : arguments) {
@@ -646,7 +646,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         .pattern(""\\."" + call.getMethodName() + ""\\((.*)\\)"").with(rearrangedArgs).build();
   }
 
-  private static LintFix quickFixIssueBinary(UBinaryExpression binaryExpression) {
+  private LintFix quickFixIssueBinary(UBinaryExpression binaryExpression) {
     UExpression leftOperand = binaryExpression.getLeftOperand();
     UExpression rightOperand = binaryExpression.getRightOperand();
     boolean isLeftLiteral = isStringLiteral(leftOperand);
@@ -671,7 +671,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return fix().replace().text(binaryExpression.asSourceString()).with(args).build();
   }
 
-  private static LintFix quickFixIssueTagLength(UExpression argument, String tag) {
+  private LintFix quickFixIssueTagLength(UExpression argument, String tag) {
     int numCharsToTrim = tag.length() - 23;
     return fix().replace()
         .name(""Strip last "" + (numCharsToTrim == 1 ? ""char"" : numCharsToTrim + "" chars""))
@@ -680,7 +680,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         .build();
   }
 
-  private static LintFix quickFixIssueExceptionLogging(UExpression arg2) {
+  private LintFix quickFixIssueExceptionLogging(UExpression arg2) {
     return fix().replace()
         .name(""Remove redundant argument"")
         .text("", "" + arg2.asSourceString())",False,source
timber-lint/build.gradle,timber-lint/build.gradle,2b9ef6331d0000f415ec97c7676f337bdeb5a5ff,56cee66957326d3bf55c3ea612db16408a552947,Rename IssueRegistry,"@@ -12,6 +12,6 @@ dependencies {
 
 jar {
   manifest {
-    attributes('Lint-Registry-v2': 'timber.lint.IssueRegistry')
+    attributes('Lint-Registry-v2': 'timber.lint.TimberIssueRegistry')
   }
 }","@@ -12,6 +12,6 @@ dependencies {
 
 jar {
   manifest {
-    attributes('Lint-Registry-v2': 'timber.lint.IssueRegistry')
+    attributes('Lint-Registry-v2': 'timber.lint.TimberIssueRegistry')
   }
 }",False,other
timber-lint/src/main/java/timber/lint/IssueRegistry.java,timber-lint/src/main/java/timber/lint/TimberIssueRegistry.java,2b9ef6331d0000f415ec97c7676f337bdeb5a5ff,56cee66957326d3bf55c3ea612db16408a552947,Rename IssueRegistry,"@@ -1,11 +1,12 @@
 package timber.lint;
 
+import com.android.tools.lint.client.api.IssueRegistry;
 import com.android.tools.lint.detector.api.ApiKt;
 import com.android.tools.lint.detector.api.Issue;
 import java.util.Arrays;
 import java.util.List;
 
-public final class IssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
+public final class TimberIssueRegistry extends IssueRegistry {
   @Override public List<Issue> getIssues() {
     return Arrays.asList(WrongTimberUsageDetector.getIssues());
   }","@@ -0,0 +1,17 @@
+package timber.lint;
+
+import com.android.tools.lint.client.api.IssueRegistry;
+import com.android.tools.lint.detector.api.ApiKt;
+import com.android.tools.lint.detector.api.Issue;
+import java.util.Arrays;
+import java.util.List;
+
+public final class TimberIssueRegistry extends IssueRegistry {
+  @Override public List<Issue> getIssues() {
+    return Arrays.asList(WrongTimberUsageDetector.getIssues());
+  }
+
+  @Override public int getApi() {
+    return ApiKt.CURRENT_API;
+  }
+}",True,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,f2fae33560d2004249e5c41da019dc0f8417ddbd,229ec6a6c90139c8ea54401ce5def4911f0f16b7,Remove new line comments.,"@@ -20,8 +20,8 @@ class WrongTimberUsageDetectorTest {
       |}"""""".trimMargin())
 
   @Test fun usingAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |import android.util.Log;
@@ -29,9 +29,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -51,8 +51,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |import android.util.Log;
@@ -60,9 +60,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"", new Exception());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -82,17 +82,17 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingFullyQualifiedAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -112,17 +112,17 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingFullyQualifiedAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"", new Exception());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -142,8 +142,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormat() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -151,7 +151,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(String.format(""%s"", ""arg1""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -169,8 +169,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatWithStaticImport() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -179,7 +179,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(format(""%s"", ""arg1""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -197,8 +197,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatInNestedMethods() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -207,7 +207,7 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.d(id(String.format(""%s"", ""arg1"")));
                 |  }
                 |  private String id(String s) { return s; }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -219,8 +219,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatInNestedAssignment() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -229,7 +229,7 @@ class WrongTimberUsageDetectorTest {
                 |    String msg = null;
                 |    Timber.d(msg = String.format(""msg""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -241,8 +241,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun validStringFormatInCodeBlock() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -252,23 +252,23 @@ class WrongTimberUsageDetectorTest {
                 |      String name = String.format(""msg"");
                 |    }
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
         .expectClean()
   }
 
   @Test fun validStringFormatInConstructorCall() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    new Exception(String.format(""msg""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -276,13 +276,13 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun validStringFormatInStaticArray() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |public class Example {
                 |  static String[] X = { String.format(""%s"", 100) };
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -291,8 +291,8 @@ class WrongTimberUsageDetectorTest {
 
 
   @Test fun throwableNotAtBeginning() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -301,8 +301,8 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(""%s"", e);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
         .run()
         .expect(""""""
@@ -319,8 +319,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationBothLiterals() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -345,8 +345,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationLeftLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -372,8 +372,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationRightLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -399,8 +399,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationBothVariables() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -427,8 +427,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationInsideTernary() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -437,8 +437,8 @@ class WrongTimberUsageDetectorTest {
                 |     String s = ""world!"";
                 |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -449,8 +449,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyFormatArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -458,8 +458,8 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s %s"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -470,8 +470,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -479,7 +479,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s"", ""arg1"", ""arg2"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -491,8 +491,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun wrongArgTypes() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -500,7 +500,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%d"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
@@ -512,8 +512,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralOnly() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -521,7 +521,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -533,8 +533,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralPlusField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -543,7 +543,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -555,8 +555,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralOnlyAfterApi23() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -564,8 +564,8 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
-                |}"""""".trimMargin()), //
-            manifest().minSdk(24) //
+                |}"""""".trimMargin()),
+            manifest().minSdk(24)
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -573,8 +573,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyFormatArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -582,7 +582,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -594,8 +594,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -603,7 +603,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -615,8 +615,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun wrongArgTypesInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -624,7 +624,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%d"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
@@ -636,8 +636,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingExceptionMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -646,7 +646,7 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, e.getMessage());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
@@ -664,8 +664,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingVariable() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -675,16 +675,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, msg);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingNonFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -694,16 +694,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -713,16 +713,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingEmptyStringMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -731,8 +731,8 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, """");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -749,8 +749,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingNullMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -759,7 +759,7 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, null);
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
@@ -777,8 +777,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingValidMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -787,16 +787,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, ""Valid message"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun dateFormatNotDisplayingWarning() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -804,16 +804,16 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Timber.d(""%tc"", new java.util.Date());
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(*WrongTimberUsageDetector.getIssues()) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
         .expectClean()
   }
 
   @Test fun wrappedBooleanType() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -821,9 +821,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%b"", Boolean.valueOf(true));
                 |  }
-                |}"""""".trimMargin())) //
-        .issues(*WrongTimberUsageDetector.getIssues()) //
-        .run() //
+                |}"""""".trimMargin()))
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
         .expectClean()
   }
 }","@@ -20,8 +20,8 @@ class WrongTimberUsageDetectorTest {
       |}"""""".trimMargin())
 
   @Test fun usingAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |import android.util.Log;
@@ -29,9 +29,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -51,8 +51,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |import android.util.Log;
@@ -60,9 +60,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"", new Exception());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -82,17 +82,17 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingFullyQualifiedAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -112,17 +112,17 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingFullyQualifiedAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"", new Exception());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -142,8 +142,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormat() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -151,7 +151,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(String.format(""%s"", ""arg1""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -169,8 +169,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatWithStaticImport() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -179,7 +179,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(format(""%s"", ""arg1""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -197,8 +197,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatInNestedMethods() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -207,7 +207,7 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.d(id(String.format(""%s"", ""arg1"")));
                 |  }
                 |  private String id(String s) { return s; }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -219,8 +219,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatInNestedAssignment() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -229,7 +229,7 @@ class WrongTimberUsageDetectorTest {
                 |    String msg = null;
                 |    Timber.d(msg = String.format(""msg""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -241,8 +241,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun validStringFormatInCodeBlock() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -252,23 +252,23 @@ class WrongTimberUsageDetectorTest {
                 |      String name = String.format(""msg"");
                 |    }
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
         .expectClean()
   }
 
   @Test fun validStringFormatInConstructorCall() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    new Exception(String.format(""msg""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -276,13 +276,13 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun validStringFormatInStaticArray() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |public class Example {
                 |  static String[] X = { String.format(""%s"", 100) };
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -291,8 +291,8 @@ class WrongTimberUsageDetectorTest {
 
 
   @Test fun throwableNotAtBeginning() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -301,8 +301,8 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(""%s"", e);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
         .run()
         .expect(""""""
@@ -319,8 +319,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationBothLiterals() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -345,8 +345,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationLeftLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -372,8 +372,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationRightLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -399,8 +399,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationBothVariables() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -427,8 +427,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationInsideTernary() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -437,8 +437,8 @@ class WrongTimberUsageDetectorTest {
                 |     String s = ""world!"";
                 |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -449,8 +449,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyFormatArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -458,8 +458,8 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s %s"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -470,8 +470,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -479,7 +479,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s"", ""arg1"", ""arg2"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -491,8 +491,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun wrongArgTypes() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -500,7 +500,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%d"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
@@ -512,8 +512,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralOnly() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -521,7 +521,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -533,8 +533,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralPlusField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -543,7 +543,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -555,8 +555,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralOnlyAfterApi23() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -564,8 +564,8 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
-                |}"""""".trimMargin()), //
-            manifest().minSdk(24) //
+                |}"""""".trimMargin()),
+            manifest().minSdk(24)
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -573,8 +573,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyFormatArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -582,7 +582,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -594,8 +594,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -603,7 +603,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -615,8 +615,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun wrongArgTypesInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -624,7 +624,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%d"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
@@ -636,8 +636,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingExceptionMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -646,7 +646,7 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, e.getMessage());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
@@ -664,8 +664,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingVariable() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -675,16 +675,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, msg);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingNonFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -694,16 +694,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -713,16 +713,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingEmptyStringMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -731,8 +731,8 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, """");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -749,8 +749,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingNullMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -759,7 +759,7 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, null);
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
@@ -777,8 +777,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingValidMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -787,16 +787,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, ""Valid message"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun dateFormatNotDisplayingWarning() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -804,16 +804,16 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Timber.d(""%tc"", new java.util.Date());
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(*WrongTimberUsageDetector.getIssues()) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
         .expectClean()
   }
 
   @Test fun wrappedBooleanType() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -821,9 +821,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%b"", Boolean.valueOf(true));
                 |  }
-                |}"""""".trimMargin())) //
-        .issues(*WrongTimberUsageDetector.getIssues()) //
-        .run() //
+                |}"""""".trimMargin()))
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
         .expectClean()
   }
 }",False,test
timber/src/main/java/timber/log/Timber.java,timber/src/main/java/timber/log/Timber.java,16a769833958679461044d1713f7f2bf6e162735,1dd4e35786299e37746f5e955101b2a121b868db,Code optimizations,"@@ -136,9 +136,8 @@ public final class Timber {
   @NotNull
   public static Tree tag(String tag) {
     Tree[] forest = forestAsArray;
-    //noinspection ForLoopReplaceableByForEach
-    for (int i = 0, count = forest.length; i < count; i++) {
-      forest[i].explicitTag.set(tag);
+    for (Tree tree : forest){
+    	tree.explicitTag.set(tag);
     }
     return TREE_OF_SOULS;
   }
@@ -219,169 +218,148 @@ public final class Timber {
   private static final Tree TREE_OF_SOULS = new Tree() {
     @Override public void v(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].v(message, args);
+      for (Tree tree : forest){
+    	  tree.v(message, args);
       }
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].v(t, message, args);
+      for (Tree tree : forest){
+    	  tree.v(t, message, args);
       }
     }
 
     @Override public void v(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].v(t);
+      for (Tree tree : forest){
+    	  tree.v(t);
       }
     }
 
     @Override public void d(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].d(message, args);
+      for (Tree tree : forest){
+    	  tree.d(message, args);
       }
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].d(t, message, args);
+      for (Tree tree : forest){
+    	  tree.d(t, message, args);
       }
     }
 
     @Override public void d(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].d(t);
+      for (Tree tree : forest){
+    	  tree.d(t);
       }
     }
 
     @Override public void i(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].i(message, args);
+      for (Tree tree : forest){
+    	  tree.i(message, args);
       }
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].i(t, message, args);
+      for (Tree tree : forest){
+    	  tree.i(t, message, args);
       }
     }
 
     @Override public void i(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].i(t);
+      for (Tree tree : forest){
+    	  tree.i(t);
       }
     }
 
     @Override public void w(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].w(message, args);
+      for (Tree tree : forest){
+    	  tree.w(message, args);
       }
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].w(t, message, args);
+      for (Tree tree : forest){
+    	  tree.w(t, message, args);
       }
     }
 
     @Override public void w(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].w(t);
+      for (Tree tree : forest){
+    	  tree.w(t);
       }
     }
 
     @Override public void e(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].e(message, args);
+      for (Tree tree : forest){
+    	  tree.e(message, args);
       }
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].e(t, message, args);
+      for (Tree tree : forest){
+    	  tree.e(t, message, args);
       }
     }
 
     @Override public void e(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].e(t);
+      for (Tree tree : forest){
+    	  tree.e(t);
       }
     }
 
     @Override public void wtf(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].wtf(message, args);
+      for (Tree tree : forest){
+    	  tree.wtf(message, args);
       }
     }
 
     @Override public void wtf(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].wtf(t, message, args);
+      for (Tree tree : forest){
+    	  tree.wtf(t, message, args);
       }
     }
 
     @Override public void wtf(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].wtf(t);
+      for (Tree tree : forest){
+    	  tree.wtf(t);
       }
     }
 
     @Override public void log(int priority, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].log(priority, message, args);
+      for (Tree tree : forest){
+    	  tree.log(priority, message, args);
       }
     }
 
     @Override public void log(int priority, Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].log(priority, t, message, args);
+      for (Tree tree : forest){
+    	  tree.log(priority, t, message, args);
       }
     }
 
     @Override public void log(int priority, Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].log(priority, t);
+      for (Tree tree : forest){
+    	  tree.log(priority, t);
       }
     }","@@ -136,9 +136,8 @@ public final class Timber {
   @NotNull
   public static Tree tag(String tag) {
     Tree[] forest = forestAsArray;
-    //noinspection ForLoopReplaceableByForEach
-    for (int i = 0, count = forest.length; i < count; i++) {
-      forest[i].explicitTag.set(tag);
+    for (Tree tree : forest){
+    	tree.explicitTag.set(tag);
     }
     return TREE_OF_SOULS;
   }
@@ -219,169 +218,148 @@ public final class Timber {
   private static final Tree TREE_OF_SOULS = new Tree() {
     @Override public void v(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].v(message, args);
+      for (Tree tree : forest){
+    	  tree.v(message, args);
       }
     }
 
     @Override public void v(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].v(t, message, args);
+      for (Tree tree : forest){
+    	  tree.v(t, message, args);
       }
     }
 
     @Override public void v(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].v(t);
+      for (Tree tree : forest){
+    	  tree.v(t);
       }
     }
 
     @Override public void d(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].d(message, args);
+      for (Tree tree : forest){
+    	  tree.d(message, args);
       }
     }
 
     @Override public void d(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].d(t, message, args);
+      for (Tree tree : forest){
+    	  tree.d(t, message, args);
       }
     }
 
     @Override public void d(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].d(t);
+      for (Tree tree : forest){
+    	  tree.d(t);
       }
     }
 
     @Override public void i(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].i(message, args);
+      for (Tree tree : forest){
+    	  tree.i(message, args);
       }
     }
 
     @Override public void i(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].i(t, message, args);
+      for (Tree tree : forest){
+    	  tree.i(t, message, args);
       }
     }
 
     @Override public void i(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].i(t);
+      for (Tree tree : forest){
+    	  tree.i(t);
       }
     }
 
     @Override public void w(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].w(message, args);
+      for (Tree tree : forest){
+    	  tree.w(message, args);
       }
     }
 
     @Override public void w(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].w(t, message, args);
+      for (Tree tree : forest){
+    	  tree.w(t, message, args);
       }
     }
 
     @Override public void w(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].w(t);
+      for (Tree tree : forest){
+    	  tree.w(t);
       }
     }
 
     @Override public void e(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].e(message, args);
+      for (Tree tree : forest){
+    	  tree.e(message, args);
       }
     }
 
     @Override public void e(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].e(t, message, args);
+      for (Tree tree : forest){
+    	  tree.e(t, message, args);
       }
     }
 
     @Override public void e(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].e(t);
+      for (Tree tree : forest){
+    	  tree.e(t);
       }
     }
 
     @Override public void wtf(String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].wtf(message, args);
+      for (Tree tree : forest){
+    	  tree.wtf(message, args);
       }
     }
 
     @Override public void wtf(Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].wtf(t, message, args);
+      for (Tree tree : forest){
+    	  tree.wtf(t, message, args);
       }
     }
 
     @Override public void wtf(Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].wtf(t);
+      for (Tree tree : forest){
+    	  tree.wtf(t);
       }
     }
 
     @Override public void log(int priority, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].log(priority, message, args);
+      for (Tree tree : forest){
+    	  tree.log(priority, message, args);
       }
     }
 
     @Override public void log(int priority, Throwable t, String message, Object... args) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].log(priority, t, message, args);
+      for (Tree tree : forest){
+    	  tree.log(priority, t, message, args);
       }
     }
 
     @Override public void log(int priority, Throwable t) {
       Tree[] forest = forestAsArray;
-      //noinspection ForLoopReplaceableByForEach
-      for (int i = 0, count = forest.length; i < count; i++) {
-        forest[i].log(priority, t);
+      for (Tree tree : forest){
+    	  tree.log(priority, t);
       }
     }",False,source
build.gradle,build.gradle,8587ff5e73631b5463fea5ace8dee7b142cbc08c,2e241a3f3642a2db957bd40a61125f5ecd050da2,"Bump dependencies

* AGP 3.1-beta4
* Gradle 4.6
* Robolectric 3.7.1","@@ -7,8 +7,8 @@ buildscript {
 
       'kotlin': '1.2.21',
 
-      'androidPlugin': '3.1.0-beta2',
-      'androidTools': '26.1.0-beta2',
+      'androidPlugin': '3.1.0-beta4',
+      'androidTools': '26.1.0-beta4',
 
       'butterknife': '8.8.1',
   ]
@@ -30,7 +30,7 @@ buildscript {
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.39',
-      robolectric: 'org.robolectric:robolectric:3.7',
+      robolectric: 'org.robolectric:robolectric:3.7.1',
   ]
 
   repositories {","@@ -7,8 +7,8 @@ buildscript {
 
       'kotlin': '1.2.21',
 
-      'androidPlugin': '3.1.0-beta2',
-      'androidTools': '26.1.0-beta2',
+      'androidPlugin': '3.1.0-beta4',
+      'androidTools': '26.1.0-beta4',
 
       'butterknife': '8.8.1',
   ]
@@ -30,7 +30,7 @@ buildscript {
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.39',
-      robolectric: 'org.robolectric:robolectric:3.7',
+      robolectric: 'org.robolectric:robolectric:3.7.1',
   ]
 
   repositories {",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,8587ff5e73631b5463fea5ace8dee7b142cbc08c,2e241a3f3642a2db957bd40a61125f5ecd050da2,"Bump dependencies

* AGP 3.1-beta4
* Gradle 4.6
* Robolectric 3.7.1","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip",False,other
build.gradle,build.gradle,4b2cd036cb480cb353fef9b3afcbd252d9d3598a,2e241a3f3642a2db957bd40a61125f5ecd050da2,Better test logging output,"@@ -45,10 +45,20 @@ buildscript {
   }
 }
 
-allprojects {
+subprojects {
   repositories {
     mavenCentral()
     jcenter()
     google()
   }
+
+  tasks.withType(Test) {
+    testLogging {
+      events ""failed""
+      exceptionFormat ""full""
+      showExceptions true
+      showStackTraces true
+      showCauses true
+    }
+  }
 }","@@ -45,10 +45,20 @@ buildscript {
   }
 }
 
-allprojects {
+subprojects {
   repositories {
     mavenCentral()
     jcenter()
     google()
   }
+
+  tasks.withType(Test) {
+    testLogging {
+      events ""failed""
+      exceptionFormat ""full""
+      showExceptions true
+      showStackTraces true
+      showCauses true
+    }
+  }
 }",False,other
timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,6b1ab3ef8961ab0801b0e122a59b66fb23ed6f85,2e241a3f3642a2db957bd40a61125f5ecd050da2,Update LintActivity,"@@ -14,16 +14,22 @@ public class LintActivity extends Activity {
   /**
    * Below are some examples of how NOT to use Timber.
    *
-   * Currently, locally-packaged lint checks don't work in Studio. As a workaround,
-   * you will need to run ""./gradlew :timber-sample:lint"" first, before Lint IDE
-   * highlighting will work.
-   *
-   * A future release will eliminate the 'command-line first' workaround.
+   * To see how a particular lint issue behaves, comment/remove its corresponding id from the set
+   * of SuppressLint ids below.
    */
+  @SuppressLint({
+      ""LogNotTimber"", //
+      ""StringFormatInTimber"", //
+      ""ThrowableNotAtBeginning"", //
+      ""BinaryOperationInTimber"", //
+      ""TimberArgCount"", //
+      ""TimberArgTypes"", //
+      ""TimberTagLength"", //
+      ""TimberExceptionLogging"" //
+  }) //
   @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
 
-    /*
     // LogNotTimber
     Log.d(""TAG"", ""msg"");
     Log.d(""TAG"", ""msg"", new Exception());
@@ -63,7 +69,6 @@ public class LintActivity extends Activity {
     Timber.d(new Exception(), new Exception().getMessage());
     Timber.d(new Exception(), """");
     Timber.d(new Exception(), null);
-    */
   }
 
   private String getString() {","@@ -14,16 +14,22 @@ public class LintActivity extends Activity {
   /**
    * Below are some examples of how NOT to use Timber.
    *
-   * Currently, locally-packaged lint checks don't work in Studio. As a workaround,
-   * you will need to run ""./gradlew :timber-sample:lint"" first, before Lint IDE
-   * highlighting will work.
-   *
-   * A future release will eliminate the 'command-line first' workaround.
+   * To see how a particular lint issue behaves, comment/remove its corresponding id from the set
+   * of SuppressLint ids below.
    */
+  @SuppressLint({
+      ""LogNotTimber"", //
+      ""StringFormatInTimber"", //
+      ""ThrowableNotAtBeginning"", //
+      ""BinaryOperationInTimber"", //
+      ""TimberArgCount"", //
+      ""TimberArgTypes"", //
+      ""TimberTagLength"", //
+      ""TimberExceptionLogging"" //
+  }) //
   @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
 
-    /*
     // LogNotTimber
     Log.d(""TAG"", ""msg"");
     Log.d(""TAG"", ""msg"", new Exception());
@@ -63,7 +69,6 @@ public class LintActivity extends Activity {
     Timber.d(new Exception(), new Exception().getMessage());
     Timber.d(new Exception(), """");
     Timber.d(new Exception(), null);
-    */
   }
 
   private String getString() {",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,50e24b49c6b8530c308f8ecf0bf95c93823ff024,c60b677eb5a588124130359d994ca5fb6f4de0cf,"Include single-arg exception log methods in TimberExceptionLogging check

Fixes #289","@@ -503,35 +503,51 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
   private void checkExceptionLogging(JavaContext context, UCallExpression call) {
     List<UExpression> arguments = call.getValueArguments();
+    int numArguments = arguments.size();
 
-    if (arguments.size() > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
-      UExpression arg2 = arguments.get(1);
-
-      if (arg2 instanceof UQualifiedReferenceExpression) {
-        UQualifiedReferenceExpression arg2Expression = (UQualifiedReferenceExpression) arg2;
-        UExpression selector = arg2Expression.getSelector();
-        // what other UExpressions could be a selector?
-        if (isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
-            ""java.lang.Throwable"")) {
-          LintFix fix = quickFixIssueExceptionLogging(arg2);
-          context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
-              ""Explicitly logging exception message is redundant"", fix);
-          return;
-        }
+    if (numArguments > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
+      UExpression messageArg = arguments.get(1);
+
+      if (isLoggingExceptionMessage(context, messageArg)) {
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
+            ""Explicitly logging exception message is redundant"",
+            quickFixRemoveRedundantArgument(messageArg));
+        return;
       }
 
-      String s = evaluateString(context, arg2, true);
-      if (s == null && isField(arg2)) {
+      String s = evaluateString(context, messageArg, true);
+      if (s == null && isField(messageArg)) {
         // Non-final fields can't be evaluated.
         return;
       }
 
       if (s == null || s.isEmpty()) {
-        LintFix fix = quickFixIssueExceptionLogging(arg2);
-        context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
+        LintFix fix = quickFixRemoveRedundantArgument(messageArg);
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
             ""Use single-argument log method instead of null/empty message"", fix);
       }
+    } else if (numArguments == 1 && !isSubclassOf(context, arguments.get(0), Throwable.class)) {
+      UExpression messageArg = arguments.get(0);
+
+      if (isLoggingExceptionMessage(context, messageArg)) {
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
+            ""Explicitly logging exception message is redundant"",
+            quickFixReplaceMessageWithThrowable(messageArg));
+      }
+    }
+  }
+
+  private boolean isLoggingExceptionMessage(JavaContext context, UExpression arg) {
+    if (!(arg instanceof UQualifiedReferenceExpression)) {
+      return false;
     }
+
+    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
+    UExpression selector = argExpression.getSelector();
+
+    // what other UExpressions could be a selector?
+    return isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
+        ""java.lang.Throwable"");
   }
 
   private static boolean isField(UExpression expression) {
@@ -680,14 +696,26 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         .build();
   }
 
-  private LintFix quickFixIssueExceptionLogging(UExpression arg2) {
+  private LintFix quickFixRemoveRedundantArgument(UExpression arg) {
     return fix().replace()
         .name(""Remove redundant argument"")
-        .text("", "" + arg2.asSourceString())
+        .text("", "" + arg.asSourceString())
         .with("""")
         .build();
   }
 
+  private LintFix quickFixReplaceMessageWithThrowable(UExpression arg) {
+    // guaranteed based on callers of this method
+    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
+    UExpression receiver = argExpression.getReceiver();
+
+    return fix().replace()
+        .name(""Replace message with throwable"")
+        .text(arg.asSourceString())
+        .with(receiver.asSourceString())
+        .build();
+  }
+
   static Issue[] getIssues() {
     return new Issue[] {
         ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,","@@ -503,35 +503,51 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
   private void checkExceptionLogging(JavaContext context, UCallExpression call) {
     List<UExpression> arguments = call.getValueArguments();
+    int numArguments = arguments.size();
 
-    if (arguments.size() > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
-      UExpression arg2 = arguments.get(1);
-
-      if (arg2 instanceof UQualifiedReferenceExpression) {
-        UQualifiedReferenceExpression arg2Expression = (UQualifiedReferenceExpression) arg2;
-        UExpression selector = arg2Expression.getSelector();
-        // what other UExpressions could be a selector?
-        if (isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
-            ""java.lang.Throwable"")) {
-          LintFix fix = quickFixIssueExceptionLogging(arg2);
-          context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
-              ""Explicitly logging exception message is redundant"", fix);
-          return;
-        }
+    if (numArguments > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
+      UExpression messageArg = arguments.get(1);
+
+      if (isLoggingExceptionMessage(context, messageArg)) {
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
+            ""Explicitly logging exception message is redundant"",
+            quickFixRemoveRedundantArgument(messageArg));
+        return;
       }
 
-      String s = evaluateString(context, arg2, true);
-      if (s == null && isField(arg2)) {
+      String s = evaluateString(context, messageArg, true);
+      if (s == null && isField(messageArg)) {
         // Non-final fields can't be evaluated.
         return;
       }
 
       if (s == null || s.isEmpty()) {
-        LintFix fix = quickFixIssueExceptionLogging(arg2);
-        context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
+        LintFix fix = quickFixRemoveRedundantArgument(messageArg);
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
             ""Use single-argument log method instead of null/empty message"", fix);
       }
+    } else if (numArguments == 1 && !isSubclassOf(context, arguments.get(0), Throwable.class)) {
+      UExpression messageArg = arguments.get(0);
+
+      if (isLoggingExceptionMessage(context, messageArg)) {
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
+            ""Explicitly logging exception message is redundant"",
+            quickFixReplaceMessageWithThrowable(messageArg));
+      }
+    }
+  }
+
+  private boolean isLoggingExceptionMessage(JavaContext context, UExpression arg) {
+    if (!(arg instanceof UQualifiedReferenceExpression)) {
+      return false;
     }
+
+    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
+    UExpression selector = argExpression.getSelector();
+
+    // what other UExpressions could be a selector?
+    return isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
+        ""java.lang.Throwable"");
   }
 
   private static boolean isField(UExpression expression) {
@@ -680,14 +696,26 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         .build();
   }
 
-  private LintFix quickFixIssueExceptionLogging(UExpression arg2) {
+  private LintFix quickFixRemoveRedundantArgument(UExpression arg) {
     return fix().replace()
         .name(""Remove redundant argument"")
-        .text("", "" + arg2.asSourceString())
+        .text("", "" + arg.asSourceString())
         .with("""")
         .build();
   }
 
+  private LintFix quickFixReplaceMessageWithThrowable(UExpression arg) {
+    // guaranteed based on callers of this method
+    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
+    UExpression receiver = argExpression.getReceiver();
+
+    return fix().replace()
+        .name(""Replace message with throwable"")
+        .text(arg.asSourceString())
+        .with(receiver.asSourceString())
+        .build();
+  }
+
   static Issue[] getIssues() {
     return new Issue[] {
         ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,50e24b49c6b8530c308f8ecf0bf95c93823ff024,c60b677eb5a588124130359d994ca5fb6f4de0cf,"Include single-arg exception log methods in TimberExceptionLogging check

Fixes #289","@@ -636,6 +636,34 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingExceptionMessage() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e.getMessage());
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e.getMessage());
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace message with throwable:
+            |@@ -6 +6
+            |-      Timber.d(e.getMessage());
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingExceptionMessageArgument() {
     lint()
         .files(TIMBER_STUB,
             java(""""""","@@ -636,6 +636,34 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingExceptionMessage() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e.getMessage());
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e.getMessage());
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace message with throwable:
+            |@@ -6 +6
+            |-      Timber.d(e.getMessage());
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingExceptionMessageArgument() {
     lint()
         .files(TIMBER_STUB,
             java(""""""",False,test
timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,50e24b49c6b8530c308f8ecf0bf95c93823ff024,c60b677eb5a588124130359d994ca5fb6f4de0cf,"Include single-arg exception log methods in TimberExceptionLogging check

Fixes #289","@@ -69,6 +69,7 @@ public class LintActivity extends Activity {
     Timber.d(new Exception(), new Exception().getMessage());
     Timber.d(new Exception(), """");
     Timber.d(new Exception(), null);
+    Timber.d(new Exception().getMessage());
   }
 
   private String getString() {","@@ -69,6 +69,7 @@ public class LintActivity extends Activity {
     Timber.d(new Exception(), new Exception().getMessage());
     Timber.d(new Exception(), """");
     Timber.d(new Exception(), null);
+    Timber.d(new Exception().getMessage());
   }
 
   private String getString() {",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,b7e3049aff4fe916b7dbee9382716c5796201688,82829c22b840a0a472b7d2251b9632adc0c34566,"Fix false positives when evaluating parameters and methods

Fixes #270","@@ -15,10 +15,12 @@ import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
+import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiLiteralExpression;
 import com.intellij.psi.PsiMethod;
 import com.intellij.psi.PsiMethodCallExpression;
+import com.intellij.psi.PsiParameter;
 import com.intellij.psi.PsiType;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -32,6 +34,7 @@ import org.jetbrains.uast.UCallExpression;
 import org.jetbrains.uast.UElement;
 import org.jetbrains.uast.UExpression;
 import org.jetbrains.uast.UIfExpression;
+import org.jetbrains.uast.ULiteralExpression;
 import org.jetbrains.uast.UMethod;
 import org.jetbrains.uast.UQualifiedReferenceExpression;
 import org.jetbrains.uast.USimpleNameReferenceExpression;
@@ -516,8 +519,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
 
       String s = evaluateString(context, messageArg, true);
-      if (s == null && isField(messageArg)) {
-        // Non-final fields can't be evaluated.
+      if (s == null && !canEvaluateExpression(messageArg)) {
+        // Parameters and non-final fields can't be evaluated.
         return;
       }
 
@@ -550,9 +553,16 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         ""java.lang.Throwable"");
   }
 
-  private static boolean isField(UExpression expression) {
-    return expression instanceof USimpleNameReferenceExpression
-        && (((USimpleNameReferenceExpression) expression).resolve() instanceof PsiField);
+  private static boolean canEvaluateExpression(UExpression expression) {
+    // TODO - try using CallGraph?
+    if (expression instanceof ULiteralExpression) {
+      return true;
+    }
+    if (!(expression instanceof USimpleNameReferenceExpression)) {
+      return false;
+    }
+    PsiElement resolvedElement = ((USimpleNameReferenceExpression) expression).resolve();
+    return !(resolvedElement instanceof PsiField || resolvedElement instanceof PsiParameter);
   }
 
   private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,","@@ -15,10 +15,12 @@ import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
+import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiLiteralExpression;
 import com.intellij.psi.PsiMethod;
 import com.intellij.psi.PsiMethodCallExpression;
+import com.intellij.psi.PsiParameter;
 import com.intellij.psi.PsiType;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -32,6 +34,7 @@ import org.jetbrains.uast.UCallExpression;
 import org.jetbrains.uast.UElement;
 import org.jetbrains.uast.UExpression;
 import org.jetbrains.uast.UIfExpression;
+import org.jetbrains.uast.ULiteralExpression;
 import org.jetbrains.uast.UMethod;
 import org.jetbrains.uast.UQualifiedReferenceExpression;
 import org.jetbrains.uast.USimpleNameReferenceExpression;
@@ -516,8 +519,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
 
       String s = evaluateString(context, messageArg, true);
-      if (s == null && isField(messageArg)) {
-        // Non-final fields can't be evaluated.
+      if (s == null && !canEvaluateExpression(messageArg)) {
+        // Parameters and non-final fields can't be evaluated.
         return;
       }
 
@@ -550,9 +553,16 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         ""java.lang.Throwable"");
   }
 
-  private static boolean isField(UExpression expression) {
-    return expression instanceof USimpleNameReferenceExpression
-        && (((USimpleNameReferenceExpression) expression).resolve() instanceof PsiField);
+  private static boolean canEvaluateExpression(UExpression expression) {
+    // TODO - try using CallGraph?
+    if (expression instanceof ULiteralExpression) {
+      return true;
+    }
+    if (!(expression instanceof USimpleNameReferenceExpression)) {
+      return false;
+    }
+    PsiElement resolvedElement = ((USimpleNameReferenceExpression) expression).resolve();
+    return !(resolvedElement instanceof PsiField || resolvedElement instanceof PsiParameter);
   }
 
   private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,b7e3049aff4fe916b7dbee9382716c5796201688,82829c22b840a0a472b7d2251b9632adc0c34566,"Fix false positives when evaluating parameters and methods

Fixes #270","@@ -710,6 +710,43 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
+  @Test fun exceptionLoggingUsingParameter() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log(Exception e, String message) {
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingMethod() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log(Exception e) {
+                |    Timber.d(e, method());
+                |  }
+                |  private String method() {
+                |    return ""foo"";
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expectClean()
+  }
+
   @Test fun exceptionLoggingUsingNonFinalField() {
     lint()
         .files(TIMBER_STUB,","@@ -710,6 +710,43 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
+  @Test fun exceptionLoggingUsingParameter() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log(Exception e, String message) {
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingMethod() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log(Exception e) {
+                |    Timber.d(e, method());
+                |  }
+                |  private String method() {
+                |    return ""foo"";
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expectClean()
+  }
+
   @Test fun exceptionLoggingUsingNonFinalField() {
     lint()
         .files(TIMBER_STUB,",False,test
build.gradle,build.gradle,3c9e5aef28146e7e90e5d89759356be18c23d2de,16a769833958679461044d1713f7f2bf6e162735,Rewrite WrongTimberUsageDetectorTest to Kotlin.,"@@ -5,6 +5,8 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 27,
 
+      'kotlin': '1.2.21',
+
       'androidPlugin': '3.1.0-beta2',
       'androidTools': '26.1.0-beta2',
 
@@ -13,6 +15,7 @@ buildscript {
 
   ext.deps = [
       androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
+      kotlinPlugin: ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
       'butterknife': [
           'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
           'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
@@ -37,6 +40,7 @@ buildscript {
 
   dependencies {
     classpath deps.androidPlugin
+    classpath deps.kotlinPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
   }
 }","@@ -5,6 +5,8 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 27,
 
+      'kotlin': '1.2.21',
+
       'androidPlugin': '3.1.0-beta2',
       'androidTools': '26.1.0-beta2',
 
@@ -13,6 +15,7 @@ buildscript {
 
   ext.deps = [
       androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
+      kotlinPlugin: ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
       'butterknife': [
           'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
           'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
@@ -37,6 +40,7 @@ buildscript {
 
   dependencies {
     classpath deps.androidPlugin
+    classpath deps.kotlinPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
   }
 }",False,other
timber-lint/build.gradle,timber-lint/build.gradle,3c9e5aef28146e7e90e5d89759356be18c23d2de,16a769833958679461044d1713f7f2bf6e162735,Rewrite WrongTimberUsageDetectorTest to Kotlin.,"@@ -1,4 +1,5 @@
 apply plugin: 'java-library'
+apply plugin: 'kotlin'
 
 targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7","@@ -1,4 +1,5 @@
 apply plugin: 'java-library'
+apply plugin: 'kotlin'
 
 targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7",False,other
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.java,,3c9e5aef28146e7e90e5d89759356be18c23d2de,16a769833958679461044d1713f7f2bf6e162735,Rewrite WrongTimberUsageDetectorTest to Kotlin.,"@@ -1,807 +0,0 @@
-package timber.lint;
-
-import com.android.tools.lint.checks.infrastructure.TestFile;
-import org.junit.Test;
-
-import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
-import static com.android.tools.lint.checks.infrastructure.TestFiles.manifest;
-import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
-
-public final class WrongTimberUsageDetectorTest {
-  private static final TestFile TIMBER_STUB = java(""""
-      + ""package timber.log;\n""
-      + ""public class Timber {\n""
-      + ""  public static void d(String s, Object... args) {}\n""
-      + ""  public static void d(Throwable t, String s, Object... args) {}\n""
-      + ""  public static Tree tag(String tag) { return new Tree(); }\n""
-      + ""  public static class Tree {\n""
-      + ""    public void d(String s, Object... args) {}\n""
-      + ""    public void d(Throwable t, String s, Object... args) {}""
-      + ""  }\n""
-      + ""  private static final Tree TREE_OF_SOULS = new Tree();\n""
-      + ""}"");
-
-  @Test public void usingAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""import android.util.Log;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Log.d(\""TAG\"", \""msg\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    Log.d(\""TAG\"", \""msg\"");\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(\""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.d(\""msg\"");\n"");
-  }
-
-  @Test public void usingAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""import android.util.Log;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), \""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
-  }
-
-  @Test public void usingFullyQualifiedAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:4: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(\""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.d(\""msg\"");\n"");
-  }
-
-  @Test public void usingFullyQualifiedAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:4: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), \""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
-  }
-
-  @Test public void innerStringFormat() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-            + ""              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Remove String.format(...):\n""
-            + ""@@ -5 +5\n""
-            + ""-      Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
-  }
-
-  @Test public void innerStringFormatWithStaticImport() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""import static java.lang.String.format;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
-            + ""              ~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove String.format(...):\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(format(\""%s\"", \""arg1\""));\n""
-            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
-  }
-
-  @Test public void innerStringFormatInNestedMethods() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-                + ""  }\n""
-                + ""  private String id(String s) { return s; }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-            + ""                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void innerStringFormatInNestedAssignment() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    String msg = null;\n""
-                + ""    Timber.d(msg = String.format(\""msg\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""    Timber.d(msg = String.format(\""msg\""));\n""
-            + ""                   ~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void validStringFormatInCodeBlock() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    for(;;) {\n""
-                + ""      String name = String.format(\""msg\"");\n""
-                + ""    }\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void validStringFormatInConstructorCall() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    new Exception(String.format(\""msg\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expectClean();
-  }
-
-  @Test public void validStringFormatInStaticArray() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  static String[] X = { String.format(\""%s\"", 100) };""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expectClean();
-  }
-
-
-  @Test public void throwableNotAtBeginning() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(\""%s\"", e);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
-            + ""     Timber.d(\""%s\"", e);\n""
-            + ""     ~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with e, \""%s\"":\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(\""%s\"", e);\n""
-            + ""+      Timber.d(e, \""%s\"");\n"");
-  }
-
-  @Test public void stringConcatenationBothLiterals() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""foo\"" + \""bar\"");\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(\""foo\"" + \""bar\"");\n""
-            + ""              ~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Replace with \""foobar\"":\n""
-            + ""@@ -5 +5\n""
-            + ""-      Timber.d(\""foo\"" + \""bar\"");\n""
-            + ""+      Timber.d(\""foobar\"");\n"");
-  }
-
-  @Test public void stringConcatenationLeftLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String foo = \""foo\"";\n""
-                + ""     Timber.d(foo + \""bar\"");\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(foo + \""bar\"");\n""
-            + ""              ~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""%sbar\"", foo:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(foo + \""bar\"");\n""
-            + ""+      Timber.d(\""%sbar\"", foo);\n"");
-  }
-
-  @Test public void stringConcatenationRightLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String bar = \""bar\"";\n""
-                + ""     Timber.d(\""foo\"" + bar);\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(\""foo\"" + bar);\n""
-            + ""              ~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""foo%s\"", bar:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(\""foo\"" + bar);\n""
-            + ""+      Timber.d(\""foo%s\"", bar);\n"");
-  }
-
-  @Test public void stringConcatenationBothVariables() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String foo = \""foo\"";\n""
-                + ""     String bar = \""bar\"";\n""
-                + ""     Timber.d(foo + bar);\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:7: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(foo + bar);\n""
-            + ""              ~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 6: Replace with \""%s%s\"", foo, bar:\n""
-            + ""@@ -7 +7\n""
-            + ""-      Timber.d(foo + bar);\n""
-            + ""+      Timber.d(\""%s%s\"", foo, bar);\n"");
-  }
-
-  @Test public void stringConcatenationInsideTernary() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String s = \""world!\"";\n""
-                + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-            + ""                     ~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void tooManyFormatArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-            + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tooManyArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-            + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void wrongArgTypes() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-            + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-            + ""                    ~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralOnly() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-            + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralPlusField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private final String field = \""x\"";""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-            + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralOnlyAfterApi23() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-                + ""  }\n""
-                + ""}""), //
-            manifest().minSdk(24) //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expectClean();
-  }
-
-  @Test public void tooManyFormatArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tooManyArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void wrongArgTypesInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-            + ""                               ~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void exceptionLoggingUsingExceptionMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, e.getMessage());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, e.getMessage());\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, e.getMessage());\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingVariable() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String msg = \""Hello\"";\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, msg);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void exceptionLoggingUsingNonFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private String message;\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, message);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-  
-  @Test public void exceptionLoggingUsingFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private final String message = \""foo\"";\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, message);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void exceptionLoggingUsingEmptyStringMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, \""\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, \""\"");\n""
-            + ""     ~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, \""\"");\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingNullMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, null);\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, null);\n""
-            + ""     ~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, null);\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingValidMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, \""Valid message\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void dateFormatNotDisplayingWarning() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Timber.d(\""%tc\"", new java.util.Date());\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.getIssues()) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void wrappedBooleanType() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%b\"", Boolean.valueOf(true));\n""
-                + ""  }\n""
-                + ""}"")) //
-        .issues(WrongTimberUsageDetector.getIssues()) //
-        .run() //
-        .expectClean();
-  }
-}","@@ -1,807 +0,0 @@
-package timber.lint;
-
-import com.android.tools.lint.checks.infrastructure.TestFile;
-import org.junit.Test;
-
-import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
-import static com.android.tools.lint.checks.infrastructure.TestFiles.manifest;
-import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
-
-public final class WrongTimberUsageDetectorTest {
-  private static final TestFile TIMBER_STUB = java(""""
-      + ""package timber.log;\n""
-      + ""public class Timber {\n""
-      + ""  public static void d(String s, Object... args) {}\n""
-      + ""  public static void d(Throwable t, String s, Object... args) {}\n""
-      + ""  public static Tree tag(String tag) { return new Tree(); }\n""
-      + ""  public static class Tree {\n""
-      + ""    public void d(String s, Object... args) {}\n""
-      + ""    public void d(Throwable t, String s, Object... args) {}""
-      + ""  }\n""
-      + ""  private static final Tree TREE_OF_SOULS = new Tree();\n""
-      + ""}"");
-
-  @Test public void usingAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""import android.util.Log;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Log.d(\""TAG\"", \""msg\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    Log.d(\""TAG\"", \""msg\"");\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(\""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.d(\""msg\"");\n"");
-  }
-
-  @Test public void usingAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""import android.util.Log;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 4: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), \""msg\""):\n""
-                + ""@@ -5 +5\n""
-                + ""-     Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
-  }
-
-  @Test public void usingFullyQualifiedAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:4: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    android.util.Log.d(\""TAG\"", \""msg\"");\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(\""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.tag(\""TAG\"").d(\""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(\""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"");\n""
-                + ""+     Timber.d(\""msg\"");\n"");
-  }
-
-  @Test public void usingFullyQualifiedAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
-        .run()
-        .expect(""src/foo/Example.java:4: ""
-            + ""Warning: Using 'Log' instead of 'Timber' [LogNotTimber]\n""
-            + ""    android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-            + ""    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(
-            ""Fix for src/foo/Example.java line 3: Replace with Timber.tag(\""TAG\"").d(new Exception(), \""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.tag(\""TAG\"").d(new Exception(), \""msg\"");\n""
-                + ""Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), \""msg\""):\n""
-                + ""@@ -4 +4\n""
-                + ""-     android.util.Log.d(\""TAG\"", \""msg\"", new Exception());\n""
-                + ""+     Timber.d(new Exception(), \""msg\"");\n"");
-  }
-
-  @Test public void innerStringFormat() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-            + ""              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Remove String.format(...):\n""
-            + ""@@ -5 +5\n""
-            + ""-      Timber.d(String.format(\""%s\"", \""arg1\""));\n""
-            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
-  }
-
-  @Test public void innerStringFormatWithStaticImport() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""import static java.lang.String.format;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(format(\""%s\"", \""arg1\""));\n""
-            + ""              ~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove String.format(...):\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(format(\""%s\"", \""arg1\""));\n""
-            + ""+      Timber.d(\""%s\"", \""arg1\"");\n"");
-  }
-
-  @Test public void innerStringFormatInNestedMethods() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-                + ""  }\n""
-                + ""  private String id(String s) { return s; }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""     Timber.d(id(String.format(\""%s\"", \""arg1\"")));\n""
-            + ""                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void innerStringFormatInNestedAssignment() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    String msg = null;\n""
-                + ""    Timber.d(msg = String.format(\""msg\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]\n""
-            + ""    Timber.d(msg = String.format(\""msg\""));\n""
-            + ""                   ~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void validStringFormatInCodeBlock() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    for(;;) {\n""
-                + ""      String name = String.format(\""msg\"");\n""
-                + ""    }\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void validStringFormatInConstructorCall() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    new Exception(String.format(\""msg\""));\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expectClean();
-  }
-
-  @Test public void validStringFormatInStaticArray() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""public class Example {\n""
-                + ""  static String[] X = { String.format(\""%s\"", 100) };""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
-        .run()
-        .expectClean();
-  }
-
-
-  @Test public void throwableNotAtBeginning() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(\""%s\"", e);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Throwable should be first argument [ThrowableNotAtBeginning]\n""
-            + ""     Timber.d(\""%s\"", e);\n""
-            + ""     ~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with e, \""%s\"":\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(\""%s\"", e);\n""
-            + ""+      Timber.d(e, \""%s\"");\n"");
-  }
-
-  @Test public void stringConcatenationBothLiterals() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""foo\"" + \""bar\"");\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(\""foo\"" + \""bar\"");\n""
-            + ""              ~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 4: Replace with \""foobar\"":\n""
-            + ""@@ -5 +5\n""
-            + ""-      Timber.d(\""foo\"" + \""bar\"");\n""
-            + ""+      Timber.d(\""foobar\"");\n"");
-  }
-
-  @Test public void stringConcatenationLeftLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String foo = \""foo\"";\n""
-                + ""     Timber.d(foo + \""bar\"");\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(foo + \""bar\"");\n""
-            + ""              ~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""%sbar\"", foo:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(foo + \""bar\"");\n""
-            + ""+      Timber.d(\""%sbar\"", foo);\n"");
-  }
-
-  @Test public void stringConcatenationRightLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String bar = \""bar\"";\n""
-                + ""     Timber.d(\""foo\"" + bar);\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(\""foo\"" + bar);\n""
-            + ""              ~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Replace with \""foo%s\"", bar:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(\""foo\"" + bar);\n""
-            + ""+      Timber.d(\""foo%s\"", bar);\n"");
-  }
-
-  @Test public void stringConcatenationBothVariables() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String foo = \""foo\"";\n""
-                + ""     String bar = \""bar\"";\n""
-                + ""     Timber.d(foo + bar);\n""
-                + ""  }\n""
-                + ""}""))
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:7: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(foo + bar);\n""
-            + ""              ~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 6: Replace with \""%s%s\"", foo, bar:\n""
-            + ""@@ -7 +7\n""
-            + ""-      Timber.d(foo + bar);\n""
-            + ""+      Timber.d(\""%s%s\"", foo, bar);\n"");
-  }
-
-  @Test public void stringConcatenationInsideTernary() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String s = \""world!\"";\n""
-                + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]\n""
-            + ""     Timber.d(true ? \""Hello, \"" + s : \""Bye\"");\n""
-            + ""                     ~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"");
-  }
-
-  @Test public void tooManyFormatArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-            + ""     Timber.d(\""%s %s\"", \""arg1\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tooManyArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-            + ""     Timber.d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void wrongArgTypes() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-            + ""     Timber.d(\""%d\"", \""arg1\"");\n""
-            + ""                    ~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralOnly() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-            + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralPlusField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private final String field = \""x\"";""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]\n""
-            + ""     Timber.tag(\""abcdefghijklmnopqrstuvw\"" + field);\n""
-            + ""                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tagTooLongLiteralOnlyAfterApi23() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""abcdefghijklmnopqrstuvwx\"");\n""
-                + ""  }\n""
-                + ""}""), //
-            manifest().minSdk(24) //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
-        .run()
-        .expectClean();
-  }
-
-  @Test public void tooManyFormatArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%s %s\"", \""arg1\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void tooManyArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%s\"", \""arg1\"", \""arg2\"");\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void wrongArgTypesInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
-        .run()
-        .expect(""src/foo/Example.java:5: ""
-            + ""Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]\n""
-            + ""     Timber.tag(\""tag\"").d(\""%d\"", \""arg1\"");\n""
-            + ""                               ~~~~~~\n""
-            + ""1 errors, 0 warnings\n"");
-  }
-
-  @Test public void exceptionLoggingUsingExceptionMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, e.getMessage());\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, e.getMessage());\n""
-            + ""     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, e.getMessage());\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingVariable() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     String msg = \""Hello\"";\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, msg);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void exceptionLoggingUsingNonFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private String message;\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, message);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-  
-  @Test public void exceptionLoggingUsingFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  private final String message = \""foo\"";\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, message);\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void exceptionLoggingUsingEmptyStringMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, \""\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, \""\"");\n""
-            + ""     ~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, \""\"");\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingNullMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, null);\n""
-                + ""  }\n""
-                + ""}"") //
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""src/foo/Example.java:6: ""
-            + ""Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]\n""
-            + ""     Timber.d(e, null);\n""
-            + ""     ~~~~~~~~~~~~~~~~~\n""
-            + ""0 errors, 1 warnings\n"")
-        .expectFixDiffs(""Fix for src/foo/Example.java line 5: Remove redundant argument:\n""
-            + ""@@ -6 +6\n""
-            + ""-      Timber.d(e, null);\n""
-            + ""+      Timber.d(e);\n"");
-  }
-
-  @Test public void exceptionLoggingUsingValidMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Exception e = new Exception();\n""
-                + ""     Timber.d(e, \""Valid message\"");\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void dateFormatNotDisplayingWarning() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""    Timber.d(\""%tc\"", new java.util.Date());\n""
-                + ""  }\n""
-                + ""}"") //
-        ) //
-        .issues(WrongTimberUsageDetector.getIssues()) //
-        .run() //
-        .expectClean();
-  }
-
-  @Test public void wrappedBooleanType() {
-    lint() //
-        .files(TIMBER_STUB, //
-            java(""""
-                + ""package foo;\n""
-                + ""import timber.log.Timber;\n""
-                + ""public class Example {\n""
-                + ""  public void log() {\n""
-                + ""     Timber.d(\""%b\"", Boolean.valueOf(true));\n""
-                + ""  }\n""
-                + ""}"")) //
-        .issues(WrongTimberUsageDetector.getIssues()) //
-        .run() //
-        .expectClean();
-  }
-}",False,test
,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,3c9e5aef28146e7e90e5d89759356be18c23d2de,16a769833958679461044d1713f7f2bf6e162735,Rewrite WrongTimberUsageDetectorTest to Kotlin.,"@@ -0,0 +1,829 @@
+package timber.lint
+
+import com.android.tools.lint.checks.infrastructure.TestFiles.java
+import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
+import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
+import org.junit.Test
+
+class WrongTimberUsageDetectorTest {
+  private val TIMBER_STUB = java(""""""
+      |package timber.log;
+      |public class Timber {
+      |  public static void d(String s, Object... args) {}
+      |  public static void d(Throwable t, String s, Object... args) {}
+      |  public static Tree tag(String tag) { return new Tree(); }
+      |  public static class Tree {
+      |    public void d(String s, Object... args) {}
+      |    public void d(Throwable t, String s, Object... args) {}
+      |  }
+      |  private static final Tree TREE_OF_SOULS = new Tree();
+      |}"""""".trimMargin())
+
+  @Test fun usingAndroidLogWithTwoArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |import android.util.Log;
+                |public class Example {
+                |  public void log() {
+                |    Log.d(""TAG"", ""msg"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"");
+            |    ~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"");
+            |+     Timber.tag(""TAG"").d(""msg"");
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"");
+            |+     Timber.d(""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |import android.util.Log;
+                |public class Example {
+                |  public void log() {
+                |    Log.d(""TAG"", ""msg"", new Exception());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"", new Exception());
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.d(new Exception(), ""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingFullyQualifiedAndroidLogWithTwoArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    android.util.Log.d(""TAG"", ""msg"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"");
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"");
+            |+     Timber.tag(""TAG"").d(""msg"");
+            |Fix for src/foo/Example.java line 3: Replace with Timber.d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"");
+            |+     Timber.d(""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingFullyQualifiedAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    android.util.Log.d(""TAG"", ""msg"", new Exception());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.d(new Exception(), ""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormat() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(String.format(""%s"", ""arg1""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(String.format(""%s"", ""arg1""));
+            |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Remove String.format(...):
+            |@@ -5 +5
+            |-      Timber.d(String.format(""%s"", ""arg1""));
+            |+      Timber.d(""%s"", ""arg1"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatWithStaticImport() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |import static java.lang.String.format;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(format(""%s"", ""arg1""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(format(""%s"", ""arg1""));
+            |              ~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove String.format(...):
+            |@@ -6 +6
+            |-      Timber.d(format(""%s"", ""arg1""));
+            |+      Timber.d(""%s"", ""arg1"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatInNestedMethods() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(id(String.format(""%s"", ""arg1"")));
+                |  }
+                |  private String id(String s) { return s; }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(id(String.format(""%s"", ""arg1"")));
+            |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatInNestedAssignment() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    String msg = null;
+                |    Timber.d(msg = String.format(""msg""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |    Timber.d(msg = String.format(""msg""));
+            |                   ~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun validStringFormatInCodeBlock() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    for(;;) {
+                |      String name = String.format(""msg"");
+                |    }
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun validStringFormatInConstructorCall() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    new Exception(String.format(""msg""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun validStringFormatInStaticArray() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  static String[] X = { String.format(""%s"", 100) };
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean()
+  }
+
+
+  @Test fun throwableNotAtBeginning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(""%s"", e);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
+            |     Timber.d(""%s"", e);
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with e, ""%s"":
+            |@@ -6 +6
+            |-      Timber.d(""%s"", e);
+            |+      Timber.d(e, ""%s"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationBothLiterals() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""foo"" + ""bar"");
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(""foo"" + ""bar"");
+            |              ~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with ""foobar"":
+            |@@ -5 +5
+            |-      Timber.d(""foo"" + ""bar"");
+            |+      Timber.d(""foobar"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationLeftLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String foo = ""foo"";
+                |     Timber.d(foo + ""bar"");
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(foo + ""bar"");
+            |              ~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with ""%sbar"", foo:
+            |@@ -6 +6
+            |-      Timber.d(foo + ""bar"");
+            |+      Timber.d(""%sbar"", foo);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationRightLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String bar = ""bar"";
+                |     Timber.d(""foo"" + bar);
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(""foo"" + bar);
+            |              ~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with ""foo%s"", bar:
+            |@@ -6 +6
+            |-      Timber.d(""foo"" + bar);
+            |+      Timber.d(""foo%s"", bar);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationBothVariables() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String foo = ""foo"";
+                |     String bar = ""bar"";
+                |     Timber.d(foo + bar);
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:7: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(foo + bar);
+            |              ~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 6: Replace with ""%s%s"", foo, bar:
+            |@@ -7 +7
+            |-      Timber.d(foo + bar);
+            |+      Timber.d(""%s%s"", foo, bar);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationInsideTernary() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String s = ""world!"";
+                |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
+            |                     ~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyFormatArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%s %s"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.d(""%s %s"", ""arg1"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%s"", ""arg1"", ""arg2"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.d(""%s"", ""arg1"", ""arg2"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun wrongArgTypes() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%d"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.d(""%d"", ""arg1"");
+            |                    ~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralOnly() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
+            |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+            |                ~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralPlusField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private final String field = ""x"";
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
+            |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
+            |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralOnlyAfterApi23() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+                |  }
+                |}"""""".trimMargin()), //
+            manifest().minSdk(24) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun tooManyFormatArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun wrongArgTypesInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%d"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.tag(""tag"").d(""%d"", ""arg1"");
+            |                               ~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingExceptionMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, e.getMessage());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e, e.getMessage());
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, e.getMessage());
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingVariable() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String msg = ""Hello"";
+                |     Exception e = new Exception();
+                |     Timber.d(e, msg);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingNonFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private String message;
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private final String message = ""foo"";
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingEmptyStringMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, """");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, """");
+            |     ~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, """");
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingNullMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, null);
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, null);
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, null);
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingValidMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, ""Valid message"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun dateFormatNotDisplayingWarning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    Timber.d(""%tc"", new java.util.Date());
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(*WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun wrappedBooleanType() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%b"", Boolean.valueOf(true));
+                |  }
+                |}"""""".trimMargin())) //
+        .issues(*WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean()
+  }
+}","@@ -0,0 +1,829 @@
+package timber.lint
+
+import com.android.tools.lint.checks.infrastructure.TestFiles.java
+import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
+import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
+import org.junit.Test
+
+class WrongTimberUsageDetectorTest {
+  private val TIMBER_STUB = java(""""""
+      |package timber.log;
+      |public class Timber {
+      |  public static void d(String s, Object... args) {}
+      |  public static void d(Throwable t, String s, Object... args) {}
+      |  public static Tree tag(String tag) { return new Tree(); }
+      |  public static class Tree {
+      |    public void d(String s, Object... args) {}
+      |    public void d(Throwable t, String s, Object... args) {}
+      |  }
+      |  private static final Tree TREE_OF_SOULS = new Tree();
+      |}"""""".trimMargin())
+
+  @Test fun usingAndroidLogWithTwoArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |import android.util.Log;
+                |public class Example {
+                |  public void log() {
+                |    Log.d(""TAG"", ""msg"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"");
+            |    ~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"");
+            |+     Timber.tag(""TAG"").d(""msg"");
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"");
+            |+     Timber.d(""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |import android.util.Log;
+                |public class Example {
+                |  public void log() {
+                |    Log.d(""TAG"", ""msg"", new Exception());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"", new Exception());
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.d(new Exception(), ""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingFullyQualifiedAndroidLogWithTwoArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    android.util.Log.d(""TAG"", ""msg"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"");
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"");
+            |+     Timber.tag(""TAG"").d(""msg"");
+            |Fix for src/foo/Example.java line 3: Replace with Timber.d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"");
+            |+     Timber.d(""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun usingFullyQualifiedAndroidLogWithThreeArguments() {
+    lint() //
+        .files( //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    android.util.Log.d(""TAG"", ""msg"", new Exception());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
+            |+     Timber.d(new Exception(), ""msg"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormat() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(String.format(""%s"", ""arg1""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(String.format(""%s"", ""arg1""));
+            |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Remove String.format(...):
+            |@@ -5 +5
+            |-      Timber.d(String.format(""%s"", ""arg1""));
+            |+      Timber.d(""%s"", ""arg1"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatWithStaticImport() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |import static java.lang.String.format;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(format(""%s"", ""arg1""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(format(""%s"", ""arg1""));
+            |              ~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove String.format(...):
+            |@@ -6 +6
+            |-      Timber.d(format(""%s"", ""arg1""));
+            |+      Timber.d(""%s"", ""arg1"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatInNestedMethods() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(id(String.format(""%s"", ""arg1"")));
+                |  }
+                |  private String id(String s) { return s; }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(id(String.format(""%s"", ""arg1"")));
+            |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun innerStringFormatInNestedAssignment() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    String msg = null;
+                |    Timber.d(msg = String.format(""msg""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |    Timber.d(msg = String.format(""msg""));
+            |                   ~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun validStringFormatInCodeBlock() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    for(;;) {
+                |      String name = String.format(""msg"");
+                |    }
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun validStringFormatInConstructorCall() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  public void log() {
+                |    new Exception(String.format(""msg""));
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun validStringFormatInStaticArray() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |public class Example {
+                |  static String[] X = { String.format(""%s"", 100) };
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
+        .expectClean()
+  }
+
+
+  @Test fun throwableNotAtBeginning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(""%s"", e);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
+            |     Timber.d(""%s"", e);
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with e, ""%s"":
+            |@@ -6 +6
+            |-      Timber.d(""%s"", e);
+            |+      Timber.d(e, ""%s"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationBothLiterals() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""foo"" + ""bar"");
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(""foo"" + ""bar"");
+            |              ~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 4: Replace with ""foobar"":
+            |@@ -5 +5
+            |-      Timber.d(""foo"" + ""bar"");
+            |+      Timber.d(""foobar"");
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationLeftLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String foo = ""foo"";
+                |     Timber.d(foo + ""bar"");
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(foo + ""bar"");
+            |              ~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with ""%sbar"", foo:
+            |@@ -6 +6
+            |-      Timber.d(foo + ""bar"");
+            |+      Timber.d(""%sbar"", foo);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationRightLiteral() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String bar = ""bar"";
+                |     Timber.d(""foo"" + bar);
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(""foo"" + bar);
+            |              ~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace with ""foo%s"", bar:
+            |@@ -6 +6
+            |-      Timber.d(""foo"" + bar);
+            |+      Timber.d(""foo%s"", bar);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationBothVariables() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String foo = ""foo"";
+                |     String bar = ""bar"";
+                |     Timber.d(foo + bar);
+                |  }
+                |}"""""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:7: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(foo + bar);
+            |              ~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 6: Replace with ""%s%s"", foo, bar:
+            |@@ -7 +7
+            |-      Timber.d(foo + bar);
+            |+      Timber.d(""%s%s"", foo, bar);
+            |"""""".trimMargin())
+  }
+
+  @Test fun stringConcatenationInsideTernary() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String s = ""world!"";
+                |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
+            |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
+            |                     ~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyFormatArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%s %s"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.d(""%s %s"", ""arg1"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyArgs() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%s"", ""arg1"", ""arg2"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.d(""%s"", ""arg1"", ""arg2"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun wrongArgTypes() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%d"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.d(""%d"", ""arg1"");
+            |                    ~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralOnly() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
+            |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+            |                ~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralPlusField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private final String field = ""x"";
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
+            |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
+            |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tagTooLongLiteralOnlyAfterApi23() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
+                |  }
+                |}"""""".trimMargin()), //
+            manifest().minSdk(24) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun tooManyFormatArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun tooManyArgsInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun wrongArgTypesInTag() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.tag(""tag"").d(""%d"", ""arg1"");
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.tag(""tag"").d(""%d"", ""arg1"");
+            |                               ~~~~~~
+            |1 errors, 0 warnings"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingExceptionMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, e.getMessage());
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e, e.getMessage());
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, e.getMessage());
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingVariable() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     String msg = ""Hello"";
+                |     Exception e = new Exception();
+                |     Timber.d(e, msg);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingNonFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private String message;
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingFinalField() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  private final String message = ""foo"";
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingEmptyStringMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, """");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, """");
+            |     ~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, """");
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingNullMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, null);
+                |  }
+                |}"""""".trimMargin()) //
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, null);
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, null);
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingValidMessage() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e, ""Valid message"");
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun dateFormatNotDisplayingWarning() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    Timber.d(""%tc"", new java.util.Date());
+                |  }
+                |}"""""".trimMargin()) //
+        ) //
+        .issues(*WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean()
+  }
+
+  @Test fun wrappedBooleanType() {
+    lint() //
+        .files(TIMBER_STUB, //
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Timber.d(""%b"", Boolean.valueOf(true));
+                |  }
+                |}"""""".trimMargin())) //
+        .issues(*WrongTimberUsageDetector.getIssues()) //
+        .run() //
+        .expectClean()
+  }
+}",False,test
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,44085adb858bd4ff354e3325383bc3338d1d4aa2,3c9e5aef28146e7e90e5d89759356be18c23d2de,Remove new line comments.,"@@ -20,8 +20,8 @@ class WrongTimberUsageDetectorTest {
       |}"""""".trimMargin())
 
   @Test fun usingAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |import android.util.Log;
@@ -29,9 +29,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -51,8 +51,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |import android.util.Log;
@@ -60,9 +60,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"", new Exception());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -82,17 +82,17 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingFullyQualifiedAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -112,17 +112,17 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingFullyQualifiedAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"", new Exception());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -142,8 +142,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormat() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -151,7 +151,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(String.format(""%s"", ""arg1""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -169,8 +169,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatWithStaticImport() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -179,7 +179,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(format(""%s"", ""arg1""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -197,8 +197,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatInNestedMethods() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -207,7 +207,7 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.d(id(String.format(""%s"", ""arg1"")));
                 |  }
                 |  private String id(String s) { return s; }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -219,8 +219,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatInNestedAssignment() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -229,7 +229,7 @@ class WrongTimberUsageDetectorTest {
                 |    String msg = null;
                 |    Timber.d(msg = String.format(""msg""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -241,8 +241,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun validStringFormatInCodeBlock() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -252,23 +252,23 @@ class WrongTimberUsageDetectorTest {
                 |      String name = String.format(""msg"");
                 |    }
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
         .expectClean()
   }
 
   @Test fun validStringFormatInConstructorCall() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    new Exception(String.format(""msg""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -276,13 +276,13 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun validStringFormatInStaticArray() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |public class Example {
                 |  static String[] X = { String.format(""%s"", 100) };
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -291,8 +291,8 @@ class WrongTimberUsageDetectorTest {
 
 
   @Test fun throwableNotAtBeginning() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -301,8 +301,8 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(""%s"", e);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
         .run()
         .expect(""""""
@@ -319,8 +319,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationBothLiterals() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -345,8 +345,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationLeftLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -372,8 +372,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationRightLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -399,8 +399,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationBothVariables() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -427,8 +427,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationInsideTernary() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -437,8 +437,8 @@ class WrongTimberUsageDetectorTest {
                 |     String s = ""world!"";
                 |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -449,8 +449,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyFormatArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -458,8 +458,8 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s %s"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -470,8 +470,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -479,7 +479,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s"", ""arg1"", ""arg2"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -491,8 +491,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun wrongArgTypes() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -500,7 +500,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%d"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
@@ -512,8 +512,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralOnly() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -521,7 +521,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -533,8 +533,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralPlusField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -543,7 +543,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -555,8 +555,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralOnlyAfterApi23() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -564,8 +564,8 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
-                |}"""""".trimMargin()), //
-            manifest().minSdk(24) //
+                |}"""""".trimMargin()),
+            manifest().minSdk(24)
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -573,8 +573,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyFormatArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -582,7 +582,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -594,8 +594,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -603,7 +603,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -615,8 +615,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun wrongArgTypesInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -624,7 +624,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%d"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
@@ -636,8 +636,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingExceptionMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -646,7 +646,7 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, e.getMessage());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
@@ -664,8 +664,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingVariable() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -675,16 +675,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, msg);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingNonFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -694,16 +694,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -713,16 +713,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingEmptyStringMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -731,8 +731,8 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, """");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -749,8 +749,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingNullMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -759,7 +759,7 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, null);
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
@@ -777,8 +777,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingValidMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -787,16 +787,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, ""Valid message"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun dateFormatNotDisplayingWarning() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -804,16 +804,16 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Timber.d(""%tc"", new java.util.Date());
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(*WrongTimberUsageDetector.getIssues()) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
         .expectClean()
   }
 
   @Test fun wrappedBooleanType() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -821,9 +821,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%b"", Boolean.valueOf(true));
                 |  }
-                |}"""""".trimMargin())) //
-        .issues(*WrongTimberUsageDetector.getIssues()) //
-        .run() //
+                |}"""""".trimMargin()))
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
         .expectClean()
   }
 }","@@ -20,8 +20,8 @@ class WrongTimberUsageDetectorTest {
       |}"""""".trimMargin())
 
   @Test fun usingAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |import android.util.Log;
@@ -29,9 +29,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -51,8 +51,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |import android.util.Log;
@@ -60,9 +60,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"", new Exception());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -82,17 +82,17 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingFullyQualifiedAndroidLogWithTwoArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -112,17 +112,17 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun usingFullyQualifiedAndroidLogWithThreeArguments() {
-    lint() //
-        .files( //
+    lint()
+        .files(
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"", new Exception());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG) //
+        .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -142,8 +142,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormat() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -151,7 +151,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(String.format(""%s"", ""arg1""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -169,8 +169,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatWithStaticImport() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -179,7 +179,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(format(""%s"", ""arg1""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -197,8 +197,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatInNestedMethods() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -207,7 +207,7 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.d(id(String.format(""%s"", ""arg1"")));
                 |  }
                 |  private String id(String s) { return s; }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -219,8 +219,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun innerStringFormatInNestedAssignment() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -229,7 +229,7 @@ class WrongTimberUsageDetectorTest {
                 |    String msg = null;
                 |    Timber.d(msg = String.format(""msg""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -241,8 +241,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun validStringFormatInCodeBlock() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -252,23 +252,23 @@ class WrongTimberUsageDetectorTest {
                 |      String name = String.format(""msg"");
                 |    }
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .run()
         .expectClean()
   }
 
   @Test fun validStringFormatInConstructorCall() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |public class Example {
                 |  public void log() {
                 |    new Exception(String.format(""msg""));
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -276,13 +276,13 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun validStringFormatInStaticArray() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |public class Example {
                 |  static String[] X = { String.format(""%s"", 100) };
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -291,8 +291,8 @@ class WrongTimberUsageDetectorTest {
 
 
   @Test fun throwableNotAtBeginning() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -301,8 +301,8 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(""%s"", e);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
         .run()
         .expect(""""""
@@ -319,8 +319,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationBothLiterals() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -345,8 +345,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationLeftLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -372,8 +372,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationRightLiteral() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -399,8 +399,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationBothVariables() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -427,8 +427,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun stringConcatenationInsideTernary() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -437,8 +437,8 @@ class WrongTimberUsageDetectorTest {
                 |     String s = ""world!"";
                 |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -449,8 +449,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyFormatArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -458,8 +458,8 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s %s"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -470,8 +470,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyArgs() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -479,7 +479,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s"", ""arg1"", ""arg2"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -491,8 +491,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun wrongArgTypes() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -500,7 +500,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%d"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
@@ -512,8 +512,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralOnly() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -521,7 +521,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -533,8 +533,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralPlusField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -543,7 +543,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -555,8 +555,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tagTooLongLiteralOnlyAfterApi23() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -564,8 +564,8 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
-                |}"""""".trimMargin()), //
-            manifest().minSdk(24) //
+                |}"""""".trimMargin()),
+            manifest().minSdk(24)
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
@@ -573,8 +573,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyFormatArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -582,7 +582,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -594,8 +594,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun tooManyArgsInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -603,7 +603,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
@@ -615,8 +615,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun wrongArgTypesInTag() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -624,7 +624,7 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%d"", ""arg1"");
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
@@ -636,8 +636,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingExceptionMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -646,7 +646,7 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, e.getMessage());
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
@@ -664,8 +664,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingVariable() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -675,16 +675,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, msg);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingNonFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -694,16 +694,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingFinalField() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -713,16 +713,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun exceptionLoggingUsingEmptyStringMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -731,8 +731,8 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, """");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
+                |}"""""".trimMargin())
+        )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -749,8 +749,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingNullMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -759,7 +759,7 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, null);
                 |  }
-                |}"""""".trimMargin()) //
+                |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
@@ -777,8 +777,8 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingValidMessage() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -787,16 +787,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, ""Valid message"");
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
         .expectClean()
   }
 
   @Test fun dateFormatNotDisplayingWarning() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -804,16 +804,16 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Timber.d(""%tc"", new java.util.Date());
                 |  }
-                |}"""""".trimMargin()) //
-        ) //
-        .issues(*WrongTimberUsageDetector.getIssues()) //
-        .run() //
+                |}"""""".trimMargin())
+        )
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
         .expectClean()
   }
 
   @Test fun wrappedBooleanType() {
-    lint() //
-        .files(TIMBER_STUB, //
+    lint()
+        .files(TIMBER_STUB,
             java(""""""
                 |package foo;
                 |import timber.log.Timber;
@@ -821,9 +821,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%b"", Boolean.valueOf(true));
                 |  }
-                |}"""""".trimMargin())) //
-        .issues(*WrongTimberUsageDetector.getIssues()) //
-        .run() //
+                |}"""""".trimMargin()))
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
         .expectClean()
   }
 }",False,test
build.gradle,build.gradle,1fb43ea0ea30b7deceb742b2a1b5a221bf5efc2c,44085adb858bd4ff354e3325383bc3338d1d4aa2,"Bump dependencies

* AGP 3.1-beta4
* Gradle 4.6
* Robolectric 3.7.1","@@ -7,8 +7,8 @@ buildscript {
 
       'kotlin': '1.2.21',
 
-      'androidPlugin': '3.1.0-beta2',
-      'androidTools': '26.1.0-beta2',
+      'androidPlugin': '3.1.0-beta4',
+      'androidTools': '26.1.0-beta4',
 
       'butterknife': '8.8.1',
   ]
@@ -30,7 +30,7 @@ buildscript {
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.39',
-      robolectric: 'org.robolectric:robolectric:3.7',
+      robolectric: 'org.robolectric:robolectric:3.7.1',
   ]
 
   repositories {","@@ -7,8 +7,8 @@ buildscript {
 
       'kotlin': '1.2.21',
 
-      'androidPlugin': '3.1.0-beta2',
-      'androidTools': '26.1.0-beta2',
+      'androidPlugin': '3.1.0-beta4',
+      'androidTools': '26.1.0-beta4',
 
       'butterknife': '8.8.1',
   ]
@@ -30,7 +30,7 @@ buildscript {
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.39',
-      robolectric: 'org.robolectric:robolectric:3.7',
+      robolectric: 'org.robolectric:robolectric:3.7.1',
   ]
 
   repositories {",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,1fb43ea0ea30b7deceb742b2a1b5a221bf5efc2c,44085adb858bd4ff354e3325383bc3338d1d4aa2,"Bump dependencies

* AGP 3.1-beta4
* Gradle 4.6
* Robolectric 3.7.1","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip",False,other
build.gradle,build.gradle,ccfddd1879e519f2b0bf9f88f44789a6857751d6,1fb43ea0ea30b7deceb742b2a1b5a221bf5efc2c,Better test logging output,"@@ -45,10 +45,20 @@ buildscript {
   }
 }
 
-allprojects {
+subprojects {
   repositories {
     mavenCentral()
     jcenter()
     google()
   }
+
+  tasks.withType(Test) {
+    testLogging {
+      events ""failed""
+      exceptionFormat ""full""
+      showExceptions true
+      showStackTraces true
+      showCauses true
+    }
+  }
 }","@@ -45,10 +45,20 @@ buildscript {
   }
 }
 
-allprojects {
+subprojects {
   repositories {
     mavenCentral()
     jcenter()
     google()
   }
+
+  tasks.withType(Test) {
+    testLogging {
+      events ""failed""
+      exceptionFormat ""full""
+      showExceptions true
+      showStackTraces true
+      showCauses true
+    }
+  }
 }",False,other
timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,9d75f81ca166ccc7421f20527d9b3932dac3c398,ccfddd1879e519f2b0bf9f88f44789a6857751d6,Update LintActivity,"@@ -14,16 +14,22 @@ public class LintActivity extends Activity {
   /**
    * Below are some examples of how NOT to use Timber.
    *
-   * Currently, locally-packaged lint checks don't work in Studio. As a workaround,
-   * you will need to run ""./gradlew :timber-sample:lint"" first, before Lint IDE
-   * highlighting will work.
-   *
-   * A future release will eliminate the 'command-line first' workaround.
+   * To see how a particular lint issue behaves, comment/remove its corresponding id from the set
+   * of SuppressLint ids below.
    */
+  @SuppressLint({
+      ""LogNotTimber"", //
+      ""StringFormatInTimber"", //
+      ""ThrowableNotAtBeginning"", //
+      ""BinaryOperationInTimber"", //
+      ""TimberArgCount"", //
+      ""TimberArgTypes"", //
+      ""TimberTagLength"", //
+      ""TimberExceptionLogging"" //
+  }) //
   @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
 
-    /*
     // LogNotTimber
     Log.d(""TAG"", ""msg"");
     Log.d(""TAG"", ""msg"", new Exception());
@@ -63,7 +69,6 @@ public class LintActivity extends Activity {
     Timber.d(new Exception(), new Exception().getMessage());
     Timber.d(new Exception(), """");
     Timber.d(new Exception(), null);
-    */
   }
 
   private String getString() {","@@ -14,16 +14,22 @@ public class LintActivity extends Activity {
   /**
    * Below are some examples of how NOT to use Timber.
    *
-   * Currently, locally-packaged lint checks don't work in Studio. As a workaround,
-   * you will need to run ""./gradlew :timber-sample:lint"" first, before Lint IDE
-   * highlighting will work.
-   *
-   * A future release will eliminate the 'command-line first' workaround.
+   * To see how a particular lint issue behaves, comment/remove its corresponding id from the set
+   * of SuppressLint ids below.
    */
+  @SuppressLint({
+      ""LogNotTimber"", //
+      ""StringFormatInTimber"", //
+      ""ThrowableNotAtBeginning"", //
+      ""BinaryOperationInTimber"", //
+      ""TimberArgCount"", //
+      ""TimberArgTypes"", //
+      ""TimberTagLength"", //
+      ""TimberExceptionLogging"" //
+  }) //
   @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
 
-    /*
     // LogNotTimber
     Log.d(""TAG"", ""msg"");
     Log.d(""TAG"", ""msg"", new Exception());
@@ -63,7 +69,6 @@ public class LintActivity extends Activity {
     Timber.d(new Exception(), new Exception().getMessage());
     Timber.d(new Exception(), """");
     Timber.d(new Exception(), null);
-    */
   }
 
   private String getString() {",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,3d62b0333cce140dbdd24fdb5823a38603cf10f4,9d75f81ca166ccc7421f20527d9b3932dac3c398,"Include single-arg exception log methods in TimberExceptionLogging check

Fixes #289","@@ -503,35 +503,51 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
   private void checkExceptionLogging(JavaContext context, UCallExpression call) {
     List<UExpression> arguments = call.getValueArguments();
+    int numArguments = arguments.size();
 
-    if (arguments.size() > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
-      UExpression arg2 = arguments.get(1);
-
-      if (arg2 instanceof UQualifiedReferenceExpression) {
-        UQualifiedReferenceExpression arg2Expression = (UQualifiedReferenceExpression) arg2;
-        UExpression selector = arg2Expression.getSelector();
-        // what other UExpressions could be a selector?
-        if (isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
-            ""java.lang.Throwable"")) {
-          LintFix fix = quickFixIssueExceptionLogging(arg2);
-          context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
-              ""Explicitly logging exception message is redundant"", fix);
-          return;
-        }
+    if (numArguments > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
+      UExpression messageArg = arguments.get(1);
+
+      if (isLoggingExceptionMessage(context, messageArg)) {
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
+            ""Explicitly logging exception message is redundant"",
+            quickFixRemoveRedundantArgument(messageArg));
+        return;
       }
 
-      String s = evaluateString(context, arg2, true);
-      if (s == null && isField(arg2)) {
+      String s = evaluateString(context, messageArg, true);
+      if (s == null && isField(messageArg)) {
         // Non-final fields can't be evaluated.
         return;
       }
 
       if (s == null || s.isEmpty()) {
-        LintFix fix = quickFixIssueExceptionLogging(arg2);
-        context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
+        LintFix fix = quickFixRemoveRedundantArgument(messageArg);
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
             ""Use single-argument log method instead of null/empty message"", fix);
       }
+    } else if (numArguments == 1 && !isSubclassOf(context, arguments.get(0), Throwable.class)) {
+      UExpression messageArg = arguments.get(0);
+
+      if (isLoggingExceptionMessage(context, messageArg)) {
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
+            ""Explicitly logging exception message is redundant"",
+            quickFixReplaceMessageWithThrowable(messageArg));
+      }
+    }
+  }
+
+  private boolean isLoggingExceptionMessage(JavaContext context, UExpression arg) {
+    if (!(arg instanceof UQualifiedReferenceExpression)) {
+      return false;
     }
+
+    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
+    UExpression selector = argExpression.getSelector();
+
+    // what other UExpressions could be a selector?
+    return isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
+        ""java.lang.Throwable"");
   }
 
   private static boolean isField(UExpression expression) {
@@ -680,14 +696,26 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         .build();
   }
 
-  private LintFix quickFixIssueExceptionLogging(UExpression arg2) {
+  private LintFix quickFixRemoveRedundantArgument(UExpression arg) {
     return fix().replace()
         .name(""Remove redundant argument"")
-        .text("", "" + arg2.asSourceString())
+        .text("", "" + arg.asSourceString())
         .with("""")
         .build();
   }
 
+  private LintFix quickFixReplaceMessageWithThrowable(UExpression arg) {
+    // guaranteed based on callers of this method
+    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
+    UExpression receiver = argExpression.getReceiver();
+
+    return fix().replace()
+        .name(""Replace message with throwable"")
+        .text(arg.asSourceString())
+        .with(receiver.asSourceString())
+        .build();
+  }
+
   static Issue[] getIssues() {
     return new Issue[] {
         ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,","@@ -503,35 +503,51 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
 
   private void checkExceptionLogging(JavaContext context, UCallExpression call) {
     List<UExpression> arguments = call.getValueArguments();
+    int numArguments = arguments.size();
 
-    if (arguments.size() > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
-      UExpression arg2 = arguments.get(1);
-
-      if (arg2 instanceof UQualifiedReferenceExpression) {
-        UQualifiedReferenceExpression arg2Expression = (UQualifiedReferenceExpression) arg2;
-        UExpression selector = arg2Expression.getSelector();
-        // what other UExpressions could be a selector?
-        if (isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
-            ""java.lang.Throwable"")) {
-          LintFix fix = quickFixIssueExceptionLogging(arg2);
-          context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
-              ""Explicitly logging exception message is redundant"", fix);
-          return;
-        }
+    if (numArguments > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
+      UExpression messageArg = arguments.get(1);
+
+      if (isLoggingExceptionMessage(context, messageArg)) {
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
+            ""Explicitly logging exception message is redundant"",
+            quickFixRemoveRedundantArgument(messageArg));
+        return;
       }
 
-      String s = evaluateString(context, arg2, true);
-      if (s == null && isField(arg2)) {
+      String s = evaluateString(context, messageArg, true);
+      if (s == null && isField(messageArg)) {
         // Non-final fields can't be evaluated.
         return;
       }
 
       if (s == null || s.isEmpty()) {
-        LintFix fix = quickFixIssueExceptionLogging(arg2);
-        context.report(ISSUE_EXCEPTION_LOGGING, arg2, context.getLocation(call),
+        LintFix fix = quickFixRemoveRedundantArgument(messageArg);
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
             ""Use single-argument log method instead of null/empty message"", fix);
       }
+    } else if (numArguments == 1 && !isSubclassOf(context, arguments.get(0), Throwable.class)) {
+      UExpression messageArg = arguments.get(0);
+
+      if (isLoggingExceptionMessage(context, messageArg)) {
+        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
+            ""Explicitly logging exception message is redundant"",
+            quickFixReplaceMessageWithThrowable(messageArg));
+      }
+    }
+  }
+
+  private boolean isLoggingExceptionMessage(JavaContext context, UExpression arg) {
+    if (!(arg instanceof UQualifiedReferenceExpression)) {
+      return false;
     }
+
+    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
+    UExpression selector = argExpression.getSelector();
+
+    // what other UExpressions could be a selector?
+    return isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
+        ""java.lang.Throwable"");
   }
 
   private static boolean isField(UExpression expression) {
@@ -680,14 +696,26 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         .build();
   }
 
-  private LintFix quickFixIssueExceptionLogging(UExpression arg2) {
+  private LintFix quickFixRemoveRedundantArgument(UExpression arg) {
     return fix().replace()
         .name(""Remove redundant argument"")
-        .text("", "" + arg2.asSourceString())
+        .text("", "" + arg.asSourceString())
         .with("""")
         .build();
   }
 
+  private LintFix quickFixReplaceMessageWithThrowable(UExpression arg) {
+    // guaranteed based on callers of this method
+    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
+    UExpression receiver = argExpression.getReceiver();
+
+    return fix().replace()
+        .name(""Replace message with throwable"")
+        .text(arg.asSourceString())
+        .with(receiver.asSourceString())
+        .build();
+  }
+
   static Issue[] getIssues() {
     return new Issue[] {
         ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,3d62b0333cce140dbdd24fdb5823a38603cf10f4,9d75f81ca166ccc7421f20527d9b3932dac3c398,"Include single-arg exception log methods in TimberExceptionLogging check

Fixes #289","@@ -636,6 +636,34 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingExceptionMessage() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e.getMessage());
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e.getMessage());
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace message with throwable:
+            |@@ -6 +6
+            |-      Timber.d(e.getMessage());
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingExceptionMessageArgument() {
     lint()
         .files(TIMBER_STUB,
             java(""""""","@@ -636,6 +636,34 @@ class WrongTimberUsageDetectorTest {
   }
 
   @Test fun exceptionLoggingUsingExceptionMessage() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |     Exception e = new Exception();
+                |     Timber.d(e.getMessage());
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e.getMessage());
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+        .expectFixDiffs(""""""
+            |Fix for src/foo/Example.java line 5: Replace message with throwable:
+            |@@ -6 +6
+            |-      Timber.d(e.getMessage());
+            |+      Timber.d(e);
+            |"""""".trimMargin())
+  }
+
+  @Test fun exceptionLoggingUsingExceptionMessageArgument() {
     lint()
         .files(TIMBER_STUB,
             java(""""""",False,test
timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,3d62b0333cce140dbdd24fdb5823a38603cf10f4,9d75f81ca166ccc7421f20527d9b3932dac3c398,"Include single-arg exception log methods in TimberExceptionLogging check

Fixes #289","@@ -69,6 +69,7 @@ public class LintActivity extends Activity {
     Timber.d(new Exception(), new Exception().getMessage());
     Timber.d(new Exception(), """");
     Timber.d(new Exception(), null);
+    Timber.d(new Exception().getMessage());
   }
 
   private String getString() {","@@ -69,6 +69,7 @@ public class LintActivity extends Activity {
     Timber.d(new Exception(), new Exception().getMessage());
     Timber.d(new Exception(), """");
     Timber.d(new Exception(), null);
+    Timber.d(new Exception().getMessage());
   }
 
   private String getString() {",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,88741fa503c31f9eac2f156fe40baeb129695ce2,3d62b0333cce140dbdd24fdb5823a38603cf10f4,"Fix false positives when evaluating parameters and methods

Fixes #270","@@ -15,10 +15,12 @@ import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
+import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiLiteralExpression;
 import com.intellij.psi.PsiMethod;
 import com.intellij.psi.PsiMethodCallExpression;
+import com.intellij.psi.PsiParameter;
 import com.intellij.psi.PsiType;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -32,6 +34,7 @@ import org.jetbrains.uast.UCallExpression;
 import org.jetbrains.uast.UElement;
 import org.jetbrains.uast.UExpression;
 import org.jetbrains.uast.UIfExpression;
+import org.jetbrains.uast.ULiteralExpression;
 import org.jetbrains.uast.UMethod;
 import org.jetbrains.uast.UQualifiedReferenceExpression;
 import org.jetbrains.uast.USimpleNameReferenceExpression;
@@ -516,8 +519,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
 
       String s = evaluateString(context, messageArg, true);
-      if (s == null && isField(messageArg)) {
-        // Non-final fields can't be evaluated.
+      if (s == null && !canEvaluateExpression(messageArg)) {
+        // Parameters and non-final fields can't be evaluated.
         return;
       }
 
@@ -550,9 +553,16 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         ""java.lang.Throwable"");
   }
 
-  private static boolean isField(UExpression expression) {
-    return expression instanceof USimpleNameReferenceExpression
-        && (((USimpleNameReferenceExpression) expression).resolve() instanceof PsiField);
+  private static boolean canEvaluateExpression(UExpression expression) {
+    // TODO - try using CallGraph?
+    if (expression instanceof ULiteralExpression) {
+      return true;
+    }
+    if (!(expression instanceof USimpleNameReferenceExpression)) {
+      return false;
+    }
+    PsiElement resolvedElement = ((USimpleNameReferenceExpression) expression).resolve();
+    return !(resolvedElement instanceof PsiField || resolvedElement instanceof PsiParameter);
   }
 
   private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,","@@ -15,10 +15,12 @@ import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.intellij.psi.PsiClass;
 import com.intellij.psi.PsiClassType;
+import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiLiteralExpression;
 import com.intellij.psi.PsiMethod;
 import com.intellij.psi.PsiMethodCallExpression;
+import com.intellij.psi.PsiParameter;
 import com.intellij.psi.PsiType;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -32,6 +34,7 @@ import org.jetbrains.uast.UCallExpression;
 import org.jetbrains.uast.UElement;
 import org.jetbrains.uast.UExpression;
 import org.jetbrains.uast.UIfExpression;
+import org.jetbrains.uast.ULiteralExpression;
 import org.jetbrains.uast.UMethod;
 import org.jetbrains.uast.UQualifiedReferenceExpression;
 import org.jetbrains.uast.USimpleNameReferenceExpression;
@@ -516,8 +519,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       }
 
       String s = evaluateString(context, messageArg, true);
-      if (s == null && isField(messageArg)) {
-        // Non-final fields can't be evaluated.
+      if (s == null && !canEvaluateExpression(messageArg)) {
+        // Parameters and non-final fields can't be evaluated.
         return;
       }
 
@@ -550,9 +553,16 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         ""java.lang.Throwable"");
   }
 
-  private static boolean isField(UExpression expression) {
-    return expression instanceof USimpleNameReferenceExpression
-        && (((USimpleNameReferenceExpression) expression).resolve() instanceof PsiField);
+  private static boolean canEvaluateExpression(UExpression expression) {
+    // TODO - try using CallGraph?
+    if (expression instanceof ULiteralExpression) {
+      return true;
+    }
+    if (!(expression instanceof USimpleNameReferenceExpression)) {
+      return false;
+    }
+    PsiElement resolvedElement = ((USimpleNameReferenceExpression) expression).resolve();
+    return !(resolvedElement instanceof PsiField || resolvedElement instanceof PsiParameter);
   }
 
   private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,88741fa503c31f9eac2f156fe40baeb129695ce2,3d62b0333cce140dbdd24fdb5823a38603cf10f4,"Fix false positives when evaluating parameters and methods

Fixes #270","@@ -710,6 +710,43 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
+  @Test fun exceptionLoggingUsingParameter() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log(Exception e, String message) {
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingMethod() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log(Exception e) {
+                |    Timber.d(e, method());
+                |  }
+                |  private String method() {
+                |    return ""foo"";
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expectClean()
+  }
+
   @Test fun exceptionLoggingUsingNonFinalField() {
     lint()
         .files(TIMBER_STUB,","@@ -710,6 +710,43 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
+  @Test fun exceptionLoggingUsingParameter() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log(Exception e, String message) {
+                |     Timber.d(e, message);
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expectClean()
+  }
+
+  @Test fun exceptionLoggingUsingMethod() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log(Exception e) {
+                |    Timber.d(e, method());
+                |  }
+                |  private String method() {
+                |    return ""foo"";
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expectClean()
+  }
+
   @Test fun exceptionLoggingUsingNonFinalField() {
     lint()
         .files(TIMBER_STUB,",False,test
timber/build.gradle,timber/build.gradle,253d90b0713a5778a4b2340e3902ec3b86e1e9c8,8ca30dbea6dabbade1f90ea9564c1d00c8a31f08,"Change annotations from a compileOnly to an implementation dependency.

We can't assume that dependent projects will have jetbrains annotations
in the classpath.

This is causing problems like #295.","@@ -37,7 +37,7 @@ android {
 }
 
 dependencies {
-  compileOnly deps.annotations
+  implementation deps.annotations
 
   testImplementation deps.annotations
   testImplementation deps.junit","@@ -37,7 +37,7 @@ android {
 }
 
 dependencies {
-  compileOnly deps.annotations
+  implementation deps.annotations
 
   testImplementation deps.annotations
   testImplementation deps.junit",False,other
build.gradle,build.gradle,a0081c6d392636c0b076d45e0b815eef35fc866d,8ca30dbea6dabbade1f90ea9564c1d00c8a31f08,Bump to AGP 3.1 Final,"@@ -5,10 +5,10 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 27,
 
-      'kotlin': '1.2.21',
+      'kotlin': '1.2.31',
 
-      'androidPlugin': '3.1.0-beta4',
-      'androidTools': '26.1.0-beta4',
+      'androidPlugin': '3.1.0',
+      'androidTools': '26.1.0',
 
       'butterknife': '8.8.1',
   ]
@@ -26,11 +26,11 @@ buildscript {
           'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
           'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
       ],
-      annotations: 'org.jetbrains:annotations:15.0',
+      annotations: 'org.jetbrains:annotations:16.0.1',
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.39',
-      robolectric: 'org.robolectric:robolectric:3.7.1',
+      robolectric: 'org.robolectric:robolectric:3.8',
   ]
 
   repositories {","@@ -5,10 +5,10 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 27,
 
-      'kotlin': '1.2.21',
+      'kotlin': '1.2.31',
 
-      'androidPlugin': '3.1.0-beta4',
-      'androidTools': '26.1.0-beta4',
+      'androidPlugin': '3.1.0',
+      'androidTools': '26.1.0',
 
       'butterknife': '8.8.1',
   ]
@@ -26,11 +26,11 @@ buildscript {
           'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
           'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
       ],
-      annotations: 'org.jetbrains:annotations:15.0',
+      annotations: 'org.jetbrains:annotations:16.0.1',
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.39',
-      robolectric: 'org.robolectric:robolectric:3.7.1',
+      robolectric: 'org.robolectric:robolectric:3.8',
   ]
 
   repositories {",False,other
CHANGELOG.md,CHANGELOG.md,f452f121d4615f74d3242a13116b79d7081ac207,28aa40af827686bb5d4b8c481d582e9e3a04a7f9,Prepare version 4.7.1.,"@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 4.7.0 *(2018-03-27)*
+----------------------------
+
+ * Fix: Support lint version 26.1.0.
+ * Fix: Check single-argument log method in TimberExceptionLogging.
+
+
 Version 4.6.1 *(2018-02-12)*
 ----------------------------","@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 4.7.0 *(2018-03-27)*
+----------------------------
+
+ * Fix: Support lint version 26.1.0.
+ * Fix: Check single-argument log method in TimberExceptionLogging.
+
+
 Version 4.6.1 *(2018-02-12)*
 ----------------------------",False,other
README.md,README.md,f452f121d4615f74d3242a13116b79d7081ac207,28aa40af827686bb5d4b8c481d582e9e3a04a7f9,Prepare version 4.7.1.,"@@ -83,7 +83,7 @@ Download
 --------
 
 ```groovy
-implementation 'com.jakewharton.timber:timber:4.6.1'
+implementation 'com.jakewharton.timber:timber:4.7.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -83,7 +83,7 @@ Download
 --------
 
 ```groovy
-implementation 'com.jakewharton.timber:timber:4.6.1'
+implementation 'com.jakewharton.timber:timber:4.7.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,f452f121d4615f74d3242a13116b79d7081ac207,28aa40af827686bb5d4b8c481d582e9e3a04a7f9,Prepare version 4.7.1.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.6.2-SNAPSHOT
+VERSION_NAME=4.7.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.6.2-SNAPSHOT
+VERSION_NAME=4.7.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,3fc01a4e317b73c1e5c1c932a0d8e1568693a1e5,f452f121d4615f74d3242a13116b79d7081ac207,Prepare next development version.,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.7.0
+VERSION_NAME=4.7.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.7.0
+VERSION_NAME=4.7.1-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
build.gradle,build.gradle,14b1cdf640556dcbb5d060b7bfe9a101d21bf328,3fc01a4e317b73c1e5c1c932a0d8e1568693a1e5,Bump deps,"@@ -7,8 +7,8 @@ buildscript {
 
       'kotlin': '1.2.31',
 
-      'androidPlugin': '3.1.0',
-      'androidTools': '26.1.0',
+      'androidPlugin': '3.1.1',
+      'androidTools': '26.1.1',
 
       'butterknife': '8.8.1',
   ]
@@ -29,7 +29,7 @@ buildscript {
       annotations: 'org.jetbrains:annotations:16.0.1',
 
       junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.39',
+      truth: 'com.google.truth:truth:0.40',
       robolectric: 'org.robolectric:robolectric:3.8',
   ]","@@ -7,8 +7,8 @@ buildscript {
 
       'kotlin': '1.2.31',
 
-      'androidPlugin': '3.1.0',
-      'androidTools': '26.1.0',
+      'androidPlugin': '3.1.1',
+      'androidTools': '26.1.1',
 
       'butterknife': '8.8.1',
   ]
@@ -29,7 +29,7 @@ buildscript {
       annotations: 'org.jetbrains:annotations:16.0.1',
 
       junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.39',
+      truth: 'com.google.truth:truth:0.40',
       robolectric: 'org.robolectric:robolectric:3.8',
   ]",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,e4a44f0ce314c880821faec9b81a36a14e375253,3fc01a4e317b73c1e5c1c932a0d8e1568693a1e5,"Add Kotlin support for the 'Remove redundant argument' check.

In Java, only evaluate UCallExpression when looking for `getMessage` calls.
This fixes a lint crash when a selector other than `UCallExpression` is present.","@@ -546,11 +546,21 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
 
     UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
+    PsiElement psi = argExpression.getPsi();
+
+    if (psi != null && LintUtils.isKotlin(psi.getLanguage())) {
+      return isPropertyOnSubclassOf(context, argExpression, ""message"", Throwable.class);
+    }
+
     UExpression selector = argExpression.getSelector();
 
     // what other UExpressions could be a selector?
+    if (!(selector instanceof UCallExpression)) {
+      return false;
+    }
+
     return isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
-        ""java.lang.Throwable"");
+            Throwable.class);
   }
 
   private static boolean canEvaluateExpression(UExpression expression) {
@@ -566,12 +576,18 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   }
 
   private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,
-      String methodName, String className) {
+      String methodName, Class classType) {
     JavaEvaluator evaluator = context.getEvaluator();
     PsiMethod method = call.resolve();
     return method != null //
         && methodName.equals(call.getMethodName()) //
-        && evaluator.isMemberInSubClassOf(method, className, false);
+        && evaluator.isMemberInSubClassOf(method, classType.getCanonicalName(), false);
+  }
+
+  private static boolean isPropertyOnSubclassOf(JavaContext context,
+          UQualifiedReferenceExpression expression, String propertyName, Class classType) {
+    return isSubclassOf(context, expression.getReceiver(), classType)
+            && expression.getSelector().asSourceString().equals(propertyName);
   }
 
   private boolean checkElement(JavaContext context, UCallExpression call, UElement element) {","@@ -546,11 +546,21 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
 
     UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
+    PsiElement psi = argExpression.getPsi();
+
+    if (psi != null && LintUtils.isKotlin(psi.getLanguage())) {
+      return isPropertyOnSubclassOf(context, argExpression, ""message"", Throwable.class);
+    }
+
     UExpression selector = argExpression.getSelector();
 
     // what other UExpressions could be a selector?
+    if (!(selector instanceof UCallExpression)) {
+      return false;
+    }
+
     return isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
-        ""java.lang.Throwable"");
+            Throwable.class);
   }
 
   private static boolean canEvaluateExpression(UExpression expression) {
@@ -566,12 +576,18 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   }
 
   private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,
-      String methodName, String className) {
+      String methodName, Class classType) {
     JavaEvaluator evaluator = context.getEvaluator();
     PsiMethod method = call.resolve();
     return method != null //
         && methodName.equals(call.getMethodName()) //
-        && evaluator.isMemberInSubClassOf(method, className, false);
+        && evaluator.isMemberInSubClassOf(method, classType.getCanonicalName(), false);
+  }
+
+  private static boolean isPropertyOnSubclassOf(JavaContext context,
+          UQualifiedReferenceExpression expression, String propertyName, Class classType) {
+    return isSubclassOf(context, expression.getReceiver(), classType)
+            && expression.getSelector().asSourceString().equals(propertyName);
   }
 
   private boolean checkElement(JavaContext context, UCallExpression call, UElement element) {",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,e4a44f0ce314c880821faec9b81a36a14e375253,3fc01a4e317b73c1e5c1c932a0d8e1568693a1e5,"Add Kotlin support for the 'Remove redundant argument' check.

In Java, only evaluate UCallExpression when looking for `getMessage` calls.
This fixes a lint crash when a selector other than `UCallExpression` is present.","@@ -1,6 +1,7 @@
 package timber.lint
 
 import com.android.tools.lint.checks.infrastructure.TestFiles.java
+import com.android.tools.lint.checks.infrastructure.TestFiles.kt
 import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
 import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
 import org.junit.Test
@@ -289,7 +290,6 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
-
   @Test fun throwableNotAtBeginning() {
     lint()
         .files(TIMBER_STUB,
@@ -691,6 +691,34 @@ class WrongTimberUsageDetectorTest {
             |"""""".trimMargin())
   }
 
+  @Test fun exceptionLoggingUsingExceptionMessageArgumentInKotlin() {
+    lint()
+        .files(TIMBER_STUB,
+            kt(""""""
+              |package foo
+              |import timber.log.Timber
+              |class Example {
+              |  fun log() {
+              |     val e = Exception()
+              |     Timber.d(e, e.message)
+              |  }
+              |}
+              """""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.kt:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e, e.message)
+            |     ~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+              .expectFixDiffs(""""""
+            |Fix for src/foo/Example.kt line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, e.message)
+            |+      Timber.d(e)
+            |"""""".trimMargin())
+  }
+
   @Test fun exceptionLoggingUsingVariable() {
     lint()
         .files(TIMBER_STUB,
@@ -891,4 +919,25 @@ class WrongTimberUsageDetectorTest {
         .run()
         .expectClean()
   }
+
+  @Test fun memberVariable() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public static class Bar {
+                |    public static String baz = ""timber"";
+                |  }
+                |  public void log() {
+                |    Bar bar = new Bar();
+                |    Timber.d(bar.baz);
+                |  }
+                |}
+                """""".trimMargin()))
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
+        .expectClean()
+  }
 }","@@ -1,6 +1,7 @@
 package timber.lint
 
 import com.android.tools.lint.checks.infrastructure.TestFiles.java
+import com.android.tools.lint.checks.infrastructure.TestFiles.kt
 import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
 import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
 import org.junit.Test
@@ -289,7 +290,6 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
-
   @Test fun throwableNotAtBeginning() {
     lint()
         .files(TIMBER_STUB,
@@ -691,6 +691,34 @@ class WrongTimberUsageDetectorTest {
             |"""""".trimMargin())
   }
 
+  @Test fun exceptionLoggingUsingExceptionMessageArgumentInKotlin() {
+    lint()
+        .files(TIMBER_STUB,
+            kt(""""""
+              |package foo
+              |import timber.log.Timber
+              |class Example {
+              |  fun log() {
+              |     val e = Exception()
+              |     Timber.d(e, e.message)
+              |  }
+              |}
+              """""".trimMargin()))
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .run()
+        .expect(""""""
+            |src/foo/Example.kt:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e, e.message)
+            |     ~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 1 warnings"""""".trimMargin())
+              .expectFixDiffs(""""""
+            |Fix for src/foo/Example.kt line 5: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, e.message)
+            |+      Timber.d(e)
+            |"""""".trimMargin())
+  }
+
   @Test fun exceptionLoggingUsingVariable() {
     lint()
         .files(TIMBER_STUB,
@@ -891,4 +919,25 @@ class WrongTimberUsageDetectorTest {
         .run()
         .expectClean()
   }
+
+  @Test fun memberVariable() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public static class Bar {
+                |    public static String baz = ""timber"";
+                |  }
+                |  public void log() {
+                |    Bar bar = new Bar();
+                |    Timber.d(bar.baz);
+                |  }
+                |}
+                """""".trimMargin()))
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
+        .expectClean()
+  }
 }",False,test
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,d8ddad657644663897b746866900100a06cf821f,e057bfee89f77d3b523af8f55a8c76043498180b,Fix ignored test by using INFO log instead of DEBUG log,"@@ -224,7 +224,6 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
-  @Ignore(""Currently failing because wasn't actually asserting before"")
   @Test public void debugTreeGeneratedTagIsLoggable() {
     Timber.plant(new Timber.DebugTree() {
       private static final int MAX_TAG_LENGTH = 23;
@@ -243,12 +242,12 @@ public class TimberTest {
     });
     class ClassNameThatIsReallyReallyReallyLong {
       {
-        Timber.d(""Hello, world!"");
+        Timber.i(""Hello, world!"");
       }
     }
     new ClassNameThatIsReallyReallyReallyLong();
     assertLog()
-        .hasDebugMessage(""TimberTest$1ClassNameTh"", ""Hello, world!"")
+        .hasInfoMessage(""TimberTest$1ClassNameTh"", ""Hello, world!"")
         .hasNoMoreMessages();
   }","@@ -224,7 +224,6 @@ public class TimberTest {
         .hasNoMoreMessages();
   }
 
-  @Ignore(""Currently failing because wasn't actually asserting before"")
   @Test public void debugTreeGeneratedTagIsLoggable() {
     Timber.plant(new Timber.DebugTree() {
       private static final int MAX_TAG_LENGTH = 23;
@@ -243,12 +242,12 @@ public class TimberTest {
     });
     class ClassNameThatIsReallyReallyReallyLong {
       {
-        Timber.d(""Hello, world!"");
+        Timber.i(""Hello, world!"");
       }
     }
     new ClassNameThatIsReallyReallyReallyLong();
     assertLog()
-        .hasDebugMessage(""TimberTest$1ClassNameTh"", ""Hello, world!"")
+        .hasInfoMessage(""TimberTest$1ClassNameTh"", ""Hello, world!"")
         .hasNoMoreMessages();
   }",False,test
.gitignore,.gitignore,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -1,25 +1,13 @@
-.classpath
-.project
-.settings
-eclipsebin
-
-bin
-gen
-build
-out
-lib
-
+# IntelliJ
 .idea
 *.iml
 classes
 
-obj
-
-.DS_Store
-
 # Gradle
 .gradle
-jniLibs
 build
 local.properties
 reports
+
+# Node
+node_modules","@@ -1,25 +1,13 @@
-.classpath
-.project
-.settings
-eclipsebin
-
-bin
-gen
-build
-out
-lib
-
+# IntelliJ
 .idea
 *.iml
 classes
 
-obj
-
-.DS_Store
-
 # Gradle
 .gradle
-jniLibs
 build
 local.properties
 reports
+
+# Node
+node_modules",False,other
,android/build.gradle,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,33 @@
+apply plugin: 'com.android.library'
+apply plugin: 'org.jetbrains.kotlin.android'
+
+archivesBaseName = 'timber-android'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  defaultConfig {
+    minSdkVersion versions.minSdk
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    lintConfig rootProject.file('lint.xml')
+
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble task.
+    checkReleaseBuilds false
+  }
+
+  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
+  libraryVariants.all {
+    it.generateBuildConfig.enabled = false
+  }
+}
+
+dependencies {
+  api project(':jdk')
+//  lintChecks project(':android-lint')
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -0,0 +1,33 @@
+apply plugin: 'com.android.library'
+apply plugin: 'org.jetbrains.kotlin.android'
+
+archivesBaseName = 'timber-android'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  defaultConfig {
+    minSdkVersion versions.minSdk
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    lintConfig rootProject.file('lint.xml')
+
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble task.
+    checkReleaseBuilds false
+  }
+
+  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
+  libraryVariants.all {
+    it.generateBuildConfig.enabled = false
+  }
+}
+
+dependencies {
+  api project(':jdk')
+//  lintChecks project(':android-lint')
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
,android/gradle.properties,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=timber-android
+POM_NAME=Timber (Android)
+POM_PACKAGING=aar","@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=timber-android
+POM_NAME=Timber (Android)
+POM_PACKAGING=aar",False,other
,android/src/main/AndroidManifest.xml,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,2 @@
+<!-- TODO rename to 'timber' once https://issuetracker.google.com/issues/73450622 is fixed -->
+<manifest package=""timber.log""/>","@@ -0,0 +1,2 @@
+<!-- TODO rename to 'timber' once https://issuetracker.google.com/issues/73450622 is fixed -->
+<manifest package=""timber.log""/>",False,source
build.gradle,build.gradle,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -5,17 +5,29 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 27,
 
-      'kotlin': '1.2.31',
+      'kotlin': '1.2.41',
 
-      'androidPlugin': '3.1.1',
-      'androidTools': '26.1.1',
+      'androidPlugin': '3.1.2',
+      'androidTools': '26.1.2',
 
       'butterknife': '8.8.1',
   ]
 
   ext.deps = [
       androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
-      kotlinPlugin: ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
+      'kotlin': [
+          'stdlib': [
+              'common': ""org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}"",
+              'jdk': ""org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"",
+              'js': ""org.jetbrains.kotlin:kotlin-stdlib-js:${versions.kotlin}"",
+          ],
+          'test': [
+              'common': ""org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}"",
+              'annotations': ""org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}"",
+              'jdk': ""org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"",
+              'js': ""org.jetbrains.kotlin:kotlin-test-js:${versions.kotlin}"",
+          ],
+      ],
       'butterknife': [
           'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
           'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
@@ -36,12 +48,14 @@ buildscript {
   repositories {
     jcenter()
     google()
+    gradlePluginPortal()
   }
 
   dependencies {
     classpath deps.androidPlugin
-    classpath deps.kotlinPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
+    classpath ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}""
+    classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
   }
 }","@@ -5,17 +5,29 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 27,
 
-      'kotlin': '1.2.31',
+      'kotlin': '1.2.41',
 
-      'androidPlugin': '3.1.1',
-      'androidTools': '26.1.1',
+      'androidPlugin': '3.1.2',
+      'androidTools': '26.1.2',
 
       'butterknife': '8.8.1',
   ]
 
   ext.deps = [
       androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
-      kotlinPlugin: ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
+      'kotlin': [
+          'stdlib': [
+              'common': ""org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}"",
+              'jdk': ""org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"",
+              'js': ""org.jetbrains.kotlin:kotlin-stdlib-js:${versions.kotlin}"",
+          ],
+          'test': [
+              'common': ""org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}"",
+              'annotations': ""org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}"",
+              'jdk': ""org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"",
+              'js': ""org.jetbrains.kotlin:kotlin-test-js:${versions.kotlin}"",
+          ],
+      ],
       'butterknife': [
           'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
           'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
@@ -36,12 +48,14 @@ buildscript {
   repositories {
     jcenter()
     google()
+    gradlePluginPortal()
   }
 
   dependencies {
     classpath deps.androidPlugin
-    classpath deps.kotlinPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
+    classpath ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}""
+    classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
   }
 }",False,other
,common/build.gradle,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,11 @@
+apply plugin: 'org.jetbrains.kotlin.platform.common'
+
+archivesBaseName = 'timber-common'
+
+dependencies {
+  implementation deps.kotlin.stdlib.common
+  testImplementation deps.kotlin.test.common
+  testImplementation deps.kotlin.test.annotations
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -0,0 +1,11 @@
+apply plugin: 'org.jetbrains.kotlin.platform.common'
+
+archivesBaseName = 'timber-common'
+
+dependencies {
+  implementation deps.kotlin.stdlib.common
+  testImplementation deps.kotlin.test.common
+  testImplementation deps.kotlin.test.annotations
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
,common/gradle.properties,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=timber-common
+POM_NAME=Timber (Common)
+POM_PACKAGING=jar","@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=timber-common
+POM_NAME=Timber (Common)
+POM_PACKAGING=jar",False,other
,common/src/main/kotlin/timber/log/Timber.kt,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,107 @@
+package timber.log
+
+object Timber {
+  private val forestList = mutableListOf<Tree>()
+  private var forestArray: Array<Tree> = emptyArray()
+
+  val trees get() = forestArray.toList()
+
+  val size get() = forestArray.size
+
+  fun uprootAll() {
+    synchronized(forestList) {
+      forestList.clear()
+      forestArray = emptyArray()
+    }
+  }
+
+  fun uproot(tree: Tree) {
+    synchronized(forestList) {
+      require(forestList.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
+      forestArray = forestList.toTypedArray()
+    }
+  }
+
+  fun plant(tree: Tree) {
+    synchronized(forestList) {
+      forestList.add(tree)
+      forestArray = forestList.toTypedArray()
+    }
+  }
+
+  fun plant(vararg trees: Tree) {
+    synchronized(forestList) {
+      forestList.addAll(trees)
+      forestArray = forestList.toTypedArray()
+    }
+  }
+
+  fun plantAll(trees: Iterable<Tree>) {
+    synchronized(forestList) {
+      forestList.addAll(trees)
+      forestArray = forestList.toTypedArray()
+    }
+  }
+
+  fun isLoggable(priority: Int, tag: String? = null) = forestArray.any { it.isLoggable(priority, tag) }
+
+  fun log(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    forestArray.forEach { it.log(priority, tag, throwable, message) }
+  }
+
+  /** Invoked only when [isLoggable] has returned true. */
+  @PublishedApi
+  internal fun rawLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    forestArray.forEach { it.rawLog(priority, tag, throwable, message) }
+  }
+
+  fun tagged(tag: String): Tree {
+    val taggedTag = tag
+    return object : Tree() {
+      override fun isLoggable(priority: Int, tag: String?): Boolean {
+        return Timber.isLoggable(priority, tag ?: taggedTag)
+      }
+
+      override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+        Timber.log(priority, tag ?: taggedTag, throwable, message)
+      }
+    }
+  }
+
+  const val VERBOSE = 2
+  const val DEBUG = 3
+  const val INFO = 4
+  const val WARNING = 5
+  const val ERROR = 6
+  const val ASSERT = 7
+}
+
+inline fun Timber.log(priority: Int, throwable: Throwable? = null, message: () -> String) {
+  if (isLoggable(priority, null)) {
+    rawLog(priority, null, throwable, message())
+  }
+}
+
+inline fun Timber.assert(throwable: Throwable? = null, message: () -> String) {
+  log(ASSERT, throwable, message)
+}
+
+inline fun Timber.error(throwable: Throwable? = null, message: () -> String) {
+  log(ERROR, throwable, message)
+}
+
+inline fun Timber.warn(throwable: Throwable? = null, message: () -> String) {
+  log(WARNING, throwable, message)
+}
+
+inline fun Timber.info(throwable: Throwable? = null, message: () -> String) {
+  log(INFO, throwable, message)
+}
+
+inline fun Timber.debug(throwable: Throwable? = null, message: () -> String) {
+  log(DEBUG, throwable, message)
+}
+
+inline fun Timber.verbose(throwable: Throwable? = null, message: () -> String) {
+  log(VERBOSE, throwable, message)
+}","@@ -0,0 +1,107 @@
+package timber.log
+
+object Timber {
+  private val forestList = mutableListOf<Tree>()
+  private var forestArray: Array<Tree> = emptyArray()
+
+  val trees get() = forestArray.toList()
+
+  val size get() = forestArray.size
+
+  fun uprootAll() {
+    synchronized(forestList) {
+      forestList.clear()
+      forestArray = emptyArray()
+    }
+  }
+
+  fun uproot(tree: Tree) {
+    synchronized(forestList) {
+      require(forestList.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
+      forestArray = forestList.toTypedArray()
+    }
+  }
+
+  fun plant(tree: Tree) {
+    synchronized(forestList) {
+      forestList.add(tree)
+      forestArray = forestList.toTypedArray()
+    }
+  }
+
+  fun plant(vararg trees: Tree) {
+    synchronized(forestList) {
+      forestList.addAll(trees)
+      forestArray = forestList.toTypedArray()
+    }
+  }
+
+  fun plantAll(trees: Iterable<Tree>) {
+    synchronized(forestList) {
+      forestList.addAll(trees)
+      forestArray = forestList.toTypedArray()
+    }
+  }
+
+  fun isLoggable(priority: Int, tag: String? = null) = forestArray.any { it.isLoggable(priority, tag) }
+
+  fun log(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    forestArray.forEach { it.log(priority, tag, throwable, message) }
+  }
+
+  /** Invoked only when [isLoggable] has returned true. */
+  @PublishedApi
+  internal fun rawLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    forestArray.forEach { it.rawLog(priority, tag, throwable, message) }
+  }
+
+  fun tagged(tag: String): Tree {
+    val taggedTag = tag
+    return object : Tree() {
+      override fun isLoggable(priority: Int, tag: String?): Boolean {
+        return Timber.isLoggable(priority, tag ?: taggedTag)
+      }
+
+      override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+        Timber.log(priority, tag ?: taggedTag, throwable, message)
+      }
+    }
+  }
+
+  const val VERBOSE = 2
+  const val DEBUG = 3
+  const val INFO = 4
+  const val WARNING = 5
+  const val ERROR = 6
+  const val ASSERT = 7
+}
+
+inline fun Timber.log(priority: Int, throwable: Throwable? = null, message: () -> String) {
+  if (isLoggable(priority, null)) {
+    rawLog(priority, null, throwable, message())
+  }
+}
+
+inline fun Timber.assert(throwable: Throwable? = null, message: () -> String) {
+  log(ASSERT, throwable, message)
+}
+
+inline fun Timber.error(throwable: Throwable? = null, message: () -> String) {
+  log(ERROR, throwable, message)
+}
+
+inline fun Timber.warn(throwable: Throwable? = null, message: () -> String) {
+  log(WARNING, throwable, message)
+}
+
+inline fun Timber.info(throwable: Throwable? = null, message: () -> String) {
+  log(INFO, throwable, message)
+}
+
+inline fun Timber.debug(throwable: Throwable? = null, message: () -> String) {
+  log(DEBUG, throwable, message)
+}
+
+inline fun Timber.verbose(throwable: Throwable? = null, message: () -> String) {
+  log(VERBOSE, throwable, message)
+}",False,source
,common/src/main/kotlin/timber/log/Tree.kt,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,61 @@
+package timber.log
+
+import timber.log.Timber.ASSERT
+import timber.log.Timber.DEBUG
+import timber.log.Timber.ERROR
+import timber.log.Timber.INFO
+import timber.log.Timber.VERBOSE
+import timber.log.Timber.WARNING
+
+abstract class Tree {
+  /**
+   * Returns true when [priority] will be logged. Behavior is undefined for values other than
+   * [Timber.ASSERT], [Timber.ERROR], [Timber.WARNING], [Timber.INFO], [Timber.DEBUG], and
+   * [Timber.VERBOSE].
+   */
+  open fun isLoggable(priority: Int, tag: String? = null) = true
+
+  fun log(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    if (isLoggable(priority, tag)) {
+      performLog(priority, tag, throwable, message)
+    }
+  }
+
+  /** Invoked only when [isLoggable] has returned true. */
+  @PublishedApi
+  internal fun rawLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    performLog(priority, tag, throwable, message)
+  }
+
+  protected abstract fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?)
+}
+
+inline fun Tree.log(priority: Int, throwable: Throwable? = null, message: () -> String) {
+  if (isLoggable(priority, null)) {
+    rawLog(priority, null, throwable, message())
+  }
+}
+
+inline fun Tree.assert(throwable: Throwable? = null, message: () -> String) {
+  log(ASSERT, throwable, message)
+}
+
+inline fun Tree.error(throwable: Throwable? = null, message: () -> String) {
+  log(ERROR, throwable, message)
+}
+
+inline fun Tree.warn(throwable: Throwable? = null, message: () -> String) {
+  log(WARNING, throwable, message)
+}
+
+inline fun Tree.info(throwable: Throwable? = null, message: () -> String) {
+  log(INFO, throwable, message)
+}
+
+inline fun Tree.debug(throwable: Throwable? = null, message: () -> String) {
+  log(DEBUG, throwable, message)
+}
+
+inline fun Tree.verbose(throwable: Throwable? = null, message: () -> String) {
+  log(VERBOSE, throwable, message)
+}","@@ -0,0 +1,61 @@
+package timber.log
+
+import timber.log.Timber.ASSERT
+import timber.log.Timber.DEBUG
+import timber.log.Timber.ERROR
+import timber.log.Timber.INFO
+import timber.log.Timber.VERBOSE
+import timber.log.Timber.WARNING
+
+abstract class Tree {
+  /**
+   * Returns true when [priority] will be logged. Behavior is undefined for values other than
+   * [Timber.ASSERT], [Timber.ERROR], [Timber.WARNING], [Timber.INFO], [Timber.DEBUG], and
+   * [Timber.VERBOSE].
+   */
+  open fun isLoggable(priority: Int, tag: String? = null) = true
+
+  fun log(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    if (isLoggable(priority, tag)) {
+      performLog(priority, tag, throwable, message)
+    }
+  }
+
+  /** Invoked only when [isLoggable] has returned true. */
+  @PublishedApi
+  internal fun rawLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    performLog(priority, tag, throwable, message)
+  }
+
+  protected abstract fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?)
+}
+
+inline fun Tree.log(priority: Int, throwable: Throwable? = null, message: () -> String) {
+  if (isLoggable(priority, null)) {
+    rawLog(priority, null, throwable, message())
+  }
+}
+
+inline fun Tree.assert(throwable: Throwable? = null, message: () -> String) {
+  log(ASSERT, throwable, message)
+}
+
+inline fun Tree.error(throwable: Throwable? = null, message: () -> String) {
+  log(ERROR, throwable, message)
+}
+
+inline fun Tree.warn(throwable: Throwable? = null, message: () -> String) {
+  log(WARNING, throwable, message)
+}
+
+inline fun Tree.info(throwable: Throwable? = null, message: () -> String) {
+  log(INFO, throwable, message)
+}
+
+inline fun Tree.debug(throwable: Throwable? = null, message: () -> String) {
+  log(DEBUG, throwable, message)
+}
+
+inline fun Tree.verbose(throwable: Throwable? = null, message: () -> String) {
+  log(VERBOSE, throwable, message)
+}",False,source
,common/src/test/kotlin/timber/log/ListTree.kt,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,54 @@
+package timber.log
+
+class ListTree(allowedLevel: Int = Timber.VERBOSE, allowedTags: Set<String> = setOf()) : Tree() {
+  val allowedTags = allowedTags.toMutableSet()
+  var allowedLevel = allowedLevel
+    set(value) {
+      when (value) {
+        Timber.VERBOSE, Timber.DEBUG, Timber.INFO, Timber.WARNING, Timber.ERROR, Timber.ASSERT -> {
+          field = value
+        }
+        else -> throw IllegalArgumentException(""Unknown log level: $value"")
+      }
+    }
+
+  private val _messages = mutableListOf<String>()
+  val messages get() = _messages
+
+  override fun isLoggable(priority: Int, tag: String?): Boolean {
+    return priority <= allowedLevel && (allowedTags.isEmpty() || allowedTags.contains(tag))
+  }
+
+  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    if (isLoggable(priority, tag)) {
+      _messages.add(buildString {
+        append(priority.toPriorityString())
+        if (tag != null) {
+          append(' ')
+          append(tag)
+        }
+        if (message != null) {
+          append(' ' )
+          append(message)
+        }
+        if (throwable != null) {
+          append("" ["")
+          append(throwable::class)
+          append("": "")
+          append(throwable.message)
+          append(']')
+        }
+      })
+    }
+  }
+
+  private fun Int.toPriorityString() = when(this) {
+    Timber.VERBOSE -> ""VERBOSE""
+    Timber.DEBUG -> ""DEBUG""
+    Timber.INFO -> ""INFO""
+    Timber.WARNING -> ""WARNING""
+    Timber.ERROR -> ""ERROR""
+    Timber.ASSERT -> ""ASSERT""
+    else -> throw IllegalArgumentException(""Unknown priority: $this"")
+  }
+}","@@ -0,0 +1,54 @@
+package timber.log
+
+class ListTree(allowedLevel: Int = Timber.VERBOSE, allowedTags: Set<String> = setOf()) : Tree() {
+  val allowedTags = allowedTags.toMutableSet()
+  var allowedLevel = allowedLevel
+    set(value) {
+      when (value) {
+        Timber.VERBOSE, Timber.DEBUG, Timber.INFO, Timber.WARNING, Timber.ERROR, Timber.ASSERT -> {
+          field = value
+        }
+        else -> throw IllegalArgumentException(""Unknown log level: $value"")
+      }
+    }
+
+  private val _messages = mutableListOf<String>()
+  val messages get() = _messages
+
+  override fun isLoggable(priority: Int, tag: String?): Boolean {
+    return priority <= allowedLevel && (allowedTags.isEmpty() || allowedTags.contains(tag))
+  }
+
+  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    if (isLoggable(priority, tag)) {
+      _messages.add(buildString {
+        append(priority.toPriorityString())
+        if (tag != null) {
+          append(' ')
+          append(tag)
+        }
+        if (message != null) {
+          append(' ' )
+          append(message)
+        }
+        if (throwable != null) {
+          append("" ["")
+          append(throwable::class)
+          append("": "")
+          append(throwable.message)
+          append(']')
+        }
+      })
+    }
+  }
+
+  private fun Int.toPriorityString() = when(this) {
+    Timber.VERBOSE -> ""VERBOSE""
+    Timber.DEBUG -> ""DEBUG""
+    Timber.INFO -> ""INFO""
+    Timber.WARNING -> ""WARNING""
+    Timber.ERROR -> ""ERROR""
+    Timber.ASSERT -> ""ASSERT""
+    else -> throw IllegalArgumentException(""Unknown priority: $this"")
+  }
+}",False,test
,common/src/test/kotlin/timber/log/TimberTest.kt,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,60 @@
+package timber.log
+
+import kotlin.test.AfterTest
+import kotlin.test.BeforeTest
+import kotlin.test.Test
+import kotlin.test.assertEquals
+import kotlin.test.assertFailsWith
+
+class TimberTest {
+  @BeforeTest @AfterTest fun after() {
+    Timber.uprootAll()
+  }
+
+  @Test fun size() {
+    assertEquals(0, Timber.size)
+
+    for (i in 1..50) {
+      Timber.plant(ListTree())
+      assertEquals(i, Timber.size)
+    }
+
+    assertEquals(50, Timber.size)
+
+    Timber.uprootAll()
+    assertEquals(0, Timber.size)
+  }
+
+  @Test fun plant() {
+    val one = ListTree()
+    Timber.plant(one)
+    val two = ListTree()
+    Timber.plant(two)
+
+    assertEquals(listOf(one, two), Timber.trees)
+  }
+
+  @Test fun plantVarargs() {
+    val one = ListTree()
+    val two = ListTree()
+    Timber.plant(one, two)
+
+    assertEquals(listOf(one, two), Timber.trees)
+  }
+
+  @Test fun plantAll() {
+    val one = ListTree()
+    val two = ListTree()
+    Timber.plantAll(listOf(one, two))
+
+    assertEquals(listOf(one, two), Timber.trees)
+  }
+
+  @Test fun uprootThrowsIfMissing() {
+    val tree = ListTree()
+    assertFailsWith(IllegalArgumentException::class,
+        ""Cannot uproot tree which is not planted: $tree"") {
+      Timber.uproot(tree)
+    }
+  }
+}","@@ -0,0 +1,60 @@
+package timber.log
+
+import kotlin.test.AfterTest
+import kotlin.test.BeforeTest
+import kotlin.test.Test
+import kotlin.test.assertEquals
+import kotlin.test.assertFailsWith
+
+class TimberTest {
+  @BeforeTest @AfterTest fun after() {
+    Timber.uprootAll()
+  }
+
+  @Test fun size() {
+    assertEquals(0, Timber.size)
+
+    for (i in 1..50) {
+      Timber.plant(ListTree())
+      assertEquals(i, Timber.size)
+    }
+
+    assertEquals(50, Timber.size)
+
+    Timber.uprootAll()
+    assertEquals(0, Timber.size)
+  }
+
+  @Test fun plant() {
+    val one = ListTree()
+    Timber.plant(one)
+    val two = ListTree()
+    Timber.plant(two)
+
+    assertEquals(listOf(one, two), Timber.trees)
+  }
+
+  @Test fun plantVarargs() {
+    val one = ListTree()
+    val two = ListTree()
+    Timber.plant(one, two)
+
+    assertEquals(listOf(one, two), Timber.trees)
+  }
+
+  @Test fun plantAll() {
+    val one = ListTree()
+    val two = ListTree()
+    Timber.plantAll(listOf(one, two))
+
+    assertEquals(listOf(one, two), Timber.trees)
+  }
+
+  @Test fun uprootThrowsIfMissing() {
+    val tree = ListTree()
+    assertFailsWith(IllegalArgumentException::class,
+        ""Cannot uproot tree which is not planted: $tree"") {
+      Timber.uproot(tree)
+    }
+  }
+}",False,test
gradle.properties,gradle.properties,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.7.1-SNAPSHOT
+VERSION_NAME=5.0.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.
 
@@ -14,5 +14,3 @@ POM_LICENCE_DIST=repo
 
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
-
-org.gradle.jvmargs=-Xmx1536M","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.7.1-SNAPSHOT
+VERSION_NAME=5.0.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.
 
@@ -14,5 +14,3 @@ POM_LICENCE_DIST=repo
 
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
-
-org.gradle.jvmargs=-Xmx1536M",False,other
gradle/gradle-mvn-push.gradle,gradle/gradle-mvn-push.gradle,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -17,10 +17,23 @@
 apply plugin: 'maven'
 apply plugin: 'signing'
 
+version = VERSION_NAME
+group = GROUP
+
 def isReleaseBuild() {
   return VERSION_NAME.contains(""SNAPSHOT"") == false
 }
 
+def getReleaseRepositoryUrl() {
+  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
+          ""https://oss.sonatype.org/service/local/staging/deploy/maven2/""
+}
+
+def getSnapshotRepositoryUrl() {
+  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
+          ""https://oss.sonatype.org/content/repositories/snapshots/""
+}
+
 def getRepositoryUsername() {
   return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : """"
 }
@@ -39,10 +52,10 @@ afterEvaluate { project ->
         pom.artifactId = POM_ARTIFACT_ID
         pom.version = VERSION_NAME
 
-        repository(url: ""https://oss.sonatype.org/service/local/staging/deploy/maven2/"") {
+        repository(url: getReleaseRepositoryUrl()) {
           authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
         }
-        snapshotRepository(url: ""https://oss.sonatype.org/content/repositories/snapshots/"") {
+        snapshotRepository(url: getSnapshotRepositoryUrl()) {
           authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
         }
 
@@ -82,31 +95,119 @@ afterEvaluate { project ->
     sign configurations.archives
   }
 
-  task androidJavadocs(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+  if (project.getPlugins().hasPlugin('com.android.application') ||
+          project.getPlugins().hasPlugin('com.android.library')) {
+    task install(type: Upload, dependsOn: assemble) {
+      repositories.mavenInstaller {
+        configuration = configurations.archives
+
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
 
-    if (JavaVersion.current().isJava8Compatible()) {
-      allprojects {
-        tasks.withType(Javadoc) {
-          options.addStringOption('Xdoclint:none', '-quiet')
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
         }
       }
     }
-  }
 
-  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
-    classifier = 'javadoc'
-    from androidJavadocs.destinationDir
+    task androidJavadocsJar(type: Jar) {
+      classifier = 'javadoc'
+      from ""$buildDir/dokkaJavadoc""
+    }
+
+    task androidSourcesJar(type: Jar) {
+      classifier = 'sources'
+      from android.sourceSets.main.java.source
+    }
+  } else {
+    install {
+      repositories.mavenInstaller {
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
+
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
+        }
+      }
+    }
+
+    task sourcesJar(type: Jar, dependsOn: classes) {
+      classifier = 'sources'
+      from sourceSets.main.allSource
+    }
+
+    task javadocJar(type: Jar, dependsOn: javadoc) {
+      classifier = 'javadoc'
+      from javadoc.destinationDir
+    }
   }
 
-  task androidSourcesJar(type: Jar) {
-    classifier = 'sources'
-    from android.sourceSets.main.java.sourceFiles
+  if (JavaVersion.current().isJava8Compatible()) {
+    allprojects {
+      tasks.withType(Javadoc) {
+        options.addStringOption('Xdoclint:none', '-quiet')
+      }
+    }
   }
 
   artifacts {
-    archives androidSourcesJar
-    archives androidJavadocsJar
+    if (project.getPlugins().hasPlugin('com.android.application') ||
+            project.getPlugins().hasPlugin('com.android.library')) {
+      archives androidSourcesJar
+      archives androidJavadocsJar
+    } else {
+      archives sourcesJar
+      archives javadocJar
+    }
   }
 }","@@ -17,10 +17,23 @@
 apply plugin: 'maven'
 apply plugin: 'signing'
 
+version = VERSION_NAME
+group = GROUP
+
 def isReleaseBuild() {
   return VERSION_NAME.contains(""SNAPSHOT"") == false
 }
 
+def getReleaseRepositoryUrl() {
+  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
+          ""https://oss.sonatype.org/service/local/staging/deploy/maven2/""
+}
+
+def getSnapshotRepositoryUrl() {
+  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
+          ""https://oss.sonatype.org/content/repositories/snapshots/""
+}
+
 def getRepositoryUsername() {
   return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : """"
 }
@@ -39,10 +52,10 @@ afterEvaluate { project ->
         pom.artifactId = POM_ARTIFACT_ID
         pom.version = VERSION_NAME
 
-        repository(url: ""https://oss.sonatype.org/service/local/staging/deploy/maven2/"") {
+        repository(url: getReleaseRepositoryUrl()) {
           authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
         }
-        snapshotRepository(url: ""https://oss.sonatype.org/content/repositories/snapshots/"") {
+        snapshotRepository(url: getSnapshotRepositoryUrl()) {
           authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
         }
 
@@ -82,31 +95,119 @@ afterEvaluate { project ->
     sign configurations.archives
   }
 
-  task androidJavadocs(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+  if (project.getPlugins().hasPlugin('com.android.application') ||
+          project.getPlugins().hasPlugin('com.android.library')) {
+    task install(type: Upload, dependsOn: assemble) {
+      repositories.mavenInstaller {
+        configuration = configurations.archives
+
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
 
-    if (JavaVersion.current().isJava8Compatible()) {
-      allprojects {
-        tasks.withType(Javadoc) {
-          options.addStringOption('Xdoclint:none', '-quiet')
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
         }
       }
     }
-  }
 
-  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
-    classifier = 'javadoc'
-    from androidJavadocs.destinationDir
+    task androidJavadocsJar(type: Jar) {
+      classifier = 'javadoc'
+      from ""$buildDir/dokkaJavadoc""
+    }
+
+    task androidSourcesJar(type: Jar) {
+      classifier = 'sources'
+      from android.sourceSets.main.java.source
+    }
+  } else {
+    install {
+      repositories.mavenInstaller {
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
+
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
+        }
+      }
+    }
+
+    task sourcesJar(type: Jar, dependsOn: classes) {
+      classifier = 'sources'
+      from sourceSets.main.allSource
+    }
+
+    task javadocJar(type: Jar, dependsOn: javadoc) {
+      classifier = 'javadoc'
+      from javadoc.destinationDir
+    }
   }
 
-  task androidSourcesJar(type: Jar) {
-    classifier = 'sources'
-    from android.sourceSets.main.java.sourceFiles
+  if (JavaVersion.current().isJava8Compatible()) {
+    allprojects {
+      tasks.withType(Javadoc) {
+        options.addStringOption('Xdoclint:none', '-quiet')
+      }
+    }
   }
 
   artifacts {
-    archives androidSourcesJar
-    archives androidJavadocsJar
+    if (project.getPlugins().hasPlugin('com.android.application') ||
+            project.getPlugins().hasPlugin('com.android.library')) {
+      archives androidSourcesJar
+      archives androidJavadocsJar
+    } else {
+      archives sourcesJar
+      archives javadocJar
+    }
   }
 }",False,other
,jdk/build.gradle,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,11 @@
+apply plugin: 'org.jetbrains.kotlin.platform.jvm'
+
+archivesBaseName = 'timber-jdk'
+
+dependencies {
+  expectedBy project(':common')
+  implementation deps.kotlin.stdlib.jdk
+  testImplementation deps.kotlin.test.jdk
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -0,0 +1,11 @@
+apply plugin: 'org.jetbrains.kotlin.platform.jvm'
+
+archivesBaseName = 'timber-jdk'
+
+dependencies {
+  expectedBy project(':common')
+  implementation deps.kotlin.stdlib.jdk
+  testImplementation deps.kotlin.test.jdk
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
,jdk/gradle.properties,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=timber-jdk
+POM_NAME=Timber (JDK)
+POM_PACKAGING=jar","@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=timber-jdk
+POM_NAME=Timber (JDK)
+POM_PACKAGING=jar",False,other
,js/build.gradle,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,40 @@
+apply plugin: 'org.jetbrains.kotlin.platform.js'
+apply plugin: 'com.moowork.node'
+
+archivesBaseName = 'timber-js'
+
+dependencies {
+  expectedBy project(':common')
+  compile deps.kotlin.stdlib.js
+  testCompile deps.kotlin.test.js
+}
+
+task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
+  from compileKotlin2Js.destinationDir
+  configurations.testCompileClasspath.each {
+    from zipTree(it.absolutePath).matching { include '*.js' }
+  }
+
+  into ""${buildDir}/node_modules""
+}
+
+[compileKotlin2Js, compileTestKotlin2Js]*.configure {
+  kotlinOptions.moduleKind = ""commonjs""
+}
+
+node {
+  download = true
+}
+
+task installMocha(type: NpmTask) {
+  args = ['install', 'mocha']
+}
+
+task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installMocha]) {
+  script = file('node_modules/mocha/bin/mocha')
+  args = [compileTestKotlin2Js.outputFile]
+}
+
+test.dependsOn(runMocha)
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -0,0 +1,40 @@
+apply plugin: 'org.jetbrains.kotlin.platform.js'
+apply plugin: 'com.moowork.node'
+
+archivesBaseName = 'timber-js'
+
+dependencies {
+  expectedBy project(':common')
+  compile deps.kotlin.stdlib.js
+  testCompile deps.kotlin.test.js
+}
+
+task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
+  from compileKotlin2Js.destinationDir
+  configurations.testCompileClasspath.each {
+    from zipTree(it.absolutePath).matching { include '*.js' }
+  }
+
+  into ""${buildDir}/node_modules""
+}
+
+[compileKotlin2Js, compileTestKotlin2Js]*.configure {
+  kotlinOptions.moduleKind = ""commonjs""
+}
+
+node {
+  download = true
+}
+
+task installMocha(type: NpmTask) {
+  args = ['install', 'mocha']
+}
+
+task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installMocha]) {
+  script = file('node_modules/mocha/bin/mocha')
+  args = [compileTestKotlin2Js.outputFile]
+}
+
+test.dependsOn(runMocha)
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
,js/gradle.properties,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=timber-js
+POM_NAME=Timber (JS)
+POM_PACKAGING=jar","@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=timber-js
+POM_NAME=Timber (JS)
+POM_PACKAGING=jar",False,other
,js/src/main/kotlin/timber/log/ConsoleTree.kt,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,18 @@
+package timber.log
+
+import kotlin.js.Console
+
+class ConsoleTree(private val console: Console = kotlin.js.console) : Tree() {
+  override fun isLoggable(priority: Int, tag: String?) = priority != Timber.VERBOSE
+
+  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    when (priority) {
+      Timber.ERROR, Timber.ASSERT -> console.error(message)
+      Timber.WARNING -> console.warn(message)
+      Timber.INFO -> console.info(message)
+      Timber.DEBUG -> console.log(message)
+      Timber.VERBOSE -> {} // TODO use console.debug here?
+      else -> error(""Unknown priority level: $priority"")
+    }
+  }
+}","@@ -0,0 +1,18 @@
+package timber.log
+
+import kotlin.js.Console
+
+class ConsoleTree(private val console: Console = kotlin.js.console) : Tree() {
+  override fun isLoggable(priority: Int, tag: String?) = priority != Timber.VERBOSE
+
+  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    when (priority) {
+      Timber.ERROR, Timber.ASSERT -> console.error(message)
+      Timber.WARNING -> console.warn(message)
+      Timber.INFO -> console.info(message)
+      Timber.DEBUG -> console.log(message)
+      Timber.VERBOSE -> {} // TODO use console.debug here?
+      else -> error(""Unknown priority level: $priority"")
+    }
+  }
+}",False,source
,js/src/test/kotlin/timber/log/ConsoleTreeTest.kt,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -0,0 +1,64 @@
+package timber.log
+
+import kotlin.js.Console
+import kotlin.test.Ignore
+import kotlin.test.Test
+import kotlin.test.assertEquals
+import kotlin.test.assertFalse
+import kotlin.test.assertTrue
+
+class ConsoleLogTest {
+  private val fakeConsole = FakeConsole()
+  private val tree = ConsoleTree(fakeConsole)
+
+  @Test fun isLoggable() {
+    assertTrue(tree.isLoggable(Timber.ASSERT))
+    assertTrue(tree.isLoggable(Timber.ERROR))
+    assertTrue(tree.isLoggable(Timber.WARNING))
+    assertTrue(tree.isLoggable(Timber.INFO))
+    assertTrue(tree.isLoggable(Timber.DEBUG))
+    assertFalse(tree.isLoggable(Timber.VERBOSE))
+  }
+
+  @Test fun logs() {
+    tree.log(Timber.ASSERT, null, null, ""assert"")
+    tree.log(Timber.ERROR, null, null, ""error"")
+    tree.log(Timber.WARNING, null, null, ""warning"")
+    tree.log(Timber.INFO, null, null, ""info"")
+    tree.log(Timber.DEBUG, null, null, ""debug"")
+    tree.log(Timber.VERBOSE, null, null, ""verbose"")
+
+    // TODO fix messages https://youtrack.jetbrains.com/issue/KT-15223
+    val expected = listOf(
+        ""ERROR [a, s, s, e, r, t]"",
+        ""ERROR [e, r, r, o, r]"",
+        ""WARN [w, a, r, n, i, n, g]"",
+        ""INFO [i, n, f, o]"",
+        ""LOG [d, e, b, u, g]""
+    )
+    assertEquals(expected, fakeConsole.messages)
+  }
+}
+
+class FakeConsole : Console {
+  private val _messages = mutableListOf<String>()
+  val messages get() = _messages.toList()
+
+  override fun dir(o: Any) = throw UnsupportedOperationException()
+
+  override fun error(vararg o: Any?) {
+    _messages.add(""ERROR "" + o.map(Any?::toString))
+  }
+
+  override fun warn(vararg o: Any?) {
+    _messages.add(""WARN "" + o.map(Any?::toString))
+  }
+
+  override fun info(vararg o: Any?) {
+    _messages.add(""INFO "" + o.map(Any?::toString))
+  }
+
+  override fun log(vararg o: Any?) {
+    _messages.add(""LOG "" + o.map(Any?::toString))
+  }
+}","@@ -0,0 +1,64 @@
+package timber.log
+
+import kotlin.js.Console
+import kotlin.test.Ignore
+import kotlin.test.Test
+import kotlin.test.assertEquals
+import kotlin.test.assertFalse
+import kotlin.test.assertTrue
+
+class ConsoleLogTest {
+  private val fakeConsole = FakeConsole()
+  private val tree = ConsoleTree(fakeConsole)
+
+  @Test fun isLoggable() {
+    assertTrue(tree.isLoggable(Timber.ASSERT))
+    assertTrue(tree.isLoggable(Timber.ERROR))
+    assertTrue(tree.isLoggable(Timber.WARNING))
+    assertTrue(tree.isLoggable(Timber.INFO))
+    assertTrue(tree.isLoggable(Timber.DEBUG))
+    assertFalse(tree.isLoggable(Timber.VERBOSE))
+  }
+
+  @Test fun logs() {
+    tree.log(Timber.ASSERT, null, null, ""assert"")
+    tree.log(Timber.ERROR, null, null, ""error"")
+    tree.log(Timber.WARNING, null, null, ""warning"")
+    tree.log(Timber.INFO, null, null, ""info"")
+    tree.log(Timber.DEBUG, null, null, ""debug"")
+    tree.log(Timber.VERBOSE, null, null, ""verbose"")
+
+    // TODO fix messages https://youtrack.jetbrains.com/issue/KT-15223
+    val expected = listOf(
+        ""ERROR [a, s, s, e, r, t]"",
+        ""ERROR [e, r, r, o, r]"",
+        ""WARN [w, a, r, n, i, n, g]"",
+        ""INFO [i, n, f, o]"",
+        ""LOG [d, e, b, u, g]""
+    )
+    assertEquals(expected, fakeConsole.messages)
+  }
+}
+
+class FakeConsole : Console {
+  private val _messages = mutableListOf<String>()
+  val messages get() = _messages.toList()
+
+  override fun dir(o: Any) = throw UnsupportedOperationException()
+
+  override fun error(vararg o: Any?) {
+    _messages.add(""ERROR "" + o.map(Any?::toString))
+  }
+
+  override fun warn(vararg o: Any?) {
+    _messages.add(""WARN "" + o.map(Any?::toString))
+  }
+
+  override fun info(vararg o: Any?) {
+    _messages.add(""INFO "" + o.map(Any?::toString))
+  }
+
+  override fun log(vararg o: Any?) {
+    _messages.add(""LOG "" + o.map(Any?::toString))
+  }
+}",False,test
timber-sample/build.gradle,sample/build.gradle,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -24,9 +24,9 @@ android {
 }
 
 dependencies {
-  implementation project(':timber')
+  implementation project(':android')
   implementation deps.butterknife.runtime
   annotationProcessor deps.butterknife.compiler
   
-  lintChecks project(':timber-lint')
+  lintChecks project(':android-lint')
 }","@@ -0,0 +1,32 @@
+apply plugin: 'com.android.application'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_7
+    targetCompatibility JavaVersion.VERSION_1_7
+  }
+
+  defaultConfig {
+    applicationId 'com.example.timber'
+    minSdkVersion versions.minSdk
+    targetSdkVersion versions.compileSdk
+    versionCode 1
+    versionName '1.0.0'
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    ignore 'InvalidPackage'
+  }
+}
+
+dependencies {
+  implementation project(':android')
+  implementation deps.butterknife.runtime
+  annotationProcessor deps.butterknife.compiler
+  
+  lintChecks project(':android-lint')
+}",True,other
timber-sample/src/main/java/com/example/timber/ExampleApp.java,sample/src/main/java/com/example/timber/ExampleApp.java,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -3,9 +3,12 @@ package com.example.timber;
 import android.app.Application;
 import android.support.annotation.NonNull;
 import android.util.Log;
+import org.jetbrains.annotations.Nullable;
 import timber.log.Timber;
+import timber.log.Tree;
 
 import static timber.log.Timber.DebugTree;
+import static timber.log.Timber.INFO;
 
 public class ExampleApp extends Application {
   @Override public void onCreate() {
@@ -19,8 +22,12 @@ public class ExampleApp extends Application {
   }
 
   /** A tree which logs important information for crash reporting. */
-  private static class CrashReportingTree extends Timber.Tree {
-    @Override protected void log(int priority, String tag, @NonNull String message, Throwable t) {
+  private static final class CrashReportingTree extends Tree {
+    @Override public boolean isLoggable(int priority, @Nullable String tag) {
+      return priority >= INFO;
+    }
+
+    @Override protected void log(int priority, String tag, Throwable t, String message) {
       if (priority == Log.VERBOSE || priority == Log.DEBUG) {
         return;
       }","@@ -0,0 +1,46 @@
+package com.example.timber;
+
+import android.app.Application;
+import android.support.annotation.NonNull;
+import android.util.Log;
+import org.jetbrains.annotations.Nullable;
+import timber.log.Timber;
+import timber.log.Tree;
+
+import static timber.log.Timber.DebugTree;
+import static timber.log.Timber.INFO;
+
+public class ExampleApp extends Application {
+  @Override public void onCreate() {
+    super.onCreate();
+
+    if (BuildConfig.DEBUG) {
+      Timber.plant(new DebugTree());
+    } else {
+      Timber.plant(new CrashReportingTree());
+    }
+  }
+
+  /** A tree which logs important information for crash reporting. */
+  private static final class CrashReportingTree extends Tree {
+    @Override public boolean isLoggable(int priority, @Nullable String tag) {
+      return priority >= INFO;
+    }
+
+    @Override protected void log(int priority, String tag, Throwable t, String message) {
+      if (priority == Log.VERBOSE || priority == Log.DEBUG) {
+        return;
+      }
+
+      FakeCrashLibrary.log(priority, tag, message);
+
+      if (t != null) {
+        if (priority == Log.ERROR) {
+          FakeCrashLibrary.logError(t);
+        } else if (priority == Log.WARN) {
+          FakeCrashLibrary.logWarning(t);
+        }
+      }
+    }
+  }
+}",True,source
timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,sample/src/main/java/com/example/timber/ui/LintActivity.java,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -54,16 +54,16 @@ public class LintActivity extends Activity {
     // TimberArgCount
     Timber.d(""%s %s"", ""arg0"");
     Timber.d(""%s"", ""arg0"", ""arg1"");
-    Timber.tag(""tag"").d(""%s %s"", ""arg0"");
-    Timber.tag(""tag"").d(""%s"", ""arg0"", ""arg1"");
+    Timber.tagged(""tag"").d(""%s %s"", ""arg0"");
+    Timber.tagged(""tag"").d(""%s"", ""arg0"", ""arg1"");
 
     // TimberArgTypes
     Timber.d(""%d"", ""arg0"");
-    Timber.tag(""tag"").d(""%d"", ""arg0"");
+    Timber.tagged(""tag"").d(""%d"", ""arg0"");
 
     // TimberTagLength
-    Timber.tag(""abcdefghijklmnopqrstuvwx"");
-    Timber.tag(""abcdefghijklmnopqrstuvw"" + ""x"");
+    Timber.tagged(""abcdefghijklmnopqrstuvwx"");
+    Timber.tagged(""abcdefghijklmnopqrstuvw"" + ""x"");
 
     // TimberExceptionLogging
     Timber.d(new Exception(), new Exception().getMessage());","@@ -0,0 +1,78 @@
+package com.example.timber.ui;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.Log;
+import timber.log.Timber;
+
+import static java.lang.String.format;
+
+@SuppressLint(""Registered"") //
+public class LintActivity extends Activity {
+  /**
+   * Below are some examples of how NOT to use Timber.
+   *
+   * To see how a particular lint issue behaves, comment/remove its corresponding id from the set
+   * of SuppressLint ids below.
+   */
+  @SuppressLint({
+      ""LogNotTimber"", //
+      ""StringFormatInTimber"", //
+      ""ThrowableNotAtBeginning"", //
+      ""BinaryOperationInTimber"", //
+      ""TimberArgCount"", //
+      ""TimberArgTypes"", //
+      ""TimberTagLength"", //
+      ""TimberExceptionLogging"" //
+  }) //
+  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+
+    // LogNotTimber
+    Log.d(""TAG"", ""msg"");
+    Log.d(""TAG"", ""msg"", new Exception());
+    android.util.Log.d(""TAG"", ""msg"");
+    android.util.Log.d(""TAG"", ""msg"", new Exception());
+
+    // StringFormatInTimber
+    Timber.w(String.format(""%s"", getString()));
+    Timber.w(format(""%s"", getString()));
+
+    // ThrowableNotAtBeginning
+    Timber.d(""%s"", new Exception());
+
+    // BinaryOperationInTimber
+    String foo = ""foo"";
+    String bar = ""bar"";
+    Timber.d(""foo"" + ""bar"");
+    Timber.d(""foo"" + bar);
+    Timber.d(foo + ""bar"");
+    Timber.d(foo + bar);
+
+    // TimberArgCount
+    Timber.d(""%s %s"", ""arg0"");
+    Timber.d(""%s"", ""arg0"", ""arg1"");
+    Timber.tagged(""tag"").d(""%s %s"", ""arg0"");
+    Timber.tagged(""tag"").d(""%s"", ""arg0"", ""arg1"");
+
+    // TimberArgTypes
+    Timber.d(""%d"", ""arg0"");
+    Timber.tagged(""tag"").d(""%d"", ""arg0"");
+
+    // TimberTagLength
+    Timber.tagged(""abcdefghijklmnopqrstuvwx"");
+    Timber.tagged(""abcdefghijklmnopqrstuvw"" + ""x"");
+
+    // TimberExceptionLogging
+    Timber.d(new Exception(), new Exception().getMessage());
+    Timber.d(new Exception(), """");
+    Timber.d(new Exception(), null);
+    Timber.d(new Exception().getMessage());
+  }
+
+  private String getString() {
+    return ""foo"";
+  }
+}",True,source
settings.gradle,settings.gradle,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -1,5 +1,8 @@
-include ':timber'
-include ':timber-lint'
-include ':timber-sample'
+rootProject.name = 'timber'
 
-rootProject.name = 'timber-root'
+include ':android'
+//include ':android-lint'
+include ':common'
+include ':js'
+include ':jdk'
+//include ':sample'","@@ -1,5 +1,8 @@
-include ':timber'
-include ':timber-lint'
-include ':timber-sample'
+rootProject.name = 'timber'
 
-rootProject.name = 'timber-root'
+include ':android'
+//include ':android-lint'
+include ':common'
+include ':js'
+include ':jdk'
+//include ':sample'",False,other
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,c9daba2046a7beaa57728b27be3441f40e3d49f9,f8f06265d48724547882e13b490e67fb2e2a2608,Initial multiplatform implementation,"@@ -61,72 +61,6 @@ public class TimberTest {
     }
   }
 
-  @Test public void treeCount() {
-    // inserts trees and checks if the amount of returned trees matches.
-    assertThat(Timber.treeCount()).isEqualTo(0);
-    for (int i = 1; i < 50; i++) {
-      Timber.plant(new Timber.DebugTree());
-      assertThat(Timber.treeCount()).isEqualTo(i);
-    }
-    Timber.uprootAll();
-    assertThat(Timber.treeCount()).isEqualTo(0);
-  }
-
-  @SuppressWarnings(""ConstantConditions"")
-  @Test public void nullTree() {
-    Timber.Tree nullTree = null;
-    try {
-      Timber.plant(nullTree);
-      fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""tree == null"");
-    }
-  }
-
-  @SuppressWarnings(""ConstantConditions"")
-  @Test public void nullTreeArray() {
-    Timber.Tree[] nullTrees = null;
-    try {
-      Timber.plant(nullTrees);
-      fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""trees == null"");
-    }
-    nullTrees = new Timber.Tree[]{null};
-    try {
-      Timber.plant(nullTrees);
-      fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""trees contains null"");
-    }
-  }
-
-  @Test public void forestReturnsAllPlanted() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1);
-    Timber.plant(tree2);
-
-    assertThat(Timber.forest()).containsExactly(tree1, tree2);
-  }
-
-  @Test public void forestReturnsAllTreesPlanted() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1, tree2);
-
-    assertThat(Timber.forest()).containsExactly(tree1, tree2);
-  }
-
-  @Test public void uprootThrowsIfMissing() {
-    try {
-      Timber.uproot(new Timber.DebugTree());
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessageThat().startsWith(""Cannot uproot tree which is not planted: "");
-    }
-  }
-
   @Test public void uprootRemovesTree() {
     Timber.DebugTree tree1 = new Timber.DebugTree();
     Timber.DebugTree tree2 = new Timber.DebugTree();","@@ -61,72 +61,6 @@ public class TimberTest {
     }
   }
 
-  @Test public void treeCount() {
-    // inserts trees and checks if the amount of returned trees matches.
-    assertThat(Timber.treeCount()).isEqualTo(0);
-    for (int i = 1; i < 50; i++) {
-      Timber.plant(new Timber.DebugTree());
-      assertThat(Timber.treeCount()).isEqualTo(i);
-    }
-    Timber.uprootAll();
-    assertThat(Timber.treeCount()).isEqualTo(0);
-  }
-
-  @SuppressWarnings(""ConstantConditions"")
-  @Test public void nullTree() {
-    Timber.Tree nullTree = null;
-    try {
-      Timber.plant(nullTree);
-      fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""tree == null"");
-    }
-  }
-
-  @SuppressWarnings(""ConstantConditions"")
-  @Test public void nullTreeArray() {
-    Timber.Tree[] nullTrees = null;
-    try {
-      Timber.plant(nullTrees);
-      fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""trees == null"");
-    }
-    nullTrees = new Timber.Tree[]{null};
-    try {
-      Timber.plant(nullTrees);
-      fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""trees contains null"");
-    }
-  }
-
-  @Test public void forestReturnsAllPlanted() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1);
-    Timber.plant(tree2);
-
-    assertThat(Timber.forest()).containsExactly(tree1, tree2);
-  }
-
-  @Test public void forestReturnsAllTreesPlanted() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1, tree2);
-
-    assertThat(Timber.forest()).containsExactly(tree1, tree2);
-  }
-
-  @Test public void uprootThrowsIfMissing() {
-    try {
-      Timber.uproot(new Timber.DebugTree());
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessageThat().startsWith(""Cannot uproot tree which is not planted: "");
-    }
-  }
-
   @Test public void uprootRemovesTree() {
     Timber.DebugTree tree1 = new Timber.DebugTree();
     Timber.DebugTree tree2 = new Timber.DebugTree();",False,test
android/build.gradle,android/build.gradle,7da94f0230aec28cb1e4d9035012c68185e3a651,c9daba2046a7beaa57728b27be3441f40e3d49f9,Add a LogcatTree for Android,"@@ -27,6 +27,7 @@ android {
 
 dependencies {
   api project(':jdk')
+  implementation deps.kotlin.stdlib.jdk
 //  lintChecks project(':android-lint')
 }","@@ -27,6 +27,7 @@ android {
 
 dependencies {
   api project(':jdk')
+  implementation deps.kotlin.stdlib.jdk
 //  lintChecks project(':android-lint')
 }",False,other
,android/src/main/java/timber/log/LogcatTree.kt,7da94f0230aec28cb1e4d9035012c68185e3a651,c9daba2046a7beaa57728b27be3441f40e3d49f9,Add a LogcatTree for Android,"@@ -0,0 +1,98 @@
+package timber.log
+
+import android.os.Build
+import android.util.Log
+import java.io.PrintWriter
+import java.io.StringWriter
+
+private const val MAX_LOG_LENGTH = 4000
+private const val MAX_TAG_LENGTH = 23
+
+/**
+ * A [Tree] which forwards to [Log].
+ *
+ * Calls to [performLog] are sent to either [Log.wtf] (for [Timber.ASSERT] level) or [Log.println]
+ * (for everything else). Prior to API 24, log tags are automatically truncated to 23 characters.
+ * Log messages will be split if they exceed 4000 characters to work around the platform message
+ * limit.
+ *
+ * Note: This does not check [Log.isLoggable] by default. Call [withCompliantLogging] for an
+ * instance which delegates to this method prior to logging.
+ */
+class LogcatTree @JvmOverloads constructor(private val defaultTag: String = ""App"") : Tree() {
+  /** Return a new [Tree] that checks [Log.isLoggable] prior to logging. */
+  fun withCompliantLogging() = object : Tree() {
+    override fun isLoggable(priority: Int, tag: String?): Boolean {
+      return Log.isLoggable(tag.asSafeTag(), priority)
+    }
+
+    override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+      this@LogcatTree.performLog(priority, tag, throwable, message)
+    }
+  }
+
+  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    val safeTag = tag.asSafeTag()
+
+    val fullMessage = if (message != null) {
+      if (throwable != null) {
+        ""$message\n${throwable.stackTraceString}""
+      } else {
+        message
+      }
+    } else if (throwable != null) {
+      throwable.stackTraceString
+    } else {
+      return // Nothing to do!
+    }
+
+    val length = fullMessage.length
+    if (length <= MAX_LOG_LENGTH) {
+      // Fast path for small messages which can fit in a single call.
+      if (priority == Timber.ASSERT) {
+        Log.wtf(safeTag, fullMessage)
+      } else {
+        Log.println(priority, safeTag, fullMessage)
+      }
+      return
+    }
+
+    // Slow path: Split by line, then ensure each line can fit into Log's maximum length.
+    // TODO use lastIndexOf instead of indexOf to batch multiple lines into single calls.
+    var i = 0
+    while (i < length) {
+      var newline = fullMessage.indexOf('\n', i)
+      newline = if (newline != -1) newline else length
+      do {
+        val end = Math.min(newline, i + MAX_LOG_LENGTH)
+        val part = fullMessage.substring(i, end)
+        if (priority == Log.ASSERT) {
+          Log.wtf(safeTag, part)
+        } else {
+          Log.println(priority, safeTag, part)
+        }
+        i = end
+      } while (i < newline)
+      i++
+    }
+  }
+
+  private fun String?.asSafeTag(): String {
+    val tag = this ?: defaultTag
+    // Tag length limit was removed in API 24.
+    if (Build.VERSION.SDK_INT < 24 && tag.length > MAX_TAG_LENGTH) {
+      return tag.substring(0, MAX_TAG_LENGTH)
+    }
+    return tag
+  }
+
+  private val Throwable.stackTraceString get(): String {
+    // DO NOT replace this with Log.getStackTraceString() - it hides UnknownHostException, which is
+    // not what we want.
+    val sw = StringWriter(256)
+    val pw = PrintWriter(sw, false)
+    printStackTrace(pw)
+    pw.flush()
+    return sw.toString()
+  }
+}","@@ -0,0 +1,98 @@
+package timber.log
+
+import android.os.Build
+import android.util.Log
+import java.io.PrintWriter
+import java.io.StringWriter
+
+private const val MAX_LOG_LENGTH = 4000
+private const val MAX_TAG_LENGTH = 23
+
+/**
+ * A [Tree] which forwards to [Log].
+ *
+ * Calls to [performLog] are sent to either [Log.wtf] (for [Timber.ASSERT] level) or [Log.println]
+ * (for everything else). Prior to API 24, log tags are automatically truncated to 23 characters.
+ * Log messages will be split if they exceed 4000 characters to work around the platform message
+ * limit.
+ *
+ * Note: This does not check [Log.isLoggable] by default. Call [withCompliantLogging] for an
+ * instance which delegates to this method prior to logging.
+ */
+class LogcatTree @JvmOverloads constructor(private val defaultTag: String = ""App"") : Tree() {
+  /** Return a new [Tree] that checks [Log.isLoggable] prior to logging. */
+  fun withCompliantLogging() = object : Tree() {
+    override fun isLoggable(priority: Int, tag: String?): Boolean {
+      return Log.isLoggable(tag.asSafeTag(), priority)
+    }
+
+    override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+      this@LogcatTree.performLog(priority, tag, throwable, message)
+    }
+  }
+
+  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
+    val safeTag = tag.asSafeTag()
+
+    val fullMessage = if (message != null) {
+      if (throwable != null) {
+        ""$message\n${throwable.stackTraceString}""
+      } else {
+        message
+      }
+    } else if (throwable != null) {
+      throwable.stackTraceString
+    } else {
+      return // Nothing to do!
+    }
+
+    val length = fullMessage.length
+    if (length <= MAX_LOG_LENGTH) {
+      // Fast path for small messages which can fit in a single call.
+      if (priority == Timber.ASSERT) {
+        Log.wtf(safeTag, fullMessage)
+      } else {
+        Log.println(priority, safeTag, fullMessage)
+      }
+      return
+    }
+
+    // Slow path: Split by line, then ensure each line can fit into Log's maximum length.
+    // TODO use lastIndexOf instead of indexOf to batch multiple lines into single calls.
+    var i = 0
+    while (i < length) {
+      var newline = fullMessage.indexOf('\n', i)
+      newline = if (newline != -1) newline else length
+      do {
+        val end = Math.min(newline, i + MAX_LOG_LENGTH)
+        val part = fullMessage.substring(i, end)
+        if (priority == Log.ASSERT) {
+          Log.wtf(safeTag, part)
+        } else {
+          Log.println(priority, safeTag, part)
+        }
+        i = end
+      } while (i < newline)
+      i++
+    }
+  }
+
+  private fun String?.asSafeTag(): String {
+    val tag = this ?: defaultTag
+    // Tag length limit was removed in API 24.
+    if (Build.VERSION.SDK_INT < 24 && tag.length > MAX_TAG_LENGTH) {
+      return tag.substring(0, MAX_TAG_LENGTH)
+    }
+    return tag
+  }
+
+  private val Throwable.stackTraceString get(): String {
+    // DO NOT replace this with Log.getStackTraceString() - it hides UnknownHostException, which is
+    // not what we want.
+    val sw = StringWriter(256)
+    val pw = PrintWriter(sw, false)
+    printStackTrace(pw)
+    pw.flush()
+    return sw.toString()
+  }
+}",False,source
jdk/build.gradle,jdk/build.gradle,addc77f44c13722b4f5477a9c5ee2240ed1ce1b8,7da94f0230aec28cb1e4d9035012c68185e3a651,Fix JDK and JS module names,"@@ -1,6 +1,6 @@
 apply plugin: 'org.jetbrains.kotlin.platform.jvm'
 
-archivesBaseName = 'timber-jdk'
+archivesBaseName = 'timber'
 
 dependencies {
   expectedBy project(':common')","@@ -1,6 +1,6 @@
 apply plugin: 'org.jetbrains.kotlin.platform.jvm'
 
-archivesBaseName = 'timber-jdk'
+archivesBaseName = 'timber'
 
 dependencies {
   expectedBy project(':common')",False,other
js/build.gradle,js/build.gradle,addc77f44c13722b4f5477a9c5ee2240ed1ce1b8,7da94f0230aec28cb1e4d9035012c68185e3a651,Fix JDK and JS module names,"@@ -1,7 +1,7 @@
 apply plugin: 'org.jetbrains.kotlin.platform.js'
 apply plugin: 'com.moowork.node'
 
-archivesBaseName = 'timber-js'
+archivesBaseName = 'timber'
 
 dependencies {
   expectedBy project(':common')","@@ -1,7 +1,7 @@
 apply plugin: 'org.jetbrains.kotlin.platform.js'
 apply plugin: 'com.moowork.node'
 
-archivesBaseName = 'timber-js'
+archivesBaseName = 'timber'
 
 dependencies {
   expectedBy project(':common')",False,other
js/build.gradle,js/build.gradle,f3ca7125dc44a8d029f527d2804da76f97e479c0,addc77f44c13722b4f5477a9c5ee2240ed1ce1b8,Only use CommonJS for test output.,"@@ -18,8 +18,15 @@ task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
   into ""${buildDir}/node_modules""
 }
 
-[compileKotlin2Js, compileTestKotlin2Js]*.configure {
-  kotlinOptions.moduleKind = ""commonjs""
+compileKotlin2Js {
+  kotlinOptions.moduleKind = 'umd'
+  kotlinOptions.sourceMap = true
+  kotlinOptions.metaInfo = true
+}
+
+compileTestKotlin2Js {
+  kotlinOptions.moduleKind = 'commonjs'
+  kotlinOptions.sourceMap = true
 }
 
 node {","@@ -18,8 +18,15 @@ task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
   into ""${buildDir}/node_modules""
 }
 
-[compileKotlin2Js, compileTestKotlin2Js]*.configure {
-  kotlinOptions.moduleKind = ""commonjs""
+compileKotlin2Js {
+  kotlinOptions.moduleKind = 'umd'
+  kotlinOptions.sourceMap = true
+  kotlinOptions.metaInfo = true
+}
+
+compileTestKotlin2Js {
+  kotlinOptions.moduleKind = 'commonjs'
+  kotlinOptions.sourceMap = true
 }
 
 node {",False,other
CHANGELOG.md,CHANGELOG.md,84b157605552e7b30f0d20e105d383b48ce8a030,f8f06265d48724547882e13b490e67fb2e2a2608,Prepare version 4.7.1,"@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 4.7.1 *(2018-06-28)*
+----------------------------
+
+ * Fix: Redundant argument lint check now works correctly on Kotlin sources.
+
+
 Version 4.7.0 *(2018-03-27)*
 ----------------------------","@@ -1,6 +1,12 @@
 Change Log
 ==========
 
+Version 4.7.1 *(2018-06-28)*
+----------------------------
+
+ * Fix: Redundant argument lint check now works correctly on Kotlin sources.
+
+
 Version 4.7.0 *(2018-03-27)*
 ----------------------------",False,other
README.md,README.md,84b157605552e7b30f0d20e105d383b48ce8a030,f8f06265d48724547882e13b490e67fb2e2a2608,Prepare version 4.7.1,"@@ -83,7 +83,7 @@ Download
 --------
 
 ```groovy
-implementation 'com.jakewharton.timber:timber:4.7.0'
+implementation 'com.jakewharton.timber:timber:4.7.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].","@@ -83,7 +83,7 @@ Download
 --------
 
 ```groovy
-implementation 'com.jakewharton.timber:timber:4.7.0'
+implementation 'com.jakewharton.timber:timber:4.7.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].",False,readme
gradle.properties,gradle.properties,84b157605552e7b30f0d20e105d383b48ce8a030,f8f06265d48724547882e13b490e67fb2e2a2608,Prepare version 4.7.1,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.7.1-SNAPSHOT
+VERSION_NAME=4.7.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.7.1-SNAPSHOT
+VERSION_NAME=4.7.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,755fdfd9f38b5332f5fb33bba35f01dbe36d191c,84b157605552e7b30f0d20e105d383b48ce8a030,Prepare next development version,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.7.1
+VERSION_NAME=4.7.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.7.1
+VERSION_NAME=4.7.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
build.gradle,build.gradle,5e5f0bd98f940344b2ef023bc0e8e7475bdd17f8,b13cdf995720b047dd2165c59ad77c8d2b923c4b,Dependency updates,"@@ -3,12 +3,12 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   ext.versions = [
       'minSdk': 9,
-      'compileSdk': 27,
+      'compileSdk': 28,
 
-      'kotlin': '1.2.41',
+      'kotlin': '1.2.51',
 
-      'androidPlugin': '3.1.2',
-      'androidTools': '26.1.2',
+      'androidPlugin': '3.1.3',
+      'androidTools': '26.1.3',
 
       'butterknife': '8.8.1',
   ]
@@ -41,7 +41,7 @@ buildscript {
       annotations: 'org.jetbrains:annotations:16.0.1',
 
       junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.40',
+      truth: 'com.google.truth:truth:0.41',
       robolectric: 'org.robolectric:robolectric:3.8',
   ]","@@ -3,12 +3,12 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   ext.versions = [
       'minSdk': 9,
-      'compileSdk': 27,
+      'compileSdk': 28,
 
-      'kotlin': '1.2.41',
+      'kotlin': '1.2.51',
 
-      'androidPlugin': '3.1.2',
-      'androidTools': '26.1.2',
+      'androidPlugin': '3.1.3',
+      'androidTools': '26.1.3',
 
       'butterknife': '8.8.1',
   ]
@@ -41,7 +41,7 @@ buildscript {
       annotations: 'org.jetbrains:annotations:16.0.1',
 
       junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.40',
+      truth: 'com.google.truth:truth:0.41',
       robolectric: 'org.robolectric:robolectric:3.8',
   ]",False,other
.travis.yml,.travis.yml,9710a0b8808d54c1ad8150ad740edaff7d6b48c1,5e5f0bd98f940344b2ef023bc0e8e7475bdd17f8,Update Google license,"@@ -2,7 +2,7 @@ language: android
 
 before_install:
   - mkdir ""$ANDROID_HOME/licenses"" || true
-  - echo ""d56f5187479451eabf01fb78af6dfcb131a6481e"" > ""$ANDROID_HOME/licenses/android-sdk-license""
+  - echo ""24333f8a63b6825ea9c5514f83c2829b004d1fee"" > ""$ANDROID_HOME/licenses/android-sdk-license""
 
 jdk:
   - oraclejdk8","@@ -2,7 +2,7 @@ language: android
 
 before_install:
   - mkdir ""$ANDROID_HOME/licenses"" || true
-  - echo ""d56f5187479451eabf01fb78af6dfcb131a6481e"" > ""$ANDROID_HOME/licenses/android-sdk-license""
+  - echo ""24333f8a63b6825ea9c5514f83c2829b004d1fee"" > ""$ANDROID_HOME/licenses/android-sdk-license""
 
 jdk:
   - oraclejdk8",False,other
.gitignore,.gitignore,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,13 +1,25 @@
-# IntelliJ
+.classpath
+.project
+.settings
+eclipsebin
+
+bin
+gen
+build
+out
+lib
+
 .idea
 *.iml
 classes
 
+obj
+
+.DS_Store
+
 # Gradle
 .gradle
+jniLibs
 build
 local.properties
 reports
-
-# Node
-node_modules","@@ -1,13 +1,25 @@
-# IntelliJ
+.classpath
+.project
+.settings
+eclipsebin
+
+bin
+gen
+build
+out
+lib
+
 .idea
 *.iml
 classes
 
+obj
+
+.DS_Store
+
 # Gradle
 .gradle
+jniLibs
 build
 local.properties
 reports
-
-# Node
-node_modules",False,other
android/build.gradle,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,34 +0,0 @@
-apply plugin: 'com.android.library'
-apply plugin: 'org.jetbrains.kotlin.android'
-
-archivesBaseName = 'timber-android'
-
-android {
-  compileSdkVersion versions.compileSdk
-
-  defaultConfig {
-    minSdkVersion versions.minSdk
-  }
-
-  lintOptions {
-    textReport true
-    textOutput 'stdout'
-    lintConfig rootProject.file('lint.xml')
-
-    // We run a full lint analysis as build part in CI, so skip vital checks for assemble task.
-    checkReleaseBuilds false
-  }
-
-  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
-  libraryVariants.all {
-    it.generateBuildConfig.enabled = false
-  }
-}
-
-dependencies {
-  api project(':jdk')
-  implementation deps.kotlin.stdlib.jdk
-//  lintChecks project(':android-lint')
-}
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -1,34 +0,0 @@
-apply plugin: 'com.android.library'
-apply plugin: 'org.jetbrains.kotlin.android'
-
-archivesBaseName = 'timber-android'
-
-android {
-  compileSdkVersion versions.compileSdk
-
-  defaultConfig {
-    minSdkVersion versions.minSdk
-  }
-
-  lintOptions {
-    textReport true
-    textOutput 'stdout'
-    lintConfig rootProject.file('lint.xml')
-
-    // We run a full lint analysis as build part in CI, so skip vital checks for assemble task.
-    checkReleaseBuilds false
-  }
-
-  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
-  libraryVariants.all {
-    it.generateBuildConfig.enabled = false
-  }
-}
-
-dependencies {
-  api project(':jdk')
-  implementation deps.kotlin.stdlib.jdk
-//  lintChecks project(':android-lint')
-}
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
android/gradle.properties,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,3 +0,0 @@
-POM_ARTIFACT_ID=timber-android
-POM_NAME=Timber (Android)
-POM_PACKAGING=aar","@@ -1,3 +0,0 @@
-POM_ARTIFACT_ID=timber-android
-POM_NAME=Timber (Android)
-POM_PACKAGING=aar",False,other
android/src/main/AndroidManifest.xml,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,2 +0,0 @@
-<!-- TODO rename to 'timber' once https://issuetracker.google.com/issues/73450622 is fixed -->
-<manifest package=""timber.log""/>","@@ -1,2 +0,0 @@
-<!-- TODO rename to 'timber' once https://issuetracker.google.com/issues/73450622 is fixed -->
-<manifest package=""timber.log""/>",False,source
android/src/main/java/timber/log/LogcatTree.kt,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,98 +0,0 @@
-package timber.log
-
-import android.os.Build
-import android.util.Log
-import java.io.PrintWriter
-import java.io.StringWriter
-
-private const val MAX_LOG_LENGTH = 4000
-private const val MAX_TAG_LENGTH = 23
-
-/**
- * A [Tree] which forwards to [Log].
- *
- * Calls to [performLog] are sent to either [Log.wtf] (for [Timber.ASSERT] level) or [Log.println]
- * (for everything else). Prior to API 24, log tags are automatically truncated to 23 characters.
- * Log messages will be split if they exceed 4000 characters to work around the platform message
- * limit.
- *
- * Note: This does not check [Log.isLoggable] by default. Call [withCompliantLogging] for an
- * instance which delegates to this method prior to logging.
- */
-class LogcatTree @JvmOverloads constructor(private val defaultTag: String = ""App"") : Tree() {
-  /** Return a new [Tree] that checks [Log.isLoggable] prior to logging. */
-  fun withCompliantLogging() = object : Tree() {
-    override fun isLoggable(priority: Int, tag: String?): Boolean {
-      return Log.isLoggable(tag.asSafeTag(), priority)
-    }
-
-    override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-      this@LogcatTree.performLog(priority, tag, throwable, message)
-    }
-  }
-
-  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    val safeTag = tag.asSafeTag()
-
-    val fullMessage = if (message != null) {
-      if (throwable != null) {
-        ""$message\n${throwable.stackTraceString}""
-      } else {
-        message
-      }
-    } else if (throwable != null) {
-      throwable.stackTraceString
-    } else {
-      return // Nothing to do!
-    }
-
-    val length = fullMessage.length
-    if (length <= MAX_LOG_LENGTH) {
-      // Fast path for small messages which can fit in a single call.
-      if (priority == Timber.ASSERT) {
-        Log.wtf(safeTag, fullMessage)
-      } else {
-        Log.println(priority, safeTag, fullMessage)
-      }
-      return
-    }
-
-    // Slow path: Split by line, then ensure each line can fit into Log's maximum length.
-    // TODO use lastIndexOf instead of indexOf to batch multiple lines into single calls.
-    var i = 0
-    while (i < length) {
-      var newline = fullMessage.indexOf('\n', i)
-      newline = if (newline != -1) newline else length
-      do {
-        val end = Math.min(newline, i + MAX_LOG_LENGTH)
-        val part = fullMessage.substring(i, end)
-        if (priority == Log.ASSERT) {
-          Log.wtf(safeTag, part)
-        } else {
-          Log.println(priority, safeTag, part)
-        }
-        i = end
-      } while (i < newline)
-      i++
-    }
-  }
-
-  private fun String?.asSafeTag(): String {
-    val tag = this ?: defaultTag
-    // Tag length limit was removed in API 24.
-    if (Build.VERSION.SDK_INT < 24 && tag.length > MAX_TAG_LENGTH) {
-      return tag.substring(0, MAX_TAG_LENGTH)
-    }
-    return tag
-  }
-
-  private val Throwable.stackTraceString get(): String {
-    // DO NOT replace this with Log.getStackTraceString() - it hides UnknownHostException, which is
-    // not what we want.
-    val sw = StringWriter(256)
-    val pw = PrintWriter(sw, false)
-    printStackTrace(pw)
-    pw.flush()
-    return sw.toString()
-  }
-}","@@ -1,98 +0,0 @@
-package timber.log
-
-import android.os.Build
-import android.util.Log
-import java.io.PrintWriter
-import java.io.StringWriter
-
-private const val MAX_LOG_LENGTH = 4000
-private const val MAX_TAG_LENGTH = 23
-
-/**
- * A [Tree] which forwards to [Log].
- *
- * Calls to [performLog] are sent to either [Log.wtf] (for [Timber.ASSERT] level) or [Log.println]
- * (for everything else). Prior to API 24, log tags are automatically truncated to 23 characters.
- * Log messages will be split if they exceed 4000 characters to work around the platform message
- * limit.
- *
- * Note: This does not check [Log.isLoggable] by default. Call [withCompliantLogging] for an
- * instance which delegates to this method prior to logging.
- */
-class LogcatTree @JvmOverloads constructor(private val defaultTag: String = ""App"") : Tree() {
-  /** Return a new [Tree] that checks [Log.isLoggable] prior to logging. */
-  fun withCompliantLogging() = object : Tree() {
-    override fun isLoggable(priority: Int, tag: String?): Boolean {
-      return Log.isLoggable(tag.asSafeTag(), priority)
-    }
-
-    override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-      this@LogcatTree.performLog(priority, tag, throwable, message)
-    }
-  }
-
-  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    val safeTag = tag.asSafeTag()
-
-    val fullMessage = if (message != null) {
-      if (throwable != null) {
-        ""$message\n${throwable.stackTraceString}""
-      } else {
-        message
-      }
-    } else if (throwable != null) {
-      throwable.stackTraceString
-    } else {
-      return // Nothing to do!
-    }
-
-    val length = fullMessage.length
-    if (length <= MAX_LOG_LENGTH) {
-      // Fast path for small messages which can fit in a single call.
-      if (priority == Timber.ASSERT) {
-        Log.wtf(safeTag, fullMessage)
-      } else {
-        Log.println(priority, safeTag, fullMessage)
-      }
-      return
-    }
-
-    // Slow path: Split by line, then ensure each line can fit into Log's maximum length.
-    // TODO use lastIndexOf instead of indexOf to batch multiple lines into single calls.
-    var i = 0
-    while (i < length) {
-      var newline = fullMessage.indexOf('\n', i)
-      newline = if (newline != -1) newline else length
-      do {
-        val end = Math.min(newline, i + MAX_LOG_LENGTH)
-        val part = fullMessage.substring(i, end)
-        if (priority == Log.ASSERT) {
-          Log.wtf(safeTag, part)
-        } else {
-          Log.println(priority, safeTag, part)
-        }
-        i = end
-      } while (i < newline)
-      i++
-    }
-  }
-
-  private fun String?.asSafeTag(): String {
-    val tag = this ?: defaultTag
-    // Tag length limit was removed in API 24.
-    if (Build.VERSION.SDK_INT < 24 && tag.length > MAX_TAG_LENGTH) {
-      return tag.substring(0, MAX_TAG_LENGTH)
-    }
-    return tag
-  }
-
-  private val Throwable.stackTraceString get(): String {
-    // DO NOT replace this with Log.getStackTraceString() - it hides UnknownHostException, which is
-    // not what we want.
-    val sw = StringWriter(256)
-    val pw = PrintWriter(sw, false)
-    printStackTrace(pw)
-    pw.flush()
-    return sw.toString()
-  }
-}",False,source
build.gradle,build.gradle,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -15,19 +15,7 @@ buildscript {
 
   ext.deps = [
       androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
-      'kotlin': [
-          'stdlib': [
-              'common': ""org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}"",
-              'jdk': ""org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"",
-              'js': ""org.jetbrains.kotlin:kotlin-stdlib-js:${versions.kotlin}"",
-          ],
-          'test': [
-              'common': ""org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}"",
-              'annotations': ""org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}"",
-              'jdk': ""org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"",
-              'js': ""org.jetbrains.kotlin:kotlin-test-js:${versions.kotlin}"",
-          ],
-      ],
+      kotlinPlugin: ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
       'butterknife': [
           'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
           'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
@@ -48,14 +36,12 @@ buildscript {
   repositories {
     jcenter()
     google()
-    gradlePluginPortal()
   }
 
   dependencies {
     classpath deps.androidPlugin
+    classpath deps.kotlinPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
-    classpath ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}""
-    classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
   }
 }","@@ -15,19 +15,7 @@ buildscript {
 
   ext.deps = [
       androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
-      'kotlin': [
-          'stdlib': [
-              'common': ""org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}"",
-              'jdk': ""org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"",
-              'js': ""org.jetbrains.kotlin:kotlin-stdlib-js:${versions.kotlin}"",
-          ],
-          'test': [
-              'common': ""org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}"",
-              'annotations': ""org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}"",
-              'jdk': ""org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"",
-              'js': ""org.jetbrains.kotlin:kotlin-test-js:${versions.kotlin}"",
-          ],
-      ],
+      kotlinPlugin: ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
       'butterknife': [
           'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
           'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
@@ -48,14 +36,12 @@ buildscript {
   repositories {
     jcenter()
     google()
-    gradlePluginPortal()
   }
 
   dependencies {
     classpath deps.androidPlugin
+    classpath deps.kotlinPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
-    classpath ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}""
-    classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
   }
 }",False,other
common/build.gradle,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,11 +0,0 @@
-apply plugin: 'org.jetbrains.kotlin.platform.common'
-
-archivesBaseName = 'timber-common'
-
-dependencies {
-  implementation deps.kotlin.stdlib.common
-  testImplementation deps.kotlin.test.common
-  testImplementation deps.kotlin.test.annotations
-}
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -1,11 +0,0 @@
-apply plugin: 'org.jetbrains.kotlin.platform.common'
-
-archivesBaseName = 'timber-common'
-
-dependencies {
-  implementation deps.kotlin.stdlib.common
-  testImplementation deps.kotlin.test.common
-  testImplementation deps.kotlin.test.annotations
-}
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
common/gradle.properties,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,3 +0,0 @@
-POM_ARTIFACT_ID=timber-common
-POM_NAME=Timber (Common)
-POM_PACKAGING=jar","@@ -1,3 +0,0 @@
-POM_ARTIFACT_ID=timber-common
-POM_NAME=Timber (Common)
-POM_PACKAGING=jar",False,other
common/src/main/kotlin/timber/log/Timber.kt,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,107 +0,0 @@
-package timber.log
-
-object Timber {
-  private val forestList = mutableListOf<Tree>()
-  private var forestArray: Array<Tree> = emptyArray()
-
-  val trees get() = forestArray.toList()
-
-  val size get() = forestArray.size
-
-  fun uprootAll() {
-    synchronized(forestList) {
-      forestList.clear()
-      forestArray = emptyArray()
-    }
-  }
-
-  fun uproot(tree: Tree) {
-    synchronized(forestList) {
-      require(forestList.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
-      forestArray = forestList.toTypedArray()
-    }
-  }
-
-  fun plant(tree: Tree) {
-    synchronized(forestList) {
-      forestList.add(tree)
-      forestArray = forestList.toTypedArray()
-    }
-  }
-
-  fun plant(vararg trees: Tree) {
-    synchronized(forestList) {
-      forestList.addAll(trees)
-      forestArray = forestList.toTypedArray()
-    }
-  }
-
-  fun plantAll(trees: Iterable<Tree>) {
-    synchronized(forestList) {
-      forestList.addAll(trees)
-      forestArray = forestList.toTypedArray()
-    }
-  }
-
-  fun isLoggable(priority: Int, tag: String? = null) = forestArray.any { it.isLoggable(priority, tag) }
-
-  fun log(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    forestArray.forEach { it.log(priority, tag, throwable, message) }
-  }
-
-  /** Invoked only when [isLoggable] has returned true. */
-  @PublishedApi
-  internal fun rawLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    forestArray.forEach { it.rawLog(priority, tag, throwable, message) }
-  }
-
-  fun tagged(tag: String): Tree {
-    val taggedTag = tag
-    return object : Tree() {
-      override fun isLoggable(priority: Int, tag: String?): Boolean {
-        return Timber.isLoggable(priority, tag ?: taggedTag)
-      }
-
-      override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-        Timber.log(priority, tag ?: taggedTag, throwable, message)
-      }
-    }
-  }
-
-  const val VERBOSE = 2
-  const val DEBUG = 3
-  const val INFO = 4
-  const val WARNING = 5
-  const val ERROR = 6
-  const val ASSERT = 7
-}
-
-inline fun Timber.log(priority: Int, throwable: Throwable? = null, message: () -> String) {
-  if (isLoggable(priority, null)) {
-    rawLog(priority, null, throwable, message())
-  }
-}
-
-inline fun Timber.assert(throwable: Throwable? = null, message: () -> String) {
-  log(ASSERT, throwable, message)
-}
-
-inline fun Timber.error(throwable: Throwable? = null, message: () -> String) {
-  log(ERROR, throwable, message)
-}
-
-inline fun Timber.warn(throwable: Throwable? = null, message: () -> String) {
-  log(WARNING, throwable, message)
-}
-
-inline fun Timber.info(throwable: Throwable? = null, message: () -> String) {
-  log(INFO, throwable, message)
-}
-
-inline fun Timber.debug(throwable: Throwable? = null, message: () -> String) {
-  log(DEBUG, throwable, message)
-}
-
-inline fun Timber.verbose(throwable: Throwable? = null, message: () -> String) {
-  log(VERBOSE, throwable, message)
-}","@@ -1,107 +0,0 @@
-package timber.log
-
-object Timber {
-  private val forestList = mutableListOf<Tree>()
-  private var forestArray: Array<Tree> = emptyArray()
-
-  val trees get() = forestArray.toList()
-
-  val size get() = forestArray.size
-
-  fun uprootAll() {
-    synchronized(forestList) {
-      forestList.clear()
-      forestArray = emptyArray()
-    }
-  }
-
-  fun uproot(tree: Tree) {
-    synchronized(forestList) {
-      require(forestList.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
-      forestArray = forestList.toTypedArray()
-    }
-  }
-
-  fun plant(tree: Tree) {
-    synchronized(forestList) {
-      forestList.add(tree)
-      forestArray = forestList.toTypedArray()
-    }
-  }
-
-  fun plant(vararg trees: Tree) {
-    synchronized(forestList) {
-      forestList.addAll(trees)
-      forestArray = forestList.toTypedArray()
-    }
-  }
-
-  fun plantAll(trees: Iterable<Tree>) {
-    synchronized(forestList) {
-      forestList.addAll(trees)
-      forestArray = forestList.toTypedArray()
-    }
-  }
-
-  fun isLoggable(priority: Int, tag: String? = null) = forestArray.any { it.isLoggable(priority, tag) }
-
-  fun log(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    forestArray.forEach { it.log(priority, tag, throwable, message) }
-  }
-
-  /** Invoked only when [isLoggable] has returned true. */
-  @PublishedApi
-  internal fun rawLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    forestArray.forEach { it.rawLog(priority, tag, throwable, message) }
-  }
-
-  fun tagged(tag: String): Tree {
-    val taggedTag = tag
-    return object : Tree() {
-      override fun isLoggable(priority: Int, tag: String?): Boolean {
-        return Timber.isLoggable(priority, tag ?: taggedTag)
-      }
-
-      override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-        Timber.log(priority, tag ?: taggedTag, throwable, message)
-      }
-    }
-  }
-
-  const val VERBOSE = 2
-  const val DEBUG = 3
-  const val INFO = 4
-  const val WARNING = 5
-  const val ERROR = 6
-  const val ASSERT = 7
-}
-
-inline fun Timber.log(priority: Int, throwable: Throwable? = null, message: () -> String) {
-  if (isLoggable(priority, null)) {
-    rawLog(priority, null, throwable, message())
-  }
-}
-
-inline fun Timber.assert(throwable: Throwable? = null, message: () -> String) {
-  log(ASSERT, throwable, message)
-}
-
-inline fun Timber.error(throwable: Throwable? = null, message: () -> String) {
-  log(ERROR, throwable, message)
-}
-
-inline fun Timber.warn(throwable: Throwable? = null, message: () -> String) {
-  log(WARNING, throwable, message)
-}
-
-inline fun Timber.info(throwable: Throwable? = null, message: () -> String) {
-  log(INFO, throwable, message)
-}
-
-inline fun Timber.debug(throwable: Throwable? = null, message: () -> String) {
-  log(DEBUG, throwable, message)
-}
-
-inline fun Timber.verbose(throwable: Throwable? = null, message: () -> String) {
-  log(VERBOSE, throwable, message)
-}",False,source
common/src/main/kotlin/timber/log/Tree.kt,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,61 +0,0 @@
-package timber.log
-
-import timber.log.Timber.ASSERT
-import timber.log.Timber.DEBUG
-import timber.log.Timber.ERROR
-import timber.log.Timber.INFO
-import timber.log.Timber.VERBOSE
-import timber.log.Timber.WARNING
-
-abstract class Tree {
-  /**
-   * Returns true when [priority] will be logged. Behavior is undefined for values other than
-   * [Timber.ASSERT], [Timber.ERROR], [Timber.WARNING], [Timber.INFO], [Timber.DEBUG], and
-   * [Timber.VERBOSE].
-   */
-  open fun isLoggable(priority: Int, tag: String? = null) = true
-
-  fun log(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    if (isLoggable(priority, tag)) {
-      performLog(priority, tag, throwable, message)
-    }
-  }
-
-  /** Invoked only when [isLoggable] has returned true. */
-  @PublishedApi
-  internal fun rawLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    performLog(priority, tag, throwable, message)
-  }
-
-  protected abstract fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?)
-}
-
-inline fun Tree.log(priority: Int, throwable: Throwable? = null, message: () -> String) {
-  if (isLoggable(priority, null)) {
-    rawLog(priority, null, throwable, message())
-  }
-}
-
-inline fun Tree.assert(throwable: Throwable? = null, message: () -> String) {
-  log(ASSERT, throwable, message)
-}
-
-inline fun Tree.error(throwable: Throwable? = null, message: () -> String) {
-  log(ERROR, throwable, message)
-}
-
-inline fun Tree.warn(throwable: Throwable? = null, message: () -> String) {
-  log(WARNING, throwable, message)
-}
-
-inline fun Tree.info(throwable: Throwable? = null, message: () -> String) {
-  log(INFO, throwable, message)
-}
-
-inline fun Tree.debug(throwable: Throwable? = null, message: () -> String) {
-  log(DEBUG, throwable, message)
-}
-
-inline fun Tree.verbose(throwable: Throwable? = null, message: () -> String) {
-  log(VERBOSE, throwable, message)
-}","@@ -1,61 +0,0 @@
-package timber.log
-
-import timber.log.Timber.ASSERT
-import timber.log.Timber.DEBUG
-import timber.log.Timber.ERROR
-import timber.log.Timber.INFO
-import timber.log.Timber.VERBOSE
-import timber.log.Timber.WARNING
-
-abstract class Tree {
-  /**
-   * Returns true when [priority] will be logged. Behavior is undefined for values other than
-   * [Timber.ASSERT], [Timber.ERROR], [Timber.WARNING], [Timber.INFO], [Timber.DEBUG], and
-   * [Timber.VERBOSE].
-   */
-  open fun isLoggable(priority: Int, tag: String? = null) = true
-
-  fun log(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    if (isLoggable(priority, tag)) {
-      performLog(priority, tag, throwable, message)
-    }
-  }
-
-  /** Invoked only when [isLoggable] has returned true. */
-  @PublishedApi
-  internal fun rawLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    performLog(priority, tag, throwable, message)
-  }
-
-  protected abstract fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?)
-}
-
-inline fun Tree.log(priority: Int, throwable: Throwable? = null, message: () -> String) {
-  if (isLoggable(priority, null)) {
-    rawLog(priority, null, throwable, message())
-  }
-}
-
-inline fun Tree.assert(throwable: Throwable? = null, message: () -> String) {
-  log(ASSERT, throwable, message)
-}
-
-inline fun Tree.error(throwable: Throwable? = null, message: () -> String) {
-  log(ERROR, throwable, message)
-}
-
-inline fun Tree.warn(throwable: Throwable? = null, message: () -> String) {
-  log(WARNING, throwable, message)
-}
-
-inline fun Tree.info(throwable: Throwable? = null, message: () -> String) {
-  log(INFO, throwable, message)
-}
-
-inline fun Tree.debug(throwable: Throwable? = null, message: () -> String) {
-  log(DEBUG, throwable, message)
-}
-
-inline fun Tree.verbose(throwable: Throwable? = null, message: () -> String) {
-  log(VERBOSE, throwable, message)
-}",False,source
common/src/test/kotlin/timber/log/ListTree.kt,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,54 +0,0 @@
-package timber.log
-
-class ListTree(allowedLevel: Int = Timber.VERBOSE, allowedTags: Set<String> = setOf()) : Tree() {
-  val allowedTags = allowedTags.toMutableSet()
-  var allowedLevel = allowedLevel
-    set(value) {
-      when (value) {
-        Timber.VERBOSE, Timber.DEBUG, Timber.INFO, Timber.WARNING, Timber.ERROR, Timber.ASSERT -> {
-          field = value
-        }
-        else -> throw IllegalArgumentException(""Unknown log level: $value"")
-      }
-    }
-
-  private val _messages = mutableListOf<String>()
-  val messages get() = _messages
-
-  override fun isLoggable(priority: Int, tag: String?): Boolean {
-    return priority <= allowedLevel && (allowedTags.isEmpty() || allowedTags.contains(tag))
-  }
-
-  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    if (isLoggable(priority, tag)) {
-      _messages.add(buildString {
-        append(priority.toPriorityString())
-        if (tag != null) {
-          append(' ')
-          append(tag)
-        }
-        if (message != null) {
-          append(' ' )
-          append(message)
-        }
-        if (throwable != null) {
-          append("" ["")
-          append(throwable::class)
-          append("": "")
-          append(throwable.message)
-          append(']')
-        }
-      })
-    }
-  }
-
-  private fun Int.toPriorityString() = when(this) {
-    Timber.VERBOSE -> ""VERBOSE""
-    Timber.DEBUG -> ""DEBUG""
-    Timber.INFO -> ""INFO""
-    Timber.WARNING -> ""WARNING""
-    Timber.ERROR -> ""ERROR""
-    Timber.ASSERT -> ""ASSERT""
-    else -> throw IllegalArgumentException(""Unknown priority: $this"")
-  }
-}","@@ -1,54 +0,0 @@
-package timber.log
-
-class ListTree(allowedLevel: Int = Timber.VERBOSE, allowedTags: Set<String> = setOf()) : Tree() {
-  val allowedTags = allowedTags.toMutableSet()
-  var allowedLevel = allowedLevel
-    set(value) {
-      when (value) {
-        Timber.VERBOSE, Timber.DEBUG, Timber.INFO, Timber.WARNING, Timber.ERROR, Timber.ASSERT -> {
-          field = value
-        }
-        else -> throw IllegalArgumentException(""Unknown log level: $value"")
-      }
-    }
-
-  private val _messages = mutableListOf<String>()
-  val messages get() = _messages
-
-  override fun isLoggable(priority: Int, tag: String?): Boolean {
-    return priority <= allowedLevel && (allowedTags.isEmpty() || allowedTags.contains(tag))
-  }
-
-  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    if (isLoggable(priority, tag)) {
-      _messages.add(buildString {
-        append(priority.toPriorityString())
-        if (tag != null) {
-          append(' ')
-          append(tag)
-        }
-        if (message != null) {
-          append(' ' )
-          append(message)
-        }
-        if (throwable != null) {
-          append("" ["")
-          append(throwable::class)
-          append("": "")
-          append(throwable.message)
-          append(']')
-        }
-      })
-    }
-  }
-
-  private fun Int.toPriorityString() = when(this) {
-    Timber.VERBOSE -> ""VERBOSE""
-    Timber.DEBUG -> ""DEBUG""
-    Timber.INFO -> ""INFO""
-    Timber.WARNING -> ""WARNING""
-    Timber.ERROR -> ""ERROR""
-    Timber.ASSERT -> ""ASSERT""
-    else -> throw IllegalArgumentException(""Unknown priority: $this"")
-  }
-}",False,test
common/src/test/kotlin/timber/log/TimberTest.kt,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,60 +0,0 @@
-package timber.log
-
-import kotlin.test.AfterTest
-import kotlin.test.BeforeTest
-import kotlin.test.Test
-import kotlin.test.assertEquals
-import kotlin.test.assertFailsWith
-
-class TimberTest {
-  @BeforeTest @AfterTest fun after() {
-    Timber.uprootAll()
-  }
-
-  @Test fun size() {
-    assertEquals(0, Timber.size)
-
-    for (i in 1..50) {
-      Timber.plant(ListTree())
-      assertEquals(i, Timber.size)
-    }
-
-    assertEquals(50, Timber.size)
-
-    Timber.uprootAll()
-    assertEquals(0, Timber.size)
-  }
-
-  @Test fun plant() {
-    val one = ListTree()
-    Timber.plant(one)
-    val two = ListTree()
-    Timber.plant(two)
-
-    assertEquals(listOf(one, two), Timber.trees)
-  }
-
-  @Test fun plantVarargs() {
-    val one = ListTree()
-    val two = ListTree()
-    Timber.plant(one, two)
-
-    assertEquals(listOf(one, two), Timber.trees)
-  }
-
-  @Test fun plantAll() {
-    val one = ListTree()
-    val two = ListTree()
-    Timber.plantAll(listOf(one, two))
-
-    assertEquals(listOf(one, two), Timber.trees)
-  }
-
-  @Test fun uprootThrowsIfMissing() {
-    val tree = ListTree()
-    assertFailsWith(IllegalArgumentException::class,
-        ""Cannot uproot tree which is not planted: $tree"") {
-      Timber.uproot(tree)
-    }
-  }
-}","@@ -1,60 +0,0 @@
-package timber.log
-
-import kotlin.test.AfterTest
-import kotlin.test.BeforeTest
-import kotlin.test.Test
-import kotlin.test.assertEquals
-import kotlin.test.assertFailsWith
-
-class TimberTest {
-  @BeforeTest @AfterTest fun after() {
-    Timber.uprootAll()
-  }
-
-  @Test fun size() {
-    assertEquals(0, Timber.size)
-
-    for (i in 1..50) {
-      Timber.plant(ListTree())
-      assertEquals(i, Timber.size)
-    }
-
-    assertEquals(50, Timber.size)
-
-    Timber.uprootAll()
-    assertEquals(0, Timber.size)
-  }
-
-  @Test fun plant() {
-    val one = ListTree()
-    Timber.plant(one)
-    val two = ListTree()
-    Timber.plant(two)
-
-    assertEquals(listOf(one, two), Timber.trees)
-  }
-
-  @Test fun plantVarargs() {
-    val one = ListTree()
-    val two = ListTree()
-    Timber.plant(one, two)
-
-    assertEquals(listOf(one, two), Timber.trees)
-  }
-
-  @Test fun plantAll() {
-    val one = ListTree()
-    val two = ListTree()
-    Timber.plantAll(listOf(one, two))
-
-    assertEquals(listOf(one, two), Timber.trees)
-  }
-
-  @Test fun uprootThrowsIfMissing() {
-    val tree = ListTree()
-    assertFailsWith(IllegalArgumentException::class,
-        ""Cannot uproot tree which is not planted: $tree"") {
-      Timber.uproot(tree)
-    }
-  }
-}",False,test
gradle.properties,gradle.properties,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=5.0.0-SNAPSHOT
+VERSION_NAME=4.7.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.
 
@@ -14,3 +14,5 @@ POM_LICENCE_DIST=repo
 
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
+
+org.gradle.jvmargs=-Xmx1536M","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=5.0.0-SNAPSHOT
+VERSION_NAME=4.7.2-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.
 
@@ -14,3 +14,5 @@ POM_LICENCE_DIST=repo
 
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
+
+org.gradle.jvmargs=-Xmx1536M",False,other
gradle/gradle-mvn-push.gradle,gradle/gradle-mvn-push.gradle,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -17,23 +17,10 @@
 apply plugin: 'maven'
 apply plugin: 'signing'
 
-version = VERSION_NAME
-group = GROUP
-
 def isReleaseBuild() {
   return VERSION_NAME.contains(""SNAPSHOT"") == false
 }
 
-def getReleaseRepositoryUrl() {
-  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
-          ""https://oss.sonatype.org/service/local/staging/deploy/maven2/""
-}
-
-def getSnapshotRepositoryUrl() {
-  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
-          ""https://oss.sonatype.org/content/repositories/snapshots/""
-}
-
 def getRepositoryUsername() {
   return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : """"
 }
@@ -52,10 +39,10 @@ afterEvaluate { project ->
         pom.artifactId = POM_ARTIFACT_ID
         pom.version = VERSION_NAME
 
-        repository(url: getReleaseRepositoryUrl()) {
+        repository(url: ""https://oss.sonatype.org/service/local/staging/deploy/maven2/"") {
           authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
         }
-        snapshotRepository(url: getSnapshotRepositoryUrl()) {
+        snapshotRepository(url: ""https://oss.sonatype.org/content/repositories/snapshots/"") {
           authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
         }
 
@@ -95,119 +82,31 @@ afterEvaluate { project ->
     sign configurations.archives
   }
 
-  if (project.getPlugins().hasPlugin('com.android.application') ||
-          project.getPlugins().hasPlugin('com.android.library')) {
-    task install(type: Upload, dependsOn: assemble) {
-      repositories.mavenInstaller {
-        configuration = configurations.archives
-
-        pom.groupId = GROUP
-        pom.artifactId = POM_ARTIFACT_ID
-        pom.version = VERSION_NAME
-
-        pom.project {
-          name POM_NAME
-          packaging POM_PACKAGING
-          description POM_DESCRIPTION
-          url POM_URL
-
-          scm {
-            url POM_SCM_URL
-            connection POM_SCM_CONNECTION
-            developerConnection POM_SCM_DEV_CONNECTION
-          }
-
-          licenses {
-            license {
-              name POM_LICENCE_NAME
-              url POM_LICENCE_URL
-              distribution POM_LICENCE_DIST
-            }
-          }
+  task androidJavadocs(type: Javadoc) {
+    source = android.sourceSets.main.java.srcDirs
+    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
 
-          developers {
-            developer {
-              id POM_DEVELOPER_ID
-              name POM_DEVELOPER_NAME
-            }
-          }
+    if (JavaVersion.current().isJava8Compatible()) {
+      allprojects {
+        tasks.withType(Javadoc) {
+          options.addStringOption('Xdoclint:none', '-quiet')
         }
       }
     }
+  }
 
-    task androidJavadocsJar(type: Jar) {
-      classifier = 'javadoc'
-      from ""$buildDir/dokkaJavadoc""
-    }
-
-    task androidSourcesJar(type: Jar) {
-      classifier = 'sources'
-      from android.sourceSets.main.java.source
-    }
-  } else {
-    install {
-      repositories.mavenInstaller {
-        pom.groupId = GROUP
-        pom.artifactId = POM_ARTIFACT_ID
-        pom.version = VERSION_NAME
-
-        pom.project {
-          name POM_NAME
-          packaging POM_PACKAGING
-          description POM_DESCRIPTION
-          url POM_URL
-
-          scm {
-            url POM_SCM_URL
-            connection POM_SCM_CONNECTION
-            developerConnection POM_SCM_DEV_CONNECTION
-          }
-
-          licenses {
-            license {
-              name POM_LICENCE_NAME
-              url POM_LICENCE_URL
-              distribution POM_LICENCE_DIST
-            }
-          }
-
-          developers {
-            developer {
-              id POM_DEVELOPER_ID
-              name POM_DEVELOPER_NAME
-            }
-          }
-        }
-      }
-    }
-
-    task sourcesJar(type: Jar, dependsOn: classes) {
-      classifier = 'sources'
-      from sourceSets.main.allSource
-    }
-
-    task javadocJar(type: Jar, dependsOn: javadoc) {
-      classifier = 'javadoc'
-      from javadoc.destinationDir
-    }
+  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
+    classifier = 'javadoc'
+    from androidJavadocs.destinationDir
   }
 
-  if (JavaVersion.current().isJava8Compatible()) {
-    allprojects {
-      tasks.withType(Javadoc) {
-        options.addStringOption('Xdoclint:none', '-quiet')
-      }
-    }
+  task androidSourcesJar(type: Jar) {
+    classifier = 'sources'
+    from android.sourceSets.main.java.sourceFiles
   }
 
   artifacts {
-    if (project.getPlugins().hasPlugin('com.android.application') ||
-            project.getPlugins().hasPlugin('com.android.library')) {
-      archives androidSourcesJar
-      archives androidJavadocsJar
-    } else {
-      archives sourcesJar
-      archives javadocJar
-    }
+    archives androidSourcesJar
+    archives androidJavadocsJar
   }
 }","@@ -17,23 +17,10 @@
 apply plugin: 'maven'
 apply plugin: 'signing'
 
-version = VERSION_NAME
-group = GROUP
-
 def isReleaseBuild() {
   return VERSION_NAME.contains(""SNAPSHOT"") == false
 }
 
-def getReleaseRepositoryUrl() {
-  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
-          ""https://oss.sonatype.org/service/local/staging/deploy/maven2/""
-}
-
-def getSnapshotRepositoryUrl() {
-  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
-          ""https://oss.sonatype.org/content/repositories/snapshots/""
-}
-
 def getRepositoryUsername() {
   return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : """"
 }
@@ -52,10 +39,10 @@ afterEvaluate { project ->
         pom.artifactId = POM_ARTIFACT_ID
         pom.version = VERSION_NAME
 
-        repository(url: getReleaseRepositoryUrl()) {
+        repository(url: ""https://oss.sonatype.org/service/local/staging/deploy/maven2/"") {
           authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
         }
-        snapshotRepository(url: getSnapshotRepositoryUrl()) {
+        snapshotRepository(url: ""https://oss.sonatype.org/content/repositories/snapshots/"") {
           authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
         }
 
@@ -95,119 +82,31 @@ afterEvaluate { project ->
     sign configurations.archives
   }
 
-  if (project.getPlugins().hasPlugin('com.android.application') ||
-          project.getPlugins().hasPlugin('com.android.library')) {
-    task install(type: Upload, dependsOn: assemble) {
-      repositories.mavenInstaller {
-        configuration = configurations.archives
-
-        pom.groupId = GROUP
-        pom.artifactId = POM_ARTIFACT_ID
-        pom.version = VERSION_NAME
-
-        pom.project {
-          name POM_NAME
-          packaging POM_PACKAGING
-          description POM_DESCRIPTION
-          url POM_URL
-
-          scm {
-            url POM_SCM_URL
-            connection POM_SCM_CONNECTION
-            developerConnection POM_SCM_DEV_CONNECTION
-          }
-
-          licenses {
-            license {
-              name POM_LICENCE_NAME
-              url POM_LICENCE_URL
-              distribution POM_LICENCE_DIST
-            }
-          }
+  task androidJavadocs(type: Javadoc) {
+    source = android.sourceSets.main.java.srcDirs
+    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
 
-          developers {
-            developer {
-              id POM_DEVELOPER_ID
-              name POM_DEVELOPER_NAME
-            }
-          }
+    if (JavaVersion.current().isJava8Compatible()) {
+      allprojects {
+        tasks.withType(Javadoc) {
+          options.addStringOption('Xdoclint:none', '-quiet')
         }
       }
     }
+  }
 
-    task androidJavadocsJar(type: Jar) {
-      classifier = 'javadoc'
-      from ""$buildDir/dokkaJavadoc""
-    }
-
-    task androidSourcesJar(type: Jar) {
-      classifier = 'sources'
-      from android.sourceSets.main.java.source
-    }
-  } else {
-    install {
-      repositories.mavenInstaller {
-        pom.groupId = GROUP
-        pom.artifactId = POM_ARTIFACT_ID
-        pom.version = VERSION_NAME
-
-        pom.project {
-          name POM_NAME
-          packaging POM_PACKAGING
-          description POM_DESCRIPTION
-          url POM_URL
-
-          scm {
-            url POM_SCM_URL
-            connection POM_SCM_CONNECTION
-            developerConnection POM_SCM_DEV_CONNECTION
-          }
-
-          licenses {
-            license {
-              name POM_LICENCE_NAME
-              url POM_LICENCE_URL
-              distribution POM_LICENCE_DIST
-            }
-          }
-
-          developers {
-            developer {
-              id POM_DEVELOPER_ID
-              name POM_DEVELOPER_NAME
-            }
-          }
-        }
-      }
-    }
-
-    task sourcesJar(type: Jar, dependsOn: classes) {
-      classifier = 'sources'
-      from sourceSets.main.allSource
-    }
-
-    task javadocJar(type: Jar, dependsOn: javadoc) {
-      classifier = 'javadoc'
-      from javadoc.destinationDir
-    }
+  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
+    classifier = 'javadoc'
+    from androidJavadocs.destinationDir
   }
 
-  if (JavaVersion.current().isJava8Compatible()) {
-    allprojects {
-      tasks.withType(Javadoc) {
-        options.addStringOption('Xdoclint:none', '-quiet')
-      }
-    }
+  task androidSourcesJar(type: Jar) {
+    classifier = 'sources'
+    from android.sourceSets.main.java.sourceFiles
   }
 
   artifacts {
-    if (project.getPlugins().hasPlugin('com.android.application') ||
-            project.getPlugins().hasPlugin('com.android.library')) {
-      archives androidSourcesJar
-      archives androidJavadocsJar
-    } else {
-      archives sourcesJar
-      archives javadocJar
-    }
+    archives androidSourcesJar
+    archives androidJavadocsJar
   }
 }",False,other
jdk/build.gradle,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,11 +0,0 @@
-apply plugin: 'org.jetbrains.kotlin.platform.jvm'
-
-archivesBaseName = 'timber'
-
-dependencies {
-  expectedBy project(':common')
-  implementation deps.kotlin.stdlib.jdk
-  testImplementation deps.kotlin.test.jdk
-}
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -1,11 +0,0 @@
-apply plugin: 'org.jetbrains.kotlin.platform.jvm'
-
-archivesBaseName = 'timber'
-
-dependencies {
-  expectedBy project(':common')
-  implementation deps.kotlin.stdlib.jdk
-  testImplementation deps.kotlin.test.jdk
-}
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
jdk/gradle.properties,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,3 +0,0 @@
-POM_ARTIFACT_ID=timber-jdk
-POM_NAME=Timber (JDK)
-POM_PACKAGING=jar","@@ -1,3 +0,0 @@
-POM_ARTIFACT_ID=timber-jdk
-POM_NAME=Timber (JDK)
-POM_PACKAGING=jar",False,other
js/build.gradle,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,47 +0,0 @@
-apply plugin: 'org.jetbrains.kotlin.platform.js'
-apply plugin: 'com.moowork.node'
-
-archivesBaseName = 'timber'
-
-dependencies {
-  expectedBy project(':common')
-  compile deps.kotlin.stdlib.js
-  testCompile deps.kotlin.test.js
-}
-
-task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
-  from compileKotlin2Js.destinationDir
-  configurations.testCompileClasspath.each {
-    from zipTree(it.absolutePath).matching { include '*.js' }
-  }
-
-  into ""${buildDir}/node_modules""
-}
-
-compileKotlin2Js {
-  kotlinOptions.moduleKind = 'umd'
-  kotlinOptions.sourceMap = true
-  kotlinOptions.metaInfo = true
-}
-
-compileTestKotlin2Js {
-  kotlinOptions.moduleKind = 'commonjs'
-  kotlinOptions.sourceMap = true
-}
-
-node {
-  download = true
-}
-
-task installMocha(type: NpmTask) {
-  args = ['install', 'mocha']
-}
-
-task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installMocha]) {
-  script = file('node_modules/mocha/bin/mocha')
-  args = [compileTestKotlin2Js.outputFile]
-}
-
-test.dependsOn(runMocha)
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -1,47 +0,0 @@
-apply plugin: 'org.jetbrains.kotlin.platform.js'
-apply plugin: 'com.moowork.node'
-
-archivesBaseName = 'timber'
-
-dependencies {
-  expectedBy project(':common')
-  compile deps.kotlin.stdlib.js
-  testCompile deps.kotlin.test.js
-}
-
-task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
-  from compileKotlin2Js.destinationDir
-  configurations.testCompileClasspath.each {
-    from zipTree(it.absolutePath).matching { include '*.js' }
-  }
-
-  into ""${buildDir}/node_modules""
-}
-
-compileKotlin2Js {
-  kotlinOptions.moduleKind = 'umd'
-  kotlinOptions.sourceMap = true
-  kotlinOptions.metaInfo = true
-}
-
-compileTestKotlin2Js {
-  kotlinOptions.moduleKind = 'commonjs'
-  kotlinOptions.sourceMap = true
-}
-
-node {
-  download = true
-}
-
-task installMocha(type: NpmTask) {
-  args = ['install', 'mocha']
-}
-
-task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installMocha]) {
-  script = file('node_modules/mocha/bin/mocha')
-  args = [compileTestKotlin2Js.outputFile]
-}
-
-test.dependsOn(runMocha)
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
js/gradle.properties,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,3 +0,0 @@
-POM_ARTIFACT_ID=timber-js
-POM_NAME=Timber (JS)
-POM_PACKAGING=jar","@@ -1,3 +0,0 @@
-POM_ARTIFACT_ID=timber-js
-POM_NAME=Timber (JS)
-POM_PACKAGING=jar",False,other
js/src/main/kotlin/timber/log/ConsoleTree.kt,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,18 +0,0 @@
-package timber.log
-
-import kotlin.js.Console
-
-class ConsoleTree(private val console: Console = kotlin.js.console) : Tree() {
-  override fun isLoggable(priority: Int, tag: String?) = priority != Timber.VERBOSE
-
-  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    when (priority) {
-      Timber.ERROR, Timber.ASSERT -> console.error(message)
-      Timber.WARNING -> console.warn(message)
-      Timber.INFO -> console.info(message)
-      Timber.DEBUG -> console.log(message)
-      Timber.VERBOSE -> {} // TODO use console.debug here?
-      else -> error(""Unknown priority level: $priority"")
-    }
-  }
-}","@@ -1,18 +0,0 @@
-package timber.log
-
-import kotlin.js.Console
-
-class ConsoleTree(private val console: Console = kotlin.js.console) : Tree() {
-  override fun isLoggable(priority: Int, tag: String?) = priority != Timber.VERBOSE
-
-  override fun performLog(priority: Int, tag: String?, throwable: Throwable?, message: String?) {
-    when (priority) {
-      Timber.ERROR, Timber.ASSERT -> console.error(message)
-      Timber.WARNING -> console.warn(message)
-      Timber.INFO -> console.info(message)
-      Timber.DEBUG -> console.log(message)
-      Timber.VERBOSE -> {} // TODO use console.debug here?
-      else -> error(""Unknown priority level: $priority"")
-    }
-  }
-}",False,source
js/src/test/kotlin/timber/log/ConsoleTreeTest.kt,,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,64 +0,0 @@
-package timber.log
-
-import kotlin.js.Console
-import kotlin.test.Ignore
-import kotlin.test.Test
-import kotlin.test.assertEquals
-import kotlin.test.assertFalse
-import kotlin.test.assertTrue
-
-class ConsoleLogTest {
-  private val fakeConsole = FakeConsole()
-  private val tree = ConsoleTree(fakeConsole)
-
-  @Test fun isLoggable() {
-    assertTrue(tree.isLoggable(Timber.ASSERT))
-    assertTrue(tree.isLoggable(Timber.ERROR))
-    assertTrue(tree.isLoggable(Timber.WARNING))
-    assertTrue(tree.isLoggable(Timber.INFO))
-    assertTrue(tree.isLoggable(Timber.DEBUG))
-    assertFalse(tree.isLoggable(Timber.VERBOSE))
-  }
-
-  @Test fun logs() {
-    tree.log(Timber.ASSERT, null, null, ""assert"")
-    tree.log(Timber.ERROR, null, null, ""error"")
-    tree.log(Timber.WARNING, null, null, ""warning"")
-    tree.log(Timber.INFO, null, null, ""info"")
-    tree.log(Timber.DEBUG, null, null, ""debug"")
-    tree.log(Timber.VERBOSE, null, null, ""verbose"")
-
-    // TODO fix messages https://youtrack.jetbrains.com/issue/KT-15223
-    val expected = listOf(
-        ""ERROR [a, s, s, e, r, t]"",
-        ""ERROR [e, r, r, o, r]"",
-        ""WARN [w, a, r, n, i, n, g]"",
-        ""INFO [i, n, f, o]"",
-        ""LOG [d, e, b, u, g]""
-    )
-    assertEquals(expected, fakeConsole.messages)
-  }
-}
-
-class FakeConsole : Console {
-  private val _messages = mutableListOf<String>()
-  val messages get() = _messages.toList()
-
-  override fun dir(o: Any) = throw UnsupportedOperationException()
-
-  override fun error(vararg o: Any?) {
-    _messages.add(""ERROR "" + o.map(Any?::toString))
-  }
-
-  override fun warn(vararg o: Any?) {
-    _messages.add(""WARN "" + o.map(Any?::toString))
-  }
-
-  override fun info(vararg o: Any?) {
-    _messages.add(""INFO "" + o.map(Any?::toString))
-  }
-
-  override fun log(vararg o: Any?) {
-    _messages.add(""LOG "" + o.map(Any?::toString))
-  }
-}","@@ -1,64 +0,0 @@
-package timber.log
-
-import kotlin.js.Console
-import kotlin.test.Ignore
-import kotlin.test.Test
-import kotlin.test.assertEquals
-import kotlin.test.assertFalse
-import kotlin.test.assertTrue
-
-class ConsoleLogTest {
-  private val fakeConsole = FakeConsole()
-  private val tree = ConsoleTree(fakeConsole)
-
-  @Test fun isLoggable() {
-    assertTrue(tree.isLoggable(Timber.ASSERT))
-    assertTrue(tree.isLoggable(Timber.ERROR))
-    assertTrue(tree.isLoggable(Timber.WARNING))
-    assertTrue(tree.isLoggable(Timber.INFO))
-    assertTrue(tree.isLoggable(Timber.DEBUG))
-    assertFalse(tree.isLoggable(Timber.VERBOSE))
-  }
-
-  @Test fun logs() {
-    tree.log(Timber.ASSERT, null, null, ""assert"")
-    tree.log(Timber.ERROR, null, null, ""error"")
-    tree.log(Timber.WARNING, null, null, ""warning"")
-    tree.log(Timber.INFO, null, null, ""info"")
-    tree.log(Timber.DEBUG, null, null, ""debug"")
-    tree.log(Timber.VERBOSE, null, null, ""verbose"")
-
-    // TODO fix messages https://youtrack.jetbrains.com/issue/KT-15223
-    val expected = listOf(
-        ""ERROR [a, s, s, e, r, t]"",
-        ""ERROR [e, r, r, o, r]"",
-        ""WARN [w, a, r, n, i, n, g]"",
-        ""INFO [i, n, f, o]"",
-        ""LOG [d, e, b, u, g]""
-    )
-    assertEquals(expected, fakeConsole.messages)
-  }
-}
-
-class FakeConsole : Console {
-  private val _messages = mutableListOf<String>()
-  val messages get() = _messages.toList()
-
-  override fun dir(o: Any) = throw UnsupportedOperationException()
-
-  override fun error(vararg o: Any?) {
-    _messages.add(""ERROR "" + o.map(Any?::toString))
-  }
-
-  override fun warn(vararg o: Any?) {
-    _messages.add(""WARN "" + o.map(Any?::toString))
-  }
-
-  override fun info(vararg o: Any?) {
-    _messages.add(""INFO "" + o.map(Any?::toString))
-  }
-
-  override fun log(vararg o: Any?) {
-    _messages.add(""LOG "" + o.map(Any?::toString))
-  }
-}",False,test
settings.gradle,settings.gradle,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -1,8 +1,5 @@
-rootProject.name = 'timber'
+include ':timber'
+include ':timber-lint'
+include ':timber-sample'
 
-include ':android'
-//include ':android-lint'
-include ':common'
-include ':js'
-include ':jdk'
-//include ':sample'
+rootProject.name = 'timber-root'","@@ -1,8 +1,5 @@
-rootProject.name = 'timber'
+include ':timber'
+include ':timber-lint'
+include ':timber-sample'
 
-include ':android'
-//include ':android-lint'
-include ':common'
-include ':js'
-include ':jdk'
-//include ':sample'
+rootProject.name = 'timber-root'",False,other
sample/build.gradle,timber-sample/build.gradle,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -24,9 +24,9 @@ android {
 }
 
 dependencies {
-  implementation project(':android')
+  implementation project(':timber')
   implementation deps.butterknife.runtime
   annotationProcessor deps.butterknife.compiler
   
-  lintChecks project(':android-lint')
+  lintChecks project(':timber-lint')
 }","@@ -0,0 +1,32 @@
+apply plugin: 'com.android.application'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_7
+    targetCompatibility JavaVersion.VERSION_1_7
+  }
+
+  defaultConfig {
+    applicationId 'com.example.timber'
+    minSdkVersion versions.minSdk
+    targetSdkVersion versions.compileSdk
+    versionCode 1
+    versionName '1.0.0'
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    ignore 'InvalidPackage'
+  }
+}
+
+dependencies {
+  implementation project(':timber')
+  implementation deps.butterknife.runtime
+  annotationProcessor deps.butterknife.compiler
+  
+  lintChecks project(':timber-lint')
+}",True,other
sample/src/main/java/com/example/timber/ExampleApp.java,timber-sample/src/main/java/com/example/timber/ExampleApp.java,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -3,12 +3,9 @@ package com.example.timber;
 import android.app.Application;
 import android.support.annotation.NonNull;
 import android.util.Log;
-import org.jetbrains.annotations.Nullable;
 import timber.log.Timber;
-import timber.log.Tree;
 
 import static timber.log.Timber.DebugTree;
-import static timber.log.Timber.INFO;
 
 public class ExampleApp extends Application {
   @Override public void onCreate() {
@@ -22,12 +19,8 @@ public class ExampleApp extends Application {
   }
 
   /** A tree which logs important information for crash reporting. */
-  private static final class CrashReportingTree extends Tree {
-    @Override public boolean isLoggable(int priority, @Nullable String tag) {
-      return priority >= INFO;
-    }
-
-    @Override protected void log(int priority, String tag, Throwable t, String message) {
+  private static class CrashReportingTree extends Timber.Tree {
+    @Override protected void log(int priority, String tag, @NonNull String message, Throwable t) {
       if (priority == Log.VERBOSE || priority == Log.DEBUG) {
         return;
       }","@@ -0,0 +1,39 @@
+package com.example.timber;
+
+import android.app.Application;
+import android.support.annotation.NonNull;
+import android.util.Log;
+import timber.log.Timber;
+
+import static timber.log.Timber.DebugTree;
+
+public class ExampleApp extends Application {
+  @Override public void onCreate() {
+    super.onCreate();
+
+    if (BuildConfig.DEBUG) {
+      Timber.plant(new DebugTree());
+    } else {
+      Timber.plant(new CrashReportingTree());
+    }
+  }
+
+  /** A tree which logs important information for crash reporting. */
+  private static class CrashReportingTree extends Timber.Tree {
+    @Override protected void log(int priority, String tag, @NonNull String message, Throwable t) {
+      if (priority == Log.VERBOSE || priority == Log.DEBUG) {
+        return;
+      }
+
+      FakeCrashLibrary.log(priority, tag, message);
+
+      if (t != null) {
+        if (priority == Log.ERROR) {
+          FakeCrashLibrary.logError(t);
+        } else if (priority == Log.WARN) {
+          FakeCrashLibrary.logWarning(t);
+        }
+      }
+    }
+  }
+}",True,source
sample/src/main/java/com/example/timber/ui/LintActivity.java,timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -54,16 +54,16 @@ public class LintActivity extends Activity {
     // TimberArgCount
     Timber.d(""%s %s"", ""arg0"");
     Timber.d(""%s"", ""arg0"", ""arg1"");
-    Timber.tagged(""tag"").d(""%s %s"", ""arg0"");
-    Timber.tagged(""tag"").d(""%s"", ""arg0"", ""arg1"");
+    Timber.tag(""tag"").d(""%s %s"", ""arg0"");
+    Timber.tag(""tag"").d(""%s"", ""arg0"", ""arg1"");
 
     // TimberArgTypes
     Timber.d(""%d"", ""arg0"");
-    Timber.tagged(""tag"").d(""%d"", ""arg0"");
+    Timber.tag(""tag"").d(""%d"", ""arg0"");
 
     // TimberTagLength
-    Timber.tagged(""abcdefghijklmnopqrstuvwx"");
-    Timber.tagged(""abcdefghijklmnopqrstuvw"" + ""x"");
+    Timber.tag(""abcdefghijklmnopqrstuvwx"");
+    Timber.tag(""abcdefghijklmnopqrstuvw"" + ""x"");
 
     // TimberExceptionLogging
     Timber.d(new Exception(), new Exception().getMessage());","@@ -0,0 +1,78 @@
+package com.example.timber.ui;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.Log;
+import timber.log.Timber;
+
+import static java.lang.String.format;
+
+@SuppressLint(""Registered"") //
+public class LintActivity extends Activity {
+  /**
+   * Below are some examples of how NOT to use Timber.
+   *
+   * To see how a particular lint issue behaves, comment/remove its corresponding id from the set
+   * of SuppressLint ids below.
+   */
+  @SuppressLint({
+      ""LogNotTimber"", //
+      ""StringFormatInTimber"", //
+      ""ThrowableNotAtBeginning"", //
+      ""BinaryOperationInTimber"", //
+      ""TimberArgCount"", //
+      ""TimberArgTypes"", //
+      ""TimberTagLength"", //
+      ""TimberExceptionLogging"" //
+  }) //
+  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+
+    // LogNotTimber
+    Log.d(""TAG"", ""msg"");
+    Log.d(""TAG"", ""msg"", new Exception());
+    android.util.Log.d(""TAG"", ""msg"");
+    android.util.Log.d(""TAG"", ""msg"", new Exception());
+
+    // StringFormatInTimber
+    Timber.w(String.format(""%s"", getString()));
+    Timber.w(format(""%s"", getString()));
+
+    // ThrowableNotAtBeginning
+    Timber.d(""%s"", new Exception());
+
+    // BinaryOperationInTimber
+    String foo = ""foo"";
+    String bar = ""bar"";
+    Timber.d(""foo"" + ""bar"");
+    Timber.d(""foo"" + bar);
+    Timber.d(foo + ""bar"");
+    Timber.d(foo + bar);
+
+    // TimberArgCount
+    Timber.d(""%s %s"", ""arg0"");
+    Timber.d(""%s"", ""arg0"", ""arg1"");
+    Timber.tag(""tag"").d(""%s %s"", ""arg0"");
+    Timber.tag(""tag"").d(""%s"", ""arg0"", ""arg1"");
+
+    // TimberArgTypes
+    Timber.d(""%d"", ""arg0"");
+    Timber.tag(""tag"").d(""%d"", ""arg0"");
+
+    // TimberTagLength
+    Timber.tag(""abcdefghijklmnopqrstuvwx"");
+    Timber.tag(""abcdefghijklmnopqrstuvw"" + ""x"");
+
+    // TimberExceptionLogging
+    Timber.d(new Exception(), new Exception().getMessage());
+    Timber.d(new Exception(), """");
+    Timber.d(new Exception(), null);
+    Timber.d(new Exception().getMessage());
+  }
+
+  private String getString() {
+    return ""foo"";
+  }
+}",True,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,72efb7c334255c85a6a1871f43b68eaad4aecf3e,6f7ecafd5f9d410106dcd02b2373b40cfb9e6809,"Revert ""Merge branch 'jakew/multiplatform/2018-05-16'""

This reverts commit b13cdf995720b047dd2165c59ad77c8d2b923c4b, reversing
changes made to 755fdfd9f38b5332f5fb33bba35f01dbe36d191c.","@@ -61,6 +61,72 @@ public class TimberTest {
     }
   }
 
+  @Test public void treeCount() {
+    // inserts trees and checks if the amount of returned trees matches.
+    assertThat(Timber.treeCount()).isEqualTo(0);
+    for (int i = 1; i < 50; i++) {
+      Timber.plant(new Timber.DebugTree());
+      assertThat(Timber.treeCount()).isEqualTo(i);
+    }
+    Timber.uprootAll();
+    assertThat(Timber.treeCount()).isEqualTo(0);
+  }
+
+  @SuppressWarnings(""ConstantConditions"")
+  @Test public void nullTree() {
+    Timber.Tree nullTree = null;
+    try {
+      Timber.plant(nullTree);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessageThat().isEqualTo(""tree == null"");
+    }
+  }
+
+  @SuppressWarnings(""ConstantConditions"")
+  @Test public void nullTreeArray() {
+    Timber.Tree[] nullTrees = null;
+    try {
+      Timber.plant(nullTrees);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessageThat().isEqualTo(""trees == null"");
+    }
+    nullTrees = new Timber.Tree[]{null};
+    try {
+      Timber.plant(nullTrees);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessageThat().isEqualTo(""trees contains null"");
+    }
+  }
+
+  @Test public void forestReturnsAllPlanted() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1);
+    Timber.plant(tree2);
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2);
+  }
+
+  @Test public void forestReturnsAllTreesPlanted() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1, tree2);
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2);
+  }
+
+  @Test public void uprootThrowsIfMissing() {
+    try {
+      Timber.uproot(new Timber.DebugTree());
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessageThat().startsWith(""Cannot uproot tree which is not planted: "");
+    }
+  }
+
   @Test public void uprootRemovesTree() {
     Timber.DebugTree tree1 = new Timber.DebugTree();
     Timber.DebugTree tree2 = new Timber.DebugTree();","@@ -61,6 +61,72 @@ public class TimberTest {
     }
   }
 
+  @Test public void treeCount() {
+    // inserts trees and checks if the amount of returned trees matches.
+    assertThat(Timber.treeCount()).isEqualTo(0);
+    for (int i = 1; i < 50; i++) {
+      Timber.plant(new Timber.DebugTree());
+      assertThat(Timber.treeCount()).isEqualTo(i);
+    }
+    Timber.uprootAll();
+    assertThat(Timber.treeCount()).isEqualTo(0);
+  }
+
+  @SuppressWarnings(""ConstantConditions"")
+  @Test public void nullTree() {
+    Timber.Tree nullTree = null;
+    try {
+      Timber.plant(nullTree);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessageThat().isEqualTo(""tree == null"");
+    }
+  }
+
+  @SuppressWarnings(""ConstantConditions"")
+  @Test public void nullTreeArray() {
+    Timber.Tree[] nullTrees = null;
+    try {
+      Timber.plant(nullTrees);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessageThat().isEqualTo(""trees == null"");
+    }
+    nullTrees = new Timber.Tree[]{null};
+    try {
+      Timber.plant(nullTrees);
+      fail();
+    } catch (NullPointerException e) {
+      assertThat(e).hasMessageThat().isEqualTo(""trees contains null"");
+    }
+  }
+
+  @Test public void forestReturnsAllPlanted() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1);
+    Timber.plant(tree2);
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2);
+  }
+
+  @Test public void forestReturnsAllTreesPlanted() {
+    Timber.DebugTree tree1 = new Timber.DebugTree();
+    Timber.DebugTree tree2 = new Timber.DebugTree();
+    Timber.plant(tree1, tree2);
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2);
+  }
+
+  @Test public void uprootThrowsIfMissing() {
+    try {
+      Timber.uproot(new Timber.DebugTree());
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessageThat().startsWith(""Cannot uproot tree which is not planted: "");
+    }
+  }
+
   @Test public void uprootRemovesTree() {
     Timber.DebugTree tree1 = new Timber.DebugTree();
     Timber.DebugTree tree2 = new Timber.DebugTree();",False,test
build.gradle,build.gradle,c47b5d36060d64d09e8faef600d561b67a196c2b,72efb7c334255c85a6a1871f43b68eaad4aecf3e,Dependency updates,"@@ -5,10 +5,10 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 28,
 
-      'kotlin': '1.2.51',
+      'kotlin': '1.3.21',
 
-      'androidPlugin': '3.1.3',
-      'androidTools': '26.1.3',
+      'androidPlugin': '3.3.2',
+      'androidTools': '26.3.2',
 
       'butterknife': '8.8.1',
   ]","@@ -5,10 +5,10 @@ buildscript {
       'minSdk': 9,
       'compileSdk': 28,
 
-      'kotlin': '1.2.51',
+      'kotlin': '1.3.21',
 
-      'androidPlugin': '3.1.3',
-      'androidTools': '26.1.3',
+      'androidPlugin': '3.3.2',
+      'androidTools': '26.3.2',
 
       'butterknife': '8.8.1',
   ]",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,c47b5d36060d64d09e8faef600d561b67a196c2b,72efb7c334255c85a6a1871f43b68eaad4aecf3e,Dependency updates,"@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.2.1-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.2.1-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists",False,other
build.gradle,build.gradle,1ec5daf7cf5c0d2f8a18fe3e651529b33dec81f7,c47b5d36060d64d09e8faef600d561b67a196c2b,Add japicmp for binary compatibility checking,"@@ -34,22 +34,25 @@ buildscript {
   ]
 
   repositories {
-    jcenter()
+    mavenCentral()
     google()
+    gradlePluginPortal()
+    jcenter()
   }
 
   dependencies {
     classpath deps.androidPlugin
     classpath deps.kotlinPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
+    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.6'
   }
 }
 
 subprojects {
   repositories {
     mavenCentral()
-    jcenter()
     google()
+    jcenter()
   }
 
   tasks.withType(Test) {","@@ -34,22 +34,25 @@ buildscript {
   ]
 
   repositories {
-    jcenter()
+    mavenCentral()
     google()
+    gradlePluginPortal()
+    jcenter()
   }
 
   dependencies {
     classpath deps.androidPlugin
     classpath deps.kotlinPlugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
+    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.6'
   }
 }
 
 subprojects {
   repositories {
     mavenCentral()
-    jcenter()
     google()
+    jcenter()
   }
 
   tasks.withType(Test) {",False,other
timber/build.gradle,timber/build.gradle,1ec5daf7cf5c0d2f8a18fe3e651529b33dec81f7,c47b5d36060d64d09e8faef600d561b67a196c2b,Add japicmp for binary compatibility checking,"@@ -1,5 +1,10 @@
 apply plugin: 'com.android.library'
 apply plugin: 'checkstyle'
+apply plugin: 'me.champeau.gradle.japicmp'
+
+configurations {
+  baseline
+}
 
 task checkstyle(type: Checkstyle) {
   configFile rootProject.file('checkstyle.xml')
@@ -45,6 +50,36 @@ dependencies {
   testImplementation deps.robolectric
 
   lintChecks project(':timber-lint')
+
+  baseline('com.jakewharton.timber:timber:4.7.1') {
+    transitive = false
+    force = true
+  }
+}
+
+android.libraryVariants.all { variant ->
+  if (variant.name != ""release"") {
+    return
+  }
+
+  task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
+    oldClasspath = configurations.baseline.incoming.artifactView { config ->
+      config.attributes {
+        container -> container.attribute(Attribute.of(""artifactType"", String.class), ""jar"")
+      }
+    }.artifacts.artifactFiles
+
+    // TODO query the outgoing jar in a more dynamic fashion
+    newClasspath = files(""$buildDir/intermediates/packaged-classes/${variant.name}/classes.jar"")
+
+    onlyBinaryIncompatibleModified = true
+    failOnModification = true
+    txtOutputFile = file(""$buildDir/reports/japi.txt"")
+    ignoreMissingClasses = true
+    includeSynthetic = true
+  }
+  japicmp.dependsOn(variant.assemble)
+  check.dependsOn(japicmp)
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -1,5 +1,10 @@
 apply plugin: 'com.android.library'
 apply plugin: 'checkstyle'
+apply plugin: 'me.champeau.gradle.japicmp'
+
+configurations {
+  baseline
+}
 
 task checkstyle(type: Checkstyle) {
   configFile rootProject.file('checkstyle.xml')
@@ -45,6 +50,36 @@ dependencies {
   testImplementation deps.robolectric
 
   lintChecks project(':timber-lint')
+
+  baseline('com.jakewharton.timber:timber:4.7.1') {
+    transitive = false
+    force = true
+  }
+}
+
+android.libraryVariants.all { variant ->
+  if (variant.name != ""release"") {
+    return
+  }
+
+  task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
+    oldClasspath = configurations.baseline.incoming.artifactView { config ->
+      config.attributes {
+        container -> container.attribute(Attribute.of(""artifactType"", String.class), ""jar"")
+      }
+    }.artifacts.artifactFiles
+
+    // TODO query the outgoing jar in a more dynamic fashion
+    newClasspath = files(""$buildDir/intermediates/packaged-classes/${variant.name}/classes.jar"")
+
+    onlyBinaryIncompatibleModified = true
+    failOnModification = true
+    txtOutputFile = file(""$buildDir/reports/japi.txt"")
+    ignoreMissingClasses = true
+    includeSynthetic = true
+  }
+  japicmp.dependsOn(variant.assemble)
+  check.dependsOn(japicmp)
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
build.gradle,build.gradle,6ab2c9a94d82e3bd2aedc41d2a3288181a99d612,0b84566c667a9b9d0559787ea28417e75377cd38,Direct port to Kotlin,"@@ -15,7 +15,10 @@ buildscript {
 
   ext.deps = [
       androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
-      kotlinPlugin: ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
+      'kotlin': [
+          'plugin': ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
+          'stdlib': ""org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"",
+      ],
       'butterknife': [
           'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
           'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
@@ -42,7 +45,7 @@ buildscript {
 
   dependencies {
     classpath deps.androidPlugin
-    classpath deps.kotlinPlugin
+    classpath deps.kotlin.plugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.6'
   }","@@ -15,7 +15,10 @@ buildscript {
 
   ext.deps = [
       androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
-      kotlinPlugin: ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
+      'kotlin': [
+          'plugin': ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
+          'stdlib': ""org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"",
+      ],
       'butterknife': [
           'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
           'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
@@ -42,7 +45,7 @@ buildscript {
 
   dependencies {
     classpath deps.androidPlugin
-    classpath deps.kotlinPlugin
+    classpath deps.kotlin.plugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.6'
   }",False,other
gradle.properties,gradle.properties,6ab2c9a94d82e3bd2aedc41d2a3288181a99d612,0b84566c667a9b9d0559787ea28417e75377cd38,Direct port to Kotlin,"@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.7.2-SNAPSHOT
+VERSION_NAME=4.8.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,5 +1,5 @@
 GROUP=com.jakewharton.timber
-VERSION_NAME=4.7.2-SNAPSHOT
+VERSION_NAME=4.8.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle/gradle-mvn-push.gradle,gradle/gradle-mvn-push.gradle,6ab2c9a94d82e3bd2aedc41d2a3288181a99d612,0b84566c667a9b9d0559787ea28417e75377cd38,Direct port to Kotlin,"@@ -83,15 +83,15 @@ afterEvaluate { project ->
   }
 
   task androidJavadocs(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
+    if (!project.plugins.hasPlugin('kotlin-android')) {
+      source = android.sourceSets.main.java.srcDirs
+    }
     classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+    exclude '**/internal/*'
+    include '**/*.java'
 
     if (JavaVersion.current().isJava8Compatible()) {
-      allprojects {
-        tasks.withType(Javadoc) {
-          options.addStringOption('Xdoclint:none', '-quiet')
-        }
-      }
+      options.addStringOption('Xdoclint:none', '-quiet')
     }
   }","@@ -83,15 +83,15 @@ afterEvaluate { project ->
   }
 
   task androidJavadocs(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
+    if (!project.plugins.hasPlugin('kotlin-android')) {
+      source = android.sourceSets.main.java.srcDirs
+    }
     classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+    exclude '**/internal/*'
+    include '**/*.java'
 
     if (JavaVersion.current().isJava8Compatible()) {
-      allprojects {
-        tasks.withType(Javadoc) {
-          options.addStringOption('Xdoclint:none', '-quiet')
-        }
-      }
+      options.addStringOption('Xdoclint:none', '-quiet')
     }
   }",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,6ab2c9a94d82e3bd2aedc41d2a3288181a99d612,0b84566c667a9b9d0559787ea28417e75377cd38,Direct port to Kotlin,"@@ -88,14 +88,19 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return;
     }
     // Handles Timber.X(..) and Timber.tag(..).X(..) where X in (v|d|i|w|e|wtf).
-    if (evaluator.isMemberInClass(method, ""timber.log.Timber"") //
-        || evaluator.isMemberInClass(method, ""timber.log.Timber.Tree"")) {
+    if (isTimberLogMethod(method, evaluator)) {
       checkMethodArguments(context, call);
       checkFormatArguments(context, call);
       checkExceptionLogging(context, call);
     }
   }
 
+  private boolean isTimberLogMethod(PsiMethod method, JavaEvaluator evaluator) {
+    return evaluator.isMemberInClass(method, ""timber.log.Timber"")
+        || evaluator.isMemberInClass(method, ""timber.log.Timber.Companion"")
+        || evaluator.isMemberInClass(method, ""timber.log.Timber.Tree"");
+  }
+
   private void checkNestedStringFormat(JavaContext context, UCallExpression call) {
     UElement current = call;
     while (true) {","@@ -88,14 +88,19 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       return;
     }
     // Handles Timber.X(..) and Timber.tag(..).X(..) where X in (v|d|i|w|e|wtf).
-    if (evaluator.isMemberInClass(method, ""timber.log.Timber"") //
-        || evaluator.isMemberInClass(method, ""timber.log.Timber.Tree"")) {
+    if (isTimberLogMethod(method, evaluator)) {
       checkMethodArguments(context, call);
       checkFormatArguments(context, call);
       checkExceptionLogging(context, call);
     }
   }
 
+  private boolean isTimberLogMethod(PsiMethod method, JavaEvaluator evaluator) {
+    return evaluator.isMemberInClass(method, ""timber.log.Timber"")
+        || evaluator.isMemberInClass(method, ""timber.log.Timber.Companion"")
+        || evaluator.isMemberInClass(method, ""timber.log.Timber.Tree"");
+  }
+
   private void checkNestedStringFormat(JavaContext context, UCallExpression call) {
     UElement current = call;
     while (true) {",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,6ab2c9a94d82e3bd2aedc41d2a3288181a99d612,0b84566c667a9b9d0559787ea28417e75377cd38,Direct port to Kotlin,"@@ -1,23 +1,25 @@
 package timber.lint
 
 import com.android.tools.lint.checks.infrastructure.TestFiles.java
+import com.android.tools.lint.checks.infrastructure.TestFiles.kotlin
 import com.android.tools.lint.checks.infrastructure.TestFiles.kt
 import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
 import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
 import org.junit.Test
 
 class WrongTimberUsageDetectorTest {
-  private val TIMBER_STUB = java(""""""
-      |package timber.log;
-      |public class Timber {
-      |  public static void d(String s, Object... args) {}
-      |  public static void d(Throwable t, String s, Object... args) {}
-      |  public static Tree tag(String tag) { return new Tree(); }
-      |  public static class Tree {
-      |    public void d(String s, Object... args) {}
-      |    public void d(Throwable t, String s, Object... args) {}
+  private val TIMBER_STUB = kotlin(""""""
+      |package timber.log
+      |class Timber private constructor() {
+      |  private companion object {
+      |    @JvmStatic fun d(message: String?, vararg args: Any?) {}
+      |    @JvmStatic fun d(t: Throwable?, message: String, vararg args: Any?) {}
+      |    @JvmStatic fun tag(tag: String) = Tree()
+      |  }
+      |  open class Tree {
+      |    open fun d(message: String?, vararg args: Any?) {}
+      |    open fun d(t: Throwable?, message: String?, vararg args: Any?) {}
       |  }
-      |  private static final Tree TREE_OF_SOULS = new Tree();
       |}"""""".trimMargin())
 
   @Test fun usingAndroidLogWithTwoArguments() {","@@ -1,23 +1,25 @@
 package timber.lint
 
 import com.android.tools.lint.checks.infrastructure.TestFiles.java
+import com.android.tools.lint.checks.infrastructure.TestFiles.kotlin
 import com.android.tools.lint.checks.infrastructure.TestFiles.kt
 import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
 import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
 import org.junit.Test
 
 class WrongTimberUsageDetectorTest {
-  private val TIMBER_STUB = java(""""""
-      |package timber.log;
-      |public class Timber {
-      |  public static void d(String s, Object... args) {}
-      |  public static void d(Throwable t, String s, Object... args) {}
-      |  public static Tree tag(String tag) { return new Tree(); }
-      |  public static class Tree {
-      |    public void d(String s, Object... args) {}
-      |    public void d(Throwable t, String s, Object... args) {}
+  private val TIMBER_STUB = kotlin(""""""
+      |package timber.log
+      |class Timber private constructor() {
+      |  private companion object {
+      |    @JvmStatic fun d(message: String?, vararg args: Any?) {}
+      |    @JvmStatic fun d(t: Throwable?, message: String, vararg args: Any?) {}
+      |    @JvmStatic fun tag(tag: String) = Tree()
+      |  }
+      |  open class Tree {
+      |    open fun d(message: String?, vararg args: Any?) {}
+      |    open fun d(t: Throwable?, message: String?, vararg args: Any?) {}
       |  }
-      |  private static final Tree TREE_OF_SOULS = new Tree();
       |}"""""".trimMargin())
 
   @Test fun usingAndroidLogWithTwoArguments() {",False,test
timber/build.gradle,timber/build.gradle,6ab2c9a94d82e3bd2aedc41d2a3288181a99d612,0b84566c667a9b9d0559787ea28417e75377cd38,Direct port to Kotlin,"@@ -1,4 +1,5 @@
 apply plugin: 'com.android.library'
+apply plugin: 'org.jetbrains.kotlin.android'
 apply plugin: 'checkstyle'
 apply plugin: 'me.champeau.gradle.japicmp'
 
@@ -37,11 +38,13 @@ android {
 
   // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
   libraryVariants.all {
-    it.generateBuildConfig.enabled = false
+    // TODO re-enable once https://issuetracker.google.com/issues/128749768 is figured out.
+    //it.generateBuildConfig.enabled = false
   }
 }
 
 dependencies {
+  api deps.kotlin.stdlib
   implementation deps.annotations
 
   testImplementation deps.annotations
@@ -77,6 +80,10 @@ android.libraryVariants.all { variant ->
     txtOutputFile = file(""$buildDir/reports/japi.txt"")
     ignoreMissingClasses = true
     includeSynthetic = true
+    fieldExcludes = [
+        // Changed to public (via internal) and synthetic (to hide from public API).
+        'timber.log.Timber#FOREST'
+    ]
   }
   japicmp.dependsOn(variant.assemble)
   check.dependsOn(japicmp)","@@ -1,4 +1,5 @@
 apply plugin: 'com.android.library'
+apply plugin: 'org.jetbrains.kotlin.android'
 apply plugin: 'checkstyle'
 apply plugin: 'me.champeau.gradle.japicmp'
 
@@ -37,11 +38,13 @@ android {
 
   // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
   libraryVariants.all {
-    it.generateBuildConfig.enabled = false
+    // TODO re-enable once https://issuetracker.google.com/issues/128749768 is figured out.
+    //it.generateBuildConfig.enabled = false
   }
 }
 
 dependencies {
+  api deps.kotlin.stdlib
   implementation deps.annotations
 
   testImplementation deps.annotations
@@ -77,6 +80,10 @@ android.libraryVariants.all { variant ->
     txtOutputFile = file(""$buildDir/reports/japi.txt"")
     ignoreMissingClasses = true
     includeSynthetic = true
+    fieldExcludes = [
+        // Changed to public (via internal) and synthetic (to hide from public API).
+        'timber.log.Timber#FOREST'
+    ]
   }
   japicmp.dependsOn(variant.assemble)
   check.dependsOn(japicmp)",False,other
timber/src/main/java/timber/log/Timber.java,,6ab2c9a94d82e3bd2aedc41d2a3288181a99d612,0b84566c667a9b9d0559787ea28417e75377cd38,Direct port to Kotlin,"@@ -1,643 +0,0 @@
-package timber.log;
-
-import android.os.Build;
-import android.util.Log;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import org.jetbrains.annotations.NonNls;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-import static java.util.Collections.unmodifiableList;
-
-/** Logging for lazy people. */
-@SuppressWarnings({ ""WeakerAccess"", ""unused"" }) // Public API.
-public final class Timber {
-  /** Log a verbose message with optional format args. */
-  public static void v(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.v(message, args);
-  }
-
-  /** Log a verbose exception and a message with optional format args. */
-  public static void v(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.v(t, message, args);
-  }
-
-  /** Log a verbose exception. */
-  public static void v(Throwable t) {
-    TREE_OF_SOULS.v(t);
-  }
-
-  /** Log a debug message with optional format args. */
-  public static void d(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.d(message, args);
-  }
-
-  /** Log a debug exception and a message with optional format args. */
-  public static void d(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.d(t, message, args);
-  }
-
-  /** Log a debug exception. */
-  public static void d(Throwable t) {
-    TREE_OF_SOULS.d(t);
-  }
-
-  /** Log an info message with optional format args. */
-  public static void i(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.i(message, args);
-  }
-
-  /** Log an info exception and a message with optional format args. */
-  public static void i(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.i(t, message, args);
-  }
-
-  /** Log an info exception. */
-  public static void i(Throwable t) {
-    TREE_OF_SOULS.i(t);
-  }
-
-  /** Log a warning message with optional format args. */
-  public static void w(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.w(message, args);
-  }
-
-  /** Log a warning exception and a message with optional format args. */
-  public static void w(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.w(t, message, args);
-  }
-
-  /** Log a warning exception. */
-  public static void w(Throwable t) {
-    TREE_OF_SOULS.w(t);
-  }
-
-  /** Log an error message with optional format args. */
-  public static void e(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.e(message, args);
-  }
-
-  /** Log an error exception and a message with optional format args. */
-  public static void e(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.e(t, message, args);
-  }
-
-  /** Log an error exception. */
-  public static void e(Throwable t) {
-    TREE_OF_SOULS.e(t);
-  }
-
-  /** Log an assert message with optional format args. */
-  public static void wtf(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.wtf(message, args);
-  }
-
-  /** Log an assert exception and a message with optional format args. */
-  public static void wtf(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.wtf(t, message, args);
-  }
-
-  /** Log an assert exception. */
-  public static void wtf(Throwable t) {
-    TREE_OF_SOULS.wtf(t);
-  }
-
-  /** Log at {@code priority} a message with optional format args. */
-  public static void log(int priority, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.log(priority, message, args);
-  }
-
-  /** Log at {@code priority} an exception and a message with optional format args. */
-  public static void log(int priority, Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.log(priority, t, message, args);
-  }
-
-  /** Log at {@code priority} an exception. */
-  public static void log(int priority, Throwable t) {
-    TREE_OF_SOULS.log(priority, t);
-  }
-
-  /**
-   * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
-   * instance rather than using static methods or to facilitate testing.
-   */
-  @NotNull
-  public static Tree asTree() {
-    return TREE_OF_SOULS;
-  }
-
-  /** Set a one-time tag for use on the next logging call. */
-  @NotNull
-  public static Tree tag(String tag) {
-    Tree[] forest = forestAsArray;
-    for (Tree tree : forest) {
-      tree.explicitTag.set(tag);
-    }
-    return TREE_OF_SOULS;
-  }
-
-  /** Add a new logging tree. */
-  @SuppressWarnings(""ConstantConditions"") // Validating public API contract.
-  public static void plant(@NotNull Tree tree) {
-    if (tree == null) {
-      throw new NullPointerException(""tree == null"");
-    }
-    if (tree == TREE_OF_SOULS) {
-      throw new IllegalArgumentException(""Cannot plant Timber into itself."");
-    }
-    synchronized (FOREST) {
-      FOREST.add(tree);
-      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
-    }
-  }
-
-  /** Adds new logging trees. */
-  @SuppressWarnings(""ConstantConditions"") // Validating public API contract.
-  public static void plant(@NotNull Tree... trees) {
-    if (trees == null) {
-      throw new NullPointerException(""trees == null"");
-    }
-    for (Tree tree : trees) {
-      if (tree == null) {
-        throw new NullPointerException(""trees contains null"");
-      }
-      if (tree == TREE_OF_SOULS) {
-        throw new IllegalArgumentException(""Cannot plant Timber into itself."");
-      }
-    }
-    synchronized (FOREST) {
-      Collections.addAll(FOREST, trees);
-      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
-    }
-  }
-
-  /** Remove a planted tree. */
-  public static void uproot(@NotNull Tree tree) {
-    synchronized (FOREST) {
-      if (!FOREST.remove(tree)) {
-        throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
-      }
-      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
-    }
-  }
-
-  /** Remove all planted trees. */
-  public static void uprootAll() {
-    synchronized (FOREST) {
-      FOREST.clear();
-      forestAsArray = TREE_ARRAY_EMPTY;
-    }
-  }
-
-  /** Return a copy of all planted {@linkplain Tree trees}. */
-  @NotNull
-  public static List<Tree> forest() {
-    synchronized (FOREST) {
-      return unmodifiableList(new ArrayList<>(FOREST));
-    }
-  }
-
-  public static int treeCount() {
-    synchronized (FOREST) {
-      return FOREST.size();
-    }
-  }
-
-  private static final Tree[] TREE_ARRAY_EMPTY = new Tree[0];
-  // Both fields guarded by 'FOREST'.
-  private static final List<Tree> FOREST = new ArrayList<>();
-  static volatile Tree[] forestAsArray = TREE_ARRAY_EMPTY;
-
-  /** A {@link Tree} that delegates to all planted trees in the {@linkplain #FOREST forest}. */
-  private static final Tree TREE_OF_SOULS = new Tree() {
-    @Override public void v(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.v(message, args);
-      }
-    }
-
-    @Override public void v(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.v(t, message, args);
-      }
-    }
-
-    @Override public void v(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.v(t);
-      }
-    }
-
-    @Override public void d(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.d(message, args);
-      }
-    }
-
-    @Override public void d(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.d(t, message, args);
-      }
-    }
-
-    @Override public void d(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.d(t);
-      }
-    }
-
-    @Override public void i(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.i(message, args);
-      }
-    }
-
-    @Override public void i(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.i(t, message, args);
-      }
-    }
-
-    @Override public void i(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.i(t);
-      }
-    }
-
-    @Override public void w(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.w(message, args);
-      }
-    }
-
-    @Override public void w(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.w(t, message, args);
-      }
-    }
-
-    @Override public void w(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.w(t);
-      }
-    }
-
-    @Override public void e(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.e(message, args);
-      }
-    }
-
-    @Override public void e(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.e(t, message, args);
-      }
-    }
-
-    @Override public void e(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.e(t);
-      }
-    }
-
-    @Override public void wtf(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.wtf(message, args);
-      }
-    }
-
-    @Override public void wtf(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.wtf(t, message, args);
-      }
-    }
-
-    @Override public void wtf(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.wtf(t);
-      }
-    }
-
-    @Override public void log(int priority, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.log(priority, message, args);
-      }
-    }
-
-    @Override public void log(int priority, Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.log(priority, t, message, args);
-      }
-    }
-
-    @Override public void log(int priority, Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.log(priority, t);
-      }
-    }
-
-    @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
-      throw new AssertionError(""Missing override for log method."");
-    }
-  };
-
-  private Timber() {
-    throw new AssertionError(""No instances."");
-  }
-
-  /** A facade for handling logging calls. Install instances via {@link #plant Timber.plant()}. */
-  public static abstract class Tree {
-    final ThreadLocal<String> explicitTag = new ThreadLocal<>();
-
-    @Nullable
-    String getTag() {
-      String tag = explicitTag.get();
-      if (tag != null) {
-        explicitTag.remove();
-      }
-      return tag;
-    }
-
-    /** Log a verbose message with optional format args. */
-    public void v(String message, Object... args) {
-      prepareLog(Log.VERBOSE, null, message, args);
-    }
-
-    /** Log a verbose exception and a message with optional format args. */
-    public void v(Throwable t, String message, Object... args) {
-      prepareLog(Log.VERBOSE, t, message, args);
-    }
-
-    /** Log a verbose exception. */
-    public void v(Throwable t) {
-      prepareLog(Log.VERBOSE, t, null);
-    }
-
-    /** Log a debug message with optional format args. */
-    public void d(String message, Object... args) {
-      prepareLog(Log.DEBUG, null, message, args);
-    }
-
-    /** Log a debug exception and a message with optional format args. */
-    public void d(Throwable t, String message, Object... args) {
-      prepareLog(Log.DEBUG, t, message, args);
-    }
-
-    /** Log a debug exception. */
-    public void d(Throwable t) {
-      prepareLog(Log.DEBUG, t, null);
-    }
-
-    /** Log an info message with optional format args. */
-    public void i(String message, Object... args) {
-      prepareLog(Log.INFO, null, message, args);
-    }
-
-    /** Log an info exception and a message with optional format args. */
-    public void i(Throwable t, String message, Object... args) {
-      prepareLog(Log.INFO, t, message, args);
-    }
-
-    /** Log an info exception. */
-    public void i(Throwable t) {
-      prepareLog(Log.INFO, t, null);
-    }
-
-    /** Log a warning message with optional format args. */
-    public void w(String message, Object... args) {
-      prepareLog(Log.WARN, null, message, args);
-    }
-
-    /** Log a warning exception and a message with optional format args. */
-    public void w(Throwable t, String message, Object... args) {
-      prepareLog(Log.WARN, t, message, args);
-    }
-
-    /** Log a warning exception. */
-    public void w(Throwable t) {
-      prepareLog(Log.WARN, t, null);
-    }
-
-    /** Log an error message with optional format args. */
-    public void e(String message, Object... args) {
-      prepareLog(Log.ERROR, null, message, args);
-    }
-
-    /** Log an error exception and a message with optional format args. */
-    public void e(Throwable t, String message, Object... args) {
-      prepareLog(Log.ERROR, t, message, args);
-    }
-
-    /** Log an error exception. */
-    public void e(Throwable t) {
-      prepareLog(Log.ERROR, t, null);
-    }
-
-    /** Log an assert message with optional format args. */
-    public void wtf(String message, Object... args) {
-      prepareLog(Log.ASSERT, null, message, args);
-    }
-
-    /** Log an assert exception and a message with optional format args. */
-    public void wtf(Throwable t, String message, Object... args) {
-      prepareLog(Log.ASSERT, t, message, args);
-    }
-
-    /** Log an assert exception. */
-    public void wtf(Throwable t) {
-      prepareLog(Log.ASSERT, t, null);
-    }
-
-    /** Log at {@code priority} a message with optional format args. */
-    public void log(int priority, String message, Object... args) {
-      prepareLog(priority, null, message, args);
-    }
-
-    /** Log at {@code priority} an exception and a message with optional format args. */
-    public void log(int priority, Throwable t, String message, Object... args) {
-      prepareLog(priority, t, message, args);
-    }
-
-    /** Log at {@code priority} an exception. */
-    public void log(int priority, Throwable t) {
-      prepareLog(priority, t, null);
-    }
-
-    /**
-     * Return whether a message at {@code priority} should be logged.
-     * @deprecated use {@link #isLoggable(String, int)} instead.
-     */
-    @Deprecated
-    protected boolean isLoggable(int priority) {
-      return true;
-    }
-
-    /** Return whether a message at {@code priority} or {@code tag} should be logged. */
-    protected boolean isLoggable(@Nullable String tag, int priority) {
-      //noinspection deprecation
-      return isLoggable(priority);
-    }
-
-    private void prepareLog(int priority, Throwable t, String message, Object... args) {
-      // Consume tag even when message is not loggable so that next message is correctly tagged.
-      String tag = getTag();
-
-      if (!isLoggable(tag, priority)) {
-        return;
-      }
-      if (message != null && message.length() == 0) {
-        message = null;
-      }
-      if (message == null) {
-        if (t == null) {
-          return; // Swallow message if it's null and there's no throwable.
-        }
-        message = getStackTraceString(t);
-      } else {
-        if (args != null && args.length > 0) {
-          message = formatMessage(message, args);
-        }
-        if (t != null) {
-          message += ""\n"" + getStackTraceString(t);
-        }
-      }
-
-      log(priority, tag, message, t);
-    }
-
-    /**
-     * Formats a log message with optional arguments.
-     */
-    protected String formatMessage(@NotNull String message, @NotNull Object[] args) {
-      return String.format(message, args);
-    }
-
-    private String getStackTraceString(Throwable t) {
-      // Don't replace this with Log.getStackTraceString() - it hides
-      // UnknownHostException, which is not what we want.
-      StringWriter sw = new StringWriter(256);
-      PrintWriter pw = new PrintWriter(sw, false);
-      t.printStackTrace(pw);
-      pw.flush();
-      return sw.toString();
-    }
-
-    /**
-     * Write a log message to its destination. Called for all level-specific methods by default.
-     *
-     * @param priority Log level. See {@link Log} for constants.
-     * @param tag Explicit or inferred tag. May be {@code null}.
-     * @param message Formatted log message. May be {@code null}, but then {@code t} will not be.
-     * @param t Accompanying exceptions. May be {@code null}, but then {@code message} will not be.
-     */
-    protected abstract void log(int priority, @Nullable String tag, @NotNull String message,
-        @Nullable Throwable t);
-  }
-
-  /** A {@link Tree Tree} for debug builds. Automatically infers the tag from the calling class. */
-  public static class DebugTree extends Tree {
-    private static final int MAX_LOG_LENGTH = 4000;
-    private static final int MAX_TAG_LENGTH = 23;
-    private static final int CALL_STACK_INDEX = 5;
-    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"");
-
-    /**
-     * Extract the tag which should be used for the message from the {@code element}. By default
-     * this will use the class name without any anonymous class suffixes (e.g., {@code Foo$1}
-     * becomes {@code Foo}).
-     * <p>
-     * Note: This will not be called if a {@linkplain #tag(String) manual tag} was specified.
-     */
-    @Nullable
-    protected String createStackElementTag(@NotNull StackTraceElement element) {
-      String tag = element.getClassName();
-      Matcher m = ANONYMOUS_CLASS.matcher(tag);
-      if (m.find()) {
-        tag = m.replaceAll("""");
-      }
-      tag = tag.substring(tag.lastIndexOf('.') + 1);
-      // Tag length limit was removed in API 24.
-      if (tag.length() <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-        return tag;
-      }
-      return tag.substring(0, MAX_TAG_LENGTH);
-    }
-
-    @Override final String getTag() {
-      String tag = super.getTag();
-      if (tag != null) {
-        return tag;
-      }
-
-      // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
-      // because Robolectric runs them on the JVM but on Android the elements are different.
-      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
-      if (stackTrace.length <= CALL_STACK_INDEX) {
-        throw new IllegalStateException(
-            ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
-      }
-      return createStackElementTag(stackTrace[CALL_STACK_INDEX]);
-    }
-
-    /**
-     * Break up {@code message} into maximum-length chunks (if needed) and send to either
-     * {@link Log#println(int, String, String) Log.println()} or
-     * {@link Log#wtf(String, String) Log.wtf()} for logging.
-     *
-     * {@inheritDoc}
-     */
-    @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
-      if (message.length() < MAX_LOG_LENGTH) {
-        if (priority == Log.ASSERT) {
-          Log.wtf(tag, message);
-        } else {
-          Log.println(priority, tag, message);
-        }
-        return;
-      }
-
-      // Split by line, then ensure each line can fit into Log's maximum length.
-      for (int i = 0, length = message.length(); i < length; i++) {
-        int newline = message.indexOf('\n', i);
-        newline = newline != -1 ? newline : length;
-        do {
-          int end = Math.min(newline, i + MAX_LOG_LENGTH);
-          String part = message.substring(i, end);
-          if (priority == Log.ASSERT) {
-            Log.wtf(tag, part);
-          } else {
-            Log.println(priority, tag, part);
-          }
-          i = end;
-        } while (i < newline);
-      }
-    }
-  }
-}","@@ -1,643 +0,0 @@
-package timber.log;
-
-import android.os.Build;
-import android.util.Log;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import org.jetbrains.annotations.NonNls;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-import static java.util.Collections.unmodifiableList;
-
-/** Logging for lazy people. */
-@SuppressWarnings({ ""WeakerAccess"", ""unused"" }) // Public API.
-public final class Timber {
-  /** Log a verbose message with optional format args. */
-  public static void v(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.v(message, args);
-  }
-
-  /** Log a verbose exception and a message with optional format args. */
-  public static void v(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.v(t, message, args);
-  }
-
-  /** Log a verbose exception. */
-  public static void v(Throwable t) {
-    TREE_OF_SOULS.v(t);
-  }
-
-  /** Log a debug message with optional format args. */
-  public static void d(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.d(message, args);
-  }
-
-  /** Log a debug exception and a message with optional format args. */
-  public static void d(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.d(t, message, args);
-  }
-
-  /** Log a debug exception. */
-  public static void d(Throwable t) {
-    TREE_OF_SOULS.d(t);
-  }
-
-  /** Log an info message with optional format args. */
-  public static void i(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.i(message, args);
-  }
-
-  /** Log an info exception and a message with optional format args. */
-  public static void i(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.i(t, message, args);
-  }
-
-  /** Log an info exception. */
-  public static void i(Throwable t) {
-    TREE_OF_SOULS.i(t);
-  }
-
-  /** Log a warning message with optional format args. */
-  public static void w(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.w(message, args);
-  }
-
-  /** Log a warning exception and a message with optional format args. */
-  public static void w(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.w(t, message, args);
-  }
-
-  /** Log a warning exception. */
-  public static void w(Throwable t) {
-    TREE_OF_SOULS.w(t);
-  }
-
-  /** Log an error message with optional format args. */
-  public static void e(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.e(message, args);
-  }
-
-  /** Log an error exception and a message with optional format args. */
-  public static void e(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.e(t, message, args);
-  }
-
-  /** Log an error exception. */
-  public static void e(Throwable t) {
-    TREE_OF_SOULS.e(t);
-  }
-
-  /** Log an assert message with optional format args. */
-  public static void wtf(@NonNls String message, Object... args) {
-    TREE_OF_SOULS.wtf(message, args);
-  }
-
-  /** Log an assert exception and a message with optional format args. */
-  public static void wtf(Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.wtf(t, message, args);
-  }
-
-  /** Log an assert exception. */
-  public static void wtf(Throwable t) {
-    TREE_OF_SOULS.wtf(t);
-  }
-
-  /** Log at {@code priority} a message with optional format args. */
-  public static void log(int priority, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.log(priority, message, args);
-  }
-
-  /** Log at {@code priority} an exception and a message with optional format args. */
-  public static void log(int priority, Throwable t, @NonNls String message, Object... args) {
-    TREE_OF_SOULS.log(priority, t, message, args);
-  }
-
-  /** Log at {@code priority} an exception. */
-  public static void log(int priority, Throwable t) {
-    TREE_OF_SOULS.log(priority, t);
-  }
-
-  /**
-   * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
-   * instance rather than using static methods or to facilitate testing.
-   */
-  @NotNull
-  public static Tree asTree() {
-    return TREE_OF_SOULS;
-  }
-
-  /** Set a one-time tag for use on the next logging call. */
-  @NotNull
-  public static Tree tag(String tag) {
-    Tree[] forest = forestAsArray;
-    for (Tree tree : forest) {
-      tree.explicitTag.set(tag);
-    }
-    return TREE_OF_SOULS;
-  }
-
-  /** Add a new logging tree. */
-  @SuppressWarnings(""ConstantConditions"") // Validating public API contract.
-  public static void plant(@NotNull Tree tree) {
-    if (tree == null) {
-      throw new NullPointerException(""tree == null"");
-    }
-    if (tree == TREE_OF_SOULS) {
-      throw new IllegalArgumentException(""Cannot plant Timber into itself."");
-    }
-    synchronized (FOREST) {
-      FOREST.add(tree);
-      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
-    }
-  }
-
-  /** Adds new logging trees. */
-  @SuppressWarnings(""ConstantConditions"") // Validating public API contract.
-  public static void plant(@NotNull Tree... trees) {
-    if (trees == null) {
-      throw new NullPointerException(""trees == null"");
-    }
-    for (Tree tree : trees) {
-      if (tree == null) {
-        throw new NullPointerException(""trees contains null"");
-      }
-      if (tree == TREE_OF_SOULS) {
-        throw new IllegalArgumentException(""Cannot plant Timber into itself."");
-      }
-    }
-    synchronized (FOREST) {
-      Collections.addAll(FOREST, trees);
-      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
-    }
-  }
-
-  /** Remove a planted tree. */
-  public static void uproot(@NotNull Tree tree) {
-    synchronized (FOREST) {
-      if (!FOREST.remove(tree)) {
-        throw new IllegalArgumentException(""Cannot uproot tree which is not planted: "" + tree);
-      }
-      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);
-    }
-  }
-
-  /** Remove all planted trees. */
-  public static void uprootAll() {
-    synchronized (FOREST) {
-      FOREST.clear();
-      forestAsArray = TREE_ARRAY_EMPTY;
-    }
-  }
-
-  /** Return a copy of all planted {@linkplain Tree trees}. */
-  @NotNull
-  public static List<Tree> forest() {
-    synchronized (FOREST) {
-      return unmodifiableList(new ArrayList<>(FOREST));
-    }
-  }
-
-  public static int treeCount() {
-    synchronized (FOREST) {
-      return FOREST.size();
-    }
-  }
-
-  private static final Tree[] TREE_ARRAY_EMPTY = new Tree[0];
-  // Both fields guarded by 'FOREST'.
-  private static final List<Tree> FOREST = new ArrayList<>();
-  static volatile Tree[] forestAsArray = TREE_ARRAY_EMPTY;
-
-  /** A {@link Tree} that delegates to all planted trees in the {@linkplain #FOREST forest}. */
-  private static final Tree TREE_OF_SOULS = new Tree() {
-    @Override public void v(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.v(message, args);
-      }
-    }
-
-    @Override public void v(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.v(t, message, args);
-      }
-    }
-
-    @Override public void v(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.v(t);
-      }
-    }
-
-    @Override public void d(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.d(message, args);
-      }
-    }
-
-    @Override public void d(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.d(t, message, args);
-      }
-    }
-
-    @Override public void d(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.d(t);
-      }
-    }
-
-    @Override public void i(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.i(message, args);
-      }
-    }
-
-    @Override public void i(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.i(t, message, args);
-      }
-    }
-
-    @Override public void i(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.i(t);
-      }
-    }
-
-    @Override public void w(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.w(message, args);
-      }
-    }
-
-    @Override public void w(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.w(t, message, args);
-      }
-    }
-
-    @Override public void w(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.w(t);
-      }
-    }
-
-    @Override public void e(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.e(message, args);
-      }
-    }
-
-    @Override public void e(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.e(t, message, args);
-      }
-    }
-
-    @Override public void e(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.e(t);
-      }
-    }
-
-    @Override public void wtf(String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.wtf(message, args);
-      }
-    }
-
-    @Override public void wtf(Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.wtf(t, message, args);
-      }
-    }
-
-    @Override public void wtf(Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.wtf(t);
-      }
-    }
-
-    @Override public void log(int priority, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.log(priority, message, args);
-      }
-    }
-
-    @Override public void log(int priority, Throwable t, String message, Object... args) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.log(priority, t, message, args);
-      }
-    }
-
-    @Override public void log(int priority, Throwable t) {
-      Tree[] forest = forestAsArray;
-      for (Tree tree : forest) {
-        tree.log(priority, t);
-      }
-    }
-
-    @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
-      throw new AssertionError(""Missing override for log method."");
-    }
-  };
-
-  private Timber() {
-    throw new AssertionError(""No instances."");
-  }
-
-  /** A facade for handling logging calls. Install instances via {@link #plant Timber.plant()}. */
-  public static abstract class Tree {
-    final ThreadLocal<String> explicitTag = new ThreadLocal<>();
-
-    @Nullable
-    String getTag() {
-      String tag = explicitTag.get();
-      if (tag != null) {
-        explicitTag.remove();
-      }
-      return tag;
-    }
-
-    /** Log a verbose message with optional format args. */
-    public void v(String message, Object... args) {
-      prepareLog(Log.VERBOSE, null, message, args);
-    }
-
-    /** Log a verbose exception and a message with optional format args. */
-    public void v(Throwable t, String message, Object... args) {
-      prepareLog(Log.VERBOSE, t, message, args);
-    }
-
-    /** Log a verbose exception. */
-    public void v(Throwable t) {
-      prepareLog(Log.VERBOSE, t, null);
-    }
-
-    /** Log a debug message with optional format args. */
-    public void d(String message, Object... args) {
-      prepareLog(Log.DEBUG, null, message, args);
-    }
-
-    /** Log a debug exception and a message with optional format args. */
-    public void d(Throwable t, String message, Object... args) {
-      prepareLog(Log.DEBUG, t, message, args);
-    }
-
-    /** Log a debug exception. */
-    public void d(Throwable t) {
-      prepareLog(Log.DEBUG, t, null);
-    }
-
-    /** Log an info message with optional format args. */
-    public void i(String message, Object... args) {
-      prepareLog(Log.INFO, null, message, args);
-    }
-
-    /** Log an info exception and a message with optional format args. */
-    public void i(Throwable t, String message, Object... args) {
-      prepareLog(Log.INFO, t, message, args);
-    }
-
-    /** Log an info exception. */
-    public void i(Throwable t) {
-      prepareLog(Log.INFO, t, null);
-    }
-
-    /** Log a warning message with optional format args. */
-    public void w(String message, Object... args) {
-      prepareLog(Log.WARN, null, message, args);
-    }
-
-    /** Log a warning exception and a message with optional format args. */
-    public void w(Throwable t, String message, Object... args) {
-      prepareLog(Log.WARN, t, message, args);
-    }
-
-    /** Log a warning exception. */
-    public void w(Throwable t) {
-      prepareLog(Log.WARN, t, null);
-    }
-
-    /** Log an error message with optional format args. */
-    public void e(String message, Object... args) {
-      prepareLog(Log.ERROR, null, message, args);
-    }
-
-    /** Log an error exception and a message with optional format args. */
-    public void e(Throwable t, String message, Object... args) {
-      prepareLog(Log.ERROR, t, message, args);
-    }
-
-    /** Log an error exception. */
-    public void e(Throwable t) {
-      prepareLog(Log.ERROR, t, null);
-    }
-
-    /** Log an assert message with optional format args. */
-    public void wtf(String message, Object... args) {
-      prepareLog(Log.ASSERT, null, message, args);
-    }
-
-    /** Log an assert exception and a message with optional format args. */
-    public void wtf(Throwable t, String message, Object... args) {
-      prepareLog(Log.ASSERT, t, message, args);
-    }
-
-    /** Log an assert exception. */
-    public void wtf(Throwable t) {
-      prepareLog(Log.ASSERT, t, null);
-    }
-
-    /** Log at {@code priority} a message with optional format args. */
-    public void log(int priority, String message, Object... args) {
-      prepareLog(priority, null, message, args);
-    }
-
-    /** Log at {@code priority} an exception and a message with optional format args. */
-    public void log(int priority, Throwable t, String message, Object... args) {
-      prepareLog(priority, t, message, args);
-    }
-
-    /** Log at {@code priority} an exception. */
-    public void log(int priority, Throwable t) {
-      prepareLog(priority, t, null);
-    }
-
-    /**
-     * Return whether a message at {@code priority} should be logged.
-     * @deprecated use {@link #isLoggable(String, int)} instead.
-     */
-    @Deprecated
-    protected boolean isLoggable(int priority) {
-      return true;
-    }
-
-    /** Return whether a message at {@code priority} or {@code tag} should be logged. */
-    protected boolean isLoggable(@Nullable String tag, int priority) {
-      //noinspection deprecation
-      return isLoggable(priority);
-    }
-
-    private void prepareLog(int priority, Throwable t, String message, Object... args) {
-      // Consume tag even when message is not loggable so that next message is correctly tagged.
-      String tag = getTag();
-
-      if (!isLoggable(tag, priority)) {
-        return;
-      }
-      if (message != null && message.length() == 0) {
-        message = null;
-      }
-      if (message == null) {
-        if (t == null) {
-          return; // Swallow message if it's null and there's no throwable.
-        }
-        message = getStackTraceString(t);
-      } else {
-        if (args != null && args.length > 0) {
-          message = formatMessage(message, args);
-        }
-        if (t != null) {
-          message += ""\n"" + getStackTraceString(t);
-        }
-      }
-
-      log(priority, tag, message, t);
-    }
-
-    /**
-     * Formats a log message with optional arguments.
-     */
-    protected String formatMessage(@NotNull String message, @NotNull Object[] args) {
-      return String.format(message, args);
-    }
-
-    private String getStackTraceString(Throwable t) {
-      // Don't replace this with Log.getStackTraceString() - it hides
-      // UnknownHostException, which is not what we want.
-      StringWriter sw = new StringWriter(256);
-      PrintWriter pw = new PrintWriter(sw, false);
-      t.printStackTrace(pw);
-      pw.flush();
-      return sw.toString();
-    }
-
-    /**
-     * Write a log message to its destination. Called for all level-specific methods by default.
-     *
-     * @param priority Log level. See {@link Log} for constants.
-     * @param tag Explicit or inferred tag. May be {@code null}.
-     * @param message Formatted log message. May be {@code null}, but then {@code t} will not be.
-     * @param t Accompanying exceptions. May be {@code null}, but then {@code message} will not be.
-     */
-    protected abstract void log(int priority, @Nullable String tag, @NotNull String message,
-        @Nullable Throwable t);
-  }
-
-  /** A {@link Tree Tree} for debug builds. Automatically infers the tag from the calling class. */
-  public static class DebugTree extends Tree {
-    private static final int MAX_LOG_LENGTH = 4000;
-    private static final int MAX_TAG_LENGTH = 23;
-    private static final int CALL_STACK_INDEX = 5;
-    private static final Pattern ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"");
-
-    /**
-     * Extract the tag which should be used for the message from the {@code element}. By default
-     * this will use the class name without any anonymous class suffixes (e.g., {@code Foo$1}
-     * becomes {@code Foo}).
-     * <p>
-     * Note: This will not be called if a {@linkplain #tag(String) manual tag} was specified.
-     */
-    @Nullable
-    protected String createStackElementTag(@NotNull StackTraceElement element) {
-      String tag = element.getClassName();
-      Matcher m = ANONYMOUS_CLASS.matcher(tag);
-      if (m.find()) {
-        tag = m.replaceAll("""");
-      }
-      tag = tag.substring(tag.lastIndexOf('.') + 1);
-      // Tag length limit was removed in API 24.
-      if (tag.length() <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-        return tag;
-      }
-      return tag.substring(0, MAX_TAG_LENGTH);
-    }
-
-    @Override final String getTag() {
-      String tag = super.getTag();
-      if (tag != null) {
-        return tag;
-      }
-
-      // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
-      // because Robolectric runs them on the JVM but on Android the elements are different.
-      StackTraceElement[] stackTrace = new Throwable().getStackTrace();
-      if (stackTrace.length <= CALL_STACK_INDEX) {
-        throw new IllegalStateException(
-            ""Synthetic stacktrace didn't have enough elements: are you using proguard?"");
-      }
-      return createStackElementTag(stackTrace[CALL_STACK_INDEX]);
-    }
-
-    /**
-     * Break up {@code message} into maximum-length chunks (if needed) and send to either
-     * {@link Log#println(int, String, String) Log.println()} or
-     * {@link Log#wtf(String, String) Log.wtf()} for logging.
-     *
-     * {@inheritDoc}
-     */
-    @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
-      if (message.length() < MAX_LOG_LENGTH) {
-        if (priority == Log.ASSERT) {
-          Log.wtf(tag, message);
-        } else {
-          Log.println(priority, tag, message);
-        }
-        return;
-      }
-
-      // Split by line, then ensure each line can fit into Log's maximum length.
-      for (int i = 0, length = message.length(); i < length; i++) {
-        int newline = message.indexOf('\n', i);
-        newline = newline != -1 ? newline : length;
-        do {
-          int end = Math.min(newline, i + MAX_LOG_LENGTH);
-          String part = message.substring(i, end);
-          if (priority == Log.ASSERT) {
-            Log.wtf(tag, part);
-          } else {
-            Log.println(priority, tag, part);
-          }
-          i = end;
-        } while (i < newline);
-      }
-    }
-  }
-}",False,source
,timber/src/main/java/timber/log/Timber.kt,6ab2c9a94d82e3bd2aedc41d2a3288181a99d612,0b84566c667a9b9d0559787ea28417e75377cd38,Direct port to Kotlin,"@@ -0,0 +1,590 @@
+package timber.log
+
+import android.os.Build
+import android.util.Log
+import org.jetbrains.annotations.NonNls
+import java.io.PrintWriter
+import java.io.StringWriter
+import java.util.ArrayList
+import java.util.Collections
+import java.util.Collections.unmodifiableList
+import java.util.regex.Pattern
+
+/** Logging for lazy people. */
+class Timber private constructor() {
+  init {
+    throw AssertionError()
+  }
+
+  /** A facade for handling logging calls. Install instances via [`Timber.plant()`][.plant]. */
+  abstract class Tree {
+    @get:JvmSynthetic // Hide from public API.
+    internal val explicitTag = ThreadLocal<String>()
+
+    @get:JvmSynthetic // Hide from public API.
+    internal open val tag: String?
+      get() {
+        val tag = explicitTag.get()
+        if (tag != null) {
+          explicitTag.remove()
+        }
+        return tag
+      }
+
+    /** Log a verbose message with optional format args. */
+    open fun v(message: String?, vararg args: Any?) {
+      prepareLog(Log.VERBOSE, null, message, *args)
+    }
+
+    /** Log a verbose exception and a message with optional format args. */
+    open fun v(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.VERBOSE, t, message, *args)
+    }
+
+    /** Log a verbose exception. */
+    open fun v(t: Throwable?) {
+      prepareLog(Log.VERBOSE, t, null)
+    }
+
+    /** Log a debug message with optional format args. */
+    open fun d(message: String?, vararg args: Any?) {
+      prepareLog(Log.DEBUG, null, message, *args)
+    }
+
+    /** Log a debug exception and a message with optional format args. */
+    open fun d(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.DEBUG, t, message, *args)
+    }
+
+    /** Log a debug exception. */
+    open fun d(t: Throwable?) {
+      prepareLog(Log.DEBUG, t, null)
+    }
+
+    /** Log an info message with optional format args. */
+    open fun i(message: String?, vararg args: Any?) {
+      prepareLog(Log.INFO, null, message, *args)
+    }
+
+    /** Log an info exception and a message with optional format args. */
+    open fun i(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.INFO, t, message, *args)
+    }
+
+    /** Log an info exception. */
+    open fun i(t: Throwable?) {
+      prepareLog(Log.INFO, t, null)
+    }
+
+    /** Log a warning message with optional format args. */
+    open fun w(message: String?, vararg args: Any?) {
+      prepareLog(Log.WARN, null, message, *args)
+    }
+
+    /** Log a warning exception and a message with optional format args. */
+    open fun w(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.WARN, t, message, *args)
+    }
+
+    /** Log a warning exception. */
+    open fun w(t: Throwable?) {
+      prepareLog(Log.WARN, t, null)
+    }
+
+    /** Log an error message with optional format args. */
+    open fun e(message: String?, vararg args: Any?) {
+      prepareLog(Log.ERROR, null, message, *args)
+    }
+
+    /** Log an error exception and a message with optional format args. */
+    open fun e(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.ERROR, t, message, *args)
+    }
+
+    /** Log an error exception. */
+    open fun e(t: Throwable?) {
+      prepareLog(Log.ERROR, t, null)
+    }
+
+    /** Log an assert message with optional format args. */
+    open fun wtf(message: String?, vararg args: Any?) {
+      prepareLog(Log.ASSERT, null, message, *args)
+    }
+
+    /** Log an assert exception and a message with optional format args. */
+    open fun wtf(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.ASSERT, t, message, *args)
+    }
+
+    /** Log an assert exception. */
+    open fun wtf(t: Throwable?) {
+      prepareLog(Log.ASSERT, t, null)
+    }
+
+    /** Log at `priority` a message with optional format args. */
+    open fun log(priority: Int, message: String?, vararg args: Any?) {
+      prepareLog(priority, null, message, *args)
+    }
+
+    /** Log at `priority` an exception and a message with optional format args. */
+    open fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(priority, t, message, *args)
+    }
+
+    /** Log at `priority` an exception. */
+    open fun log(priority: Int, t: Throwable?) {
+      prepareLog(priority, t, null)
+    }
+
+    /** Return whether a message at `priority` should be logged. */
+    @Deprecated(""Use isLoggable(String, int)"", ReplaceWith(""this.isLoggable(null, priority)""))
+    protected open fun isLoggable(priority: Int) = true
+
+    /** Return whether a message at `priority` or `tag` should be logged. */
+    protected open fun isLoggable(tag: String?, priority: Int) = isLoggable(priority)
+
+    private fun prepareLog(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
+      // Consume tag even when message is not loggable so that next message is correctly tagged.
+      val tag = tag
+      if (!isLoggable(tag, priority)) {
+        return
+      }
+
+      var message = message
+      if (message.isNullOrEmpty()) {
+        if (t == null) {
+          return  // Swallow message if it's null and there's no throwable.
+        }
+        message = getStackTraceString(t)
+      } else {
+        if (args.isNotEmpty()) {
+          message = formatMessage(message, args)
+        }
+        if (t != null) {
+          message += ""\n"" + getStackTraceString(t)
+        }
+      }
+
+      log(priority, tag, message, t)
+    }
+
+    /** Formats a log message with optional arguments. */
+    protected open fun formatMessage(message: String, args: Array<out Any?>) = message.format(*args)
+
+    private fun getStackTraceString(t: Throwable): String {
+      // Don't replace this with Log.getStackTraceString() - it hides
+      // UnknownHostException, which is not what we want.
+      val sw = StringWriter(256)
+      val pw = PrintWriter(sw, false)
+      t.printStackTrace(pw)
+      pw.flush()
+      return sw.toString()
+    }
+
+    /**
+     * Write a log message to its destination. Called for all level-specific methods by default.
+     *
+     * @param priority Log level. See [Log] for constants.
+     * @param tag Explicit or inferred tag. May be `null`.
+     * @param message Formatted log message. May be `null`, but then `t` will not be.
+     * @param t Accompanying exceptions. May be `null`, but then `message` will not be.
+     */
+    protected abstract fun log(priority: Int, tag: String?, message: String, t: Throwable?)
+  }
+
+  /** A [Tree] for debug builds. Automatically infers the tag from the calling class. */
+  open class DebugTree : Tree() {
+    override val tag: String?
+      get() {
+        super.tag?.let { return it }
+
+        // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
+        // because Robolectric runs them on the JVM but on Android the elements are different.
+        val stackTrace = Throwable().stackTrace
+        if (stackTrace.size <= CALL_STACK_INDEX) {
+          throw IllegalStateException(
+              ""Synthetic stacktrace didn't have enough elements: are you using proguard?"")
+        }
+        return createStackElementTag(stackTrace[CALL_STACK_INDEX])
+      }
+
+    /**
+     * Extract the tag which should be used for the message from the `element`. By default
+     * this will use the class name without any anonymous class suffixes (e.g., `Foo$1`
+     * becomes `Foo`).
+     *
+     *
+     * Note: This will not be called if a [manual tag][.tag] was specified.
+    */
+    protected open fun createStackElementTag(element: StackTraceElement): String? {
+      var tag = element.className
+      val m = ANONYMOUS_CLASS.matcher(tag)
+      if (m.find()) {
+        tag = m.replaceAll("""")
+      }
+      tag = tag.substringAfterLast('.')
+      // Tag length limit was removed in API 24.
+      return if (tag.length <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+        tag
+      } else {
+        tag.substring(0, MAX_TAG_LENGTH)
+      }
+    }
+
+    /**
+     * Break up `message` into maximum-length chunks (if needed) and send to either
+     * [Log.println()][Log.println] or
+     * [Log.wtf()][Log.wtf] for logging.
+     *
+     * {@inheritDoc}
+    */
+    override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+      if (message.length < MAX_LOG_LENGTH) {
+        if (priority == Log.ASSERT) {
+          Log.wtf(tag, message)
+        } else {
+          Log.println(priority, tag, message)
+        }
+        return
+      }
+
+      // Split by line, then ensure each line can fit into Log's maximum length.
+      var i = 0
+      val length = message.length
+      while (i < length) {
+        var newline = message.indexOf('\n', i)
+        newline = if (newline != -1) newline else length
+        do {
+          val end = Math.min(newline, i + MAX_LOG_LENGTH)
+          val part = message.substring(i, end)
+          if (priority == Log.ASSERT) {
+            Log.wtf(tag, part)
+          } else {
+            Log.println(priority, tag, part)
+          }
+          i = end
+        } while (i < newline)
+        i++
+      }
+    }
+
+    companion object {
+      private const val MAX_LOG_LENGTH = 4000
+      private const val MAX_TAG_LENGTH = 23
+      private const val CALL_STACK_INDEX = 6
+      private val ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"")
+    }
+  }
+
+  private companion object {
+    /** Log a verbose message with optional format args. */
+    @JvmStatic fun v(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.v(message, *args)
+    }
+
+    /** Log a verbose exception and a message with optional format args. */
+    @JvmStatic fun v(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.v(t, message, *args)
+    }
+
+    /** Log a verbose exception. */
+    @JvmStatic fun v(t: Throwable?) {
+      TREE_OF_SOULS.v(t)
+    }
+
+    /** Log a debug message with optional format args. */
+    @JvmStatic fun d(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.d(message, *args)
+    }
+
+    /** Log a debug exception and a message with optional format args. */
+    @JvmStatic fun d(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.d(t, message, *args)
+    }
+
+    /** Log a debug exception. */
+    @JvmStatic fun d(t: Throwable?) {
+      TREE_OF_SOULS.d(t)
+    }
+
+    /** Log an info message with optional format args. */
+    @JvmStatic fun i(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.i(message, *args)
+    }
+
+    /** Log an info exception and a message with optional format args. */
+    @JvmStatic fun i(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.i(t, message, *args)
+    }
+
+    /** Log an info exception. */
+    @JvmStatic fun i(t: Throwable?) {
+      TREE_OF_SOULS.i(t)
+    }
+
+    /** Log a warning message with optional format args. */
+    @JvmStatic fun w(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.w(message, *args)
+    }
+
+    /** Log a warning exception and a message with optional format args. */
+    @JvmStatic fun w(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.w(t, message, *args)
+    }
+
+    /** Log a warning exception. */
+    @JvmStatic fun w(t: Throwable?) {
+      TREE_OF_SOULS.w(t)
+    }
+
+    /** Log an error message with optional format args. */
+    @JvmStatic fun e(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.e(message, *args)
+    }
+
+    /** Log an error exception and a message with optional format args. */
+    @JvmStatic fun e(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.e(t, message, *args)
+    }
+
+    /** Log an error exception. */
+    @JvmStatic fun e(t: Throwable?) {
+      TREE_OF_SOULS.e(t)
+    }
+
+    /** Log an assert message with optional format args. */
+    @JvmStatic fun wtf(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.wtf(message, *args)
+    }
+
+    /** Log an assert exception and a message with optional format args. */
+    @JvmStatic fun wtf(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.wtf(t, message, *args)
+    }
+
+    /** Log an assert exception. */
+    @JvmStatic fun wtf(t: Throwable?) {
+      TREE_OF_SOULS.wtf(t)
+    }
+
+    /** Log at `priority` a message with optional format args. */
+    @JvmStatic fun log(priority: Int, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.log(priority, message, *args)
+    }
+
+    /** Log at `priority` an exception and a message with optional format args. */
+    @JvmStatic fun log(priority: Int, t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.log(priority, t, message, *args)
+    }
+
+    /** Log at `priority` an exception. */
+    @JvmStatic fun log(priority: Int, t: Throwable?) {
+      TREE_OF_SOULS.log(priority, t)
+    }
+
+    /**
+     * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
+     * instance rather than using static methods or to facilitate testing.
+    */
+    @JvmStatic fun asTree() = TREE_OF_SOULS
+
+    /** Set a one-time tag for use on the next logging call. */
+    @JvmStatic fun tag(tag: String): Tree {
+      for (tree in forestAsArray) {
+        tree.explicitTag.set(tag)
+      }
+      return TREE_OF_SOULS
+    }
+
+    /** Add a new logging tree. */
+    @JvmStatic fun plant(tree: Tree) {
+      require(tree !== TREE_OF_SOULS) { ""Cannot plant Timber into itself."" }
+      synchronized(FOREST) {
+        FOREST.add(tree)
+        forestAsArray = FOREST.toTypedArray()
+      }
+    }
+
+    /** Adds new logging trees. */
+    @JvmStatic
+    fun plant(vararg trees: Tree) {
+      for (tree in trees) {
+        requireNotNull(tree) { ""trees contained null"" }
+        require(tree !== TREE_OF_SOULS) { ""Cannot plant Timber into itself."" }
+      }
+      synchronized(FOREST) {
+        Collections.addAll(FOREST, *trees)
+        forestAsArray = FOREST.toTypedArray()
+      }
+    }
+
+    /** Remove a planted tree. */
+    @JvmStatic
+    fun uproot(tree: Tree) {
+      synchronized(FOREST) {
+        require(FOREST.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
+        forestAsArray = FOREST.toTypedArray()
+      }
+    }
+
+    /** Remove all planted trees. */
+    @JvmStatic
+    fun uprootAll() {
+      synchronized(FOREST) {
+        FOREST.clear()
+        forestAsArray = emptyArray()
+      }
+    }
+
+    /** Return a copy of all planted [trees][Tree]. */
+    @JvmStatic fun forest(): List<Tree> {
+      synchronized(FOREST) {
+        return unmodifiableList(FOREST.toList())
+      }
+    }
+
+    @JvmStatic fun treeCount() = forestAsArray.size
+
+    // Both fields guarded by 'FOREST'.
+
+    @JvmSynthetic // Hide from public API.
+    @JvmField internal val FOREST = ArrayList<Tree>()
+
+    @JvmSynthetic // Hide from public API.
+    @JvmField @Volatile internal var forestAsArray = emptyArray<Tree>()
+
+    /** A [Tree] that delegates to all planted trees in the [forest][.FOREST]. */
+    @JvmSynthetic // Hide from public API.
+    @JvmField internal val TREE_OF_SOULS = object : Tree() {
+      override fun v(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.v(message, *args)
+        }
+      }
+
+      override fun v(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.v(t, message, *args)
+        }
+      }
+
+      override fun v(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.v(t)
+        }
+      }
+
+      override fun d(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.d(message, *args)
+        }
+      }
+
+      override fun d(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.d(t, message, *args)
+        }
+      }
+
+      override fun d(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.d(t)
+        }
+      }
+
+      override fun i(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.i(message, *args)
+        }
+      }
+
+      override fun i(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.i(t, message, *args)
+        }
+      }
+
+      override fun i(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.i(t)
+        }
+      }
+
+      override fun w(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.w(message, *args)
+        }
+      }
+
+      override fun w(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.w(t, message, *args)
+        }
+      }
+
+      override fun w(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.w(t)
+        }
+      }
+
+      override fun e(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.e(message, *args)
+        }
+      }
+
+      override fun e(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.e(t, message, *args)
+        }
+      }
+
+      override fun e(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.e(t)
+        }
+      }
+
+      override fun wtf(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.wtf(message, *args)
+        }
+      }
+
+      override fun wtf(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.wtf(t, message, *args)
+        }
+      }
+
+      override fun wtf(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.wtf(t)
+        }
+      }
+
+      override fun log(priority: Int, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.log(priority, message, *args)
+        }
+      }
+
+      override fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.log(priority, t, message, *args)
+        }
+      }
+
+      override fun log(priority: Int, t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.log(priority, t)
+        }
+      }
+
+      override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+        throw AssertionError(""Missing override for log method."")
+      }
+    }
+  }
+}","@@ -0,0 +1,590 @@
+package timber.log
+
+import android.os.Build
+import android.util.Log
+import org.jetbrains.annotations.NonNls
+import java.io.PrintWriter
+import java.io.StringWriter
+import java.util.ArrayList
+import java.util.Collections
+import java.util.Collections.unmodifiableList
+import java.util.regex.Pattern
+
+/** Logging for lazy people. */
+class Timber private constructor() {
+  init {
+    throw AssertionError()
+  }
+
+  /** A facade for handling logging calls. Install instances via [`Timber.plant()`][.plant]. */
+  abstract class Tree {
+    @get:JvmSynthetic // Hide from public API.
+    internal val explicitTag = ThreadLocal<String>()
+
+    @get:JvmSynthetic // Hide from public API.
+    internal open val tag: String?
+      get() {
+        val tag = explicitTag.get()
+        if (tag != null) {
+          explicitTag.remove()
+        }
+        return tag
+      }
+
+    /** Log a verbose message with optional format args. */
+    open fun v(message: String?, vararg args: Any?) {
+      prepareLog(Log.VERBOSE, null, message, *args)
+    }
+
+    /** Log a verbose exception and a message with optional format args. */
+    open fun v(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.VERBOSE, t, message, *args)
+    }
+
+    /** Log a verbose exception. */
+    open fun v(t: Throwable?) {
+      prepareLog(Log.VERBOSE, t, null)
+    }
+
+    /** Log a debug message with optional format args. */
+    open fun d(message: String?, vararg args: Any?) {
+      prepareLog(Log.DEBUG, null, message, *args)
+    }
+
+    /** Log a debug exception and a message with optional format args. */
+    open fun d(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.DEBUG, t, message, *args)
+    }
+
+    /** Log a debug exception. */
+    open fun d(t: Throwable?) {
+      prepareLog(Log.DEBUG, t, null)
+    }
+
+    /** Log an info message with optional format args. */
+    open fun i(message: String?, vararg args: Any?) {
+      prepareLog(Log.INFO, null, message, *args)
+    }
+
+    /** Log an info exception and a message with optional format args. */
+    open fun i(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.INFO, t, message, *args)
+    }
+
+    /** Log an info exception. */
+    open fun i(t: Throwable?) {
+      prepareLog(Log.INFO, t, null)
+    }
+
+    /** Log a warning message with optional format args. */
+    open fun w(message: String?, vararg args: Any?) {
+      prepareLog(Log.WARN, null, message, *args)
+    }
+
+    /** Log a warning exception and a message with optional format args. */
+    open fun w(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.WARN, t, message, *args)
+    }
+
+    /** Log a warning exception. */
+    open fun w(t: Throwable?) {
+      prepareLog(Log.WARN, t, null)
+    }
+
+    /** Log an error message with optional format args. */
+    open fun e(message: String?, vararg args: Any?) {
+      prepareLog(Log.ERROR, null, message, *args)
+    }
+
+    /** Log an error exception and a message with optional format args. */
+    open fun e(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.ERROR, t, message, *args)
+    }
+
+    /** Log an error exception. */
+    open fun e(t: Throwable?) {
+      prepareLog(Log.ERROR, t, null)
+    }
+
+    /** Log an assert message with optional format args. */
+    open fun wtf(message: String?, vararg args: Any?) {
+      prepareLog(Log.ASSERT, null, message, *args)
+    }
+
+    /** Log an assert exception and a message with optional format args. */
+    open fun wtf(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.ASSERT, t, message, *args)
+    }
+
+    /** Log an assert exception. */
+    open fun wtf(t: Throwable?) {
+      prepareLog(Log.ASSERT, t, null)
+    }
+
+    /** Log at `priority` a message with optional format args. */
+    open fun log(priority: Int, message: String?, vararg args: Any?) {
+      prepareLog(priority, null, message, *args)
+    }
+
+    /** Log at `priority` an exception and a message with optional format args. */
+    open fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(priority, t, message, *args)
+    }
+
+    /** Log at `priority` an exception. */
+    open fun log(priority: Int, t: Throwable?) {
+      prepareLog(priority, t, null)
+    }
+
+    /** Return whether a message at `priority` should be logged. */
+    @Deprecated(""Use isLoggable(String, int)"", ReplaceWith(""this.isLoggable(null, priority)""))
+    protected open fun isLoggable(priority: Int) = true
+
+    /** Return whether a message at `priority` or `tag` should be logged. */
+    protected open fun isLoggable(tag: String?, priority: Int) = isLoggable(priority)
+
+    private fun prepareLog(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
+      // Consume tag even when message is not loggable so that next message is correctly tagged.
+      val tag = tag
+      if (!isLoggable(tag, priority)) {
+        return
+      }
+
+      var message = message
+      if (message.isNullOrEmpty()) {
+        if (t == null) {
+          return  // Swallow message if it's null and there's no throwable.
+        }
+        message = getStackTraceString(t)
+      } else {
+        if (args.isNotEmpty()) {
+          message = formatMessage(message, args)
+        }
+        if (t != null) {
+          message += ""\n"" + getStackTraceString(t)
+        }
+      }
+
+      log(priority, tag, message, t)
+    }
+
+    /** Formats a log message with optional arguments. */
+    protected open fun formatMessage(message: String, args: Array<out Any?>) = message.format(*args)
+
+    private fun getStackTraceString(t: Throwable): String {
+      // Don't replace this with Log.getStackTraceString() - it hides
+      // UnknownHostException, which is not what we want.
+      val sw = StringWriter(256)
+      val pw = PrintWriter(sw, false)
+      t.printStackTrace(pw)
+      pw.flush()
+      return sw.toString()
+    }
+
+    /**
+     * Write a log message to its destination. Called for all level-specific methods by default.
+     *
+     * @param priority Log level. See [Log] for constants.
+     * @param tag Explicit or inferred tag. May be `null`.
+     * @param message Formatted log message. May be `null`, but then `t` will not be.
+     * @param t Accompanying exceptions. May be `null`, but then `message` will not be.
+     */
+    protected abstract fun log(priority: Int, tag: String?, message: String, t: Throwable?)
+  }
+
+  /** A [Tree] for debug builds. Automatically infers the tag from the calling class. */
+  open class DebugTree : Tree() {
+    override val tag: String?
+      get() {
+        super.tag?.let { return it }
+
+        // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
+        // because Robolectric runs them on the JVM but on Android the elements are different.
+        val stackTrace = Throwable().stackTrace
+        if (stackTrace.size <= CALL_STACK_INDEX) {
+          throw IllegalStateException(
+              ""Synthetic stacktrace didn't have enough elements: are you using proguard?"")
+        }
+        return createStackElementTag(stackTrace[CALL_STACK_INDEX])
+      }
+
+    /**
+     * Extract the tag which should be used for the message from the `element`. By default
+     * this will use the class name without any anonymous class suffixes (e.g., `Foo$1`
+     * becomes `Foo`).
+     *
+     *
+     * Note: This will not be called if a [manual tag][.tag] was specified.
+    */
+    protected open fun createStackElementTag(element: StackTraceElement): String? {
+      var tag = element.className
+      val m = ANONYMOUS_CLASS.matcher(tag)
+      if (m.find()) {
+        tag = m.replaceAll("""")
+      }
+      tag = tag.substringAfterLast('.')
+      // Tag length limit was removed in API 24.
+      return if (tag.length <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+        tag
+      } else {
+        tag.substring(0, MAX_TAG_LENGTH)
+      }
+    }
+
+    /**
+     * Break up `message` into maximum-length chunks (if needed) and send to either
+     * [Log.println()][Log.println] or
+     * [Log.wtf()][Log.wtf] for logging.
+     *
+     * {@inheritDoc}
+    */
+    override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+      if (message.length < MAX_LOG_LENGTH) {
+        if (priority == Log.ASSERT) {
+          Log.wtf(tag, message)
+        } else {
+          Log.println(priority, tag, message)
+        }
+        return
+      }
+
+      // Split by line, then ensure each line can fit into Log's maximum length.
+      var i = 0
+      val length = message.length
+      while (i < length) {
+        var newline = message.indexOf('\n', i)
+        newline = if (newline != -1) newline else length
+        do {
+          val end = Math.min(newline, i + MAX_LOG_LENGTH)
+          val part = message.substring(i, end)
+          if (priority == Log.ASSERT) {
+            Log.wtf(tag, part)
+          } else {
+            Log.println(priority, tag, part)
+          }
+          i = end
+        } while (i < newline)
+        i++
+      }
+    }
+
+    companion object {
+      private const val MAX_LOG_LENGTH = 4000
+      private const val MAX_TAG_LENGTH = 23
+      private const val CALL_STACK_INDEX = 6
+      private val ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"")
+    }
+  }
+
+  private companion object {
+    /** Log a verbose message with optional format args. */
+    @JvmStatic fun v(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.v(message, *args)
+    }
+
+    /** Log a verbose exception and a message with optional format args. */
+    @JvmStatic fun v(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.v(t, message, *args)
+    }
+
+    /** Log a verbose exception. */
+    @JvmStatic fun v(t: Throwable?) {
+      TREE_OF_SOULS.v(t)
+    }
+
+    /** Log a debug message with optional format args. */
+    @JvmStatic fun d(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.d(message, *args)
+    }
+
+    /** Log a debug exception and a message with optional format args. */
+    @JvmStatic fun d(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.d(t, message, *args)
+    }
+
+    /** Log a debug exception. */
+    @JvmStatic fun d(t: Throwable?) {
+      TREE_OF_SOULS.d(t)
+    }
+
+    /** Log an info message with optional format args. */
+    @JvmStatic fun i(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.i(message, *args)
+    }
+
+    /** Log an info exception and a message with optional format args. */
+    @JvmStatic fun i(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.i(t, message, *args)
+    }
+
+    /** Log an info exception. */
+    @JvmStatic fun i(t: Throwable?) {
+      TREE_OF_SOULS.i(t)
+    }
+
+    /** Log a warning message with optional format args. */
+    @JvmStatic fun w(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.w(message, *args)
+    }
+
+    /** Log a warning exception and a message with optional format args. */
+    @JvmStatic fun w(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.w(t, message, *args)
+    }
+
+    /** Log a warning exception. */
+    @JvmStatic fun w(t: Throwable?) {
+      TREE_OF_SOULS.w(t)
+    }
+
+    /** Log an error message with optional format args. */
+    @JvmStatic fun e(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.e(message, *args)
+    }
+
+    /** Log an error exception and a message with optional format args. */
+    @JvmStatic fun e(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.e(t, message, *args)
+    }
+
+    /** Log an error exception. */
+    @JvmStatic fun e(t: Throwable?) {
+      TREE_OF_SOULS.e(t)
+    }
+
+    /** Log an assert message with optional format args. */
+    @JvmStatic fun wtf(@NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.wtf(message, *args)
+    }
+
+    /** Log an assert exception and a message with optional format args. */
+    @JvmStatic fun wtf(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.wtf(t, message, *args)
+    }
+
+    /** Log an assert exception. */
+    @JvmStatic fun wtf(t: Throwable?) {
+      TREE_OF_SOULS.wtf(t)
+    }
+
+    /** Log at `priority` a message with optional format args. */
+    @JvmStatic fun log(priority: Int, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.log(priority, message, *args)
+    }
+
+    /** Log at `priority` an exception and a message with optional format args. */
+    @JvmStatic fun log(priority: Int, t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      TREE_OF_SOULS.log(priority, t, message, *args)
+    }
+
+    /** Log at `priority` an exception. */
+    @JvmStatic fun log(priority: Int, t: Throwable?) {
+      TREE_OF_SOULS.log(priority, t)
+    }
+
+    /**
+     * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
+     * instance rather than using static methods or to facilitate testing.
+    */
+    @JvmStatic fun asTree() = TREE_OF_SOULS
+
+    /** Set a one-time tag for use on the next logging call. */
+    @JvmStatic fun tag(tag: String): Tree {
+      for (tree in forestAsArray) {
+        tree.explicitTag.set(tag)
+      }
+      return TREE_OF_SOULS
+    }
+
+    /** Add a new logging tree. */
+    @JvmStatic fun plant(tree: Tree) {
+      require(tree !== TREE_OF_SOULS) { ""Cannot plant Timber into itself."" }
+      synchronized(FOREST) {
+        FOREST.add(tree)
+        forestAsArray = FOREST.toTypedArray()
+      }
+    }
+
+    /** Adds new logging trees. */
+    @JvmStatic
+    fun plant(vararg trees: Tree) {
+      for (tree in trees) {
+        requireNotNull(tree) { ""trees contained null"" }
+        require(tree !== TREE_OF_SOULS) { ""Cannot plant Timber into itself."" }
+      }
+      synchronized(FOREST) {
+        Collections.addAll(FOREST, *trees)
+        forestAsArray = FOREST.toTypedArray()
+      }
+    }
+
+    /** Remove a planted tree. */
+    @JvmStatic
+    fun uproot(tree: Tree) {
+      synchronized(FOREST) {
+        require(FOREST.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
+        forestAsArray = FOREST.toTypedArray()
+      }
+    }
+
+    /** Remove all planted trees. */
+    @JvmStatic
+    fun uprootAll() {
+      synchronized(FOREST) {
+        FOREST.clear()
+        forestAsArray = emptyArray()
+      }
+    }
+
+    /** Return a copy of all planted [trees][Tree]. */
+    @JvmStatic fun forest(): List<Tree> {
+      synchronized(FOREST) {
+        return unmodifiableList(FOREST.toList())
+      }
+    }
+
+    @JvmStatic fun treeCount() = forestAsArray.size
+
+    // Both fields guarded by 'FOREST'.
+
+    @JvmSynthetic // Hide from public API.
+    @JvmField internal val FOREST = ArrayList<Tree>()
+
+    @JvmSynthetic // Hide from public API.
+    @JvmField @Volatile internal var forestAsArray = emptyArray<Tree>()
+
+    /** A [Tree] that delegates to all planted trees in the [forest][.FOREST]. */
+    @JvmSynthetic // Hide from public API.
+    @JvmField internal val TREE_OF_SOULS = object : Tree() {
+      override fun v(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.v(message, *args)
+        }
+      }
+
+      override fun v(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.v(t, message, *args)
+        }
+      }
+
+      override fun v(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.v(t)
+        }
+      }
+
+      override fun d(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.d(message, *args)
+        }
+      }
+
+      override fun d(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.d(t, message, *args)
+        }
+      }
+
+      override fun d(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.d(t)
+        }
+      }
+
+      override fun i(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.i(message, *args)
+        }
+      }
+
+      override fun i(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.i(t, message, *args)
+        }
+      }
+
+      override fun i(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.i(t)
+        }
+      }
+
+      override fun w(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.w(message, *args)
+        }
+      }
+
+      override fun w(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.w(t, message, *args)
+        }
+      }
+
+      override fun w(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.w(t)
+        }
+      }
+
+      override fun e(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.e(message, *args)
+        }
+      }
+
+      override fun e(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.e(t, message, *args)
+        }
+      }
+
+      override fun e(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.e(t)
+        }
+      }
+
+      override fun wtf(message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.wtf(message, *args)
+        }
+      }
+
+      override fun wtf(t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.wtf(t, message, *args)
+        }
+      }
+
+      override fun wtf(t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.wtf(t)
+        }
+      }
+
+      override fun log(priority: Int, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.log(priority, message, *args)
+        }
+      }
+
+      override fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
+        for (tree in forestAsArray) {
+          tree.log(priority, t, message, *args)
+        }
+      }
+
+      override fun log(priority: Int, t: Throwable?) {
+        for (tree in forestAsArray) {
+          tree.log(priority, t)
+        }
+      }
+
+      override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+        throw AssertionError(""Missing override for log method."")
+      }
+    }
+  }
+}",False,source
timber/src/test/java/timber/log/TimberTest.java,timber/src/test/java/timber/log/TimberTest.java,6ab2c9a94d82e3bd2aedc41d2a3288181a99d612,0b84566c667a9b9d0559787ea28417e75377cd38,Direct port to Kotlin,"@@ -78,8 +78,7 @@ public class TimberTest {
     try {
       Timber.plant(nullTree);
       fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""tree == null"");
+    } catch (IllegalArgumentException ignored) {
     }
   }
 
@@ -89,15 +88,13 @@ public class TimberTest {
     try {
       Timber.plant(nullTrees);
       fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""trees == null"");
+    } catch (IllegalArgumentException ignored) {
     }
     nullTrees = new Timber.Tree[]{null};
     try {
       Timber.plant(nullTrees);
       fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""trees contains null"");
+    } catch (IllegalArgumentException ignored) {
     }
   }
 
@@ -501,6 +498,7 @@ public class TimberTest {
         .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"");
   }
 
+  @Ignore(""No way to allow this in Kotlin as far as I can tell"")
   @Test public void nullArgumentObjectArray() {
     Timber.plant(new Timber.DebugTree());
     Timber.v(""Test"", (Object[]) null);","@@ -78,8 +78,7 @@ public class TimberTest {
     try {
       Timber.plant(nullTree);
       fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""tree == null"");
+    } catch (IllegalArgumentException ignored) {
     }
   }
 
@@ -89,15 +88,13 @@ public class TimberTest {
     try {
       Timber.plant(nullTrees);
       fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""trees == null"");
+    } catch (IllegalArgumentException ignored) {
     }
     nullTrees = new Timber.Tree[]{null};
     try {
       Timber.plant(nullTrees);
       fail();
-    } catch (NullPointerException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""trees contains null"");
+    } catch (IllegalArgumentException ignored) {
     }
   }
 
@@ -501,6 +498,7 @@ public class TimberTest {
         .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"");
   }
 
+  @Ignore(""No way to allow this in Kotlin as far as I can tell"")
   @Test public void nullArgumentObjectArray() {
     Timber.plant(new Timber.DebugTree());
     Timber.v(""Test"", (Object[]) null);",False,test
checkstyle.xml,,87e29555f31735344449fc9a3f55e53bed4e6d06,2080965ff9cb9b67c0322b4e7ad61a02a257139d,"Remove checkstyle

Java is gone.","@@ -1,135 +0,0 @@
-<?xml version=""1.0""?>
-<!DOCTYPE module PUBLIC
-    ""-//Puppy Crawl//DTD Check Configuration 1.3//EN""
-    ""http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd"">
-
-<module name=""Checker"">
-  <!--module name=""NewlineAtEndOfFile""/-->
-  <module name=""FileLength""/>
-  <module name=""FileTabCharacter""/>
-
-  <!-- Trailing spaces -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""\s+$""/>
-    <property name=""message"" value=""Line has trailing spaces.""/>
-  </module>
-
-  <!-- Space after 'for' and 'if' -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""^\s*(for|if)\(""/>
-    <property name=""message"" value=""Space needed before opening parenthesis.""/>
-  </module>
-
-  <!-- For each spacing -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""^\s*for \(.*?([^ ]:|:[^ ])""/>
-    <property name=""message"" value=""Space needed around ':' character.""/>
-  </module>
-
-  <module name=""TreeWalker"">
-    <!--<property name=""cacheFile"" value=""${checkstyle.cache.file}""/>-->
-
-    <!-- Checks for Javadoc comments.                     -->
-    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
-    <!--module name=""JavadocMethod""/-->
-    <!--module name=""JavadocType""/-->
-    <!--module name=""JavadocVariable""/-->
-    <!--module name=""JavadocStyle""/-->
-
-
-    <!-- Checks for Naming Conventions.                  -->
-    <!-- See http://checkstyle.sf.net/config_naming.html -->
-    <module name=""ConstantName""/>
-    <module name=""LocalFinalVariableName""/>
-    <module name=""LocalVariableName""/>
-    <module name=""MemberName""/>
-    <module name=""MethodName"">
-      <property name=""format"" value=""^[a-z][a-zA-Z0-9_]*$""/>
-    </module>
-    <module name=""PackageName""/>
-    <module name=""ParameterName""/>
-    <module name=""StaticVariableName""/>
-    <module name=""TypeName"">
-      <property name=""format"" value=""^[A-Z][a-zA-Z0-9_]*$""/>
-    </module>
-
-
-    <!-- Checks for imports                              -->
-    <!-- See http://checkstyle.sf.net/config_import.html -->
-    <module name=""AvoidStarImport""/>
-    <module name=""IllegalImport""/>
-    <module name=""RedundantImport""/>
-    <module name=""UnusedImports""/>
-
-
-    <!-- Checks for Size Violations.                    -->
-    <!-- See http://checkstyle.sf.net/config_sizes.html -->
-    <module name=""LineLength"">
-      <property name=""max"" value=""100""/>
-    </module>
-    <module name=""MethodLength""/>
-    <module name=""ParameterNumber""/>
-
-
-    <!-- Checks for whitespace                               -->
-    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
-    <module name=""GenericWhitespace""/>
-    <module name=""EmptyForIteratorPad""/>
-    <module name=""MethodParamPad""/>
-    <module name=""NoWhitespaceAfter""/>
-    <module name=""NoWhitespaceBefore""/>
-    <module name=""OperatorWrap""/>
-    <module name=""ParenPad""/>
-    <module name=""TypecastParenPad""/>
-    <module name=""WhitespaceAfter""/>
-    <module name=""WhitespaceAround""/>
-
-
-    <!-- Modifier Checks                                    -->
-    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
-    <!--module name=""ModifierOrder""/-->
-    <module name=""RedundantModifier""/>
-
-
-    <!-- Checks for blocks. You know, those {}'s         -->
-    <!-- See http://checkstyle.sf.net/config_blocks.html -->
-    <module name=""AvoidNestedBlocks""/>
-    <module name=""EmptyBlock""/>
-    <module name=""LeftCurly""/>
-    <module name=""NeedBraces""/>
-    <module name=""RightCurly""/>
-
-
-    <!-- Checks for common coding problems               -->
-    <!-- See http://checkstyle.sf.net/config_coding.html -->
-    <!--module name=""AvoidInlineConditionals""/-->
-    <module name=""CovariantEquals""/>
-    <module name=""EmptyStatement""/>
-    <module name=""EqualsAvoidNull""/>
-    <module name=""EqualsHashCode""/>
-    <!--<module name=""HiddenField""/>-->
-    <module name=""IllegalInstantiation""/>
-    <module name=""InnerAssignment""/>
-    <!--module name=""MagicNumber""/-->
-    <module name=""MissingSwitchDefault""/>
-    <!--<module name=""RedundantThrows""/>-->
-    <module name=""SimplifyBooleanExpression""/>
-    <module name=""SimplifyBooleanReturn""/>
-
-    <!-- Checks for class design                         -->
-    <!-- See http://checkstyle.sf.net/config_design.html -->
-    <!--module name=""DesignForExtension""/-->
-    <!--module name=""FinalClass""/-->
-    <module name=""HideUtilityClassConstructor""/>
-    <module name=""InterfaceIsType""/>
-    <!--<module name=""VisibilityModifier""/>-->
-
-
-    <!-- Miscellaneous other checks.                   -->
-    <!-- See http://checkstyle.sf.net/config_misc.html -->
-    <module name=""ArrayTypeStyle""/>
-    <!--module name=""FinalParameters""/-->
-    <module name=""TodoComment""/>
-    <module name=""UpperEll""/>
-  </module>
-</module>","@@ -1,135 +0,0 @@
-<?xml version=""1.0""?>
-<!DOCTYPE module PUBLIC
-    ""-//Puppy Crawl//DTD Check Configuration 1.3//EN""
-    ""http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd"">
-
-<module name=""Checker"">
-  <!--module name=""NewlineAtEndOfFile""/-->
-  <module name=""FileLength""/>
-  <module name=""FileTabCharacter""/>
-
-  <!-- Trailing spaces -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""\s+$""/>
-    <property name=""message"" value=""Line has trailing spaces.""/>
-  </module>
-
-  <!-- Space after 'for' and 'if' -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""^\s*(for|if)\(""/>
-    <property name=""message"" value=""Space needed before opening parenthesis.""/>
-  </module>
-
-  <!-- For each spacing -->
-  <module name=""RegexpSingleline"">
-    <property name=""format"" value=""^\s*for \(.*?([^ ]:|:[^ ])""/>
-    <property name=""message"" value=""Space needed around ':' character.""/>
-  </module>
-
-  <module name=""TreeWalker"">
-    <!--<property name=""cacheFile"" value=""${checkstyle.cache.file}""/>-->
-
-    <!-- Checks for Javadoc comments.                     -->
-    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
-    <!--module name=""JavadocMethod""/-->
-    <!--module name=""JavadocType""/-->
-    <!--module name=""JavadocVariable""/-->
-    <!--module name=""JavadocStyle""/-->
-
-
-    <!-- Checks for Naming Conventions.                  -->
-    <!-- See http://checkstyle.sf.net/config_naming.html -->
-    <module name=""ConstantName""/>
-    <module name=""LocalFinalVariableName""/>
-    <module name=""LocalVariableName""/>
-    <module name=""MemberName""/>
-    <module name=""MethodName"">
-      <property name=""format"" value=""^[a-z][a-zA-Z0-9_]*$""/>
-    </module>
-    <module name=""PackageName""/>
-    <module name=""ParameterName""/>
-    <module name=""StaticVariableName""/>
-    <module name=""TypeName"">
-      <property name=""format"" value=""^[A-Z][a-zA-Z0-9_]*$""/>
-    </module>
-
-
-    <!-- Checks for imports                              -->
-    <!-- See http://checkstyle.sf.net/config_import.html -->
-    <module name=""AvoidStarImport""/>
-    <module name=""IllegalImport""/>
-    <module name=""RedundantImport""/>
-    <module name=""UnusedImports""/>
-
-
-    <!-- Checks for Size Violations.                    -->
-    <!-- See http://checkstyle.sf.net/config_sizes.html -->
-    <module name=""LineLength"">
-      <property name=""max"" value=""100""/>
-    </module>
-    <module name=""MethodLength""/>
-    <module name=""ParameterNumber""/>
-
-
-    <!-- Checks for whitespace                               -->
-    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
-    <module name=""GenericWhitespace""/>
-    <module name=""EmptyForIteratorPad""/>
-    <module name=""MethodParamPad""/>
-    <module name=""NoWhitespaceAfter""/>
-    <module name=""NoWhitespaceBefore""/>
-    <module name=""OperatorWrap""/>
-    <module name=""ParenPad""/>
-    <module name=""TypecastParenPad""/>
-    <module name=""WhitespaceAfter""/>
-    <module name=""WhitespaceAround""/>
-
-
-    <!-- Modifier Checks                                    -->
-    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
-    <!--module name=""ModifierOrder""/-->
-    <module name=""RedundantModifier""/>
-
-
-    <!-- Checks for blocks. You know, those {}'s         -->
-    <!-- See http://checkstyle.sf.net/config_blocks.html -->
-    <module name=""AvoidNestedBlocks""/>
-    <module name=""EmptyBlock""/>
-    <module name=""LeftCurly""/>
-    <module name=""NeedBraces""/>
-    <module name=""RightCurly""/>
-
-
-    <!-- Checks for common coding problems               -->
-    <!-- See http://checkstyle.sf.net/config_coding.html -->
-    <!--module name=""AvoidInlineConditionals""/-->
-    <module name=""CovariantEquals""/>
-    <module name=""EmptyStatement""/>
-    <module name=""EqualsAvoidNull""/>
-    <module name=""EqualsHashCode""/>
-    <!--<module name=""HiddenField""/>-->
-    <module name=""IllegalInstantiation""/>
-    <module name=""InnerAssignment""/>
-    <!--module name=""MagicNumber""/-->
-    <module name=""MissingSwitchDefault""/>
-    <!--<module name=""RedundantThrows""/>-->
-    <module name=""SimplifyBooleanExpression""/>
-    <module name=""SimplifyBooleanReturn""/>
-
-    <!-- Checks for class design                         -->
-    <!-- See http://checkstyle.sf.net/config_design.html -->
-    <!--module name=""DesignForExtension""/-->
-    <!--module name=""FinalClass""/-->
-    <module name=""HideUtilityClassConstructor""/>
-    <module name=""InterfaceIsType""/>
-    <!--<module name=""VisibilityModifier""/>-->
-
-
-    <!-- Miscellaneous other checks.                   -->
-    <!-- See http://checkstyle.sf.net/config_misc.html -->
-    <module name=""ArrayTypeStyle""/>
-    <!--module name=""FinalParameters""/-->
-    <module name=""TodoComment""/>
-    <module name=""UpperEll""/>
-  </module>
-</module>",False,other
timber/build.gradle,timber/build.gradle,87e29555f31735344449fc9a3f55e53bed4e6d06,2080965ff9cb9b67c0322b4e7ad61a02a257139d,"Remove checkstyle

Java is gone.","@@ -1,28 +1,11 @@
 apply plugin: 'com.android.library'
 apply plugin: 'org.jetbrains.kotlin.android'
-apply plugin: 'checkstyle'
 apply plugin: 'me.champeau.gradle.japicmp'
 
 configurations {
   baseline
 }
 
-task checkstyle(type: Checkstyle) {
-  configFile rootProject.file('checkstyle.xml')
-  source 'src/main/java'
-  ignoreFailures false
-  showViolations true
-  include '**/*.java'
-
-  classpath = files()
-}
-
-afterEvaluate {
-  if (project.tasks.findByName('check')) {
-    check.dependsOn('checkstyle')
-  }
-}
-
 android {
   compileSdkVersion versions.compileSdk","@@ -1,28 +1,11 @@
 apply plugin: 'com.android.library'
 apply plugin: 'org.jetbrains.kotlin.android'
-apply plugin: 'checkstyle'
 apply plugin: 'me.champeau.gradle.japicmp'
 
 configurations {
   baseline
 }
 
-task checkstyle(type: Checkstyle) {
-  configFile rootProject.file('checkstyle.xml')
-  source 'src/main/java'
-  ignoreFailures false
-  showViolations true
-  include '**/*.java'
-
-  classpath = files()
-}
-
-afterEvaluate {
-  if (project.tasks.findByName('check')) {
-    check.dependsOn('checkstyle')
-  }
-}
-
 android {
   compileSdkVersion versions.compileSdk",False,other
timber/src/main/java/timber/log/Timber.kt,timber/src/main/java/timber/log/Timber.kt,ef261be00863845f58fda50b640c8f895f68dc61,87e29555f31735344449fc9a3f55e53bed4e6d06,"Use variable-sized stack frame skipping

Java callers go through a JvmStatic trampoline whereas Kotlin callers go directly to the companion. Additionally, R8 and ProGuard can remove some of these frames causing problems. Instead of trying to be clever with indices, skip frames which are in known library types.","@@ -194,35 +194,32 @@ class Timber private constructor() {
 
   /** A [Tree] for debug builds. Automatically infers the tag from the calling class. */
   open class DebugTree : Tree() {
+    private val fqcnIgnore = listOf(
+        Timber::class.java.name,
+        Timber.Companion::class.java.name,
+        Timber.Companion.TreeOfSouls::class.java.name,
+        Tree::class.java.name,
+        DebugTree::class.java.name
+    )
+
     override val tag: String?
-      get() {
-        super.tag?.let { return it }
-
-        // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
-        // because Robolectric runs them on the JVM but on Android the elements are different.
-        val stackTrace = Throwable().stackTrace
-        if (stackTrace.size <= CALL_STACK_INDEX) {
-          throw IllegalStateException(
-              ""Synthetic stacktrace didn't have enough elements: are you using proguard?"")
-        }
-        return createStackElementTag(stackTrace[CALL_STACK_INDEX])
-      }
+      get() = super.tag ?: Throwable().stackTrace
+          .first { it.className !in fqcnIgnore }
+          .createStackElementTag()
 
     /**
      * Extract the tag which should be used for the message from the `element`. By default
      * this will use the class name without any anonymous class suffixes (e.g., `Foo$1`
      * becomes `Foo`).
      *
-     *
      * Note: This will not be called if a [manual tag][.tag] was specified.
     */
-    protected open fun createStackElementTag(element: StackTraceElement): String? {
-      var tag = element.className
+    protected open fun StackTraceElement.createStackElementTag(): String? {
+      var tag = className.substringAfterLast('.')
       val m = ANONYMOUS_CLASS.matcher(tag)
       if (m.find()) {
         tag = m.replaceAll("""")
       }
-      tag = tag.substringAfterLast('.')
       // Tag length limit was removed in API 24.
       return if (tag.length <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
         tag
@@ -271,12 +268,11 @@ class Timber private constructor() {
     companion object {
       private const val MAX_LOG_LENGTH = 4000
       private const val MAX_TAG_LENGTH = 23
-      private const val CALL_STACK_INDEX = 6
       private val ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"")
     }
   }
 
-  private companion object {
+  companion object {
     /** Log a verbose message with optional format args. */
     @JvmStatic fun v(@NonNls message: String?, vararg args: Any?) {
       TREE_OF_SOULS.v(message, *args)
@@ -455,7 +451,9 @@ class Timber private constructor() {
 
     /** A [Tree] that delegates to all planted trees in the [forest][.FOREST]. */
     @JvmSynthetic // Hide from public API.
-    @JvmField internal val TREE_OF_SOULS = object : Tree() {
+    @JvmField internal val TREE_OF_SOULS: Tree = TreeOfSouls()
+
+    private class TreeOfSouls : Tree() {
       override fun v(message: String?, vararg args: Any?) {
         for (tree in forestAsArray) {
           tree.v(message, *args)","@@ -194,35 +194,32 @@ class Timber private constructor() {
 
   /** A [Tree] for debug builds. Automatically infers the tag from the calling class. */
   open class DebugTree : Tree() {
+    private val fqcnIgnore = listOf(
+        Timber::class.java.name,
+        Timber.Companion::class.java.name,
+        Timber.Companion.TreeOfSouls::class.java.name,
+        Tree::class.java.name,
+        DebugTree::class.java.name
+    )
+
     override val tag: String?
-      get() {
-        super.tag?.let { return it }
-
-        // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass
-        // because Robolectric runs them on the JVM but on Android the elements are different.
-        val stackTrace = Throwable().stackTrace
-        if (stackTrace.size <= CALL_STACK_INDEX) {
-          throw IllegalStateException(
-              ""Synthetic stacktrace didn't have enough elements: are you using proguard?"")
-        }
-        return createStackElementTag(stackTrace[CALL_STACK_INDEX])
-      }
+      get() = super.tag ?: Throwable().stackTrace
+          .first { it.className !in fqcnIgnore }
+          .createStackElementTag()
 
     /**
      * Extract the tag which should be used for the message from the `element`. By default
      * this will use the class name without any anonymous class suffixes (e.g., `Foo$1`
      * becomes `Foo`).
      *
-     *
      * Note: This will not be called if a [manual tag][.tag] was specified.
     */
-    protected open fun createStackElementTag(element: StackTraceElement): String? {
-      var tag = element.className
+    protected open fun StackTraceElement.createStackElementTag(): String? {
+      var tag = className.substringAfterLast('.')
       val m = ANONYMOUS_CLASS.matcher(tag)
       if (m.find()) {
         tag = m.replaceAll("""")
       }
-      tag = tag.substringAfterLast('.')
       // Tag length limit was removed in API 24.
       return if (tag.length <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
         tag
@@ -271,12 +268,11 @@ class Timber private constructor() {
     companion object {
       private const val MAX_LOG_LENGTH = 4000
       private const val MAX_TAG_LENGTH = 23
-      private const val CALL_STACK_INDEX = 6
       private val ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"")
     }
   }
 
-  private companion object {
+  companion object {
     /** Log a verbose message with optional format args. */
     @JvmStatic fun v(@NonNls message: String?, vararg args: Any?) {
       TREE_OF_SOULS.v(message, *args)
@@ -455,7 +451,9 @@ class Timber private constructor() {
 
     /** A [Tree] that delegates to all planted trees in the [forest][.FOREST]. */
     @JvmSynthetic // Hide from public API.
-    @JvmField internal val TREE_OF_SOULS = object : Tree() {
+    @JvmField internal val TREE_OF_SOULS: Tree = TreeOfSouls()
+
+    private class TreeOfSouls : Tree() {
       override fun v(message: String?, vararg args: Any?) {
         for (tree in forestAsArray) {
           tree.v(message, *args)",False,source
timber/build.gradle,timber/build.gradle,b85e07f778ad0d641d86efea16d31a75d06291c1,ef261be00863845f58fda50b640c8f895f68dc61,"Make companion directly a Tree

Other small API tweaks for Kotlin.","@@ -63,10 +63,6 @@ android.libraryVariants.all { variant ->
     txtOutputFile = file(""$buildDir/reports/japi.txt"")
     ignoreMissingClasses = true
     includeSynthetic = true
-    fieldExcludes = [
-        // Changed to public (via internal) and synthetic (to hide from public API).
-        'timber.log.Timber#FOREST'
-    ]
   }
   japicmp.dependsOn(variant.assemble)
   check.dependsOn(japicmp)","@@ -63,10 +63,6 @@ android.libraryVariants.all { variant ->
     txtOutputFile = file(""$buildDir/reports/japi.txt"")
     ignoreMissingClasses = true
     includeSynthetic = true
-    fieldExcludes = [
-        // Changed to public (via internal) and synthetic (to hide from public API).
-        'timber.log.Timber#FOREST'
-    ]
   }
   japicmp.dependsOn(variant.assemble)
   check.dependsOn(japicmp)",False,other
timber/src/main/java/timber/log/Timber.kt,timber/src/main/java/timber/log/Timber.kt,b85e07f778ad0d641d86efea16d31a75d06291c1,ef261be00863845f58fda50b640c8f895f68dc61,"Make companion directly a Tree

Other small API tweaks for Kotlin.","@@ -196,8 +196,7 @@ class Timber private constructor() {
   open class DebugTree : Tree() {
     private val fqcnIgnore = listOf(
         Timber::class.java.name,
-        Timber.Companion::class.java.name,
-        Timber.Companion.TreeOfSouls::class.java.name,
+        Timber.Forest::class.java.name,
         Tree::class.java.name,
         DebugTree::class.java.name
     )
@@ -205,7 +204,7 @@ class Timber private constructor() {
     override val tag: String?
       get() = super.tag ?: Throwable().stackTrace
           .first { it.className !in fqcnIgnore }
-          .createStackElementTag()
+          .let(::createStackElementTag)
 
     /**
      * Extract the tag which should be used for the message from the `element`. By default
@@ -214,8 +213,8 @@ class Timber private constructor() {
      *
      * Note: This will not be called if a [manual tag][.tag] was specified.
     */
-    protected open fun StackTraceElement.createStackElementTag(): String? {
-      var tag = className.substringAfterLast('.')
+    protected open fun createStackElementTag(element: StackTraceElement): String? {
+      var tag = element.className.substringAfterLast('.')
       val m = ANONYMOUS_CLASS.matcher(tag)
       if (m.find()) {
         tag = m.replaceAll("""")
@@ -272,317 +271,185 @@ class Timber private constructor() {
     }
   }
 
-  companion object {
+  companion object Forest : Tree() {
     /** Log a verbose message with optional format args. */
-    @JvmStatic fun v(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.v(message, *args)
+    @JvmStatic override fun v(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.v(message, *args) }
     }
 
     /** Log a verbose exception and a message with optional format args. */
-    @JvmStatic fun v(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.v(t, message, *args)
+    @JvmStatic override fun v(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.v(t, message, *args) }
     }
 
     /** Log a verbose exception. */
-    @JvmStatic fun v(t: Throwable?) {
-      TREE_OF_SOULS.v(t)
+    @JvmStatic override fun v(t: Throwable?) {
+      treeArray.forEach { it.v(t) }
     }
 
     /** Log a debug message with optional format args. */
-    @JvmStatic fun d(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.d(message, *args)
+    @JvmStatic override fun d(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.d(message, *args) }
     }
 
     /** Log a debug exception and a message with optional format args. */
-    @JvmStatic fun d(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.d(t, message, *args)
+    @JvmStatic override fun d(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.d(t, message, *args) }
     }
 
     /** Log a debug exception. */
-    @JvmStatic fun d(t: Throwable?) {
-      TREE_OF_SOULS.d(t)
+    @JvmStatic override fun d(t: Throwable?) {
+      treeArray.forEach { it.d(t) }
     }
 
     /** Log an info message with optional format args. */
-    @JvmStatic fun i(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.i(message, *args)
+    @JvmStatic override fun i(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.i(message, *args) }
     }
 
     /** Log an info exception and a message with optional format args. */
-    @JvmStatic fun i(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.i(t, message, *args)
+    @JvmStatic override fun i(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.i(t, message, *args) }
     }
 
     /** Log an info exception. */
-    @JvmStatic fun i(t: Throwable?) {
-      TREE_OF_SOULS.i(t)
+    @JvmStatic override fun i(t: Throwable?) {
+      treeArray.forEach { it.i(t) }
     }
 
     /** Log a warning message with optional format args. */
-    @JvmStatic fun w(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.w(message, *args)
+    @JvmStatic override fun w(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.w(message, *args) }
     }
 
     /** Log a warning exception and a message with optional format args. */
-    @JvmStatic fun w(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.w(t, message, *args)
+    @JvmStatic override fun w(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.w(t, message, *args) }
     }
 
     /** Log a warning exception. */
-    @JvmStatic fun w(t: Throwable?) {
-      TREE_OF_SOULS.w(t)
+    @JvmStatic override fun w(t: Throwable?) {
+      treeArray.forEach { it.w(t) }
     }
 
     /** Log an error message with optional format args. */
-    @JvmStatic fun e(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.e(message, *args)
+    @JvmStatic override fun e(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.e(message, *args) }
     }
 
     /** Log an error exception and a message with optional format args. */
-    @JvmStatic fun e(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.e(t, message, *args)
+    @JvmStatic override fun e(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.e(t, message, *args) }
     }
 
     /** Log an error exception. */
-    @JvmStatic fun e(t: Throwable?) {
-      TREE_OF_SOULS.e(t)
+    @JvmStatic override fun e(t: Throwable?) {
+      treeArray.forEach { it.e(t) }
     }
 
     /** Log an assert message with optional format args. */
-    @JvmStatic fun wtf(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.wtf(message, *args)
+    @JvmStatic override fun wtf(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.wtf(message, *args) }
     }
 
     /** Log an assert exception and a message with optional format args. */
-    @JvmStatic fun wtf(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.wtf(t, message, *args)
+    @JvmStatic override fun wtf(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.wtf(t, message, *args) }
     }
 
     /** Log an assert exception. */
-    @JvmStatic fun wtf(t: Throwable?) {
-      TREE_OF_SOULS.wtf(t)
+    @JvmStatic override fun wtf(t: Throwable?) {
+      treeArray.forEach { it.wtf(t) }
     }
 
     /** Log at `priority` a message with optional format args. */
-    @JvmStatic fun log(priority: Int, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.log(priority, message, *args)
+    @JvmStatic override fun log(priority: Int, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.log(priority, message, *args) }
     }
 
     /** Log at `priority` an exception and a message with optional format args. */
-    @JvmStatic fun log(priority: Int, t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.log(priority, t, message, *args)
+    @JvmStatic
+    override fun log(priority: Int, t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.log(priority, t, message, *args) }
     }
 
     /** Log at `priority` an exception. */
-    @JvmStatic fun log(priority: Int, t: Throwable?) {
-      TREE_OF_SOULS.log(priority, t)
+    @JvmStatic override fun log(priority: Int, t: Throwable?) {
+      treeArray.forEach { it.log(priority, t) }
+    }
+
+    override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+      throw AssertionError() // Missing override for log method.
     }
 
     /**
      * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
      * instance rather than using static methods or to facilitate testing.
     */
-    @JvmStatic fun asTree() = TREE_OF_SOULS
+    @Suppress(
+        ""NOTHING_TO_INLINE"", // Kotlin users should reference `Tree.Forest` directly.
+        ""NON_FINAL_MEMBER_IN_OBJECT"" // For japicmp check.
+    )
+    @JvmStatic
+    open inline fun asTree(): Tree = this
 
     /** Set a one-time tag for use on the next logging call. */
     @JvmStatic fun tag(tag: String): Tree {
-      for (tree in forestAsArray) {
+      for (tree in treeArray) {
         tree.explicitTag.set(tag)
       }
-      return TREE_OF_SOULS
+      return this
     }
 
     /** Add a new logging tree. */
     @JvmStatic fun plant(tree: Tree) {
-      require(tree !== TREE_OF_SOULS) { ""Cannot plant Timber into itself."" }
-      synchronized(FOREST) {
-        FOREST.add(tree)
-        forestAsArray = FOREST.toTypedArray()
+      require(tree !== this) { ""Cannot plant Timber into itself."" }
+      synchronized(trees) {
+        trees.add(tree)
+        treeArray = trees.toTypedArray()
       }
     }
 
     /** Adds new logging trees. */
-    @JvmStatic
-    fun plant(vararg trees: Tree) {
+    @JvmStatic fun plant(vararg trees: Tree) {
       for (tree in trees) {
         requireNotNull(tree) { ""trees contained null"" }
-        require(tree !== TREE_OF_SOULS) { ""Cannot plant Timber into itself."" }
+        require(tree !== this) { ""Cannot plant Timber into itself."" }
       }
-      synchronized(FOREST) {
-        Collections.addAll(FOREST, *trees)
-        forestAsArray = FOREST.toTypedArray()
+      synchronized(this.trees) {
+        Collections.addAll(this.trees, *trees)
+        treeArray = this.trees.toTypedArray()
       }
     }
 
     /** Remove a planted tree. */
-    @JvmStatic
-    fun uproot(tree: Tree) {
-      synchronized(FOREST) {
-        require(FOREST.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
-        forestAsArray = FOREST.toTypedArray()
+    @JvmStatic fun uproot(tree: Tree) {
+      synchronized(trees) {
+        require(trees.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
+        treeArray = trees.toTypedArray()
       }
     }
 
     /** Remove all planted trees. */
-    @JvmStatic
-    fun uprootAll() {
-      synchronized(FOREST) {
-        FOREST.clear()
-        forestAsArray = emptyArray()
+    @JvmStatic fun uprootAll() {
+      synchronized(trees) {
+        trees.clear()
+        treeArray = emptyArray()
       }
     }
 
     /** Return a copy of all planted [trees][Tree]. */
     @JvmStatic fun forest(): List<Tree> {
-      synchronized(FOREST) {
-        return unmodifiableList(FOREST.toList())
+      synchronized(trees) {
+        return unmodifiableList(trees.toList())
       }
     }
 
-    @JvmStatic fun treeCount() = forestAsArray.size
-
-    // Both fields guarded by 'FOREST'.
-
-    @JvmSynthetic // Hide from public API.
-    @JvmField internal val FOREST = ArrayList<Tree>()
-
-    @JvmSynthetic // Hide from public API.
-    @JvmField @Volatile internal var forestAsArray = emptyArray<Tree>()
-
-    /** A [Tree] that delegates to all planted trees in the [forest][.FOREST]. */
-    @JvmSynthetic // Hide from public API.
-    @JvmField internal val TREE_OF_SOULS: Tree = TreeOfSouls()
-
-    private class TreeOfSouls : Tree() {
-      override fun v(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.v(message, *args)
-        }
-      }
-
-      override fun v(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.v(t, message, *args)
-        }
-      }
-
-      override fun v(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.v(t)
-        }
-      }
-
-      override fun d(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.d(message, *args)
-        }
-      }
-
-      override fun d(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.d(t, message, *args)
-        }
-      }
-
-      override fun d(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.d(t)
-        }
-      }
-
-      override fun i(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.i(message, *args)
-        }
-      }
-
-      override fun i(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.i(t, message, *args)
-        }
-      }
-
-      override fun i(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.i(t)
-        }
-      }
-
-      override fun w(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.w(message, *args)
-        }
-      }
-
-      override fun w(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.w(t, message, *args)
-        }
-      }
-
-      override fun w(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.w(t)
-        }
-      }
-
-      override fun e(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.e(message, *args)
-        }
-      }
-
-      override fun e(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.e(t, message, *args)
-        }
-      }
-
-      override fun e(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.e(t)
-        }
-      }
+    @get:[JvmStatic JvmName(""treeCount"")]
+    val treeCount get() = treeArray.size
 
-      override fun wtf(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.wtf(message, *args)
-        }
-      }
-
-      override fun wtf(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.wtf(t, message, *args)
-        }
-      }
-
-      override fun wtf(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.wtf(t)
-        }
-      }
-
-      override fun log(priority: Int, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.log(priority, message, *args)
-        }
-      }
-
-      override fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.log(priority, t, message, *args)
-        }
-      }
-
-      override fun log(priority: Int, t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.log(priority, t)
-        }
-      }
-
-      override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
-        throw AssertionError(""Missing override for log method."")
-      }
-    }
+    // Both fields guarded by 'trees'.
+    private val trees = ArrayList<Tree>()
+    @Volatile private var treeArray = emptyArray<Tree>()
   }
 }","@@ -196,8 +196,7 @@ class Timber private constructor() {
   open class DebugTree : Tree() {
     private val fqcnIgnore = listOf(
         Timber::class.java.name,
-        Timber.Companion::class.java.name,
-        Timber.Companion.TreeOfSouls::class.java.name,
+        Timber.Forest::class.java.name,
         Tree::class.java.name,
         DebugTree::class.java.name
     )
@@ -205,7 +204,7 @@ class Timber private constructor() {
     override val tag: String?
       get() = super.tag ?: Throwable().stackTrace
           .first { it.className !in fqcnIgnore }
-          .createStackElementTag()
+          .let(::createStackElementTag)
 
     /**
      * Extract the tag which should be used for the message from the `element`. By default
@@ -214,8 +213,8 @@ class Timber private constructor() {
      *
      * Note: This will not be called if a [manual tag][.tag] was specified.
     */
-    protected open fun StackTraceElement.createStackElementTag(): String? {
-      var tag = className.substringAfterLast('.')
+    protected open fun createStackElementTag(element: StackTraceElement): String? {
+      var tag = element.className.substringAfterLast('.')
       val m = ANONYMOUS_CLASS.matcher(tag)
       if (m.find()) {
         tag = m.replaceAll("""")
@@ -272,317 +271,185 @@ class Timber private constructor() {
     }
   }
 
-  companion object {
+  companion object Forest : Tree() {
     /** Log a verbose message with optional format args. */
-    @JvmStatic fun v(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.v(message, *args)
+    @JvmStatic override fun v(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.v(message, *args) }
     }
 
     /** Log a verbose exception and a message with optional format args. */
-    @JvmStatic fun v(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.v(t, message, *args)
+    @JvmStatic override fun v(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.v(t, message, *args) }
     }
 
     /** Log a verbose exception. */
-    @JvmStatic fun v(t: Throwable?) {
-      TREE_OF_SOULS.v(t)
+    @JvmStatic override fun v(t: Throwable?) {
+      treeArray.forEach { it.v(t) }
     }
 
     /** Log a debug message with optional format args. */
-    @JvmStatic fun d(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.d(message, *args)
+    @JvmStatic override fun d(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.d(message, *args) }
     }
 
     /** Log a debug exception and a message with optional format args. */
-    @JvmStatic fun d(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.d(t, message, *args)
+    @JvmStatic override fun d(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.d(t, message, *args) }
     }
 
     /** Log a debug exception. */
-    @JvmStatic fun d(t: Throwable?) {
-      TREE_OF_SOULS.d(t)
+    @JvmStatic override fun d(t: Throwable?) {
+      treeArray.forEach { it.d(t) }
     }
 
     /** Log an info message with optional format args. */
-    @JvmStatic fun i(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.i(message, *args)
+    @JvmStatic override fun i(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.i(message, *args) }
     }
 
     /** Log an info exception and a message with optional format args. */
-    @JvmStatic fun i(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.i(t, message, *args)
+    @JvmStatic override fun i(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.i(t, message, *args) }
     }
 
     /** Log an info exception. */
-    @JvmStatic fun i(t: Throwable?) {
-      TREE_OF_SOULS.i(t)
+    @JvmStatic override fun i(t: Throwable?) {
+      treeArray.forEach { it.i(t) }
     }
 
     /** Log a warning message with optional format args. */
-    @JvmStatic fun w(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.w(message, *args)
+    @JvmStatic override fun w(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.w(message, *args) }
     }
 
     /** Log a warning exception and a message with optional format args. */
-    @JvmStatic fun w(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.w(t, message, *args)
+    @JvmStatic override fun w(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.w(t, message, *args) }
     }
 
     /** Log a warning exception. */
-    @JvmStatic fun w(t: Throwable?) {
-      TREE_OF_SOULS.w(t)
+    @JvmStatic override fun w(t: Throwable?) {
+      treeArray.forEach { it.w(t) }
     }
 
     /** Log an error message with optional format args. */
-    @JvmStatic fun e(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.e(message, *args)
+    @JvmStatic override fun e(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.e(message, *args) }
     }
 
     /** Log an error exception and a message with optional format args. */
-    @JvmStatic fun e(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.e(t, message, *args)
+    @JvmStatic override fun e(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.e(t, message, *args) }
     }
 
     /** Log an error exception. */
-    @JvmStatic fun e(t: Throwable?) {
-      TREE_OF_SOULS.e(t)
+    @JvmStatic override fun e(t: Throwable?) {
+      treeArray.forEach { it.e(t) }
     }
 
     /** Log an assert message with optional format args. */
-    @JvmStatic fun wtf(@NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.wtf(message, *args)
+    @JvmStatic override fun wtf(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.wtf(message, *args) }
     }
 
     /** Log an assert exception and a message with optional format args. */
-    @JvmStatic fun wtf(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.wtf(t, message, *args)
+    @JvmStatic override fun wtf(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.wtf(t, message, *args) }
     }
 
     /** Log an assert exception. */
-    @JvmStatic fun wtf(t: Throwable?) {
-      TREE_OF_SOULS.wtf(t)
+    @JvmStatic override fun wtf(t: Throwable?) {
+      treeArray.forEach { it.wtf(t) }
     }
 
     /** Log at `priority` a message with optional format args. */
-    @JvmStatic fun log(priority: Int, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.log(priority, message, *args)
+    @JvmStatic override fun log(priority: Int, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.log(priority, message, *args) }
     }
 
     /** Log at `priority` an exception and a message with optional format args. */
-    @JvmStatic fun log(priority: Int, t: Throwable?, @NonNls message: String?, vararg args: Any?) {
-      TREE_OF_SOULS.log(priority, t, message, *args)
+    @JvmStatic
+    override fun log(priority: Int, t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.log(priority, t, message, *args) }
     }
 
     /** Log at `priority` an exception. */
-    @JvmStatic fun log(priority: Int, t: Throwable?) {
-      TREE_OF_SOULS.log(priority, t)
+    @JvmStatic override fun log(priority: Int, t: Throwable?) {
+      treeArray.forEach { it.log(priority, t) }
+    }
+
+    override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+      throw AssertionError() // Missing override for log method.
     }
 
     /**
      * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
      * instance rather than using static methods or to facilitate testing.
     */
-    @JvmStatic fun asTree() = TREE_OF_SOULS
+    @Suppress(
+        ""NOTHING_TO_INLINE"", // Kotlin users should reference `Tree.Forest` directly.
+        ""NON_FINAL_MEMBER_IN_OBJECT"" // For japicmp check.
+    )
+    @JvmStatic
+    open inline fun asTree(): Tree = this
 
     /** Set a one-time tag for use on the next logging call. */
     @JvmStatic fun tag(tag: String): Tree {
-      for (tree in forestAsArray) {
+      for (tree in treeArray) {
         tree.explicitTag.set(tag)
       }
-      return TREE_OF_SOULS
+      return this
     }
 
     /** Add a new logging tree. */
     @JvmStatic fun plant(tree: Tree) {
-      require(tree !== TREE_OF_SOULS) { ""Cannot plant Timber into itself."" }
-      synchronized(FOREST) {
-        FOREST.add(tree)
-        forestAsArray = FOREST.toTypedArray()
+      require(tree !== this) { ""Cannot plant Timber into itself."" }
+      synchronized(trees) {
+        trees.add(tree)
+        treeArray = trees.toTypedArray()
       }
     }
 
     /** Adds new logging trees. */
-    @JvmStatic
-    fun plant(vararg trees: Tree) {
+    @JvmStatic fun plant(vararg trees: Tree) {
       for (tree in trees) {
         requireNotNull(tree) { ""trees contained null"" }
-        require(tree !== TREE_OF_SOULS) { ""Cannot plant Timber into itself."" }
+        require(tree !== this) { ""Cannot plant Timber into itself."" }
       }
-      synchronized(FOREST) {
-        Collections.addAll(FOREST, *trees)
-        forestAsArray = FOREST.toTypedArray()
+      synchronized(this.trees) {
+        Collections.addAll(this.trees, *trees)
+        treeArray = this.trees.toTypedArray()
       }
     }
 
     /** Remove a planted tree. */
-    @JvmStatic
-    fun uproot(tree: Tree) {
-      synchronized(FOREST) {
-        require(FOREST.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
-        forestAsArray = FOREST.toTypedArray()
+    @JvmStatic fun uproot(tree: Tree) {
+      synchronized(trees) {
+        require(trees.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
+        treeArray = trees.toTypedArray()
       }
     }
 
     /** Remove all planted trees. */
-    @JvmStatic
-    fun uprootAll() {
-      synchronized(FOREST) {
-        FOREST.clear()
-        forestAsArray = emptyArray()
+    @JvmStatic fun uprootAll() {
+      synchronized(trees) {
+        trees.clear()
+        treeArray = emptyArray()
       }
     }
 
     /** Return a copy of all planted [trees][Tree]. */
     @JvmStatic fun forest(): List<Tree> {
-      synchronized(FOREST) {
-        return unmodifiableList(FOREST.toList())
+      synchronized(trees) {
+        return unmodifiableList(trees.toList())
       }
     }
 
-    @JvmStatic fun treeCount() = forestAsArray.size
-
-    // Both fields guarded by 'FOREST'.
-
-    @JvmSynthetic // Hide from public API.
-    @JvmField internal val FOREST = ArrayList<Tree>()
-
-    @JvmSynthetic // Hide from public API.
-    @JvmField @Volatile internal var forestAsArray = emptyArray<Tree>()
-
-    /** A [Tree] that delegates to all planted trees in the [forest][.FOREST]. */
-    @JvmSynthetic // Hide from public API.
-    @JvmField internal val TREE_OF_SOULS: Tree = TreeOfSouls()
-
-    private class TreeOfSouls : Tree() {
-      override fun v(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.v(message, *args)
-        }
-      }
-
-      override fun v(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.v(t, message, *args)
-        }
-      }
-
-      override fun v(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.v(t)
-        }
-      }
-
-      override fun d(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.d(message, *args)
-        }
-      }
-
-      override fun d(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.d(t, message, *args)
-        }
-      }
-
-      override fun d(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.d(t)
-        }
-      }
-
-      override fun i(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.i(message, *args)
-        }
-      }
-
-      override fun i(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.i(t, message, *args)
-        }
-      }
-
-      override fun i(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.i(t)
-        }
-      }
-
-      override fun w(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.w(message, *args)
-        }
-      }
-
-      override fun w(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.w(t, message, *args)
-        }
-      }
-
-      override fun w(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.w(t)
-        }
-      }
-
-      override fun e(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.e(message, *args)
-        }
-      }
-
-      override fun e(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.e(t, message, *args)
-        }
-      }
-
-      override fun e(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.e(t)
-        }
-      }
+    @get:[JvmStatic JvmName(""treeCount"")]
+    val treeCount get() = treeArray.size
 
-      override fun wtf(message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.wtf(message, *args)
-        }
-      }
-
-      override fun wtf(t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.wtf(t, message, *args)
-        }
-      }
-
-      override fun wtf(t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.wtf(t)
-        }
-      }
-
-      override fun log(priority: Int, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.log(priority, message, *args)
-        }
-      }
-
-      override fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
-        for (tree in forestAsArray) {
-          tree.log(priority, t, message, *args)
-        }
-      }
-
-      override fun log(priority: Int, t: Throwable?) {
-        for (tree in forestAsArray) {
-          tree.log(priority, t)
-        }
-      }
-
-      override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
-        throw AssertionError(""Missing override for log method."")
-      }
-    }
+    // Both fields guarded by 'trees'.
+    private val trees = ArrayList<Tree>()
+    @Volatile private var treeArray = emptyArray<Tree>()
   }
 }",False,source
timber/src/test/java/timber/log/TimberTest.java,,9e3ca1f7b54f6b1545c6ce5f393043348764cfea,d9d5905c15db5a7642c3790bda8904cc4be1f8b4,Port tests to Kotlin,"@@ -1,597 +0,0 @@
-package timber.log;
-
-import android.os.Build;
-import android.util.Log;
-import java.net.ConnectException;
-import java.net.UnknownHostException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import org.jetbrains.annotations.NotNull;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLog;
-
-import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.robolectric.shadows.ShadowLog.LogItem;
-
-@RunWith(RobolectricTestRunner.class) //
-@Config(manifest = Config.NONE)
-public class TimberTest {
-  @Before @After public void setUpAndTearDown() {
-    Timber.uprootAll();
-  }
-
-  // NOTE: This class references the line number. Keep it at the top so it does not change.
-  @Test public void debugTreeCanAlterCreatedTag() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected String createStackElementTag(@NotNull StackTraceElement element) {
-        return super.createStackElementTag(element) + ':' + element.getLineNumber();
-      }
-    });
-
-    Timber.d(""Test"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest:41"", ""Test"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void recursion() {
-    Timber.Tree timber = Timber.asTree();
-    try {
-      Timber.plant(timber);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""Cannot plant Timber into itself."");
-    }
-    try {
-      Timber.plant(new Timber.Tree[]{timber});
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""Cannot plant Timber into itself."");
-    }
-  }
-
-  @Test public void treeCount() {
-    // inserts trees and checks if the amount of returned trees matches.
-    assertThat(Timber.treeCount()).isEqualTo(0);
-    for (int i = 1; i < 50; i++) {
-      Timber.plant(new Timber.DebugTree());
-      assertThat(Timber.treeCount()).isEqualTo(i);
-    }
-    Timber.uprootAll();
-    assertThat(Timber.treeCount()).isEqualTo(0);
-  }
-
-  @SuppressWarnings(""ConstantConditions"")
-  @Test public void nullTree() {
-    Timber.Tree nullTree = null;
-    try {
-      Timber.plant(nullTree);
-      fail();
-    } catch (IllegalArgumentException ignored) {
-    }
-  }
-
-  @SuppressWarnings(""ConstantConditions"")
-  @Test public void nullTreeArray() {
-    Timber.Tree[] nullTrees = null;
-    try {
-      Timber.plant(nullTrees);
-      fail();
-    } catch (IllegalArgumentException ignored) {
-    }
-    nullTrees = new Timber.Tree[]{null};
-    try {
-      Timber.plant(nullTrees);
-      fail();
-    } catch (IllegalArgumentException ignored) {
-    }
-  }
-
-  @Test public void forestReturnsAllPlanted() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1);
-    Timber.plant(tree2);
-
-    assertThat(Timber.forest()).containsExactly(tree1, tree2);
-  }
-
-  @Test public void forestReturnsAllTreesPlanted() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1, tree2);
-
-    assertThat(Timber.forest()).containsExactly(tree1, tree2);
-  }
-
-  @Test public void uprootThrowsIfMissing() {
-    try {
-      Timber.uproot(new Timber.DebugTree());
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessageThat().startsWith(""Cannot uproot tree which is not planted: "");
-    }
-  }
-
-  @Test public void uprootRemovesTree() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1);
-    Timber.plant(tree2);
-    Timber.d(""First"");
-    Timber.uproot(tree1);
-    Timber.d(""Second"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""First"")
-        .hasDebugMessage(""TimberTest"", ""First"")
-        .hasDebugMessage(""TimberTest"", ""Second"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void uprootAllRemovesAll() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1);
-    Timber.plant(tree2);
-    Timber.d(""First"");
-    Timber.uprootAll();
-    Timber.d(""Second"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""First"")
-        .hasDebugMessage(""TimberTest"", ""First"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void noArgsDoesNotFormat() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.d(""te%st"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""te%st"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void debugTreeTagGeneration() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.d(""Hello, world!"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  class ThisIsAReallyLongClassName {
-    void run() {
-      Timber.d(""Hello, world!"");
-    }
-  }
-
-  @Config(sdk = 23)
-  @Test public void debugTreeTagTruncation() {
-    Timber.plant(new Timber.DebugTree());
-
-    new ThisIsAReallyLongClassName().run();
-
-    assertLog()
-        .hasDebugMessage(""TimberTest$ThisIsAReall"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  @Config(sdk = 24)
-  @Test public void debugTreeTagNoTruncation() {
-    Timber.plant(new Timber.DebugTree());
-
-    new ThisIsAReallyLongClassName().run();
-
-    assertLog()
-        .hasDebugMessage(""TimberTest$ThisIsAReallyLongClassName"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void debugTreeTagGenerationStripsAnonymousClassMarker() {
-    Timber.plant(new Timber.DebugTree());
-    new Runnable() {
-      @Override public void run() {
-        Timber.d(""Hello, world!"");
-
-        new Runnable() {
-          @Override public void run() {
-            Timber.d(""Hello, world!"");
-          }
-        }.run();
-      }
-    }.run();
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
-        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void debugTreeGeneratedTagIsLoggable() {
-    Timber.plant(new Timber.DebugTree() {
-      private static final int MAX_TAG_LENGTH = 23;
-
-      @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
-        try {
-          assertTrue(Log.isLoggable(tag, priority));
-          if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
-            assertTrue(tag.length() <= MAX_TAG_LENGTH);
-          }
-        } catch (IllegalArgumentException e) {
-          fail(e.getMessage());
-        }
-        super.log(priority, tag, message, t);
-      }
-    });
-    class ClassNameThatIsReallyReallyReallyLong {
-      {
-        Timber.i(""Hello, world!"");
-      }
-    }
-    new ClassNameThatIsReallyReallyReallyLong();
-    assertLog()
-        .hasInfoMessage(""TimberTest$1ClassNameTh"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void debugTreeCustomTag() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.tag(""Custom"").d(""Hello, world!"");
-
-    assertLog()
-        .hasDebugMessage(""Custom"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void messageWithException() {
-    Timber.plant(new Timber.DebugTree());
-    NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
-    Timber.e(datThrowable, ""OMFG!"");
-
-    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
-  }
-
-  @Test public void exceptionOnly() {
-    Timber.plant(new Timber.DebugTree());
-
-    Timber.v(truncatedThrowable(IllegalArgumentException.class));
-    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""TimberTest"", 0);
-
-    Timber.i(truncatedThrowable(NullPointerException.class));
-    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""TimberTest"", 1);
-
-    Timber.d(truncatedThrowable(UnsupportedOperationException.class));
-    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""TimberTest"", 2);
-
-    Timber.w(truncatedThrowable(UnknownHostException.class));
-    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""TimberTest"", 3);
-
-    Timber.e(truncatedThrowable(ConnectException.class));
-    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""TimberTest"", 4);
-
-    Timber.wtf(truncatedThrowable(AssertionError.class));
-    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""TimberTest"", 5);
-  }
-
-  @Test public void exceptionOnlyCustomTag() {
-    Timber.plant(new Timber.DebugTree());
-
-    Timber.tag(""Custom"").v(truncatedThrowable(IllegalArgumentException.class));
-    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""Custom"", 0);
-
-    Timber.tag(""Custom"").i(truncatedThrowable(NullPointerException.class));
-    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""Custom"", 1);
-
-    Timber.tag(""Custom"").d(truncatedThrowable(UnsupportedOperationException.class));
-    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""Custom"", 2);
-
-    Timber.tag(""Custom"").w(truncatedThrowable(UnknownHostException.class));
-    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""Custom"", 3);
-
-    Timber.tag(""Custom"").e(truncatedThrowable(ConnectException.class));
-    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""Custom"", 4);
-
-    Timber.tag(""Custom"").wtf(truncatedThrowable(AssertionError.class));
-    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""Custom"", 5);
-  }
-
-  @Test public void exceptionFromSpawnedThread() throws InterruptedException {
-    Timber.plant(new Timber.DebugTree());
-    final NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
-    final CountDownLatch latch = new CountDownLatch(1);
-    new Thread() {
-      @Override public void run() {
-        Timber.e(datThrowable, ""OMFG!"");
-        latch.countDown();
-      }
-    }.start();
-    latch.await();
-    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
-  }
-
-  @Test public void nullMessageWithThrowable() {
-    Timber.plant(new Timber.DebugTree());
-    NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
-    Timber.e(datThrowable, null);
-
-    assertExceptionLogged(Log.ERROR, """", ""java.lang.NullPointerException"");
-  }
-
-  @Test public void chunkAcrossNewlinesAndLimit() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.d(repeat('a', 3000) + '\n' + repeat('b', 6000) + '\n' + repeat('c', 3000));
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", repeat('a', 3000))
-        .hasDebugMessage(""TimberTest"", repeat('b', 4000))
-        .hasDebugMessage(""TimberTest"", repeat('b', 2000))
-        .hasDebugMessage(""TimberTest"", repeat('c', 3000))
-        .hasNoMoreMessages();
-  }
-
-  @Test public void nullMessageWithoutThrowable() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.d(null);
-
-    assertLog().hasNoMoreMessages();
-  }
-
-  @Test public void logMessageCallback() {
-    final List<String> logs = new ArrayList<>();
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
-        logs.add(priority + "" "" + tag + "" "" + message);
-      }
-    });
-
-    Timber.v(""Verbose"");
-    Timber.tag(""Custom"").v(""Verbose"");
-    Timber.d(""Debug"");
-    Timber.tag(""Custom"").d(""Debug"");
-    Timber.i(""Info"");
-    Timber.tag(""Custom"").i(""Info"");
-    Timber.w(""Warn"");
-    Timber.tag(""Custom"").w(""Warn"");
-    Timber.e(""Error"");
-    Timber.tag(""Custom"").e(""Error"");
-    Timber.wtf(""Assert"");
-    Timber.tag(""Custom"").wtf(""Assert"");
-
-    assertThat(logs).containsExactly( //
-        ""2 TimberTest Verbose"", //
-        ""2 Custom Verbose"", //
-        ""3 TimberTest Debug"", //
-        ""3 Custom Debug"", //
-        ""4 TimberTest Info"", //
-        ""4 Custom Info"", //
-        ""5 TimberTest Warn"", //
-        ""5 Custom Warn"", //
-        ""6 TimberTest Error"", //
-        ""6 Custom Error"", //
-        ""7 TimberTest Assert"", //
-        ""7 Custom Assert"" //
-    );
-  }
-
-  @Test public void logAtSpecifiedPriority() {
-    Timber.plant(new Timber.DebugTree());
-
-    Timber.log(Log.VERBOSE, ""Hello, World!"");
-    Timber.log(Log.DEBUG, ""Hello, World!"");
-    Timber.log(Log.INFO, ""Hello, World!"");
-    Timber.log(Log.WARN, ""Hello, World!"");
-    Timber.log(Log.ERROR, ""Hello, World!"");
-    Timber.log(Log.ASSERT, ""Hello, World!"");
-
-    assertLog()
-        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
-        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
-        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
-        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
-        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
-        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void formatting() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.v(""Hello, %s!"", ""World"");
-    Timber.d(""Hello, %s!"", ""World"");
-    Timber.i(""Hello, %s!"", ""World"");
-    Timber.w(""Hello, %s!"", ""World"");
-    Timber.e(""Hello, %s!"", ""World"");
-    Timber.wtf(""Hello, %s!"", ""World"");
-
-    assertLog()
-        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
-        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
-        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
-        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
-        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
-        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
-        .hasNoMoreMessages();
-  }
-
-  @SuppressWarnings(""deprecation"") // Explicitly testing deprecated variant.
-  @Test public void isLoggableControlsLogging() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected boolean isLoggable(int priority) {
-        return priority == Log.INFO;
-      }
-    });
-    Timber.v(""Hello, World!"");
-    Timber.d(""Hello, World!"");
-    Timber.i(""Hello, World!"");
-    Timber.w(""Hello, World!"");
-    Timber.e(""Hello, World!"");
-    Timber.wtf(""Hello, World!"");
-
-    assertLog()
-        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void isLoggableTagControlsLogging() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected boolean isLoggable(String tag, int priority) {
-        return ""FILTER"".equals(tag);
-      }
-    });
-    Timber.tag(""FILTER"").v(""Hello, World!"");
-    Timber.d(""Hello, World!"");
-    Timber.i(""Hello, World!"");
-    Timber.w(""Hello, World!"");
-    Timber.e(""Hello, World!"");
-    Timber.wtf(""Hello, World!"");
-
-    assertLog()
-        .hasVerboseMessage(""FILTER"", ""Hello, World!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void logsUnknownHostExceptions() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.e(truncatedThrowable(UnknownHostException.class), null);
-
-    assertExceptionLogged(Log.ERROR, """", ""UnknownHostException"");
-  }
-
-  @Test public void tagIsClearedWhenNotLoggable() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override
-      protected boolean isLoggable(String tag, int priority) {
-        return priority >= Log.WARN;
-      }
-    });
-    Timber.tag(""NotLogged"").i(""Message not logged"");
-    Timber.w(""Message logged"");
-
-    assertLog()
-        .hasWarnMessage(""TimberTest"", ""Message logged"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void logsWithCustomFormatter() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override
-      protected String formatMessage(@NotNull String message, @NotNull Object[] args) {
-        return String.format(""Test formatting: "" + message, args);
-      }
-    });
-    Timber.d(""Test message logged. %d"", 100);
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"");
-  }
-
-  @Ignore(""No way to allow this in Kotlin as far as I can tell"")
-  @Test public void nullArgumentObjectArray() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.v(""Test"", (Object[]) null);
-    assertLog()
-        .hasVerboseMessage(""TimberTest"", ""Test"")
-        .hasNoMoreMessages();
-  }
-
-  private static <T extends Throwable> T truncatedThrowable(Class<T> throwableClass) {
-    try {
-      T throwable = throwableClass.newInstance();
-      StackTraceElement[] stackTrace = throwable.getStackTrace();
-      int traceLength = stackTrace.length > 5 ? 5 : stackTrace.length;
-      throwable.setStackTrace(Arrays.copyOf(stackTrace, traceLength));
-      return throwable;
-    } catch (InstantiationException | IllegalAccessException e) {
-      throw new RuntimeException(e);
-    }
-  }
-
-  private static String repeat(char c, int number) {
-    char[] data = new char[number];
-    Arrays.fill(data, c);
-    return new String(data);
-  }
-
-  private static void assertExceptionLogged(int logType, String message, String exceptionClassname) {
-    assertExceptionLogged(logType, message, exceptionClassname, null, 0);
-  }
-
-  private static void assertExceptionLogged(int logType, String message, String exceptionClassname, String tag,
-                                            int index) {
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(index + 1);
-    LogItem log = logs.get(index);
-    assertThat(log.type).isEqualTo(logType);
-    assertThat(log.tag).isEqualTo(tag != null ? tag : ""TimberTest"");
-
-    if (message != null) {
-      assertThat(log.msg).startsWith(message);
-    }
-
-    assertThat(log.msg).contains(exceptionClassname);
-    // We use a low-level primitive that Robolectric doesn't populate.
-    assertThat(log.throwable).isNull();
-  }
-
-  private static LogAssert assertLog() {
-    return new LogAssert(ShadowLog.getLogs());
-  }
-
-  private static final class LogAssert {
-    private final List<LogItem> items;
-    private int index = 0;
-
-    private LogAssert(List<LogItem> items) {
-      this.items = items;
-    }
-
-    public LogAssert hasVerboseMessage(String tag, String message) {
-      return hasMessage(Log.VERBOSE, tag, message);
-    }
-
-    public LogAssert hasDebugMessage(String tag, String message) {
-      return hasMessage(Log.DEBUG, tag, message);
-    }
-
-    public LogAssert hasInfoMessage(String tag, String message) {
-      return hasMessage(Log.INFO, tag, message);
-    }
-
-    public LogAssert hasWarnMessage(String tag, String message) {
-      return hasMessage(Log.WARN, tag, message);
-    }
-
-    public LogAssert hasErrorMessage(String tag, String message) {
-      return hasMessage(Log.ERROR, tag, message);
-    }
-
-    public LogAssert hasAssertMessage(String tag, String message) {
-      return hasMessage(Log.ASSERT, tag, message);
-    }
-
-    private LogAssert hasMessage(int priority, String tag, String message) {
-      LogItem item = items.get(index++);
-      assertThat(item.type).isEqualTo(priority);
-      assertThat(item.tag).isEqualTo(tag);
-      assertThat(item.msg).isEqualTo(message);
-      return this;
-    }
-
-    public void hasNoMoreMessages() {
-      assertThat(items).hasSize(index);
-    }
-  }
-}","@@ -1,597 +0,0 @@
-package timber.log;
-
-import android.os.Build;
-import android.util.Log;
-import java.net.ConnectException;
-import java.net.UnknownHostException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import org.jetbrains.annotations.NotNull;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLog;
-
-import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.robolectric.shadows.ShadowLog.LogItem;
-
-@RunWith(RobolectricTestRunner.class) //
-@Config(manifest = Config.NONE)
-public class TimberTest {
-  @Before @After public void setUpAndTearDown() {
-    Timber.uprootAll();
-  }
-
-  // NOTE: This class references the line number. Keep it at the top so it does not change.
-  @Test public void debugTreeCanAlterCreatedTag() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected String createStackElementTag(@NotNull StackTraceElement element) {
-        return super.createStackElementTag(element) + ':' + element.getLineNumber();
-      }
-    });
-
-    Timber.d(""Test"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest:41"", ""Test"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void recursion() {
-    Timber.Tree timber = Timber.asTree();
-    try {
-      Timber.plant(timber);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""Cannot plant Timber into itself."");
-    }
-    try {
-      Timber.plant(new Timber.Tree[]{timber});
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessageThat().isEqualTo(""Cannot plant Timber into itself."");
-    }
-  }
-
-  @Test public void treeCount() {
-    // inserts trees and checks if the amount of returned trees matches.
-    assertThat(Timber.treeCount()).isEqualTo(0);
-    for (int i = 1; i < 50; i++) {
-      Timber.plant(new Timber.DebugTree());
-      assertThat(Timber.treeCount()).isEqualTo(i);
-    }
-    Timber.uprootAll();
-    assertThat(Timber.treeCount()).isEqualTo(0);
-  }
-
-  @SuppressWarnings(""ConstantConditions"")
-  @Test public void nullTree() {
-    Timber.Tree nullTree = null;
-    try {
-      Timber.plant(nullTree);
-      fail();
-    } catch (IllegalArgumentException ignored) {
-    }
-  }
-
-  @SuppressWarnings(""ConstantConditions"")
-  @Test public void nullTreeArray() {
-    Timber.Tree[] nullTrees = null;
-    try {
-      Timber.plant(nullTrees);
-      fail();
-    } catch (IllegalArgumentException ignored) {
-    }
-    nullTrees = new Timber.Tree[]{null};
-    try {
-      Timber.plant(nullTrees);
-      fail();
-    } catch (IllegalArgumentException ignored) {
-    }
-  }
-
-  @Test public void forestReturnsAllPlanted() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1);
-    Timber.plant(tree2);
-
-    assertThat(Timber.forest()).containsExactly(tree1, tree2);
-  }
-
-  @Test public void forestReturnsAllTreesPlanted() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1, tree2);
-
-    assertThat(Timber.forest()).containsExactly(tree1, tree2);
-  }
-
-  @Test public void uprootThrowsIfMissing() {
-    try {
-      Timber.uproot(new Timber.DebugTree());
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessageThat().startsWith(""Cannot uproot tree which is not planted: "");
-    }
-  }
-
-  @Test public void uprootRemovesTree() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1);
-    Timber.plant(tree2);
-    Timber.d(""First"");
-    Timber.uproot(tree1);
-    Timber.d(""Second"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""First"")
-        .hasDebugMessage(""TimberTest"", ""First"")
-        .hasDebugMessage(""TimberTest"", ""Second"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void uprootAllRemovesAll() {
-    Timber.DebugTree tree1 = new Timber.DebugTree();
-    Timber.DebugTree tree2 = new Timber.DebugTree();
-    Timber.plant(tree1);
-    Timber.plant(tree2);
-    Timber.d(""First"");
-    Timber.uprootAll();
-    Timber.d(""Second"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""First"")
-        .hasDebugMessage(""TimberTest"", ""First"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void noArgsDoesNotFormat() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.d(""te%st"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""te%st"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void debugTreeTagGeneration() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.d(""Hello, world!"");
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  class ThisIsAReallyLongClassName {
-    void run() {
-      Timber.d(""Hello, world!"");
-    }
-  }
-
-  @Config(sdk = 23)
-  @Test public void debugTreeTagTruncation() {
-    Timber.plant(new Timber.DebugTree());
-
-    new ThisIsAReallyLongClassName().run();
-
-    assertLog()
-        .hasDebugMessage(""TimberTest$ThisIsAReall"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  @Config(sdk = 24)
-  @Test public void debugTreeTagNoTruncation() {
-    Timber.plant(new Timber.DebugTree());
-
-    new ThisIsAReallyLongClassName().run();
-
-    assertLog()
-        .hasDebugMessage(""TimberTest$ThisIsAReallyLongClassName"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void debugTreeTagGenerationStripsAnonymousClassMarker() {
-    Timber.plant(new Timber.DebugTree());
-    new Runnable() {
-      @Override public void run() {
-        Timber.d(""Hello, world!"");
-
-        new Runnable() {
-          @Override public void run() {
-            Timber.d(""Hello, world!"");
-          }
-        }.run();
-      }
-    }.run();
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
-        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void debugTreeGeneratedTagIsLoggable() {
-    Timber.plant(new Timber.DebugTree() {
-      private static final int MAX_TAG_LENGTH = 23;
-
-      @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
-        try {
-          assertTrue(Log.isLoggable(tag, priority));
-          if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
-            assertTrue(tag.length() <= MAX_TAG_LENGTH);
-          }
-        } catch (IllegalArgumentException e) {
-          fail(e.getMessage());
-        }
-        super.log(priority, tag, message, t);
-      }
-    });
-    class ClassNameThatIsReallyReallyReallyLong {
-      {
-        Timber.i(""Hello, world!"");
-      }
-    }
-    new ClassNameThatIsReallyReallyReallyLong();
-    assertLog()
-        .hasInfoMessage(""TimberTest$1ClassNameTh"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void debugTreeCustomTag() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.tag(""Custom"").d(""Hello, world!"");
-
-    assertLog()
-        .hasDebugMessage(""Custom"", ""Hello, world!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void messageWithException() {
-    Timber.plant(new Timber.DebugTree());
-    NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
-    Timber.e(datThrowable, ""OMFG!"");
-
-    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
-  }
-
-  @Test public void exceptionOnly() {
-    Timber.plant(new Timber.DebugTree());
-
-    Timber.v(truncatedThrowable(IllegalArgumentException.class));
-    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""TimberTest"", 0);
-
-    Timber.i(truncatedThrowable(NullPointerException.class));
-    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""TimberTest"", 1);
-
-    Timber.d(truncatedThrowable(UnsupportedOperationException.class));
-    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""TimberTest"", 2);
-
-    Timber.w(truncatedThrowable(UnknownHostException.class));
-    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""TimberTest"", 3);
-
-    Timber.e(truncatedThrowable(ConnectException.class));
-    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""TimberTest"", 4);
-
-    Timber.wtf(truncatedThrowable(AssertionError.class));
-    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""TimberTest"", 5);
-  }
-
-  @Test public void exceptionOnlyCustomTag() {
-    Timber.plant(new Timber.DebugTree());
-
-    Timber.tag(""Custom"").v(truncatedThrowable(IllegalArgumentException.class));
-    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""Custom"", 0);
-
-    Timber.tag(""Custom"").i(truncatedThrowable(NullPointerException.class));
-    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""Custom"", 1);
-
-    Timber.tag(""Custom"").d(truncatedThrowable(UnsupportedOperationException.class));
-    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""Custom"", 2);
-
-    Timber.tag(""Custom"").w(truncatedThrowable(UnknownHostException.class));
-    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""Custom"", 3);
-
-    Timber.tag(""Custom"").e(truncatedThrowable(ConnectException.class));
-    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""Custom"", 4);
-
-    Timber.tag(""Custom"").wtf(truncatedThrowable(AssertionError.class));
-    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""Custom"", 5);
-  }
-
-  @Test public void exceptionFromSpawnedThread() throws InterruptedException {
-    Timber.plant(new Timber.DebugTree());
-    final NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
-    final CountDownLatch latch = new CountDownLatch(1);
-    new Thread() {
-      @Override public void run() {
-        Timber.e(datThrowable, ""OMFG!"");
-        latch.countDown();
-      }
-    }.start();
-    latch.await();
-    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"");
-  }
-
-  @Test public void nullMessageWithThrowable() {
-    Timber.plant(new Timber.DebugTree());
-    NullPointerException datThrowable = truncatedThrowable(NullPointerException.class);
-    Timber.e(datThrowable, null);
-
-    assertExceptionLogged(Log.ERROR, """", ""java.lang.NullPointerException"");
-  }
-
-  @Test public void chunkAcrossNewlinesAndLimit() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.d(repeat('a', 3000) + '\n' + repeat('b', 6000) + '\n' + repeat('c', 3000));
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", repeat('a', 3000))
-        .hasDebugMessage(""TimberTest"", repeat('b', 4000))
-        .hasDebugMessage(""TimberTest"", repeat('b', 2000))
-        .hasDebugMessage(""TimberTest"", repeat('c', 3000))
-        .hasNoMoreMessages();
-  }
-
-  @Test public void nullMessageWithoutThrowable() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.d(null);
-
-    assertLog().hasNoMoreMessages();
-  }
-
-  @Test public void logMessageCallback() {
-    final List<String> logs = new ArrayList<>();
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected void log(int priority, String tag, @NotNull String message, Throwable t) {
-        logs.add(priority + "" "" + tag + "" "" + message);
-      }
-    });
-
-    Timber.v(""Verbose"");
-    Timber.tag(""Custom"").v(""Verbose"");
-    Timber.d(""Debug"");
-    Timber.tag(""Custom"").d(""Debug"");
-    Timber.i(""Info"");
-    Timber.tag(""Custom"").i(""Info"");
-    Timber.w(""Warn"");
-    Timber.tag(""Custom"").w(""Warn"");
-    Timber.e(""Error"");
-    Timber.tag(""Custom"").e(""Error"");
-    Timber.wtf(""Assert"");
-    Timber.tag(""Custom"").wtf(""Assert"");
-
-    assertThat(logs).containsExactly( //
-        ""2 TimberTest Verbose"", //
-        ""2 Custom Verbose"", //
-        ""3 TimberTest Debug"", //
-        ""3 Custom Debug"", //
-        ""4 TimberTest Info"", //
-        ""4 Custom Info"", //
-        ""5 TimberTest Warn"", //
-        ""5 Custom Warn"", //
-        ""6 TimberTest Error"", //
-        ""6 Custom Error"", //
-        ""7 TimberTest Assert"", //
-        ""7 Custom Assert"" //
-    );
-  }
-
-  @Test public void logAtSpecifiedPriority() {
-    Timber.plant(new Timber.DebugTree());
-
-    Timber.log(Log.VERBOSE, ""Hello, World!"");
-    Timber.log(Log.DEBUG, ""Hello, World!"");
-    Timber.log(Log.INFO, ""Hello, World!"");
-    Timber.log(Log.WARN, ""Hello, World!"");
-    Timber.log(Log.ERROR, ""Hello, World!"");
-    Timber.log(Log.ASSERT, ""Hello, World!"");
-
-    assertLog()
-        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
-        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
-        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
-        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
-        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
-        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void formatting() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.v(""Hello, %s!"", ""World"");
-    Timber.d(""Hello, %s!"", ""World"");
-    Timber.i(""Hello, %s!"", ""World"");
-    Timber.w(""Hello, %s!"", ""World"");
-    Timber.e(""Hello, %s!"", ""World"");
-    Timber.wtf(""Hello, %s!"", ""World"");
-
-    assertLog()
-        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
-        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
-        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
-        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
-        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
-        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
-        .hasNoMoreMessages();
-  }
-
-  @SuppressWarnings(""deprecation"") // Explicitly testing deprecated variant.
-  @Test public void isLoggableControlsLogging() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected boolean isLoggable(int priority) {
-        return priority == Log.INFO;
-      }
-    });
-    Timber.v(""Hello, World!"");
-    Timber.d(""Hello, World!"");
-    Timber.i(""Hello, World!"");
-    Timber.w(""Hello, World!"");
-    Timber.e(""Hello, World!"");
-    Timber.wtf(""Hello, World!"");
-
-    assertLog()
-        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void isLoggableTagControlsLogging() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override protected boolean isLoggable(String tag, int priority) {
-        return ""FILTER"".equals(tag);
-      }
-    });
-    Timber.tag(""FILTER"").v(""Hello, World!"");
-    Timber.d(""Hello, World!"");
-    Timber.i(""Hello, World!"");
-    Timber.w(""Hello, World!"");
-    Timber.e(""Hello, World!"");
-    Timber.wtf(""Hello, World!"");
-
-    assertLog()
-        .hasVerboseMessage(""FILTER"", ""Hello, World!"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void logsUnknownHostExceptions() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.e(truncatedThrowable(UnknownHostException.class), null);
-
-    assertExceptionLogged(Log.ERROR, """", ""UnknownHostException"");
-  }
-
-  @Test public void tagIsClearedWhenNotLoggable() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override
-      protected boolean isLoggable(String tag, int priority) {
-        return priority >= Log.WARN;
-      }
-    });
-    Timber.tag(""NotLogged"").i(""Message not logged"");
-    Timber.w(""Message logged"");
-
-    assertLog()
-        .hasWarnMessage(""TimberTest"", ""Message logged"")
-        .hasNoMoreMessages();
-  }
-
-  @Test public void logsWithCustomFormatter() {
-    Timber.plant(new Timber.DebugTree() {
-      @Override
-      protected String formatMessage(@NotNull String message, @NotNull Object[] args) {
-        return String.format(""Test formatting: "" + message, args);
-      }
-    });
-    Timber.d(""Test message logged. %d"", 100);
-
-    assertLog()
-        .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"");
-  }
-
-  @Ignore(""No way to allow this in Kotlin as far as I can tell"")
-  @Test public void nullArgumentObjectArray() {
-    Timber.plant(new Timber.DebugTree());
-    Timber.v(""Test"", (Object[]) null);
-    assertLog()
-        .hasVerboseMessage(""TimberTest"", ""Test"")
-        .hasNoMoreMessages();
-  }
-
-  private static <T extends Throwable> T truncatedThrowable(Class<T> throwableClass) {
-    try {
-      T throwable = throwableClass.newInstance();
-      StackTraceElement[] stackTrace = throwable.getStackTrace();
-      int traceLength = stackTrace.length > 5 ? 5 : stackTrace.length;
-      throwable.setStackTrace(Arrays.copyOf(stackTrace, traceLength));
-      return throwable;
-    } catch (InstantiationException | IllegalAccessException e) {
-      throw new RuntimeException(e);
-    }
-  }
-
-  private static String repeat(char c, int number) {
-    char[] data = new char[number];
-    Arrays.fill(data, c);
-    return new String(data);
-  }
-
-  private static void assertExceptionLogged(int logType, String message, String exceptionClassname) {
-    assertExceptionLogged(logType, message, exceptionClassname, null, 0);
-  }
-
-  private static void assertExceptionLogged(int logType, String message, String exceptionClassname, String tag,
-                                            int index) {
-    List<LogItem> logs = ShadowLog.getLogs();
-    assertThat(logs).hasSize(index + 1);
-    LogItem log = logs.get(index);
-    assertThat(log.type).isEqualTo(logType);
-    assertThat(log.tag).isEqualTo(tag != null ? tag : ""TimberTest"");
-
-    if (message != null) {
-      assertThat(log.msg).startsWith(message);
-    }
-
-    assertThat(log.msg).contains(exceptionClassname);
-    // We use a low-level primitive that Robolectric doesn't populate.
-    assertThat(log.throwable).isNull();
-  }
-
-  private static LogAssert assertLog() {
-    return new LogAssert(ShadowLog.getLogs());
-  }
-
-  private static final class LogAssert {
-    private final List<LogItem> items;
-    private int index = 0;
-
-    private LogAssert(List<LogItem> items) {
-      this.items = items;
-    }
-
-    public LogAssert hasVerboseMessage(String tag, String message) {
-      return hasMessage(Log.VERBOSE, tag, message);
-    }
-
-    public LogAssert hasDebugMessage(String tag, String message) {
-      return hasMessage(Log.DEBUG, tag, message);
-    }
-
-    public LogAssert hasInfoMessage(String tag, String message) {
-      return hasMessage(Log.INFO, tag, message);
-    }
-
-    public LogAssert hasWarnMessage(String tag, String message) {
-      return hasMessage(Log.WARN, tag, message);
-    }
-
-    public LogAssert hasErrorMessage(String tag, String message) {
-      return hasMessage(Log.ERROR, tag, message);
-    }
-
-    public LogAssert hasAssertMessage(String tag, String message) {
-      return hasMessage(Log.ASSERT, tag, message);
-    }
-
-    private LogAssert hasMessage(int priority, String tag, String message) {
-      LogItem item = items.get(index++);
-      assertThat(item.type).isEqualTo(priority);
-      assertThat(item.tag).isEqualTo(tag);
-      assertThat(item.msg).isEqualTo(message);
-      return this;
-    }
-
-    public void hasNoMoreMessages() {
-      assertThat(items).hasSize(index);
-    }
-  }
-}",False,test
,timber/src/test/java/timber/log/TimberTest.kt,9e3ca1f7b54f6b1545c6ce5f393043348764cfea,d9d5905c15db5a7642c3790bda8904cc4be1f8b4,Port tests to Kotlin,"@@ -0,0 +1,558 @@
+package timber.log
+
+import android.os.Build
+import android.util.Log
+import com.google.common.truth.ThrowableSubject
+import java.net.ConnectException
+import java.net.UnknownHostException
+import java.util.ArrayList
+import java.util.concurrent.CountDownLatch
+import org.junit.After
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.robolectric.RobolectricTestRunner
+import org.robolectric.annotation.Config
+import org.robolectric.shadows.ShadowLog
+
+import com.google.common.truth.Truth.assertThat
+import org.junit.Assert.assertTrue
+import org.junit.Assert.fail
+import org.robolectric.shadows.ShadowLog.LogItem
+
+@RunWith(RobolectricTestRunner::class)
+@Config(manifest = Config.NONE)
+class TimberTest {
+  @Before @After fun setUpAndTearDown() {
+    Timber.uprootAll()
+  }
+
+  // NOTE: This class references the line number. Keep it at the top so it does not change.
+  @Test fun debugTreeCanAlterCreatedTag() {
+    Timber.plant(object : Timber.DebugTree() {
+      override fun createStackElementTag(element: StackTraceElement): String? {
+        return super.createStackElementTag(element) + ':'.toString() + element.lineNumber
+      }
+    })
+
+    Timber.d(""Test"")
+
+    assertLog()
+        .hasDebugMessage(""TimberTest:38"", ""Test"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun recursion() {
+    val timber = Timber.asTree()
+
+    assertThrows<IllegalArgumentException> {
+      Timber.plant(timber)
+    }.hasMessageThat().isEqualTo(""Cannot plant Timber into itself."")
+
+    assertThrows<IllegalArgumentException> {
+      @Suppress(""RemoveRedundantSpreadOperator"") // Explicitly calling vararg overload.
+      Timber.plant(*arrayOf(timber))
+    }.hasMessageThat().isEqualTo(""Cannot plant Timber into itself."")
+  }
+
+  @Test fun treeCount() {
+    // inserts trees and checks if the amount of returned trees matches.
+    assertThat(Timber.treeCount).isEqualTo(0)
+    for (i in 1 until 50) {
+      Timber.plant(Timber.DebugTree())
+      assertThat(Timber.treeCount).isEqualTo(i)
+    }
+    Timber.uprootAll()
+    assertThat(Timber.treeCount).isEqualTo(0)
+  }
+
+  @Test fun nullTreeArray() {
+    @Suppress(""UNCHECKED_CAST"") // Testing an unexpected null array value.
+    val nullTrees = arrayOfNulls<Timber.Tree?>(1) as Array<Timber.Tree>
+
+    assertThrows<IllegalArgumentException> {
+      Timber.plant(*nullTrees)
+    }
+  }
+
+  @Test fun forestReturnsAllPlanted() {
+    val tree1 = Timber.DebugTree()
+    val tree2 = Timber.DebugTree()
+    Timber.plant(tree1)
+    Timber.plant(tree2)
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2)
+  }
+
+  @Test fun forestReturnsAllTreesPlanted() {
+    val tree1 = Timber.DebugTree()
+    val tree2 = Timber.DebugTree()
+    Timber.plant(tree1, tree2)
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2)
+  }
+
+  @Test fun uprootThrowsIfMissing() {
+    assertThrows<IllegalArgumentException> {
+      Timber.uproot(Timber.DebugTree())
+    }.hasMessageThat().startsWith(""Cannot uproot tree which is not planted: "")
+  }
+
+  @Test fun uprootRemovesTree() {
+    val tree1 = Timber.DebugTree()
+    val tree2 = Timber.DebugTree()
+    Timber.plant(tree1)
+    Timber.plant(tree2)
+    Timber.d(""First"")
+    Timber.uproot(tree1)
+    Timber.d(""Second"")
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""Second"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun uprootAllRemovesAll() {
+    val tree1 = Timber.DebugTree()
+    val tree2 = Timber.DebugTree()
+    Timber.plant(tree1)
+    Timber.plant(tree2)
+    Timber.d(""First"")
+    Timber.uprootAll()
+    Timber.d(""Second"")
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun noArgsDoesNotFormat() {
+    Timber.plant(Timber.DebugTree())
+    Timber.d(""te%st"")
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""te%st"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun debugTreeTagGeneration() {
+    Timber.plant(Timber.DebugTree())
+    Timber.d(""Hello, world!"")
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  internal inner class ThisIsAReallyLongClassName {
+    fun run() {
+      Timber.d(""Hello, world!"")
+    }
+  }
+
+  @Config(sdk = [23])
+  @Test fun debugTreeTagTruncation() {
+    Timber.plant(Timber.DebugTree())
+
+    ThisIsAReallyLongClassName().run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest\$ThisIsAReall"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Config(sdk = [24])
+  @Test fun debugTreeTagNoTruncation() {
+    Timber.plant(Timber.DebugTree())
+
+    ThisIsAReallyLongClassName().run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest\$ThisIsAReallyLongClassName"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun debugTreeTagGenerationStripsAnonymousClassMarker() {
+    Timber.plant(Timber.DebugTree())
+    Runnable {
+      Timber.d(""Hello, world!"")
+
+      Runnable { Timber.d(""Hello, world!"") }.run()
+    }.run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  private class ClassNameThatIsReallyReallyReallyLong {
+    init {
+      Timber.i(""Hello, world!"")
+    }
+  }
+
+  @Test fun debugTreeGeneratedTagIsLoggable() {
+    Timber.plant(object : Timber.DebugTree() {
+      private val MAX_TAG_LENGTH = 23
+
+      override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+        try {
+          assertTrue(Log.isLoggable(tag, priority))
+          if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
+            assertTrue(tag!!.length <= MAX_TAG_LENGTH)
+          }
+        } catch (e: IllegalArgumentException) {
+          fail(e.message)
+        }
+
+        super.log(priority, tag, message, t)
+      }
+    })
+    ClassNameThatIsReallyReallyReallyLong()
+    assertLog()
+        .hasInfoMessage(""TimberTest\$ClassNameTha"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun debugTreeCustomTag() {
+    Timber.plant(Timber.DebugTree())
+    Timber.tag(""Custom"").d(""Hello, world!"")
+
+    assertLog()
+        .hasDebugMessage(""Custom"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun messageWithException() {
+    Timber.plant(Timber.DebugTree())
+    val datThrowable = truncatedThrowable(NullPointerException::class.java)
+    Timber.e(datThrowable, ""OMFG!"")
+
+    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"")
+  }
+
+  @Test fun exceptionOnly() {
+    Timber.plant(Timber.DebugTree())
+
+    Timber.v(truncatedThrowable(IllegalArgumentException::class.java))
+    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""TimberTest"", 0)
+
+    Timber.i(truncatedThrowable(NullPointerException::class.java))
+    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""TimberTest"", 1)
+
+    Timber.d(truncatedThrowable(UnsupportedOperationException::class.java))
+    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""TimberTest"",
+        2)
+
+    Timber.w(truncatedThrowable(UnknownHostException::class.java))
+    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""TimberTest"", 3)
+
+    Timber.e(truncatedThrowable(ConnectException::class.java))
+    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""TimberTest"", 4)
+
+    Timber.wtf(truncatedThrowable(AssertionError::class.java))
+    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""TimberTest"", 5)
+  }
+
+  @Test fun exceptionOnlyCustomTag() {
+    Timber.plant(Timber.DebugTree())
+
+    Timber.tag(""Custom"").v(truncatedThrowable(IllegalArgumentException::class.java))
+    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""Custom"", 0)
+
+    Timber.tag(""Custom"").i(truncatedThrowable(NullPointerException::class.java))
+    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""Custom"", 1)
+
+    Timber.tag(""Custom"").d(truncatedThrowable(UnsupportedOperationException::class.java))
+    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""Custom"", 2)
+
+    Timber.tag(""Custom"").w(truncatedThrowable(UnknownHostException::class.java))
+    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""Custom"", 3)
+
+    Timber.tag(""Custom"").e(truncatedThrowable(ConnectException::class.java))
+    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""Custom"", 4)
+
+    Timber.tag(""Custom"").wtf(truncatedThrowable(AssertionError::class.java))
+    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""Custom"", 5)
+  }
+
+  @Test fun exceptionFromSpawnedThread() {
+    Timber.plant(Timber.DebugTree())
+    val datThrowable = truncatedThrowable(NullPointerException::class.java)
+    val latch = CountDownLatch(1)
+    object : Thread() {
+      override fun run() {
+        Timber.e(datThrowable, ""OMFG!"")
+        latch.countDown()
+      }
+    }.start()
+    latch.await()
+    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"", ""TimberTest\$exceptionFro"")
+  }
+
+  @Test fun nullMessageWithThrowable() {
+    Timber.plant(Timber.DebugTree())
+    val datThrowable = truncatedThrowable(NullPointerException::class.java)
+    Timber.e(datThrowable, null)
+
+    assertExceptionLogged(Log.ERROR, """", ""java.lang.NullPointerException"")
+  }
+
+  @Test fun chunkAcrossNewlinesAndLimit() {
+    Timber.plant(Timber.DebugTree())
+    Timber.d(
+        'a'.repeat(3000) + '\n'.toString() + 'b'.repeat(6000) + '\n'.toString() + 'c'.repeat(3000))
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", 'a'.repeat(3000))
+        .hasDebugMessage(""TimberTest"", 'b'.repeat(4000))
+        .hasDebugMessage(""TimberTest"", 'b'.repeat(2000))
+        .hasDebugMessage(""TimberTest"", 'c'.repeat(3000))
+        .hasNoMoreMessages()
+  }
+
+  @Test fun nullMessageWithoutThrowable() {
+    Timber.plant(Timber.DebugTree())
+    Timber.d(null as String?)
+
+    assertLog().hasNoMoreMessages()
+  }
+
+  @Test fun logMessageCallback() {
+    val logs = ArrayList<String>()
+    Timber.plant(object : Timber.DebugTree() {
+      override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+        logs.add(""$priority $tag $message"")
+      }
+    })
+
+    Timber.v(""Verbose"")
+    Timber.tag(""Custom"").v(""Verbose"")
+    Timber.d(""Debug"")
+    Timber.tag(""Custom"").d(""Debug"")
+    Timber.i(""Info"")
+    Timber.tag(""Custom"").i(""Info"")
+    Timber.w(""Warn"")
+    Timber.tag(""Custom"").w(""Warn"")
+    Timber.e(""Error"")
+    Timber.tag(""Custom"").e(""Error"")
+    Timber.wtf(""Assert"")
+    Timber.tag(""Custom"").wtf(""Assert"")
+
+    assertThat(logs).containsExactly( //
+        ""2 TimberTest Verbose"", //
+        ""2 Custom Verbose"", //
+        ""3 TimberTest Debug"", //
+        ""3 Custom Debug"", //
+        ""4 TimberTest Info"", //
+        ""4 Custom Info"", //
+        ""5 TimberTest Warn"", //
+        ""5 Custom Warn"", //
+        ""6 TimberTest Error"", //
+        ""6 Custom Error"", //
+        ""7 TimberTest Assert"", //
+        ""7 Custom Assert"" //
+    )
+  }
+
+  @Test fun logAtSpecifiedPriority() {
+    Timber.plant(Timber.DebugTree())
+
+    Timber.log(Log.VERBOSE, ""Hello, World!"")
+    Timber.log(Log.DEBUG, ""Hello, World!"")
+    Timber.log(Log.INFO, ""Hello, World!"")
+    Timber.log(Log.WARN, ""Hello, World!"")
+    Timber.log(Log.ERROR, ""Hello, World!"")
+    Timber.log(Log.ASSERT, ""Hello, World!"")
+
+    assertLog()
+        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
+        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
+        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun formatting() {
+    Timber.plant(Timber.DebugTree())
+    Timber.v(""Hello, %s!"", ""World"")
+    Timber.d(""Hello, %s!"", ""World"")
+    Timber.i(""Hello, %s!"", ""World"")
+    Timber.w(""Hello, %s!"", ""World"")
+    Timber.e(""Hello, %s!"", ""World"")
+    Timber.wtf(""Hello, %s!"", ""World"")
+
+    assertLog()
+        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
+        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
+        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun isLoggableControlsLogging() {
+    Timber.plant(object : Timber.DebugTree() {
+      @Suppress(""OverridingDeprecatedMember"") // Explicitly testing deprecated variant.
+      override fun isLoggable(priority: Int): Boolean {
+        return priority == Log.INFO
+      }
+    })
+    Timber.v(""Hello, World!"")
+    Timber.d(""Hello, World!"")
+    Timber.i(""Hello, World!"")
+    Timber.w(""Hello, World!"")
+    Timber.e(""Hello, World!"")
+    Timber.wtf(""Hello, World!"")
+
+    assertLog()
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun isLoggableTagControlsLogging() {
+    Timber.plant(object : Timber.DebugTree() {
+      override fun isLoggable(tag: String?, priority: Int): Boolean {
+        return ""FILTER"" == tag
+      }
+    })
+    Timber.tag(""FILTER"").v(""Hello, World!"")
+    Timber.d(""Hello, World!"")
+    Timber.i(""Hello, World!"")
+    Timber.w(""Hello, World!"")
+    Timber.e(""Hello, World!"")
+    Timber.wtf(""Hello, World!"")
+
+    assertLog()
+        .hasVerboseMessage(""FILTER"", ""Hello, World!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun logsUnknownHostExceptions() {
+    Timber.plant(Timber.DebugTree())
+    Timber.e(truncatedThrowable(UnknownHostException::class.java), null)
+
+    assertExceptionLogged(Log.ERROR, """", ""UnknownHostException"")
+  }
+
+  @Test fun tagIsClearedWhenNotLoggable() {
+    Timber.plant(object : Timber.DebugTree() {
+      override fun isLoggable(tag: String?, priority: Int): Boolean {
+        return priority >= Log.WARN
+      }
+    })
+    Timber.tag(""NotLogged"").i(""Message not logged"")
+    Timber.w(""Message logged"")
+
+    assertLog()
+        .hasWarnMessage(""TimberTest"", ""Message logged"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun logsWithCustomFormatter() {
+    Timber.plant(object : Timber.DebugTree() {
+      override fun formatMessage(message: String, vararg args: Any?): String {
+        return String.format(""Test formatting: $message"", *args)
+      }
+    })
+    Timber.d(""Test message logged. %d"", 100)
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"")
+  }
+
+  private fun <T : Throwable> truncatedThrowable(throwableClass: Class<T>): T {
+    val throwable = throwableClass.newInstance()
+    val stackTrace = throwable.stackTrace
+    val traceLength = if (stackTrace.size > 5) 5 else stackTrace.size
+    throwable.stackTrace = stackTrace.copyOf(traceLength)
+    return throwable
+  }
+
+  private fun Char.repeat(number: Int) = toString().repeat(number)
+
+  private fun assertExceptionLogged(
+    logType: Int,
+    message: String?,
+    exceptionClassname: String,
+    tag: String? = null,
+    index: Int = 0
+  ) {
+    val logs = ShadowLog.getLogs()
+    assertThat(logs).hasSize(index + 1)
+    val log = logs[index]
+    assertThat(log.type).isEqualTo(logType)
+    assertThat(log.tag).isEqualTo(tag ?: ""TimberTest"")
+
+    if (message != null) {
+      assertThat(log.msg).startsWith(message)
+    }
+
+    assertThat(log.msg).contains(exceptionClassname)
+    // We use a low-level primitive that Robolectric doesn't populate.
+    assertThat(log.throwable).isNull()
+  }
+
+  private fun assertLog(): LogAssert {
+    return LogAssert(ShadowLog.getLogs())
+  }
+
+  private inline fun <reified T : Throwable> assertThrows(body: () -> Unit): ThrowableSubject {
+    try {
+      body()
+    } catch (t: Throwable) {
+      if (t is T) {
+        return assertThat(t)
+      }
+      throw t
+    }
+    throw AssertionError(""Expected body to throw ${T::class.java.name} but completed successfully"")
+  }
+
+  private class LogAssert internal constructor(private val items: List<LogItem>) {
+    private var index = 0
+
+    fun hasVerboseMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.VERBOSE, tag, message)
+    }
+
+    fun hasDebugMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.DEBUG, tag, message)
+    }
+
+    fun hasInfoMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.INFO, tag, message)
+    }
+
+    fun hasWarnMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.WARN, tag, message)
+    }
+
+    fun hasErrorMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.ERROR, tag, message)
+    }
+
+    fun hasAssertMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.ASSERT, tag, message)
+    }
+
+    private fun hasMessage(priority: Int, tag: String, message: String): LogAssert {
+      val item = items[index++]
+      assertThat(item.type).isEqualTo(priority)
+      assertThat(item.tag).isEqualTo(tag)
+      assertThat(item.msg).isEqualTo(message)
+      return this
+    }
+
+    fun hasNoMoreMessages() {
+      assertThat(items).hasSize(index)
+    }
+  }
+}","@@ -0,0 +1,558 @@
+package timber.log
+
+import android.os.Build
+import android.util.Log
+import com.google.common.truth.ThrowableSubject
+import java.net.ConnectException
+import java.net.UnknownHostException
+import java.util.ArrayList
+import java.util.concurrent.CountDownLatch
+import org.junit.After
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.robolectric.RobolectricTestRunner
+import org.robolectric.annotation.Config
+import org.robolectric.shadows.ShadowLog
+
+import com.google.common.truth.Truth.assertThat
+import org.junit.Assert.assertTrue
+import org.junit.Assert.fail
+import org.robolectric.shadows.ShadowLog.LogItem
+
+@RunWith(RobolectricTestRunner::class)
+@Config(manifest = Config.NONE)
+class TimberTest {
+  @Before @After fun setUpAndTearDown() {
+    Timber.uprootAll()
+  }
+
+  // NOTE: This class references the line number. Keep it at the top so it does not change.
+  @Test fun debugTreeCanAlterCreatedTag() {
+    Timber.plant(object : Timber.DebugTree() {
+      override fun createStackElementTag(element: StackTraceElement): String? {
+        return super.createStackElementTag(element) + ':'.toString() + element.lineNumber
+      }
+    })
+
+    Timber.d(""Test"")
+
+    assertLog()
+        .hasDebugMessage(""TimberTest:38"", ""Test"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun recursion() {
+    val timber = Timber.asTree()
+
+    assertThrows<IllegalArgumentException> {
+      Timber.plant(timber)
+    }.hasMessageThat().isEqualTo(""Cannot plant Timber into itself."")
+
+    assertThrows<IllegalArgumentException> {
+      @Suppress(""RemoveRedundantSpreadOperator"") // Explicitly calling vararg overload.
+      Timber.plant(*arrayOf(timber))
+    }.hasMessageThat().isEqualTo(""Cannot plant Timber into itself."")
+  }
+
+  @Test fun treeCount() {
+    // inserts trees and checks if the amount of returned trees matches.
+    assertThat(Timber.treeCount).isEqualTo(0)
+    for (i in 1 until 50) {
+      Timber.plant(Timber.DebugTree())
+      assertThat(Timber.treeCount).isEqualTo(i)
+    }
+    Timber.uprootAll()
+    assertThat(Timber.treeCount).isEqualTo(0)
+  }
+
+  @Test fun nullTreeArray() {
+    @Suppress(""UNCHECKED_CAST"") // Testing an unexpected null array value.
+    val nullTrees = arrayOfNulls<Timber.Tree?>(1) as Array<Timber.Tree>
+
+    assertThrows<IllegalArgumentException> {
+      Timber.plant(*nullTrees)
+    }
+  }
+
+  @Test fun forestReturnsAllPlanted() {
+    val tree1 = Timber.DebugTree()
+    val tree2 = Timber.DebugTree()
+    Timber.plant(tree1)
+    Timber.plant(tree2)
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2)
+  }
+
+  @Test fun forestReturnsAllTreesPlanted() {
+    val tree1 = Timber.DebugTree()
+    val tree2 = Timber.DebugTree()
+    Timber.plant(tree1, tree2)
+
+    assertThat(Timber.forest()).containsExactly(tree1, tree2)
+  }
+
+  @Test fun uprootThrowsIfMissing() {
+    assertThrows<IllegalArgumentException> {
+      Timber.uproot(Timber.DebugTree())
+    }.hasMessageThat().startsWith(""Cannot uproot tree which is not planted: "")
+  }
+
+  @Test fun uprootRemovesTree() {
+    val tree1 = Timber.DebugTree()
+    val tree2 = Timber.DebugTree()
+    Timber.plant(tree1)
+    Timber.plant(tree2)
+    Timber.d(""First"")
+    Timber.uproot(tree1)
+    Timber.d(""Second"")
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""Second"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun uprootAllRemovesAll() {
+    val tree1 = Timber.DebugTree()
+    val tree2 = Timber.DebugTree()
+    Timber.plant(tree1)
+    Timber.plant(tree2)
+    Timber.d(""First"")
+    Timber.uprootAll()
+    Timber.d(""Second"")
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasDebugMessage(""TimberTest"", ""First"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun noArgsDoesNotFormat() {
+    Timber.plant(Timber.DebugTree())
+    Timber.d(""te%st"")
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""te%st"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun debugTreeTagGeneration() {
+    Timber.plant(Timber.DebugTree())
+    Timber.d(""Hello, world!"")
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  internal inner class ThisIsAReallyLongClassName {
+    fun run() {
+      Timber.d(""Hello, world!"")
+    }
+  }
+
+  @Config(sdk = [23])
+  @Test fun debugTreeTagTruncation() {
+    Timber.plant(Timber.DebugTree())
+
+    ThisIsAReallyLongClassName().run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest\$ThisIsAReall"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Config(sdk = [24])
+  @Test fun debugTreeTagNoTruncation() {
+    Timber.plant(Timber.DebugTree())
+
+    ThisIsAReallyLongClassName().run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest\$ThisIsAReallyLongClassName"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun debugTreeTagGenerationStripsAnonymousClassMarker() {
+    Timber.plant(Timber.DebugTree())
+    Runnable {
+      Timber.d(""Hello, world!"")
+
+      Runnable { Timber.d(""Hello, world!"") }.run()
+    }.run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  private class ClassNameThatIsReallyReallyReallyLong {
+    init {
+      Timber.i(""Hello, world!"")
+    }
+  }
+
+  @Test fun debugTreeGeneratedTagIsLoggable() {
+    Timber.plant(object : Timber.DebugTree() {
+      private val MAX_TAG_LENGTH = 23
+
+      override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+        try {
+          assertTrue(Log.isLoggable(tag, priority))
+          if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
+            assertTrue(tag!!.length <= MAX_TAG_LENGTH)
+          }
+        } catch (e: IllegalArgumentException) {
+          fail(e.message)
+        }
+
+        super.log(priority, tag, message, t)
+      }
+    })
+    ClassNameThatIsReallyReallyReallyLong()
+    assertLog()
+        .hasInfoMessage(""TimberTest\$ClassNameTha"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun debugTreeCustomTag() {
+    Timber.plant(Timber.DebugTree())
+    Timber.tag(""Custom"").d(""Hello, world!"")
+
+    assertLog()
+        .hasDebugMessage(""Custom"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun messageWithException() {
+    Timber.plant(Timber.DebugTree())
+    val datThrowable = truncatedThrowable(NullPointerException::class.java)
+    Timber.e(datThrowable, ""OMFG!"")
+
+    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"")
+  }
+
+  @Test fun exceptionOnly() {
+    Timber.plant(Timber.DebugTree())
+
+    Timber.v(truncatedThrowable(IllegalArgumentException::class.java))
+    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""TimberTest"", 0)
+
+    Timber.i(truncatedThrowable(NullPointerException::class.java))
+    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""TimberTest"", 1)
+
+    Timber.d(truncatedThrowable(UnsupportedOperationException::class.java))
+    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""TimberTest"",
+        2)
+
+    Timber.w(truncatedThrowable(UnknownHostException::class.java))
+    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""TimberTest"", 3)
+
+    Timber.e(truncatedThrowable(ConnectException::class.java))
+    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""TimberTest"", 4)
+
+    Timber.wtf(truncatedThrowable(AssertionError::class.java))
+    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""TimberTest"", 5)
+  }
+
+  @Test fun exceptionOnlyCustomTag() {
+    Timber.plant(Timber.DebugTree())
+
+    Timber.tag(""Custom"").v(truncatedThrowable(IllegalArgumentException::class.java))
+    assertExceptionLogged(Log.VERBOSE, null, ""java.lang.IllegalArgumentException"", ""Custom"", 0)
+
+    Timber.tag(""Custom"").i(truncatedThrowable(NullPointerException::class.java))
+    assertExceptionLogged(Log.INFO, null, ""java.lang.NullPointerException"", ""Custom"", 1)
+
+    Timber.tag(""Custom"").d(truncatedThrowable(UnsupportedOperationException::class.java))
+    assertExceptionLogged(Log.DEBUG, null, ""java.lang.UnsupportedOperationException"", ""Custom"", 2)
+
+    Timber.tag(""Custom"").w(truncatedThrowable(UnknownHostException::class.java))
+    assertExceptionLogged(Log.WARN, null, ""java.net.UnknownHostException"", ""Custom"", 3)
+
+    Timber.tag(""Custom"").e(truncatedThrowable(ConnectException::class.java))
+    assertExceptionLogged(Log.ERROR, null, ""java.net.ConnectException"", ""Custom"", 4)
+
+    Timber.tag(""Custom"").wtf(truncatedThrowable(AssertionError::class.java))
+    assertExceptionLogged(Log.ASSERT, null, ""java.lang.AssertionError"", ""Custom"", 5)
+  }
+
+  @Test fun exceptionFromSpawnedThread() {
+    Timber.plant(Timber.DebugTree())
+    val datThrowable = truncatedThrowable(NullPointerException::class.java)
+    val latch = CountDownLatch(1)
+    object : Thread() {
+      override fun run() {
+        Timber.e(datThrowable, ""OMFG!"")
+        latch.countDown()
+      }
+    }.start()
+    latch.await()
+    assertExceptionLogged(Log.ERROR, ""OMFG!"", ""java.lang.NullPointerException"", ""TimberTest\$exceptionFro"")
+  }
+
+  @Test fun nullMessageWithThrowable() {
+    Timber.plant(Timber.DebugTree())
+    val datThrowable = truncatedThrowable(NullPointerException::class.java)
+    Timber.e(datThrowable, null)
+
+    assertExceptionLogged(Log.ERROR, """", ""java.lang.NullPointerException"")
+  }
+
+  @Test fun chunkAcrossNewlinesAndLimit() {
+    Timber.plant(Timber.DebugTree())
+    Timber.d(
+        'a'.repeat(3000) + '\n'.toString() + 'b'.repeat(6000) + '\n'.toString() + 'c'.repeat(3000))
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", 'a'.repeat(3000))
+        .hasDebugMessage(""TimberTest"", 'b'.repeat(4000))
+        .hasDebugMessage(""TimberTest"", 'b'.repeat(2000))
+        .hasDebugMessage(""TimberTest"", 'c'.repeat(3000))
+        .hasNoMoreMessages()
+  }
+
+  @Test fun nullMessageWithoutThrowable() {
+    Timber.plant(Timber.DebugTree())
+    Timber.d(null as String?)
+
+    assertLog().hasNoMoreMessages()
+  }
+
+  @Test fun logMessageCallback() {
+    val logs = ArrayList<String>()
+    Timber.plant(object : Timber.DebugTree() {
+      override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+        logs.add(""$priority $tag $message"")
+      }
+    })
+
+    Timber.v(""Verbose"")
+    Timber.tag(""Custom"").v(""Verbose"")
+    Timber.d(""Debug"")
+    Timber.tag(""Custom"").d(""Debug"")
+    Timber.i(""Info"")
+    Timber.tag(""Custom"").i(""Info"")
+    Timber.w(""Warn"")
+    Timber.tag(""Custom"").w(""Warn"")
+    Timber.e(""Error"")
+    Timber.tag(""Custom"").e(""Error"")
+    Timber.wtf(""Assert"")
+    Timber.tag(""Custom"").wtf(""Assert"")
+
+    assertThat(logs).containsExactly( //
+        ""2 TimberTest Verbose"", //
+        ""2 Custom Verbose"", //
+        ""3 TimberTest Debug"", //
+        ""3 Custom Debug"", //
+        ""4 TimberTest Info"", //
+        ""4 Custom Info"", //
+        ""5 TimberTest Warn"", //
+        ""5 Custom Warn"", //
+        ""6 TimberTest Error"", //
+        ""6 Custom Error"", //
+        ""7 TimberTest Assert"", //
+        ""7 Custom Assert"" //
+    )
+  }
+
+  @Test fun logAtSpecifiedPriority() {
+    Timber.plant(Timber.DebugTree())
+
+    Timber.log(Log.VERBOSE, ""Hello, World!"")
+    Timber.log(Log.DEBUG, ""Hello, World!"")
+    Timber.log(Log.INFO, ""Hello, World!"")
+    Timber.log(Log.WARN, ""Hello, World!"")
+    Timber.log(Log.ERROR, ""Hello, World!"")
+    Timber.log(Log.ASSERT, ""Hello, World!"")
+
+    assertLog()
+        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
+        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
+        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun formatting() {
+    Timber.plant(Timber.DebugTree())
+    Timber.v(""Hello, %s!"", ""World"")
+    Timber.d(""Hello, %s!"", ""World"")
+    Timber.i(""Hello, %s!"", ""World"")
+    Timber.w(""Hello, %s!"", ""World"")
+    Timber.e(""Hello, %s!"", ""World"")
+    Timber.wtf(""Hello, %s!"", ""World"")
+
+    assertLog()
+        .hasVerboseMessage(""TimberTest"", ""Hello, World!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, World!"")
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasWarnMessage(""TimberTest"", ""Hello, World!"")
+        .hasErrorMessage(""TimberTest"", ""Hello, World!"")
+        .hasAssertMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun isLoggableControlsLogging() {
+    Timber.plant(object : Timber.DebugTree() {
+      @Suppress(""OverridingDeprecatedMember"") // Explicitly testing deprecated variant.
+      override fun isLoggable(priority: Int): Boolean {
+        return priority == Log.INFO
+      }
+    })
+    Timber.v(""Hello, World!"")
+    Timber.d(""Hello, World!"")
+    Timber.i(""Hello, World!"")
+    Timber.w(""Hello, World!"")
+    Timber.e(""Hello, World!"")
+    Timber.wtf(""Hello, World!"")
+
+    assertLog()
+        .hasInfoMessage(""TimberTest"", ""Hello, World!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun isLoggableTagControlsLogging() {
+    Timber.plant(object : Timber.DebugTree() {
+      override fun isLoggable(tag: String?, priority: Int): Boolean {
+        return ""FILTER"" == tag
+      }
+    })
+    Timber.tag(""FILTER"").v(""Hello, World!"")
+    Timber.d(""Hello, World!"")
+    Timber.i(""Hello, World!"")
+    Timber.w(""Hello, World!"")
+    Timber.e(""Hello, World!"")
+    Timber.wtf(""Hello, World!"")
+
+    assertLog()
+        .hasVerboseMessage(""FILTER"", ""Hello, World!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun logsUnknownHostExceptions() {
+    Timber.plant(Timber.DebugTree())
+    Timber.e(truncatedThrowable(UnknownHostException::class.java), null)
+
+    assertExceptionLogged(Log.ERROR, """", ""UnknownHostException"")
+  }
+
+  @Test fun tagIsClearedWhenNotLoggable() {
+    Timber.plant(object : Timber.DebugTree() {
+      override fun isLoggable(tag: String?, priority: Int): Boolean {
+        return priority >= Log.WARN
+      }
+    })
+    Timber.tag(""NotLogged"").i(""Message not logged"")
+    Timber.w(""Message logged"")
+
+    assertLog()
+        .hasWarnMessage(""TimberTest"", ""Message logged"")
+        .hasNoMoreMessages()
+  }
+
+  @Test fun logsWithCustomFormatter() {
+    Timber.plant(object : Timber.DebugTree() {
+      override fun formatMessage(message: String, vararg args: Any?): String {
+        return String.format(""Test formatting: $message"", *args)
+      }
+    })
+    Timber.d(""Test message logged. %d"", 100)
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Test formatting: Test message logged. 100"")
+  }
+
+  private fun <T : Throwable> truncatedThrowable(throwableClass: Class<T>): T {
+    val throwable = throwableClass.newInstance()
+    val stackTrace = throwable.stackTrace
+    val traceLength = if (stackTrace.size > 5) 5 else stackTrace.size
+    throwable.stackTrace = stackTrace.copyOf(traceLength)
+    return throwable
+  }
+
+  private fun Char.repeat(number: Int) = toString().repeat(number)
+
+  private fun assertExceptionLogged(
+    logType: Int,
+    message: String?,
+    exceptionClassname: String,
+    tag: String? = null,
+    index: Int = 0
+  ) {
+    val logs = ShadowLog.getLogs()
+    assertThat(logs).hasSize(index + 1)
+    val log = logs[index]
+    assertThat(log.type).isEqualTo(logType)
+    assertThat(log.tag).isEqualTo(tag ?: ""TimberTest"")
+
+    if (message != null) {
+      assertThat(log.msg).startsWith(message)
+    }
+
+    assertThat(log.msg).contains(exceptionClassname)
+    // We use a low-level primitive that Robolectric doesn't populate.
+    assertThat(log.throwable).isNull()
+  }
+
+  private fun assertLog(): LogAssert {
+    return LogAssert(ShadowLog.getLogs())
+  }
+
+  private inline fun <reified T : Throwable> assertThrows(body: () -> Unit): ThrowableSubject {
+    try {
+      body()
+    } catch (t: Throwable) {
+      if (t is T) {
+        return assertThat(t)
+      }
+      throw t
+    }
+    throw AssertionError(""Expected body to throw ${T::class.java.name} but completed successfully"")
+  }
+
+  private class LogAssert internal constructor(private val items: List<LogItem>) {
+    private var index = 0
+
+    fun hasVerboseMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.VERBOSE, tag, message)
+    }
+
+    fun hasDebugMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.DEBUG, tag, message)
+    }
+
+    fun hasInfoMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.INFO, tag, message)
+    }
+
+    fun hasWarnMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.WARN, tag, message)
+    }
+
+    fun hasErrorMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.ERROR, tag, message)
+    }
+
+    fun hasAssertMessage(tag: String, message: String): LogAssert {
+      return hasMessage(Log.ASSERT, tag, message)
+    }
+
+    private fun hasMessage(priority: Int, tag: String, message: String): LogAssert {
+      val item = items[index++]
+      assertThat(item.type).isEqualTo(priority)
+      assertThat(item.tag).isEqualTo(tag)
+      assertThat(item.msg).isEqualTo(message)
+      return this
+    }
+
+    fun hasNoMoreMessages() {
+      assertThat(items).hasSize(index)
+    }
+  }
+}",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,25c57aa18cb9afd6d94da30743a31d4a00f011a8,d9d5905c15db5a7642c3790bda8904cc4be1f8b4,Allow long in datetime args,"@@ -233,7 +233,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
           case 'D':
           case 'F':
           case 'c':
-            valid = type == Integer.TYPE || type == Calendar.class || type == Date.class;
+            valid = type == Integer.TYPE || type == Calendar.class || type == Date.class
+                || type == Long.TYPE;
             if (!valid) {
               String message = String.format(
                   ""Wrong argument type for date formatting argument '#%1$d' ""","@@ -233,7 +233,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
           case 'D':
           case 'F':
           case 'c':
-            valid = type == Integer.TYPE || type == Calendar.class || type == Date.class;
+            valid = type == Integer.TYPE || type == Calendar.class || type == Date.class
+                || type == Long.TYPE;
             if (!valid) {
               String message = String.format(
                   ""Wrong argument type for date formatting argument '#%1$d' """,False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,25c57aa18cb9afd6d94da30743a31d4a00f011a8,d9d5905c15db5a7642c3790bda8904cc4be1f8b4,Allow long in datetime args,"@@ -906,6 +906,23 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
+  @Test fun systemTimeMillisValidMessage() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    Timber.d(""%tc"", System.currentTimeMillis());
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
+        .expectClean()
+  }
+
   @Test fun wrappedBooleanType() {
     lint()
         .files(TIMBER_STUB,","@@ -906,6 +906,23 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
+  @Test fun systemTimeMillisValidMessage() {
+    lint()
+        .files(TIMBER_STUB,
+            java(""""""
+                |package foo;
+                |import timber.log.Timber;
+                |public class Example {
+                |  public void log() {
+                |    Timber.d(""%tc"", System.currentTimeMillis());
+                |  }
+                |}"""""".trimMargin())
+        )
+        .issues(*WrongTimberUsageDetector.getIssues())
+        .run()
+        .expectClean()
+  }
+
   @Test fun wrappedBooleanType() {
     lint()
         .files(TIMBER_STUB,",False,test
,timber/src/test/java/timber/log/TimberJavaTest.java,235878c807010dfa8d0b457a3691717e17eaf890,b6e501e75eea39f8c87cda8700e932e338ae7ab8,Keep null tests in Java,"@@ -0,0 +1,30 @@
+package timber.log;
+
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class TimberJavaTest {
+  @SuppressWarnings(""ConstantConditions"")
+  @Test public void nullTree() {
+    try {
+      Timber.plant((Timber.Tree) null);
+      fail();
+    } catch (IllegalArgumentException ignored) {
+    }
+  }
+
+  @SuppressWarnings(""ConstantConditions"")
+  @Test public void nullTreeArray() {
+    try {
+      Timber.plant((Timber.Tree[]) null);
+      fail();
+    } catch (IllegalArgumentException ignored) {
+    }
+    try {
+      Timber.plant(new Timber.Tree[] { null });
+      fail();
+    } catch (IllegalArgumentException ignored) {
+    }
+  }
+}","@@ -0,0 +1,30 @@
+package timber.log;
+
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class TimberJavaTest {
+  @SuppressWarnings(""ConstantConditions"")
+  @Test public void nullTree() {
+    try {
+      Timber.plant((Timber.Tree) null);
+      fail();
+    } catch (IllegalArgumentException ignored) {
+    }
+  }
+
+  @SuppressWarnings(""ConstantConditions"")
+  @Test public void nullTreeArray() {
+    try {
+      Timber.plant((Timber.Tree[]) null);
+      fail();
+    } catch (IllegalArgumentException ignored) {
+    }
+    try {
+      Timber.plant(new Timber.Tree[] { null });
+      fail();
+    } catch (IllegalArgumentException ignored) {
+    }
+  }
+}",False,test
timber/src/test/java/timber/log/TimberTest.kt,timber/src/test/java/timber/log/TimberTest.kt,235878c807010dfa8d0b457a3691717e17eaf890,b6e501e75eea39f8c87cda8700e932e338ae7ab8,Keep null tests in Java,"@@ -66,15 +66,6 @@ class TimberTest {
     assertThat(Timber.treeCount).isEqualTo(0)
   }
 
-  @Test fun nullTreeArray() {
-    @Suppress(""UNCHECKED_CAST"") // Testing an unexpected null array value.
-    val nullTrees = arrayOfNulls<Timber.Tree?>(1) as Array<Timber.Tree>
-
-    assertThrows<IllegalArgumentException> {
-      Timber.plant(*nullTrees)
-    }
-  }
-
   @Test fun forestReturnsAllPlanted() {
     val tree1 = Timber.DebugTree()
     val tree2 = Timber.DebugTree()","@@ -66,15 +66,6 @@ class TimberTest {
     assertThat(Timber.treeCount).isEqualTo(0)
   }
 
-  @Test fun nullTreeArray() {
-    @Suppress(""UNCHECKED_CAST"") // Testing an unexpected null array value.
-    val nullTrees = arrayOfNulls<Timber.Tree?>(1) as Array<Timber.Tree>
-
-    assertThrows<IllegalArgumentException> {
-      Timber.plant(*nullTrees)
-    }
-  }
-
   @Test fun forestReturnsAllPlanted() {
     val tree1 = Timber.DebugTree()
     val tree2 = Timber.DebugTree()",False,test
settings.gradle,settings.gradle,00d501ff6b4b495522cec08f2811cc81dbaff65c,49504d9f204ce827b017864c038485a5d5e3a17d,Break out japicmp validation into its own module,"@@ -1,4 +1,5 @@
 include ':timber'
+include ':timber:japicmp'
 include ':timber-lint'
 include ':timber-sample'","@@ -1,4 +1,5 @@
 include ':timber'
+include ':timber:japicmp'
 include ':timber-lint'
 include ':timber-sample'",False,other
timber/build.gradle,timber/build.gradle,00d501ff6b4b495522cec08f2811cc81dbaff65c,49504d9f204ce827b017864c038485a5d5e3a17d,Break out japicmp validation into its own module,"@@ -1,10 +1,5 @@
 apply plugin: 'com.android.library'
 apply plugin: 'org.jetbrains.kotlin.android'
-apply plugin: 'me.champeau.gradle.japicmp'
-
-configurations {
-  baseline
-}
 
 android {
   compileSdkVersion versions.compileSdk
@@ -36,36 +31,6 @@ dependencies {
   testImplementation deps.robolectric
 
   lintChecks project(':timber-lint')
-
-  baseline('com.jakewharton.timber:timber:4.7.1') {
-    transitive = false
-    force = true
-  }
-}
-
-android.libraryVariants.all { variant ->
-  if (variant.name != ""release"") {
-    return
-  }
-
-  task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
-    oldClasspath = configurations.baseline.incoming.artifactView { config ->
-      config.attributes {
-        container -> container.attribute(Attribute.of(""artifactType"", String.class), ""jar"")
-      }
-    }.artifacts.artifactFiles
-
-    // TODO query the outgoing jar in a more dynamic fashion
-    newClasspath = files(""$buildDir/intermediates/packaged-classes/${variant.name}/classes.jar"")
-
-    onlyBinaryIncompatibleModified = true
-    failOnModification = true
-    txtOutputFile = file(""$buildDir/reports/japi.txt"")
-    ignoreMissingClasses = true
-    includeSynthetic = true
-  }
-  japicmp.dependsOn(variant.assemble)
-  check.dependsOn(japicmp)
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -1,10 +1,5 @@
 apply plugin: 'com.android.library'
 apply plugin: 'org.jetbrains.kotlin.android'
-apply plugin: 'me.champeau.gradle.japicmp'
-
-configurations {
-  baseline
-}
 
 android {
   compileSdkVersion versions.compileSdk
@@ -36,36 +31,6 @@ dependencies {
   testImplementation deps.robolectric
 
   lintChecks project(':timber-lint')
-
-  baseline('com.jakewharton.timber:timber:4.7.1') {
-    transitive = false
-    force = true
-  }
-}
-
-android.libraryVariants.all { variant ->
-  if (variant.name != ""release"") {
-    return
-  }
-
-  task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
-    oldClasspath = configurations.baseline.incoming.artifactView { config ->
-      config.attributes {
-        container -> container.attribute(Attribute.of(""artifactType"", String.class), ""jar"")
-      }
-    }.artifacts.artifactFiles
-
-    // TODO query the outgoing jar in a more dynamic fashion
-    newClasspath = files(""$buildDir/intermediates/packaged-classes/${variant.name}/classes.jar"")
-
-    onlyBinaryIncompatibleModified = true
-    failOnModification = true
-    txtOutputFile = file(""$buildDir/reports/japi.txt"")
-    ignoreMissingClasses = true
-    includeSynthetic = true
-  }
-  japicmp.dependsOn(variant.assemble)
-  check.dependsOn(japicmp)
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
,timber/japicmp/build.gradle,00d501ff6b4b495522cec08f2811cc81dbaff65c,49504d9f204ce827b017864c038485a5d5e3a17d,Break out japicmp validation into its own module,"@@ -0,0 +1,38 @@
+configurations {
+  baseline
+  latest
+}
+
+dependencies {
+  baseline('com.jakewharton.timber:timber:4.7.1') {
+    transitive = false
+    force = true
+  }
+  latest project(path: ':timber', configuration: 'releaseRuntimeElements')
+}
+
+task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
+  oldClasspath = configurations.baseline.incoming.artifactView { config ->
+    config.attributes { container ->
+      container.attribute(Attribute.of(""artifactType"", String.class), ""jar"")
+    }
+  }.artifacts.artifactFiles
+
+  newClasspath = configurations.latest.incoming.artifactView { config ->
+    config.attributes { container ->
+      container.attribute(Attribute.of(""artifactType"", String.class), ""jar"")
+    }
+  }.artifacts.artifactFiles
+
+  onlyBinaryIncompatibleModified = true
+  failOnModification = true
+  txtOutputFile = file(""$buildDir/reports/japi.txt"")
+  ignoreMissingClasses = true
+  includeSynthetic = true
+}
+
+def check = tasks.create('check')
+check.dependsOn(japicmp)
+
+def build = tasks.create('build')
+build.dependsOn(check)","@@ -0,0 +1,38 @@
+configurations {
+  baseline
+  latest
+}
+
+dependencies {
+  baseline('com.jakewharton.timber:timber:4.7.1') {
+    transitive = false
+    force = true
+  }
+  latest project(path: ':timber', configuration: 'releaseRuntimeElements')
+}
+
+task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
+  oldClasspath = configurations.baseline.incoming.artifactView { config ->
+    config.attributes { container ->
+      container.attribute(Attribute.of(""artifactType"", String.class), ""jar"")
+    }
+  }.artifacts.artifactFiles
+
+  newClasspath = configurations.latest.incoming.artifactView { config ->
+    config.attributes { container ->
+      container.attribute(Attribute.of(""artifactType"", String.class), ""jar"")
+    }
+  }.artifacts.artifactFiles
+
+  onlyBinaryIncompatibleModified = true
+  failOnModification = true
+  txtOutputFile = file(""$buildDir/reports/japi.txt"")
+  ignoreMissingClasses = true
+  includeSynthetic = true
+}
+
+def check = tasks.create('check')
+check.dependsOn(japicmp)
+
+def build = tasks.create('build')
+build.dependsOn(check)",False,other
build.gradle,build.gradle,7c203818f7e123b0b8d2f4f4a23fc473b3c20874,b27fd2ddb28771447f0007c7d5d4693c9ab2c0aa,Move to newer lintPublish API,"@@ -7,8 +7,8 @@ buildscript {
 
       'kotlin': '1.3.21',
 
-      'androidPlugin': '3.3.2',
-      'androidTools': '26.3.2',
+      'androidPlugin': '3.4.0',
+      'androidTools': '26.4.0',
 
       'butterknife': '8.8.1',
   ]","@@ -7,8 +7,8 @@ buildscript {
 
       'kotlin': '1.3.21',
 
-      'androidPlugin': '3.3.2',
-      'androidTools': '26.3.2',
+      'androidPlugin': '3.4.0',
+      'androidTools': '26.4.0',
 
       'butterknife': '8.8.1',
   ]",False,other
timber-sample/build.gradle,timber-sample/build.gradle,7c203818f7e123b0b8d2f4f4a23fc473b3c20874,b27fd2ddb28771447f0007c7d5d4693c9ab2c0aa,Move to newer lintPublish API,"@@ -27,6 +27,4 @@ dependencies {
   implementation project(':timber')
   implementation deps.butterknife.runtime
   annotationProcessor deps.butterknife.compiler
-  
-  lintChecks project(':timber-lint')
 }","@@ -27,6 +27,4 @@ dependencies {
   implementation project(':timber')
   implementation deps.butterknife.runtime
   annotationProcessor deps.butterknife.compiler
-  
-  lintChecks project(':timber-lint')
 }",False,other
timber/build.gradle,timber/build.gradle,7c203818f7e123b0b8d2f4f4a23fc473b3c20874,b27fd2ddb28771447f0007c7d5d4693c9ab2c0aa,Move to newer lintPublish API,"@@ -30,7 +30,7 @@ dependencies {
   testImplementation deps.truth
   testImplementation deps.robolectric
 
-  lintChecks project(':timber-lint')
+  lintPublish project(':timber-lint')
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -30,7 +30,7 @@ dependencies {
   testImplementation deps.truth
   testImplementation deps.robolectric
 
-  lintChecks project(':timber-lint')
+  lintPublish project(':timber-lint')
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
timber/src/main/java/timber/log/Timber.kt,timber/src/main/java/timber/log/Timber.kt,cf676130541ae9912b15fa66ee2eacee7220ce07,7c203818f7e123b0b8d2f4f4a23fc473b3c20874,"Fix Tree.log doc

Param message is not nullable.","@@ -186,8 +186,8 @@ class Timber private constructor() {
      *
      * @param priority Log level. See [Log] for constants.
      * @param tag Explicit or inferred tag. May be `null`.
-     * @param message Formatted log message. May be `null`, but then `t` will not be.
-     * @param t Accompanying exceptions. May be `null`, but then `message` will not be.
+     * @param message Formatted log message.
+     * @param t Accompanying exceptions. May be `null`.
      */
     protected abstract fun log(priority: Int, tag: String?, message: String, t: Throwable?)
   }","@@ -186,8 +186,8 @@ class Timber private constructor() {
      *
      * @param priority Log level. See [Log] for constants.
      * @param tag Explicit or inferred tag. May be `null`.
-     * @param message Formatted log message. May be `null`, but then `t` will not be.
-     * @param t Accompanying exceptions. May be `null`, but then `message` will not be.
+     * @param message Formatted log message.
+     * @param t Accompanying exceptions. May be `null`.
      */
     protected abstract fun log(priority: Int, tag: String?, message: String, t: Throwable?)
   }",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,a632a7b45f7d173e0005502ba324080c5c484cd1,f6d1b98d6280ec567d4e8b60a011f662fdce445b,"Allow string literal concatenation

Do not report a lint for a binary operation when the operands are both
string literals. This is to allow long log lines to be broken into
multiple lines of code.","@@ -603,6 +603,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       if (operator == PLUS || operator == PLUS_ASSIGN) {
         Class argumentType = getType(binaryExpression);
         if (argumentType == String.class) {
+          if (isStringLiteral(binaryExpression.getLeftOperand())
+                  && isStringLiteral(binaryExpression.getRightOperand())) {
+            return false;
+          }
           LintFix fix = quickFixIssueBinary(binaryExpression);
           context.report(ISSUE_BINARY, call, context.getLocation(element),
               ""Replace String concatenation with Timber's string formatting"", fix);","@@ -603,6 +603,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       if (operator == PLUS || operator == PLUS_ASSIGN) {
         Class argumentType = getType(binaryExpression);
         if (argumentType == String.class) {
+          if (isStringLiteral(binaryExpression.getLeftOperand())
+                  && isStringLiteral(binaryExpression.getRightOperand())) {
+            return false;
+          }
           LintFix fix = quickFixIssueBinary(binaryExpression);
           context.report(ISSUE_BINARY, call, context.getLocation(element),
               ""Replace String concatenation with Timber's string formatting"", fix);",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,a632a7b45f7d173e0005502ba324080c5c484cd1,f6d1b98d6280ec567d4e8b60a011f662fdce445b,"Allow string literal concatenation

Do not report a lint for a binary operation when the operands are both
string literals. This is to allow long log lines to be broken into
multiple lines of code.","@@ -333,17 +333,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()))
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
-        .expect(""""""
-            |src/foo/Example.java:5: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
-            |     Timber.d(""foo"" + ""bar"");
-            |              ~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
-        .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 4: Replace with ""foobar"":
-            |@@ -5 +5
-            |-      Timber.d(""foo"" + ""bar"");
-            |+      Timber.d(""foobar"");
-            |"""""".trimMargin())
+        .expectClean()
   }
 
   @Test fun stringConcatenationLeftLiteral() {","@@ -333,17 +333,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()))
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
-        .expect(""""""
-            |src/foo/Example.java:5: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
-            |     Timber.d(""foo"" + ""bar"");
-            |              ~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
-        .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 4: Replace with ""foobar"":
-            |@@ -5 +5
-            |-      Timber.d(""foo"" + ""bar"");
-            |+      Timber.d(""foobar"");
-            |"""""".trimMargin())
+        .expectClean()
   }
 
   @Test fun stringConcatenationLeftLiteral() {",False,test
build.gradle,build.gradle,d5e2cd8cbb8d304e4f07392d826bd34de531892f,10f0adce3921ad2929ddf2f3b7fecda2cf3148a5,"Update build.gradle
- Move to newer lintPublish API
- Update Gradle Wrapper to 6.5.1 to fix build","@@ -7,8 +7,8 @@ buildscript {
 
       'kotlin': '1.3.21',
 
-      'androidPlugin': '3.4.0',
-      'androidTools': '26.4.0',
+      'androidPlugin': '4.0.0',
+      'androidTools': '27.0.0',
 
       'butterknife': '8.8.1',
   ]","@@ -7,8 +7,8 @@ buildscript {
 
       'kotlin': '1.3.21',
 
-      'androidPlugin': '3.4.0',
-      'androidTools': '26.4.0',
+      'androidPlugin': '4.0.0',
+      'androidTools': '27.0.0',
 
       'butterknife': '8.8.1',
   ]",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,d5e2cd8cbb8d304e4f07392d826bd34de531892f,10f0adce3921ad2929ddf2f3b7fecda2cf3148a5,"Update build.gradle
- Move to newer lintPublish API
- Update Gradle Wrapper to 6.5.1 to fix build","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-5.2.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.5.1-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-5.2.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.5.1-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists",False,other
build.gradle,build.gradle,c204fb6e73f3ef99d2bdff7b426934b57c934714,10f0adce3921ad2929ddf2f3b7fecda2cf3148a5,"Update jetbrains-annotations dependency to current

Fixes #391","@@ -29,7 +29,7 @@ buildscript {
           'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
           'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
       ],
-      annotations: 'org.jetbrains:annotations:16.0.1',
+      annotations: 'org.jetbrains:annotations:19.0.0',
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.41',","@@ -29,7 +29,7 @@ buildscript {
           'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
           'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
       ],
-      annotations: 'org.jetbrains:annotations:16.0.1',
+      annotations: 'org.jetbrains:annotations:19.0.0',
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.41',",False,other
build.gradle,build.gradle,4ebc9409e41ec8c91b423d68a8da5eebb790a5cb,4fd8e2a09c81931e9c9b004f45aea2937835278c,Remove ButterKnife,"@@ -9,8 +9,6 @@ buildscript {
 
       'androidPlugin': '4.0.0',
       'androidTools': '27.0.0',
-
-      'butterknife': '8.8.1',
   ]
 
   ext.deps = [
@@ -19,10 +17,6 @@ buildscript {
           'plugin': ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
           'stdlib': ""org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"",
       ],
-      'butterknife': [
-          'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
-          'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
-      ],
       'lint': [
           'core': ""com.android.tools.lint:lint:${versions.androidTools}"",
           'api': ""com.android.tools.lint:lint-api:${versions.androidTools}"",","@@ -9,8 +9,6 @@ buildscript {
 
       'androidPlugin': '4.0.0',
       'androidTools': '27.0.0',
-
-      'butterknife': '8.8.1',
   ]
 
   ext.deps = [
@@ -19,10 +17,6 @@ buildscript {
           'plugin': ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
           'stdlib': ""org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"",
       ],
-      'butterknife': [
-          'runtime': ""com.jakewharton:butterknife:${versions.butterknife}"",
-          'compiler': ""com.jakewharton:butterknife-compiler:${versions.butterknife}""
-      ],
       'lint': [
           'core': ""com.android.tools.lint:lint:${versions.androidTools}"",
           'api': ""com.android.tools.lint:lint-api:${versions.androidTools}"",",False,other
gradle.properties,gradle.properties,4ebc9409e41ec8c91b423d68a8da5eebb790a5cb,4fd8e2a09c81931e9c9b004f45aea2937835278c,Remove ButterKnife,"@@ -16,3 +16,6 @@ POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
 
 org.gradle.jvmargs=-Xmx1536M
+
+android.useAndroidX=true
+android.enableJetifier=false","@@ -16,3 +16,6 @@ POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
 
 org.gradle.jvmargs=-Xmx1536M
+
+android.useAndroidX=true
+android.enableJetifier=false",False,other
timber-sample/build.gradle,timber-sample/build.gradle,4ebc9409e41ec8c91b423d68a8da5eebb790a5cb,4fd8e2a09c81931e9c9b004f45aea2937835278c,Remove ButterKnife,"@@ -8,6 +8,10 @@ android {
     targetCompatibility JavaVersion.VERSION_1_7
   }
 
+  buildFeatures {
+    viewBinding = true
+  }
+
   defaultConfig {
     applicationId 'com.example.timber'
     minSdkVersion versions.minSdk
@@ -25,6 +29,4 @@ android {
 
 dependencies {
   implementation project(':timber')
-  implementation deps.butterknife.runtime
-  annotationProcessor deps.butterknife.compiler
 }","@@ -8,6 +8,10 @@ android {
     targetCompatibility JavaVersion.VERSION_1_7
   }
 
+  buildFeatures {
+    viewBinding = true
+  }
+
   defaultConfig {
     applicationId 'com.example.timber'
     minSdkVersion versions.minSdk
@@ -25,6 +29,4 @@ android {
 
 dependencies {
   implementation project(':timber')
-  implementation deps.butterknife.runtime
-  annotationProcessor deps.butterknife.compiler
 }",False,other
timber-sample/src/main/java/com/example/timber/ExampleApp.java,timber-sample/src/main/java/com/example/timber/ExampleApp.java,4ebc9409e41ec8c91b423d68a8da5eebb790a5cb,4fd8e2a09c81931e9c9b004f45aea2937835278c,Remove ButterKnife,"@@ -1,11 +1,13 @@
 package com.example.timber;
 
+import static timber.log.Timber.DebugTree;
+
 import android.app.Application;
-import android.support.annotation.NonNull;
 import android.util.Log;
-import timber.log.Timber;
 
-import static timber.log.Timber.DebugTree;
+import androidx.annotation.NonNull;
+
+import timber.log.Timber;
 
 public class ExampleApp extends Application {
   @Override public void onCreate() {","@@ -1,11 +1,13 @@
 package com.example.timber;
 
+import static timber.log.Timber.DebugTree;
+
 import android.app.Application;
-import android.support.annotation.NonNull;
 import android.util.Log;
-import timber.log.Timber;
 
-import static timber.log.Timber.DebugTree;
+import androidx.annotation.NonNull;
+
+import timber.log.Timber;
 
 public class ExampleApp extends Application {
   @Override public void onCreate() {",False,source
timber-sample/src/main/java/com/example/timber/ui/DemoActivity.java,timber-sample/src/main/java/com/example/timber/ui/DemoActivity.java,4ebc9409e41ec8c91b423d68a8da5eebb790a5cb,4fd8e2a09c81931e9c9b004f45aea2937835278c,Remove ButterKnife,"@@ -1,28 +1,33 @@
 package com.example.timber.ui;
 
+import static android.widget.Toast.LENGTH_SHORT;
+
 import android.app.Activity;
 import android.os.Bundle;
+import android.view.View;
 import android.widget.Button;
 import android.widget.Toast;
 
-import butterknife.ButterKnife;
-import butterknife.OnClick;
-import com.example.timber.R;
-import timber.log.Timber;
+import com.example.timber.databinding.DemoActivityBinding;
 
-import static android.widget.Toast.LENGTH_SHORT;
+import timber.log.Timber;
 
-public class DemoActivity extends Activity {
+public class DemoActivity extends Activity implements View.OnClickListener {
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
-    setContentView(R.layout.demo_activity);
-    ButterKnife.bind(this);
+    DemoActivityBinding binding = DemoActivityBinding.inflate(getLayoutInflater());
+    setContentView(binding.getRoot());
+
     Timber.tag(""LifeCycles"");
     Timber.d(""Activity Created"");
+
+    binding.hello.setOnClickListener(this);
+    binding.hey.setOnClickListener(this);
+    binding.hi.setOnClickListener(this);
   }
 
-  @OnClick({ R.id.hello, R.id.hey, R.id.hi })
-  public void greetingClicked(Button button) {
+  @Override public void onClick(View v) {
+    Button button = (Button) v;
     Timber.i(""A button with ID %s was clicked to say '%s'."", button.getId(), button.getText());
     Toast.makeText(this, ""Check logcat for a greeting!"", LENGTH_SHORT).show();
   }","@@ -1,28 +1,33 @@
 package com.example.timber.ui;
 
+import static android.widget.Toast.LENGTH_SHORT;
+
 import android.app.Activity;
 import android.os.Bundle;
+import android.view.View;
 import android.widget.Button;
 import android.widget.Toast;
 
-import butterknife.ButterKnife;
-import butterknife.OnClick;
-import com.example.timber.R;
-import timber.log.Timber;
+import com.example.timber.databinding.DemoActivityBinding;
 
-import static android.widget.Toast.LENGTH_SHORT;
+import timber.log.Timber;
 
-public class DemoActivity extends Activity {
+public class DemoActivity extends Activity implements View.OnClickListener {
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
-    setContentView(R.layout.demo_activity);
-    ButterKnife.bind(this);
+    DemoActivityBinding binding = DemoActivityBinding.inflate(getLayoutInflater());
+    setContentView(binding.getRoot());
+
     Timber.tag(""LifeCycles"");
     Timber.d(""Activity Created"");
+
+    binding.hello.setOnClickListener(this);
+    binding.hey.setOnClickListener(this);
+    binding.hi.setOnClickListener(this);
   }
 
-  @OnClick({ R.id.hello, R.id.hey, R.id.hi })
-  public void greetingClicked(Button button) {
+  @Override public void onClick(View v) {
+    Button button = (Button) v;
     Timber.i(""A button with ID %s was clicked to say '%s'."", button.getId(), button.getText());
     Toast.makeText(this, ""Check logcat for a greeting!"", LENGTH_SHORT).show();
   }",False,source
timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,4ebc9409e41ec8c91b423d68a8da5eebb790a5cb,4fd8e2a09c81931e9c9b004f45aea2937835278c,Remove ButterKnife,"@@ -3,8 +3,8 @@ package com.example.timber.ui;
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.os.Bundle;
-import android.support.annotation.Nullable;
 import android.util.Log;
+import androidx.annotation.Nullable;
 import timber.log.Timber;
 
 import static java.lang.String.format;","@@ -3,8 +3,8 @@ package com.example.timber.ui;
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.os.Bundle;
-import android.support.annotation.Nullable;
 import android.util.Log;
+import androidx.annotation.Nullable;
 import timber.log.Timber;
 
 import static java.lang.String.format;",False,source
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,1442ed57c40c14c2d7e49ab8266b63804b0f5443,4fd8e2a09c81931e9c9b004f45aea2937835278c,Update Gradle to 6.6,"@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.5.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.6-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.5.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.6-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists",False,other
gradlew,gradlew,1442ed57c40c14c2d7e49ab8266b63804b0f5443,4fd8e2a09c81931e9c9b004f45aea2937835278c,Update Gradle to 6.6,"@@ -1,5 +1,21 @@
 #!/usr/bin/env sh
 
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the ""License"");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
 ##############################################################################
 ##
 ##  Gradle start up script for UN*X
@@ -28,7 +44,7 @@ APP_NAME=""Gradle""
 APP_BASE_NAME=`basename ""$0""`
 
 # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""""
+DEFAULT_JVM_OPTS='""-Xmx64m"" ""-Xms64m""'
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD=""maximum""
@@ -66,6 +82,7 @@ esac
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
+
 # Determine the Java command to use to start the JVM.
 if [ -n ""$JAVA_HOME"" ] ; then
     if [ -x ""$JAVA_HOME/jre/sh/java"" ] ; then
@@ -109,10 +126,11 @@ if $darwin; then
     GRADLE_OPTS=""$GRADLE_OPTS \""-Xdock:name=$APP_NAME\"" \""-Xdock:icon=$APP_HOME/media/gradle.icns\""""
 fi
 
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ ""$cygwin"" = ""true"" -o ""$msys"" = ""true"" ] ; then
     APP_HOME=`cygpath --path --mixed ""$APP_HOME""`
     CLASSPATH=`cygpath --path --mixed ""$CLASSPATH""`
+
     JAVACMD=`cygpath --unix ""$JAVACMD""`
 
     # We build the pattern for arguments to be converted via cygpath
@@ -138,19 +156,19 @@ if $cygwin ; then
         else
             eval `echo args$i`=""\""$arg\""""
         fi
-        i=$((i+1))
+        i=`expr $i + 1`
     done
     case $i in
-        (0) set -- ;;
-        (1) set -- ""$args0"" ;;
-        (2) set -- ""$args0"" ""$args1"" ;;
-        (3) set -- ""$args0"" ""$args1"" ""$args2"" ;;
-        (4) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ;;
-        (5) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ;;
-        (6) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ;;
-        (7) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ;;
-        (8) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ;;
-        (9) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ""$args8"" ;;
+        0) set -- ;;
+        1) set -- ""$args0"" ;;
+        2) set -- ""$args0"" ""$args1"" ;;
+        3) set -- ""$args0"" ""$args1"" ""$args2"" ;;
+        4) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ;;
+        5) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ;;
+        6) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ;;
+        7) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ;;
+        8) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ;;
+        9) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ""$args8"" ;;
     esac
 fi
 
@@ -159,14 +177,9 @@ save () {
     for i do printf %s\\n ""$i"" | sed ""s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"" ; done
     echo "" ""
 }
-APP_ARGS=$(save ""$@"")
+APP_ARGS=`save ""$@""`
 
 # Collect all arguments for the java command, following the shell quoting and substitution rules
 eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS ""\""-Dorg.gradle.appname=$APP_BASE_NAME\"""" -classpath ""\""$CLASSPATH\"""" org.gradle.wrapper.GradleWrapperMain ""$APP_ARGS""
 
-# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
-if [ ""$(uname)"" = ""Darwin"" ] && [ ""$HOME"" = ""$PWD"" ]; then
-  cd ""$(dirname ""$0"")""
-fi
-
 exec ""$JAVACMD"" ""$@""","@@ -1,5 +1,21 @@
 #!/usr/bin/env sh
 
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the ""License"");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
 ##############################################################################
 ##
 ##  Gradle start up script for UN*X
@@ -28,7 +44,7 @@ APP_NAME=""Gradle""
 APP_BASE_NAME=`basename ""$0""`
 
 # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""""
+DEFAULT_JVM_OPTS='""-Xmx64m"" ""-Xms64m""'
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD=""maximum""
@@ -66,6 +82,7 @@ esac
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
+
 # Determine the Java command to use to start the JVM.
 if [ -n ""$JAVA_HOME"" ] ; then
     if [ -x ""$JAVA_HOME/jre/sh/java"" ] ; then
@@ -109,10 +126,11 @@ if $darwin; then
     GRADLE_OPTS=""$GRADLE_OPTS \""-Xdock:name=$APP_NAME\"" \""-Xdock:icon=$APP_HOME/media/gradle.icns\""""
 fi
 
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ ""$cygwin"" = ""true"" -o ""$msys"" = ""true"" ] ; then
     APP_HOME=`cygpath --path --mixed ""$APP_HOME""`
     CLASSPATH=`cygpath --path --mixed ""$CLASSPATH""`
+
     JAVACMD=`cygpath --unix ""$JAVACMD""`
 
     # We build the pattern for arguments to be converted via cygpath
@@ -138,19 +156,19 @@ if $cygwin ; then
         else
             eval `echo args$i`=""\""$arg\""""
         fi
-        i=$((i+1))
+        i=`expr $i + 1`
     done
     case $i in
-        (0) set -- ;;
-        (1) set -- ""$args0"" ;;
-        (2) set -- ""$args0"" ""$args1"" ;;
-        (3) set -- ""$args0"" ""$args1"" ""$args2"" ;;
-        (4) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ;;
-        (5) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ;;
-        (6) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ;;
-        (7) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ;;
-        (8) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ;;
-        (9) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ""$args8"" ;;
+        0) set -- ;;
+        1) set -- ""$args0"" ;;
+        2) set -- ""$args0"" ""$args1"" ;;
+        3) set -- ""$args0"" ""$args1"" ""$args2"" ;;
+        4) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ;;
+        5) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ;;
+        6) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ;;
+        7) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ;;
+        8) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ;;
+        9) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ""$args8"" ;;
     esac
 fi
 
@@ -159,14 +177,9 @@ save () {
     for i do printf %s\\n ""$i"" | sed ""s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"" ; done
     echo "" ""
 }
-APP_ARGS=$(save ""$@"")
+APP_ARGS=`save ""$@""`
 
 # Collect all arguments for the java command, following the shell quoting and substitution rules
 eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS ""\""-Dorg.gradle.appname=$APP_BASE_NAME\"""" -classpath ""\""$CLASSPATH\"""" org.gradle.wrapper.GradleWrapperMain ""$APP_ARGS""
 
-# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
-if [ ""$(uname)"" = ""Darwin"" ] && [ ""$HOME"" = ""$PWD"" ]; then
-  cd ""$(dirname ""$0"")""
-fi
-
 exec ""$JAVACMD"" ""$@""",False,other
gradlew.bat,gradlew.bat,1442ed57c40c14c2d7e49ab8266b63804b0f5443,4fd8e2a09c81931e9c9b004f45aea2937835278c,Update Gradle to 6.6,"@@ -1,3 +1,19 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the ""License"");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an ""AS IS"" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
 @if ""%DEBUG%"" == """" @echo off
 @rem ##########################################################################
 @rem
@@ -13,15 +29,18 @@ if ""%DIRNAME%"" == """" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Resolve any ""."" and "".."" in APP_HOME to make it shorter.
+for %%i in (""%APP_HOME%"") do set APP_HOME=%%~fi
+
 @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
+set DEFAULT_JVM_OPTS=""-Xmx64m"" ""-Xms64m""
 
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
 set JAVA_EXE=java.exe
 %JAVA_EXE% -version >NUL 2>&1
-if ""%ERRORLEVEL%"" == ""0"" goto init
+if ""%ERRORLEVEL%"" == ""0"" goto execute
 
 echo.
 echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
@@ -35,7 +54,7 @@ goto fail
 set JAVA_HOME=%JAVA_HOME:""=%
 set JAVA_EXE=%JAVA_HOME%/bin/java.exe
 
-if exist ""%JAVA_EXE%"" goto init
+if exist ""%JAVA_EXE%"" goto execute
 
 echo.
 echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
@@ -45,28 +64,14 @@ echo location of your Java installation.
 
 goto fail
 
-:init
-@rem Get command-line arguments, handling Windows variants
-
-if not ""%OS%"" == ""Windows_NT"" goto win9xME_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if ""x%~1"" == ""x"" goto execute
-
-set CMD_LINE_ARGS=%*
-
 :execute
 @rem Setup the command line
 
 set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
 
+
 @rem Execute Gradle
-""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" org.gradle.wrapper.GradleWrapperMain %*
 
 :end
 @rem End local scope for the variables with windows NT shell","@@ -1,3 +1,19 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the ""License"");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an ""AS IS"" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
 @if ""%DEBUG%"" == """" @echo off
 @rem ##########################################################################
 @rem
@@ -13,15 +29,18 @@ if ""%DIRNAME%"" == """" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Resolve any ""."" and "".."" in APP_HOME to make it shorter.
+for %%i in (""%APP_HOME%"") do set APP_HOME=%%~fi
+
 @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
+set DEFAULT_JVM_OPTS=""-Xmx64m"" ""-Xms64m""
 
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
 set JAVA_EXE=java.exe
 %JAVA_EXE% -version >NUL 2>&1
-if ""%ERRORLEVEL%"" == ""0"" goto init
+if ""%ERRORLEVEL%"" == ""0"" goto execute
 
 echo.
 echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
@@ -35,7 +54,7 @@ goto fail
 set JAVA_HOME=%JAVA_HOME:""=%
 set JAVA_EXE=%JAVA_HOME%/bin/java.exe
 
-if exist ""%JAVA_EXE%"" goto init
+if exist ""%JAVA_EXE%"" goto execute
 
 echo.
 echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
@@ -45,28 +64,14 @@ echo location of your Java installation.
 
 goto fail
 
-:init
-@rem Get command-line arguments, handling Windows variants
-
-if not ""%OS%"" == ""Windows_NT"" goto win9xME_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if ""x%~1"" == ""x"" goto execute
-
-set CMD_LINE_ARGS=%*
-
 :execute
 @rem Setup the command line
 
 set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
 
+
 @rem Execute Gradle
-""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" org.gradle.wrapper.GradleWrapperMain %*
 
 :end
 @rem End local scope for the variables with windows NT shell",True,other
build.gradle,build.gradle,c0f0e15c4d4d0830ff9695219b20b62fc296ffe1,1442ed57c40c14c2d7e49ab8266b63804b0f5443,Use vanniktech's gradle maven publish plugin,"@@ -48,6 +48,7 @@ buildscript {
     classpath deps.kotlin.plugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.6'
+    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.17.0'
   }
 }","@@ -48,6 +48,7 @@ buildscript {
     classpath deps.kotlin.plugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.6'
+    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.17.0'
   }
 }",False,other
gradle/gradle-mvn-push.gradle,,c0f0e15c4d4d0830ff9695219b20b62fc296ffe1,1442ed57c40c14c2d7e49ab8266b63804b0f5443,Use vanniktech's gradle maven publish plugin,"@@ -1,112 +0,0 @@
-/*
- * Copyright 2013 Chris Banes
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-apply plugin: 'maven'
-apply plugin: 'signing'
-
-def isReleaseBuild() {
-  return VERSION_NAME.contains(""SNAPSHOT"") == false
-}
-
-def getRepositoryUsername() {
-  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : """"
-}
-
-def getRepositoryPassword() {
-  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : """"
-}
-
-afterEvaluate { project ->
-  uploadArchives {
-    repositories {
-      mavenDeployer {
-        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-
-        pom.groupId = GROUP
-        pom.artifactId = POM_ARTIFACT_ID
-        pom.version = VERSION_NAME
-
-        repository(url: ""https://oss.sonatype.org/service/local/staging/deploy/maven2/"") {
-          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
-        }
-        snapshotRepository(url: ""https://oss.sonatype.org/content/repositories/snapshots/"") {
-          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
-        }
-
-        pom.project {
-          name POM_NAME
-          packaging POM_PACKAGING
-          description POM_DESCRIPTION
-          url POM_URL
-
-          scm {
-            url POM_SCM_URL
-            connection POM_SCM_CONNECTION
-            developerConnection POM_SCM_DEV_CONNECTION
-          }
-
-          licenses {
-            license {
-              name POM_LICENCE_NAME
-              url POM_LICENCE_URL
-              distribution POM_LICENCE_DIST
-            }
-          }
-
-          developers {
-            developer {
-              id POM_DEVELOPER_ID
-              name POM_DEVELOPER_NAME
-            }
-          }
-        }
-      }
-    }
-  }
-
-  signing {
-    required { isReleaseBuild() && gradle.taskGraph.hasTask(""uploadArchives"") }
-    sign configurations.archives
-  }
-
-  task androidJavadocs(type: Javadoc) {
-    if (!project.plugins.hasPlugin('kotlin-android')) {
-      source = android.sourceSets.main.java.srcDirs
-    }
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    exclude '**/internal/*'
-    include '**/*.java'
-
-    if (JavaVersion.current().isJava8Compatible()) {
-      options.addStringOption('Xdoclint:none', '-quiet')
-    }
-  }
-
-  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
-    classifier = 'javadoc'
-    from androidJavadocs.destinationDir
-  }
-
-  task androidSourcesJar(type: Jar) {
-    classifier = 'sources'
-    from android.sourceSets.main.java.sourceFiles
-  }
-
-  artifacts {
-    archives androidSourcesJar
-    archives androidJavadocsJar
-  }
-}","@@ -1,112 +0,0 @@
-/*
- * Copyright 2013 Chris Banes
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-apply plugin: 'maven'
-apply plugin: 'signing'
-
-def isReleaseBuild() {
-  return VERSION_NAME.contains(""SNAPSHOT"") == false
-}
-
-def getRepositoryUsername() {
-  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : """"
-}
-
-def getRepositoryPassword() {
-  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : """"
-}
-
-afterEvaluate { project ->
-  uploadArchives {
-    repositories {
-      mavenDeployer {
-        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-
-        pom.groupId = GROUP
-        pom.artifactId = POM_ARTIFACT_ID
-        pom.version = VERSION_NAME
-
-        repository(url: ""https://oss.sonatype.org/service/local/staging/deploy/maven2/"") {
-          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
-        }
-        snapshotRepository(url: ""https://oss.sonatype.org/content/repositories/snapshots/"") {
-          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
-        }
-
-        pom.project {
-          name POM_NAME
-          packaging POM_PACKAGING
-          description POM_DESCRIPTION
-          url POM_URL
-
-          scm {
-            url POM_SCM_URL
-            connection POM_SCM_CONNECTION
-            developerConnection POM_SCM_DEV_CONNECTION
-          }
-
-          licenses {
-            license {
-              name POM_LICENCE_NAME
-              url POM_LICENCE_URL
-              distribution POM_LICENCE_DIST
-            }
-          }
-
-          developers {
-            developer {
-              id POM_DEVELOPER_ID
-              name POM_DEVELOPER_NAME
-            }
-          }
-        }
-      }
-    }
-  }
-
-  signing {
-    required { isReleaseBuild() && gradle.taskGraph.hasTask(""uploadArchives"") }
-    sign configurations.archives
-  }
-
-  task androidJavadocs(type: Javadoc) {
-    if (!project.plugins.hasPlugin('kotlin-android')) {
-      source = android.sourceSets.main.java.srcDirs
-    }
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    exclude '**/internal/*'
-    include '**/*.java'
-
-    if (JavaVersion.current().isJava8Compatible()) {
-      options.addStringOption('Xdoclint:none', '-quiet')
-    }
-  }
-
-  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
-    classifier = 'javadoc'
-    from androidJavadocs.destinationDir
-  }
-
-  task androidSourcesJar(type: Jar) {
-    classifier = 'sources'
-    from android.sourceSets.main.java.sourceFiles
-  }
-
-  artifacts {
-    archives androidSourcesJar
-    archives androidJavadocsJar
-  }
-}",False,other
timber/build.gradle,timber/build.gradle,c0f0e15c4d4d0830ff9695219b20b62fc296ffe1,1442ed57c40c14c2d7e49ab8266b63804b0f5443,Use vanniktech's gradle maven publish plugin,"@@ -1,5 +1,6 @@
 apply plugin: 'com.android.library'
 apply plugin: 'org.jetbrains.kotlin.android'
+apply plugin: 'com.vanniktech.maven.publish'
 
 android {
   compileSdkVersion versions.compileSdk
@@ -32,5 +33,3 @@ dependencies {
 
   lintPublish project(':timber-lint')
 }
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')","@@ -1,5 +1,6 @@
 apply plugin: 'com.android.library'
 apply plugin: 'org.jetbrains.kotlin.android'
+apply plugin: 'com.vanniktech.maven.publish'
 
 android {
   compileSdkVersion versions.compileSdk
@@ -32,5 +33,3 @@ dependencies {
 
   lintPublish project(':timber-lint')
 }
-
-apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",False,other
build.gradle,build.gradle,b5467ee2238594ad158278c66dc82ec8a4ae404d,3a290dcf78794446f965abd6cf7aadd7f78efaa6,Bump to latest Robolectric (4.6.1),"@@ -27,7 +27,7 @@ buildscript {
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.41',
-      robolectric: 'org.robolectric:robolectric:3.8',
+      robolectric: 'org.robolectric:robolectric:4.6.1',
   ]
 
   repositories {","@@ -27,7 +27,7 @@ buildscript {
 
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.41',
-      robolectric: 'org.robolectric:robolectric:3.8',
+      robolectric: 'org.robolectric:robolectric:4.6.1',
   ]
 
   repositories {",False,other
timber/src/test/java/timber/log/TimberTest.kt,timber/src/test/java/timber/log/TimberTest.kt,b5467ee2238594ad158278c66dc82ec8a4ae404d,3a290dcf78794446f965abd6cf7aadd7f78efaa6,Bump to latest Robolectric (4.6.1),"@@ -476,7 +476,7 @@ class TimberTest {
     tag: String? = null,
     index: Int = 0
   ) {
-    val logs = ShadowLog.getLogs()
+    val logs = getLogs()
     assertThat(logs).hasSize(index + 1)
     val log = logs[index]
     assertThat(log.type).isEqualTo(logType)
@@ -492,9 +492,11 @@ class TimberTest {
   }
 
   private fun assertLog(): LogAssert {
-    return LogAssert(ShadowLog.getLogs())
+    return LogAssert(getLogs())
   }
 
+  private fun getLogs() = ShadowLog.getLogs().filter { it.tag != ROBOLECTRIC_INSTRUMENTATION_TAG }
+
   private inline fun <reified T : Throwable> assertThrows(body: () -> Unit): ThrowableSubject {
     try {
       body()
@@ -546,4 +548,8 @@ class TimberTest {
       assertThat(items).hasSize(index)
     }
   }
+
+  private companion object {
+    private const val ROBOLECTRIC_INSTRUMENTATION_TAG = ""MonitoringInstr""
+  }
 }","@@ -476,7 +476,7 @@ class TimberTest {
     tag: String? = null,
     index: Int = 0
   ) {
-    val logs = ShadowLog.getLogs()
+    val logs = getLogs()
     assertThat(logs).hasSize(index + 1)
     val log = logs[index]
     assertThat(log.type).isEqualTo(logType)
@@ -492,9 +492,11 @@ class TimberTest {
   }
 
   private fun assertLog(): LogAssert {
-    return LogAssert(ShadowLog.getLogs())
+    return LogAssert(getLogs())
   }
 
+  private fun getLogs() = ShadowLog.getLogs().filter { it.tag != ROBOLECTRIC_INSTRUMENTATION_TAG }
+
   private inline fun <reified T : Throwable> assertThrows(body: () -> Unit): ThrowableSubject {
     try {
       body()
@@ -546,4 +548,8 @@ class TimberTest {
       assertThat(items).hasSize(index)
     }
   }
+
+  private companion object {
+    private const val ROBOLECTRIC_INSTRUMENTATION_TAG = ""MonitoringInstr""
+  }
 }",False,test
build.gradle,build.gradle,592eaaef3637a1f6de8c67159feeb8fc167a0dcf,4c28c98ecc6cdef58ba5f8f165e80e13bcf40a2f,"minSdk=14, compileSdk=30, and bump dependencies","@@ -2,8 +2,8 @@ apply plugin: 'com.github.ben-manes.versions'
 
 buildscript {
   ext.versions = [
-      'minSdk': 9,
-      'compileSdk': 28,
+      'minSdk': 14,
+      'compileSdk': 30,
 
       'kotlin': '1.3.21',
 
@@ -23,10 +23,10 @@ buildscript {
           'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
           'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
       ],
-      annotations: 'org.jetbrains:annotations:19.0.0',
+      annotations: 'org.jetbrains:annotations:20.1.0',
 
-      junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.41',
+      junit: 'junit:junit:4.13.2',
+      truth: 'com.google.truth:truth:1.1.2',
       robolectric: 'org.robolectric:robolectric:4.6.1',
   ]
 
@@ -34,14 +34,13 @@ buildscript {
     mavenCentral()
     google()
     gradlePluginPortal()
-    jcenter()
   }
 
   dependencies {
     classpath deps.androidPlugin
     classpath deps.kotlin.plugin
-    classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
-    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.6'
+    classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
+    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.9'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.17.0'
   }
 }
@@ -50,7 +49,6 @@ subprojects {
   repositories {
     mavenCentral()
     google()
-    jcenter()
   }
 
   tasks.withType(Test) {","@@ -2,8 +2,8 @@ apply plugin: 'com.github.ben-manes.versions'
 
 buildscript {
   ext.versions = [
-      'minSdk': 9,
-      'compileSdk': 28,
+      'minSdk': 14,
+      'compileSdk': 30,
 
       'kotlin': '1.3.21',
 
@@ -23,10 +23,10 @@ buildscript {
           'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
           'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
       ],
-      annotations: 'org.jetbrains:annotations:19.0.0',
+      annotations: 'org.jetbrains:annotations:20.1.0',
 
-      junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.41',
+      junit: 'junit:junit:4.13.2',
+      truth: 'com.google.truth:truth:1.1.2',
       robolectric: 'org.robolectric:robolectric:4.6.1',
   ]
 
@@ -34,14 +34,13 @@ buildscript {
     mavenCentral()
     google()
     gradlePluginPortal()
-    jcenter()
   }
 
   dependencies {
     classpath deps.androidPlugin
     classpath deps.kotlin.plugin
-    classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
-    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.6'
+    classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
+    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.9'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.17.0'
   }
 }
@@ -50,7 +49,6 @@ subprojects {
   repositories {
     mavenCentral()
     google()
-    jcenter()
   }
 
   tasks.withType(Test) {",False,other
build.gradle,build.gradle,8cde5c5dc55c3cc20542bfa2f83e66b6bbce3950,45a431b6461e4dada341e9d0783abad970d8ed67,"Update Gradle to 7.1.1, AGP to 7.0.0, and Kotlin to 1.5.21","@@ -5,10 +5,10 @@ buildscript {
       'minSdk': 14,
       'compileSdk': 30,
 
-      'kotlin': '1.3.21',
+      'kotlin': '1.5.21',
 
-      'androidPlugin': '4.0.0',
-      'androidTools': '27.0.0',
+      'androidPlugin': '7.0.0',
+      'androidTools': '30.0.0',
   ]
 
   ext.deps = [","@@ -5,10 +5,10 @@ buildscript {
       'minSdk': 14,
       'compileSdk': 30,
 
-      'kotlin': '1.3.21',
+      'kotlin': '1.5.21',
 
-      'androidPlugin': '4.0.0',
-      'androidTools': '27.0.0',
+      'androidPlugin': '7.0.0',
+      'androidTools': '30.0.0',
   ]
 
   ext.deps = [",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,8cde5c5dc55c3cc20542bfa2f83e66b6bbce3950,45a431b6461e4dada341e9d0783abad970d8ed67,"Update Gradle to 7.1.1, AGP to 7.0.0, and Kotlin to 1.5.21","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.6-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.1.1-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.6-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.1.1-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists",False,other
gradlew,gradlew,8cde5c5dc55c3cc20542bfa2f83e66b6bbce3950,45a431b6461e4dada341e9d0783abad970d8ed67,"Update Gradle to 7.1.1, AGP to 7.0.0, and Kotlin to 1.5.21","@@ -72,7 +72,7 @@ case ""`uname`"" in
   Darwin* )
     darwin=true
     ;;
-  MINGW* )
+  MSYS* | MINGW* )
     msys=true
     ;;
   NONSTOP* )","@@ -72,7 +72,7 @@ case ""`uname`"" in
   Darwin* )
     darwin=true
     ;;
-  MINGW* )
+  MSYS* | MINGW* )
     msys=true
     ;;
   NONSTOP* )",False,other
timber-lint/build.gradle,timber-lint/build.gradle,8cde5c5dc55c3cc20542bfa2f83e66b6bbce3950,45a431b6461e4dada341e9d0783abad970d8ed67,"Update Gradle to 7.1.1, AGP to 7.0.0, and Kotlin to 1.5.21","@@ -1,8 +1,8 @@
 apply plugin: 'java-library'
 apply plugin: 'kotlin'
 
-targetCompatibility = JavaVersion.VERSION_1_7
-sourceCompatibility = JavaVersion.VERSION_1_7
+targetCompatibility = JavaVersion.VERSION_1_8
+sourceCompatibility = JavaVersion.VERSION_1_8
 
 dependencies {
   compileOnly deps.lint.api","@@ -1,8 +1,8 @@
 apply plugin: 'java-library'
 apply plugin: 'kotlin'
 
-targetCompatibility = JavaVersion.VERSION_1_7
-sourceCompatibility = JavaVersion.VERSION_1_7
+targetCompatibility = JavaVersion.VERSION_1_8
+sourceCompatibility = JavaVersion.VERSION_1_8
 
 dependencies {
   compileOnly deps.lint.api",False,other
,timber-lint/gradle.properties,8cde5c5dc55c3cc20542bfa2f83e66b6bbce3950,45a431b6461e4dada341e9d0783abad970d8ed67,"Update Gradle to 7.1.1, AGP to 7.0.0, and Kotlin to 1.5.21","@@ -0,0 +1,3 @@
+# needed so that :timber:prepareLintJarForPublish can succeed
+# Remove when the bug described in https://issuetracker.google.com/issues/161727305 is fixed
+kotlin.stdlib.default.dependency=false","@@ -0,0 +1,3 @@
+# needed so that :timber:prepareLintJarForPublish can succeed
+# Remove when the bug described in https://issuetracker.google.com/issues/161727305 is fixed
+kotlin.stdlib.default.dependency=false",False,other
timber-sample/build.gradle,timber-sample/build.gradle,8cde5c5dc55c3cc20542bfa2f83e66b6bbce3950,45a431b6461e4dada341e9d0783abad970d8ed67,"Update Gradle to 7.1.1, AGP to 7.0.0, and Kotlin to 1.5.21","@@ -4,8 +4,8 @@ android {
   compileSdkVersion versions.compileSdk
 
   compileOptions {
-    sourceCompatibility JavaVersion.VERSION_1_7
-    targetCompatibility JavaVersion.VERSION_1_7
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
   }
 
   buildFeatures {","@@ -4,8 +4,8 @@ android {
   compileSdkVersion versions.compileSdk
 
   compileOptions {
-    sourceCompatibility JavaVersion.VERSION_1_7
-    targetCompatibility JavaVersion.VERSION_1_7
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
   }
 
   buildFeatures {",False,other
timber-lint/build.gradle,timber-lint/build.gradle,fe5869b8d8bdecdb37d43e95a6c007f06c055c83,3c773ee9898e0013385e553f0935deed292ee61a,"Fix some issues with the lint detector

  - The tag length check was looking at minSdk <= 23 but the docs say that it applies until API 26
    - https://developer.android.com/reference/android/util/Log#isLoggable(java.lang.String,%20int)","@@ -9,6 +9,7 @@ dependencies {
   compileOnly deps.lint.checks
   testImplementation deps.lint.core
   testImplementation deps.lint.tests
+  testImplementation deps.junit
 }
 
 jar {","@@ -9,6 +9,7 @@ dependencies {
   compileOnly deps.lint.checks
   testImplementation deps.lint.core
   testImplementation deps.lint.tests
+  testImplementation deps.junit
 }
 
 jar {",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,fe5869b8d8bdecdb37d43e95a6c007f06c055c83,3c773ee9898e0013385e553f0935deed292ee61a,"Fix some issues with the lint detector

  - The tag length check was looking at minSdk <= 23 but the docs say that it applies until API 26
    - https://developer.android.com/reference/android/util/Log#isLoggable(java.lang.String,%20int)","@@ -7,10 +7,10 @@ import com.android.tools.lint.client.api.JavaEvaluator;
 import com.android.tools.lint.detector.api.Category;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
+import com.android.tools.lint.detector.api.Incident;
 import com.android.tools.lint.detector.api.Issue;
 import com.android.tools.lint.detector.api.JavaContext;
 import com.android.tools.lint.detector.api.LintFix;
-import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.intellij.psi.PsiClass;
@@ -27,6 +27,7 @@ import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import org.jetbrains.uast.UBinaryExpression;
@@ -53,9 +54,13 @@ import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_STRING;
 import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
+import static com.android.tools.lint.detector.api.Constraints.minSdkLessThan;
+import static com.android.tools.lint.detector.api.Lint.isKotlin;
+import static com.android.tools.lint.detector.api.Lint.isString;
+import static com.android.tools.lint.detector.api.Lint.skipParentheses;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS_ASSIGN;
-import static org.jetbrains.uast.UastLiteralUtils.isStringLiteral;
+import static org.jetbrains.uast.UastLiteralUtils.isInjectionHost;
 import static org.jetbrains.uast.UastUtils.evaluateString;
 
 public final class WrongTimberUsageDetector extends Detector implements Detector.UastScanner {
@@ -66,7 +71,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
   }
 
-  @Override public void visitMethod(JavaContext context, UCallExpression call, PsiMethod method) {
+  @Override public void visitMethodCall(JavaContext context, UCallExpression call, PsiMethod method) {
     String methodName = call.getMethodName();
     JavaEvaluator evaluator = context.getEvaluator();
 
@@ -74,10 +79,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       checkNestedStringFormat(context, call);
       return;
     }
-    // As of API 24, Log tags are no longer limited to 23 chars.
+    // As of API 26, Log tags are no longer limited to 23 chars.
     if (""tag"".equals(methodName)
         && evaluator.isMemberInClass(method, ""timber.log.Timber"")
-        && context.getMainProject().getMinSdk() <= 23) {
+        && context.getProject().getMinSdk() <= 25) {
       checkTagLength(context, call);
       return;
     }
@@ -104,7 +109,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   private void checkNestedStringFormat(JavaContext context, UCallExpression call) {
     UElement current = call;
     while (true) {
-      current = LintUtils.skipParentheses(current.getUastParent());
+      current = skipParentheses(current.getUastParent());
       if (current == null || current instanceof UMethod) {
         // Reached AST root or code block node; String.format not inside Timber.X(..).
         return;
@@ -130,10 +135,18 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     String tag = evaluateString(context, argument, true);
     if (tag != null && tag.length() > 23) {
       String message =
-          String.format(""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
+          String.format(Locale.US, ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
               tag.length(), tag);
       LintFix fix = quickFixIssueTagLength(argument, tag);
-      context.report(ISSUE_TAG_LENGTH, argument, context.getLocation(argument), message, fix);
+      context.report(
+          new Incident(
+              ISSUE_TAG_LENGTH,
+              argument,
+              context.getLocation(argument),
+              message,
+              fix
+          ), minSdkLessThan(26)
+      );
     }
   }
 
@@ -164,7 +177,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     int passedArgCount = numArguments - startIndexOfArguments;
     if (formatArgumentCount < passedArgCount) {
       context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
-          ""Wrong argument count, format string `%1$s` requires ""
+          Locale.US, ""Wrong argument count, format string `%1$s` requires ""
               + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
           passedArgCount));
       return;
@@ -184,7 +197,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         argument = arguments.get(argumentIndex++);
       } else {
         context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
-            ""Wrong argument count, format string `%1$s` requires ""
+            Locale.US, ""Wrong argument count, format string `%1$s` requires ""
                 + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
             passedArgCount));
       }
@@ -237,7 +250,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
                 || type == Long.TYPE;
             if (!valid) {
               String message = String.format(
-                  ""Wrong argument type for date formatting argument '#%1$d' ""
+                  Locale.US, ""Wrong argument type for date formatting argument '#%1$d' ""
                       + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
                       + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
                   type.getSimpleName(), startIndexOfArguments + i + 1);
@@ -245,7 +258,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
             }
             break;
           default:
-            String message = String.format(""Wrong suffix for date format '#%1$d' ""
+            String message = String.format(Locale.US, ""Wrong suffix for date format '#%1$d' ""
                     + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
                     + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
                 type.getSimpleName(), startIndexOfArguments + i + 1);
@@ -290,7 +303,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
           valid = true;
       }
       if (!valid) {
-        String message = String.format(""Wrong argument type for formatting argument '#%1$d' ""
+        String message = String.format(Locale.US, ""Wrong argument type for formatting argument '#%1$d' ""
                 + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
                 + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
             type.getSimpleName(), startIndexOfArguments + i + 1);
@@ -316,7 +329,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     } else if (expression instanceof PsiLiteralExpression) {
       PsiLiteralExpression literalExpression = (PsiLiteralExpression) expression;
       PsiType expressionType = literalExpression.getType();
-      if (LintUtils.isString(expressionType)) {
+      if (isString(expressionType)) {
         return String.class;
       } else if (expressionType == PsiType.INT) {
         return Integer.TYPE;
@@ -552,9 +565,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
 
     UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
-    PsiElement psi = argExpression.getPsi();
+    PsiElement psi = argExpression.getSourcePsi();
 
-    if (psi != null && LintUtils.isKotlin(psi.getLanguage())) {
+    if (psi != null && isKotlin(psi.getLanguage())) {
       return isPropertyOnSubclassOf(context, argExpression, ""message"", Throwable.class);
     }
 
@@ -603,8 +616,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       if (operator == PLUS || operator == PLUS_ASSIGN) {
         Class argumentType = getType(binaryExpression);
         if (argumentType == String.class) {
-          if (isStringLiteral(binaryExpression.getLeftOperand())
-                  && isStringLiteral(binaryExpression.getRightOperand())) {
+          if (isInjectionHost(binaryExpression.getLeftOperand())
+                  && isInjectionHost(binaryExpression.getRightOperand())) {
             return false;
           }
           LintFix fix = quickFixIssueBinary(binaryExpression);
@@ -701,8 +714,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   private LintFix quickFixIssueBinary(UBinaryExpression binaryExpression) {
     UExpression leftOperand = binaryExpression.getLeftOperand();
     UExpression rightOperand = binaryExpression.getRightOperand();
-    boolean isLeftLiteral = isStringLiteral(leftOperand);
-    boolean isRightLiteral = isStringLiteral(rightOperand);
+    boolean isLeftLiteral = isInjectionHost(leftOperand);
+    boolean isRightLiteral = isInjectionHost(rightOperand);
 
     // ""a"" + ""b"" => ""ab""
     if (isLeftLiteral && isRightLiteral) {","@@ -7,10 +7,10 @@ import com.android.tools.lint.client.api.JavaEvaluator;
 import com.android.tools.lint.detector.api.Category;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
+import com.android.tools.lint.detector.api.Incident;
 import com.android.tools.lint.detector.api.Issue;
 import com.android.tools.lint.detector.api.JavaContext;
 import com.android.tools.lint.detector.api.LintFix;
-import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.intellij.psi.PsiClass;
@@ -27,6 +27,7 @@ import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import org.jetbrains.uast.UBinaryExpression;
@@ -53,9 +54,13 @@ import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_OBJECT;
 import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_SHORT;
 import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_STRING;
 import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
+import static com.android.tools.lint.detector.api.Constraints.minSdkLessThan;
+import static com.android.tools.lint.detector.api.Lint.isKotlin;
+import static com.android.tools.lint.detector.api.Lint.isString;
+import static com.android.tools.lint.detector.api.Lint.skipParentheses;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS;
 import static org.jetbrains.uast.UastBinaryOperator.PLUS_ASSIGN;
-import static org.jetbrains.uast.UastLiteralUtils.isStringLiteral;
+import static org.jetbrains.uast.UastLiteralUtils.isInjectionHost;
 import static org.jetbrains.uast.UastUtils.evaluateString;
 
 public final class WrongTimberUsageDetector extends Detector implements Detector.UastScanner {
@@ -66,7 +71,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
   }
 
-  @Override public void visitMethod(JavaContext context, UCallExpression call, PsiMethod method) {
+  @Override public void visitMethodCall(JavaContext context, UCallExpression call, PsiMethod method) {
     String methodName = call.getMethodName();
     JavaEvaluator evaluator = context.getEvaluator();
 
@@ -74,10 +79,10 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       checkNestedStringFormat(context, call);
       return;
     }
-    // As of API 24, Log tags are no longer limited to 23 chars.
+    // As of API 26, Log tags are no longer limited to 23 chars.
     if (""tag"".equals(methodName)
         && evaluator.isMemberInClass(method, ""timber.log.Timber"")
-        && context.getMainProject().getMinSdk() <= 23) {
+        && context.getProject().getMinSdk() <= 25) {
       checkTagLength(context, call);
       return;
     }
@@ -104,7 +109,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   private void checkNestedStringFormat(JavaContext context, UCallExpression call) {
     UElement current = call;
     while (true) {
-      current = LintUtils.skipParentheses(current.getUastParent());
+      current = skipParentheses(current.getUastParent());
       if (current == null || current instanceof UMethod) {
         // Reached AST root or code block node; String.format not inside Timber.X(..).
         return;
@@ -130,10 +135,18 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     String tag = evaluateString(context, argument, true);
     if (tag != null && tag.length() > 23) {
       String message =
-          String.format(""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
+          String.format(Locale.US, ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
               tag.length(), tag);
       LintFix fix = quickFixIssueTagLength(argument, tag);
-      context.report(ISSUE_TAG_LENGTH, argument, context.getLocation(argument), message, fix);
+      context.report(
+          new Incident(
+              ISSUE_TAG_LENGTH,
+              argument,
+              context.getLocation(argument),
+              message,
+              fix
+          ), minSdkLessThan(26)
+      );
     }
   }
 
@@ -164,7 +177,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     int passedArgCount = numArguments - startIndexOfArguments;
     if (formatArgumentCount < passedArgCount) {
       context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
-          ""Wrong argument count, format string `%1$s` requires ""
+          Locale.US, ""Wrong argument count, format string `%1$s` requires ""
               + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
           passedArgCount));
       return;
@@ -184,7 +197,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
         argument = arguments.get(argumentIndex++);
       } else {
         context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
-            ""Wrong argument count, format string `%1$s` requires ""
+            Locale.US, ""Wrong argument count, format string `%1$s` requires ""
                 + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
             passedArgCount));
       }
@@ -237,7 +250,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
                 || type == Long.TYPE;
             if (!valid) {
               String message = String.format(
-                  ""Wrong argument type for date formatting argument '#%1$d' ""
+                  Locale.US, ""Wrong argument type for date formatting argument '#%1$d' ""
                       + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
                       + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
                   type.getSimpleName(), startIndexOfArguments + i + 1);
@@ -245,7 +258,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
             }
             break;
           default:
-            String message = String.format(""Wrong suffix for date format '#%1$d' ""
+            String message = String.format(Locale.US, ""Wrong suffix for date format '#%1$d' ""
                     + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
                     + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
                 type.getSimpleName(), startIndexOfArguments + i + 1);
@@ -290,7 +303,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
           valid = true;
       }
       if (!valid) {
-        String message = String.format(""Wrong argument type for formatting argument '#%1$d' ""
+        String message = String.format(Locale.US, ""Wrong argument type for formatting argument '#%1$d' ""
                 + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
                 + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
             type.getSimpleName(), startIndexOfArguments + i + 1);
@@ -316,7 +329,7 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     } else if (expression instanceof PsiLiteralExpression) {
       PsiLiteralExpression literalExpression = (PsiLiteralExpression) expression;
       PsiType expressionType = literalExpression.getType();
-      if (LintUtils.isString(expressionType)) {
+      if (isString(expressionType)) {
         return String.class;
       } else if (expressionType == PsiType.INT) {
         return Integer.TYPE;
@@ -552,9 +565,9 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
     }
 
     UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
-    PsiElement psi = argExpression.getPsi();
+    PsiElement psi = argExpression.getSourcePsi();
 
-    if (psi != null && LintUtils.isKotlin(psi.getLanguage())) {
+    if (psi != null && isKotlin(psi.getLanguage())) {
       return isPropertyOnSubclassOf(context, argExpression, ""message"", Throwable.class);
     }
 
@@ -603,8 +616,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
       if (operator == PLUS || operator == PLUS_ASSIGN) {
         Class argumentType = getType(binaryExpression);
         if (argumentType == String.class) {
-          if (isStringLiteral(binaryExpression.getLeftOperand())
-                  && isStringLiteral(binaryExpression.getRightOperand())) {
+          if (isInjectionHost(binaryExpression.getLeftOperand())
+                  && isInjectionHost(binaryExpression.getRightOperand())) {
             return false;
           }
           LintFix fix = quickFixIssueBinary(binaryExpression);
@@ -701,8 +714,8 @@ public final class WrongTimberUsageDetector extends Detector implements Detector
   private LintFix quickFixIssueBinary(UBinaryExpression binaryExpression) {
     UExpression leftOperand = binaryExpression.getLeftOperand();
     UExpression rightOperand = binaryExpression.getRightOperand();
-    boolean isLeftLiteral = isStringLiteral(leftOperand);
-    boolean isRightLiteral = isStringLiteral(rightOperand);
+    boolean isLeftLiteral = isInjectionHost(leftOperand);
+    boolean isRightLiteral = isInjectionHost(rightOperand);
 
     // ""a"" + ""b"" => ""ab""
     if (isLeftLiteral && isRightLiteral) {",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,fe5869b8d8bdecdb37d43e95a6c007f06c055c83,3c773ee9898e0013385e553f0935deed292ee61a,"Fix some issues with the lint detector

  - The tag length check was looking at minSdk <= 23 but the docs say that it applies until API 26
    - https://developer.android.com/reference/android/util/Log#isLoggable(java.lang.String,%20int)","@@ -34,6 +34,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -65,6 +66,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -125,6 +127,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -156,6 +159,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -184,6 +188,8 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
+        .allowCompilationErrors()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -212,6 +218,7 @@ class WrongTimberUsageDetectorTest {
                 |  private String id(String s) { return s; }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -234,6 +241,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -257,6 +265,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -273,6 +282,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -287,6 +297,7 @@ class WrongTimberUsageDetectorTest {
                 |  static String[] X = { String.format(""%s"", 100) };
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -305,6 +316,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
         .run()
         .expect(""""""
@@ -330,7 +342,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""foo"" + ""bar"");
                 |  }
-                |}"""""".trimMargin()))
+                |}"""""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expectClean()
@@ -347,7 +361,9 @@ class WrongTimberUsageDetectorTest {
                 |     String foo = ""foo"";
                 |     Timber.d(foo + ""bar"");
                 |  }
-                |}"""""".trimMargin()))
+                |}"""""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -374,7 +390,9 @@ class WrongTimberUsageDetectorTest {
                 |     String bar = ""bar"";
                 |     Timber.d(""foo"" + bar);
                 |  }
-                |}"""""".trimMargin()))
+                |}"""""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -402,7 +420,9 @@ class WrongTimberUsageDetectorTest {
                 |     String bar = ""bar"";
                 |     Timber.d(foo + bar);
                 |  }
-                |}"""""".trimMargin()))
+                |}"""""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -431,6 +451,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -452,6 +473,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -473,6 +495,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -494,6 +517,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expect(""""""
@@ -513,8 +537,10 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
-                |}"""""".trimMargin())
+                |}"""""".trimMargin()),
+                manifest().minSdk(25)
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expect(""""""
@@ -535,8 +561,10 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
                 |  }
-                |}"""""".trimMargin())
+                |}"""""".trimMargin()),
+                manifest().minSdk(25)
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expect(""""""
@@ -546,7 +574,7 @@ class WrongTimberUsageDetectorTest {
             |1 errors, 0 warnings"""""".trimMargin())
   }
 
-  @Test fun tagTooLongLiteralOnlyAfterApi23() {
+  @Test fun tagTooLongLiteralOnlyBeforeApi26() {
     lint()
         .files(TIMBER_STUB,
             java(""""""
@@ -557,13 +585,34 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
                 |}"""""".trimMargin()),
-            manifest().minSdk(24)
+            manifest().minSdk(26)
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expectClean()
   }
 
+    @Test fun tagTooLongLiteralPlusFieldOnlyBeforeApi26() {
+        lint()
+            .files(TIMBER_STUB,
+                java(""""""
+                    |package foo;
+                    |import timber.log.Timber;
+                    |public class Example {
+                    |  private final String field = ""x"";
+                    |  public void log() {
+                    |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
+                    |  }
+                    |}"""""".trimMargin()),
+                    manifest().minSdk(26)
+                )
+                .allowMissingSdk()
+                .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+                .run()
+                .expectClean()
+    }
+
   @Test fun tooManyFormatArgsInTag() {
     lint()
         .files(TIMBER_STUB,
@@ -576,6 +625,8 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
+
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -597,6 +648,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -618,6 +670,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expect(""""""
@@ -640,6 +693,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -668,6 +722,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -695,7 +750,9 @@ class WrongTimberUsageDetectorTest {
               |     Timber.d(e, e.message)
               |  }
               |}
-              """""".trimMargin()))
+              """""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -725,6 +782,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -742,6 +800,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -762,6 +821,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -781,6 +841,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -800,6 +861,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -818,6 +880,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -846,6 +909,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -874,6 +938,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -891,6 +956,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -908,6 +974,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -923,7 +990,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%b"", Boolean.valueOf(true));
                 |  }
-                |}"""""".trimMargin()))
+                |}"""""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -944,9 +1013,12 @@ class WrongTimberUsageDetectorTest {
                 |    Timber.d(bar.baz);
                 |  }
                 |}
-                """""".trimMargin()))
+                """""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
   }
 }
+","@@ -34,6 +34,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -65,6 +66,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -125,6 +127,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -156,6 +159,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -184,6 +188,8 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
+        .allowCompilationErrors()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -212,6 +218,7 @@ class WrongTimberUsageDetectorTest {
                 |  private String id(String s) { return s; }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -234,6 +241,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -257,6 +265,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -273,6 +282,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -287,6 +297,7 @@ class WrongTimberUsageDetectorTest {
                 |  static String[] X = { String.format(""%s"", 100) };
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -305,6 +316,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
         .run()
         .expect(""""""
@@ -330,7 +342,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""foo"" + ""bar"");
                 |  }
-                |}"""""".trimMargin()))
+                |}"""""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expectClean()
@@ -347,7 +361,9 @@ class WrongTimberUsageDetectorTest {
                 |     String foo = ""foo"";
                 |     Timber.d(foo + ""bar"");
                 |  }
-                |}"""""".trimMargin()))
+                |}"""""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -374,7 +390,9 @@ class WrongTimberUsageDetectorTest {
                 |     String bar = ""bar"";
                 |     Timber.d(""foo"" + bar);
                 |  }
-                |}"""""".trimMargin()))
+                |}"""""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -402,7 +420,9 @@ class WrongTimberUsageDetectorTest {
                 |     String bar = ""bar"";
                 |     Timber.d(foo + bar);
                 |  }
-                |}"""""".trimMargin()))
+                |}"""""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -431,6 +451,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -452,6 +473,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -473,6 +495,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -494,6 +517,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expect(""""""
@@ -513,8 +537,10 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
-                |}"""""".trimMargin())
+                |}"""""".trimMargin()),
+                manifest().minSdk(25)
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expect(""""""
@@ -535,8 +561,10 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
                 |  }
-                |}"""""".trimMargin())
+                |}"""""".trimMargin()),
+                manifest().minSdk(25)
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expect(""""""
@@ -546,7 +574,7 @@ class WrongTimberUsageDetectorTest {
             |1 errors, 0 warnings"""""".trimMargin())
   }
 
-  @Test fun tagTooLongLiteralOnlyAfterApi23() {
+  @Test fun tagTooLongLiteralOnlyBeforeApi26() {
     lint()
         .files(TIMBER_STUB,
             java(""""""
@@ -557,13 +585,34 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
                 |}"""""".trimMargin()),
-            manifest().minSdk(24)
+            manifest().minSdk(26)
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expectClean()
   }
 
+    @Test fun tagTooLongLiteralPlusFieldOnlyBeforeApi26() {
+        lint()
+            .files(TIMBER_STUB,
+                java(""""""
+                    |package foo;
+                    |import timber.log.Timber;
+                    |public class Example {
+                    |  private final String field = ""x"";
+                    |  public void log() {
+                    |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
+                    |  }
+                    |}"""""".trimMargin()),
+                    manifest().minSdk(26)
+                )
+                .allowMissingSdk()
+                .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+                .run()
+                .expectClean()
+    }
+
   @Test fun tooManyFormatArgsInTag() {
     lint()
         .files(TIMBER_STUB,
@@ -576,6 +625,8 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
+
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -597,6 +648,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -618,6 +670,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expect(""""""
@@ -640,6 +693,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -668,6 +722,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -695,7 +750,9 @@ class WrongTimberUsageDetectorTest {
               |     Timber.d(e, e.message)
               |  }
               |}
-              """""".trimMargin()))
+              """""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -725,6 +782,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -742,6 +800,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -762,6 +821,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -781,6 +841,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -800,6 +861,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -818,6 +880,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -846,6 +909,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -874,6 +938,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -891,6 +956,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -908,6 +974,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -923,7 +990,9 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%b"", Boolean.valueOf(true));
                 |  }
-                |}"""""".trimMargin()))
+                |}"""""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -944,9 +1013,12 @@ class WrongTimberUsageDetectorTest {
                 |    Timber.d(bar.baz);
                 |  }
                 |}
-                """""".trimMargin()))
+                """""".trimMargin())
+        )
+        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
   }
 }
+",False,test
,.github/dependabot.yaml,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -0,0 +1,7 @@
+version: 2
+
+updates:
+  - package-ecosystem: ""github-actions""
+    directory: ""/""
+    schedule:
+      interval: ""daily""","@@ -0,0 +1,7 @@
+version: 2
+
+updates:
+  - package-ecosystem: ""github-actions""
+    directory: ""/""
+    schedule:
+      interval: ""daily""",False,other
,.github/workflows/build.yaml,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -0,0 +1,40 @@
+name: build
+
+on:
+  pull_request: {}
+  push:
+    branches:
+      - '**'
+    tags-ignore:
+      - '**'
+
+jobs:
+  build:
+    runs-on: ubuntu-latest
+
+    steps:
+      - uses: actions/checkout@v2.3.4
+      - uses: gradle/wrapper-validation-action@v1
+
+      - uses: actions/setup-java@v2
+        with:
+          distribution: 'zulu'
+          java-version: 11
+
+      - run: ./gradlew build dokkaHtml
+
+      - run: ./gradlew publish
+        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}
+        env:
+          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
+          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
+
+      - name: Deploy docs to website
+        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}
+        uses: JamesIves/github-pages-deploy-action@releases/v3
+        with:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+          BRANCH: site
+          FOLDER: timber/build/dokka/html/
+          TARGET_FOLDER: docs/latest/
+          CLEAN: true","@@ -0,0 +1,40 @@
+name: build
+
+on:
+  pull_request: {}
+  push:
+    branches:
+      - '**'
+    tags-ignore:
+      - '**'
+
+jobs:
+  build:
+    runs-on: ubuntu-latest
+
+    steps:
+      - uses: actions/checkout@v2.3.4
+      - uses: gradle/wrapper-validation-action@v1
+
+      - uses: actions/setup-java@v2
+        with:
+          distribution: 'zulu'
+          java-version: 11
+
+      - run: ./gradlew build dokkaHtml
+
+      - run: ./gradlew publish
+        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}
+        env:
+          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
+          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
+
+      - name: Deploy docs to website
+        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}
+        uses: JamesIves/github-pages-deploy-action@releases/v3
+        with:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+          BRANCH: site
+          FOLDER: timber/build/dokka/html/
+          TARGET_FOLDER: docs/latest/
+          CLEAN: true",False,other
,.github/workflows/release.yaml,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -0,0 +1,47 @@
+name: release
+
+on:
+  push:
+    tags:
+      - '**'
+
+jobs:
+  release:
+    runs-on: ubuntu-latest
+
+    steps:
+      - uses: actions/checkout@v2.3.4
+
+      - uses: actions/setup-java@v2
+        with:
+          distribution: 'zulu'
+          java-version: 11
+
+# TODO!
+#      - run: ./gradlew -p mosaic publish
+#        env:
+#          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
+#          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
+#          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}
+
+      - name: Extract release notes
+        id: release_notes
+        uses: ffurrer2/extract-release-notes@v1
+
+      - name: Create release
+        uses: softprops/action-gh-release@v1
+        with:
+          body: ${{ steps.release_notes.outputs.release_notes }}
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+
+      - run: ./gradlew dokkaHtml
+
+      - name: Deploy docs to website
+        uses: JamesIves/github-pages-deploy-action@releases/v3
+        with:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+          BRANCH: site
+          FOLDER: timber/build/dokka/html/
+          TARGET_FOLDER: docs/4.x/
+          CLEAN: true","@@ -0,0 +1,47 @@
+name: release
+
+on:
+  push:
+    tags:
+      - '**'
+
+jobs:
+  release:
+    runs-on: ubuntu-latest
+
+    steps:
+      - uses: actions/checkout@v2.3.4
+
+      - uses: actions/setup-java@v2
+        with:
+          distribution: 'zulu'
+          java-version: 11
+
+# TODO!
+#      - run: ./gradlew -p mosaic publish
+#        env:
+#          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
+#          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
+#          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}
+
+      - name: Extract release notes
+        id: release_notes
+        uses: ffurrer2/extract-release-notes@v1
+
+      - name: Create release
+        uses: softprops/action-gh-release@v1
+        with:
+          body: ${{ steps.release_notes.outputs.release_notes }}
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+
+      - run: ./gradlew dokkaHtml
+
+      - name: Deploy docs to website
+        uses: JamesIves/github-pages-deploy-action@releases/v3
+        with:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+          BRANCH: site
+          FOLDER: timber/build/dokka/html/
+          TARGET_FOLDER: docs/4.x/
+          CLEAN: true",False,other
.travis.yml,,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -1,29 +0,0 @@
-language: android
-
-before_install:
-  - mkdir ""$ANDROID_HOME/licenses"" || true
-  - echo ""24333f8a63b6825ea9c5514f83c2829b004d1fee"" > ""$ANDROID_HOME/licenses/android-sdk-license""
-
-jdk:
-  - oraclejdk8
-
-after_success:
-  - .buildscript/deploy_snapshot.sh
-
-env:
-  global:
-    - secure: ""TayWqFgdWrVI75qdHlrqaZV5MB55r+L5NnLRydIdjGUpq/jLBCaZOCrk4jN47kJMRjQaJvO3tHFQGVZernh7hqCeMGjdhj40VEEVX5edOetUrNhKGl3Jsr/snZweFGHD0tQl8A727k8jh9gA6/YvrWi32aTZet2YC/DkAxlCtsM=""
-    - secure: ""rcsOFJbjcpMihb8Zv0h/VMNjGXBbogPKoQMUmg1LUvO63KvdBaJlRhsjUNBxoUsPKRlMroJ2yhusjfqfSvaoKXbzV/PbyyEJitk7+MSIVvtjuJP55lGjG2jTilvIBQ2jNYO0WZFrFFslT2akiTuTwH3G95XAhrg7dSWWrHDoYyU=""
-
-branches:
-  except:
-    - gh-pages
-
-notifications:
-  email: false
-
-sudo: false
-
-cache:
-  directories:
-    - $HOME/.m2","@@ -1,29 +0,0 @@
-language: android
-
-before_install:
-  - mkdir ""$ANDROID_HOME/licenses"" || true
-  - echo ""24333f8a63b6825ea9c5514f83c2829b004d1fee"" > ""$ANDROID_HOME/licenses/android-sdk-license""
-
-jdk:
-  - oraclejdk8
-
-after_success:
-  - .buildscript/deploy_snapshot.sh
-
-env:
-  global:
-    - secure: ""TayWqFgdWrVI75qdHlrqaZV5MB55r+L5NnLRydIdjGUpq/jLBCaZOCrk4jN47kJMRjQaJvO3tHFQGVZernh7hqCeMGjdhj40VEEVX5edOetUrNhKGl3Jsr/snZweFGHD0tQl8A727k8jh9gA6/YvrWi32aTZet2YC/DkAxlCtsM=""
-    - secure: ""rcsOFJbjcpMihb8Zv0h/VMNjGXBbogPKoQMUmg1LUvO63KvdBaJlRhsjUNBxoUsPKRlMroJ2yhusjfqfSvaoKXbzV/PbyyEJitk7+MSIVvtjuJP55lGjG2jTilvIBQ2jNYO0WZFrFFslT2akiTuTwH3G95XAhrg7dSWWrHDoYyU=""
-
-branches:
-  except:
-    - gh-pages
-
-notifications:
-  email: false
-
-sudo: false
-
-cache:
-  directories:
-    - $HOME/.m2",False,other
build.gradle,build.gradle,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -41,7 +41,8 @@ buildscript {
     classpath deps.kotlin.plugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.9'
-    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.17.0'
+    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
+    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.4.32'
   }
 }","@@ -41,7 +41,8 @@ buildscript {
     classpath deps.kotlin.plugin
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.9'
-    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.17.0'
+    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
+    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.4.32'
   }
 }",False,other
deploy_javadoc.sh,,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -1,41 +0,0 @@
-#!/bin/bash
-
-set -ex
-
-REPO=""git@github.com:JakeWharton/timber.git""
-GROUP_ID=""com.jakewharton.timber""
-ARTIFACT_ID=""timber""
-
-DIR=temp-clone
-
-# Delete any existing temporary website clone
-rm -rf $DIR
-
-# Clone the current repo into temp folder
-git clone $REPO $DIR
-
-# Move working directory into temp folder
-cd $DIR
-
-# Checkout and track the gh-pages branch
-git checkout -t origin/gh-pages
-
-# Delete everything
-rm -rf *
-
-# Download the latest javadoc
-curl -L ""http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=LATEST&c=javadoc"" > javadoc.zip
-unzip javadoc.zip
-rm javadoc.zip
-
-# Stage all files in git and create a commit
-git add .
-git add -u
-git commit -m ""Website at $(date)""
-
-# Push the new files up to GitHub
-git push origin gh-pages
-
-# Delete our temp folder
-cd ..
-rm -rf $DIR","@@ -1,41 +0,0 @@
-#!/bin/bash
-
-set -ex
-
-REPO=""git@github.com:JakeWharton/timber.git""
-GROUP_ID=""com.jakewharton.timber""
-ARTIFACT_ID=""timber""
-
-DIR=temp-clone
-
-# Delete any existing temporary website clone
-rm -rf $DIR
-
-# Clone the current repo into temp folder
-git clone $REPO $DIR
-
-# Move working directory into temp folder
-cd $DIR
-
-# Checkout and track the gh-pages branch
-git checkout -t origin/gh-pages
-
-# Delete everything
-rm -rf *
-
-# Download the latest javadoc
-curl -L ""http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=LATEST&c=javadoc"" > javadoc.zip
-unzip javadoc.zip
-rm javadoc.zip
-
-# Stage all files in git and create a commit
-git add .
-git add -u
-git commit -m ""Website at $(date)""
-
-# Push the new files up to GitHub
-git push origin gh-pages
-
-# Delete our temp folder
-cd ..
-rm -rf $DIR",False,other
gradle.properties,gradle.properties,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -1,4 +1,6 @@
 GROUP=com.jakewharton.timber
+
+# HEY! If you change the major version here be sure to update release.yaml doc target folder!
 VERSION_NAME=4.8.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.
@@ -19,3 +21,9 @@ org.gradle.jvmargs=-Xmx1536M
 
 android.useAndroidX=true
 android.enableJetifier=false
+
+android.defaults.buildfeatures.buildconfig=false
+android.defaults.buildfeatures.aidl=false
+android.defaults.buildfeatures.renderscript=false
+android.defaults.buildfeatures.resvalues=false
+android.defaults.buildfeatures.shaders=false","@@ -1,4 +1,6 @@
 GROUP=com.jakewharton.timber
+
+# HEY! If you change the major version here be sure to update release.yaml doc target folder!
 VERSION_NAME=4.8.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.
@@ -19,3 +21,9 @@ org.gradle.jvmargs=-Xmx1536M
 
 android.useAndroidX=true
 android.enableJetifier=false
+
+android.defaults.buildfeatures.buildconfig=false
+android.defaults.buildfeatures.aidl=false
+android.defaults.buildfeatures.renderscript=false
+android.defaults.buildfeatures.resvalues=false
+android.defaults.buildfeatures.shaders=false",False,other
timber-lint/build.gradle,timber-lint/build.gradle,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -7,6 +7,8 @@ sourceCompatibility = JavaVersion.VERSION_1_8
 dependencies {
   compileOnly deps.lint.api
   compileOnly deps.lint.checks
+
+  testImplementation deps.junit
   testImplementation deps.lint.core
   testImplementation deps.lint.tests
   testImplementation deps.junit","@@ -7,6 +7,8 @@ sourceCompatibility = JavaVersion.VERSION_1_8
 dependencies {
   compileOnly deps.lint.api
   compileOnly deps.lint.checks
+
+  testImplementation deps.junit
   testImplementation deps.lint.core
   testImplementation deps.lint.tests
   testImplementation deps.junit",False,other
timber-sample/build.gradle,timber-sample/build.gradle,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -3,12 +3,8 @@ apply plugin: 'com.android.application'
 android {
   compileSdkVersion versions.compileSdk
 
-  compileOptions {
-    sourceCompatibility JavaVersion.VERSION_1_8
-    targetCompatibility JavaVersion.VERSION_1_8
-  }
-
   buildFeatures {
+    buildConfig = true
     viewBinding = true
   }","@@ -3,12 +3,8 @@ apply plugin: 'com.android.application'
 android {
   compileSdkVersion versions.compileSdk
 
-  compileOptions {
-    sourceCompatibility JavaVersion.VERSION_1_8
-    targetCompatibility JavaVersion.VERSION_1_8
-  }
-
   buildFeatures {
+    buildConfig = true
     viewBinding = true
   }",False,other
timber-sample/src/main/AndroidManifest.xml,timber-sample/src/main/AndroidManifest.xml,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -11,7 +11,8 @@
       tools:ignore=""GoogleAppIndexingWarning,MissingApplicationIcon"">
     <activity
         android:label=""@string/app_name""
-        android:name="".ui.DemoActivity"">
+        android:name="".ui.DemoActivity""
+        android:exported=""true"">
       <intent-filter>
         <action android:name=""android.intent.action.MAIN""/>
         <category android:name=""android.intent.category.LAUNCHER""/>","@@ -11,7 +11,8 @@
       tools:ignore=""GoogleAppIndexingWarning,MissingApplicationIcon"">
     <activity
         android:label=""@string/app_name""
-        android:name="".ui.DemoActivity"">
+        android:name="".ui.DemoActivity""
+        android:exported=""true"">
       <intent-filter>
         <action android:name=""android.intent.action.MAIN""/>
         <category android:name=""android.intent.category.LAUNCHER""/>",False,source
timber/build.gradle,timber/build.gradle,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -1,6 +1,7 @@
 apply plugin: 'com.android.library'
 apply plugin: 'org.jetbrains.kotlin.android'
 apply plugin: 'com.vanniktech.maven.publish'
+apply plugin: 'org.jetbrains.dokka' // Must be applied here for publish plugin.
 
 android {
   compileSdkVersion versions.compileSdk
@@ -14,12 +15,6 @@ android {
     textReport true
     textOutput 'stdout'
   }
-
-  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
-  libraryVariants.all {
-    // TODO re-enable once https://issuetracker.google.com/issues/128749768 is figured out.
-    //it.generateBuildConfig.enabled = false
-  }
 }
 
 dependencies {","@@ -1,6 +1,7 @@
 apply plugin: 'com.android.library'
 apply plugin: 'org.jetbrains.kotlin.android'
 apply plugin: 'com.vanniktech.maven.publish'
+apply plugin: 'org.jetbrains.dokka' // Must be applied here for publish plugin.
 
 android {
   compileSdkVersion versions.compileSdk
@@ -14,12 +15,6 @@ android {
     textReport true
     textOutput 'stdout'
   }
-
-  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
-  libraryVariants.all {
-    // TODO re-enable once https://issuetracker.google.com/issues/128749768 is figured out.
-    //it.generateBuildConfig.enabled = false
-  }
 }
 
 dependencies {",False,other
timber/gradle.properties,timber/gradle.properties,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -1,3 +1,2 @@
 POM_ARTIFACT_ID=timber
 POM_NAME=Timber
-POM_PACKAGING=aar","@@ -1,3 +1,2 @@
 POM_ARTIFACT_ID=timber
 POM_NAME=Timber
-POM_PACKAGING=aar",False,other
timber/src/test/java/timber/log/TimberJavaTest.java,timber/src/test/java/timber/log/TimberJavaTest.java,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -10,7 +10,7 @@ public class TimberJavaTest {
     try {
       Timber.plant((Timber.Tree) null);
       fail();
-    } catch (IllegalArgumentException ignored) {
+    } catch (NullPointerException ignored) {
     }
   }
 
@@ -19,7 +19,7 @@ public class TimberJavaTest {
     try {
       Timber.plant((Timber.Tree[]) null);
       fail();
-    } catch (IllegalArgumentException ignored) {
+    } catch (NullPointerException ignored) {
     }
     try {
       Timber.plant(new Timber.Tree[] { null });","@@ -10,7 +10,7 @@ public class TimberJavaTest {
     try {
       Timber.plant((Timber.Tree) null);
       fail();
-    } catch (IllegalArgumentException ignored) {
+    } catch (NullPointerException ignored) {
     }
   }
 
@@ -19,7 +19,7 @@ public class TimberJavaTest {
     try {
       Timber.plant((Timber.Tree[]) null);
       fail();
-    } catch (IllegalArgumentException ignored) {
+    } catch (NullPointerException ignored) {
     }
     try {
       Timber.plant(new Timber.Tree[] { null });",False,test
timber/src/test/java/timber/log/TimberTest.kt,timber/src/test/java/timber/log/TimberTest.kt,64be5f2395038f9154df06a9821ba63ccb620a37,73473352367213f1fbbc09c035b1491c3dcd68be,"Add GitHub Actions, fix tests, delete Travis, etc.","@@ -166,12 +166,19 @@ class TimberTest {
         .hasNoMoreMessages()
   }
 
+  @Suppress(""ObjectLiteralToLambda"") // Lambdas != anonymous classes.
   @Test fun debugTreeTagGenerationStripsAnonymousClassMarker() {
     Timber.plant(Timber.DebugTree())
-    Runnable {
-      Timber.d(""Hello, world!"")
+    object : Runnable {
+      override fun run() {
+        Timber.d(""Hello, world!"")
 
-      Runnable { Timber.d(""Hello, world!"") }.run()
+        object : Runnable {
+          override fun run() {
+            Timber.d(""Hello, world!"")
+          }
+        }.run()
+      }
     }.run()
 
     assertLog()","@@ -166,12 +166,19 @@ class TimberTest {
         .hasNoMoreMessages()
   }
 
+  @Suppress(""ObjectLiteralToLambda"") // Lambdas != anonymous classes.
   @Test fun debugTreeTagGenerationStripsAnonymousClassMarker() {
     Timber.plant(Timber.DebugTree())
-    Runnable {
-      Timber.d(""Hello, world!"")
+    object : Runnable {
+      override fun run() {
+        Timber.d(""Hello, world!"")
 
-      Runnable { Timber.d(""Hello, world!"") }.run()
+        object : Runnable {
+          override fun run() {
+            Timber.d(""Hello, world!"")
+          }
+        }.run()
+      }
     }.run()
 
     assertLog()",False,test
timber/src/main/java/timber/log/Timber.kt,timber/src/main/java/timber/log/Timber.kt,a85322c3769832a2eba9aa3b4634511a114fb346,184f43ce263422d8b3e07498a05203a2820a4117,Tag length limit was removed in API 26 not API 24,"@@ -219,8 +219,8 @@ class Timber private constructor() {
       if (m.find()) {
         tag = m.replaceAll("""")
       }
-      // Tag length limit was removed in API 24.
-      return if (tag.length <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+      // Tag length limit was removed in API 26.
+      return if (tag.length <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= 26) {
         tag
       } else {
         tag.substring(0, MAX_TAG_LENGTH)","@@ -219,8 +219,8 @@ class Timber private constructor() {
       if (m.find()) {
         tag = m.replaceAll("""")
       }
-      // Tag length limit was removed in API 24.
-      return if (tag.length <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+      // Tag length limit was removed in API 26.
+      return if (tag.length <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= 26) {
         tag
       } else {
         tag.substring(0, MAX_TAG_LENGTH)",False,source
timber/src/test/java/timber/log/TimberTest.kt,timber/src/test/java/timber/log/TimberTest.kt,a85322c3769832a2eba9aa3b4634511a114fb346,184f43ce263422d8b3e07498a05203a2820a4117,Tag length limit was removed in API 26 not API 24,"@@ -144,7 +144,7 @@ class TimberTest {
     }
   }
 
-  @Config(sdk = [23])
+  @Config(sdk = [25])
   @Test fun debugTreeTagTruncation() {
     Timber.plant(Timber.DebugTree())
 
@@ -155,7 +155,7 @@ class TimberTest {
         .hasNoMoreMessages()
   }
 
-  @Config(sdk = [24])
+  @Config(sdk = [26])
   @Test fun debugTreeTagNoTruncation() {
     Timber.plant(Timber.DebugTree())","@@ -144,7 +144,7 @@ class TimberTest {
     }
   }
 
-  @Config(sdk = [23])
+  @Config(sdk = [25])
   @Test fun debugTreeTagTruncation() {
     Timber.plant(Timber.DebugTree())
 
@@ -155,7 +155,7 @@ class TimberTest {
         .hasNoMoreMessages()
   }
 
-  @Config(sdk = [24])
+  @Config(sdk = [26])
   @Test fun debugTreeTagNoTruncation() {
     Timber.plant(Timber.DebugTree())",False,test
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,f06d0f771bf4f5323ca19e8fc798bd929e92e6b2,a85322c3769832a2eba9aa3b4634511a114fb346,Don't allow missing SDK in lint tests,"@@ -34,7 +34,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -66,7 +65,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -127,7 +125,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -159,7 +156,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -188,7 +184,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .allowCompilationErrors()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -218,7 +213,6 @@ class WrongTimberUsageDetectorTest {
                 |  private String id(String s) { return s; }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -241,7 +235,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -265,7 +258,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -282,7 +274,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -297,7 +288,6 @@ class WrongTimberUsageDetectorTest {
                 |  static String[] X = { String.format(""%s"", 100) };
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -316,7 +306,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
         .run()
         .expect(""""""
@@ -344,7 +333,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expectClean()
@@ -363,7 +351,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -392,7 +379,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -422,7 +408,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -451,7 +436,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -473,7 +457,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -495,7 +478,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -517,7 +499,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expect(""""""
@@ -540,7 +521,6 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expect(""""""
@@ -564,7 +544,6 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expect(""""""
@@ -587,7 +566,6 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
             manifest().minSdk(26)
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expectClean()
@@ -607,7 +585,6 @@ class WrongTimberUsageDetectorTest {
                     |}"""""".trimMargin()),
                     manifest().minSdk(26)
                 )
-                .allowMissingSdk()
                 .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
                 .run()
                 .expectClean()
@@ -648,7 +625,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -670,7 +646,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expect(""""""
@@ -693,7 +668,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -722,7 +696,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -752,7 +725,6 @@ class WrongTimberUsageDetectorTest {
               |}
               """""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -782,7 +754,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -800,7 +771,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -821,7 +791,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -841,7 +810,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -861,7 +829,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -880,7 +847,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -909,7 +875,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -938,7 +903,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -956,7 +920,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -974,7 +937,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -992,7 +954,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -1015,10 +976,8 @@ class WrongTimberUsageDetectorTest {
                 |}
                 """""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
   }
 }
-","@@ -34,7 +34,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -66,7 +65,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -127,7 +125,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
         .run()
         .expect(""""""
@@ -159,7 +156,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -188,7 +184,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .allowCompilationErrors()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -218,7 +213,6 @@ class WrongTimberUsageDetectorTest {
                 |  private String id(String s) { return s; }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -241,7 +235,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expect(""""""
@@ -265,7 +258,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -282,7 +274,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -297,7 +288,6 @@ class WrongTimberUsageDetectorTest {
                 |  static String[] X = { String.format(""%s"", 100) };
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
         .expectClean()
@@ -316,7 +306,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
         .run()
         .expect(""""""
@@ -344,7 +333,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expectClean()
@@ -363,7 +351,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -392,7 +379,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -422,7 +408,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -451,7 +436,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
         .run()
         .expect(""""""
@@ -473,7 +457,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -495,7 +478,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -517,7 +499,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expect(""""""
@@ -540,7 +521,6 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expect(""""""
@@ -564,7 +544,6 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expect(""""""
@@ -587,7 +566,6 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
             manifest().minSdk(26)
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
         .run()
         .expectClean()
@@ -607,7 +585,6 @@ class WrongTimberUsageDetectorTest {
                     |}"""""".trimMargin()),
                     manifest().minSdk(26)
                 )
-                .allowMissingSdk()
                 .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
                 .run()
                 .expectClean()
@@ -648,7 +625,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
@@ -670,7 +646,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expect(""""""
@@ -693,7 +668,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -722,7 +696,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -752,7 +725,6 @@ class WrongTimberUsageDetectorTest {
               |}
               """""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -782,7 +754,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -800,7 +771,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -821,7 +791,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -841,7 +810,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -861,7 +829,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -880,7 +847,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -909,7 +875,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expect(""""""
@@ -938,7 +903,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
@@ -956,7 +920,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -974,7 +937,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -992,7 +954,6 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
@@ -1015,10 +976,8 @@ class WrongTimberUsageDetectorTest {
                 |}
                 """""".trimMargin())
         )
-        .allowMissingSdk()
         .issues(*WrongTimberUsageDetector.getIssues())
         .run()
         .expectClean()
   }
 }
-",False,test
build.gradle,build.gradle,f13fafd0bf11dfaee972b2029a5435abc16824c2,f06d0f771bf4f5323ca19e8fc798bd929e92e6b2,Add comment re: future removal of allowCompilationErrors in tests,"@@ -7,6 +7,7 @@ buildscript {
 
       'kotlin': '1.5.21',
 
+      // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
       'androidPlugin': '7.0.0',
       'androidTools': '30.0.0',
   ]","@@ -7,6 +7,7 @@ buildscript {
 
       'kotlin': '1.5.21',
 
+      // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
       'androidPlugin': '7.0.0',
       'androidTools': '30.0.0',
   ]",False,other
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,f13fafd0bf11dfaee972b2029a5435abc16824c2,f06d0f771bf4f5323ca19e8fc798bd929e92e6b2,Add comment re: future removal of allowCompilationErrors in tests,"@@ -184,6 +184,8 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        // Remove when AGP 7.1.0-alpha07 is out
+        // https://groups.google.com/g/lint-dev/c/BigCO8sMhKU
         .allowCompilationErrors()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()","@@ -184,6 +184,8 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        // Remove when AGP 7.1.0-alpha07 is out
+        // https://groups.google.com/g/lint-dev/c/BigCO8sMhKU
         .allowCompilationErrors()
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()",False,test
build.gradle,build.gradle,bab580059dda35b2c33dbb3935275a26fb27eb2c,f13fafd0bf11dfaee972b2029a5435abc16824c2,"Update lint issue registration mechanism

https://googlesamples.github.io/android-custom-lint-rules/api-guide.html#writingalintcheck:basics/registeringtheissue","@@ -6,6 +6,7 @@ buildscript {
       'compileSdk': 30,
 
       'kotlin': '1.5.21',
+      'autoService': '1.0-rc7',
 
       // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
       'androidPlugin': '7.0.0',
@@ -24,6 +25,10 @@ buildscript {
           'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
           'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
       ],
+      'auto': [
+          'service': ""com.google.auto.service:auto-service:${versions.autoService}"",
+          'serviceAnnotations': ""com.google.auto.service:auto-service-annotations:${versions.autoService}"",
+      ],
       annotations: 'org.jetbrains:annotations:20.1.0',
 
       junit: 'junit:junit:4.13.2',","@@ -6,6 +6,7 @@ buildscript {
       'compileSdk': 30,
 
       'kotlin': '1.5.21',
+      'autoService': '1.0-rc7',
 
       // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
       'androidPlugin': '7.0.0',
@@ -24,6 +25,10 @@ buildscript {
           'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
           'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
       ],
+      'auto': [
+          'service': ""com.google.auto.service:auto-service:${versions.autoService}"",
+          'serviceAnnotations': ""com.google.auto.service:auto-service-annotations:${versions.autoService}"",
+      ],
       annotations: 'org.jetbrains:annotations:20.1.0',
 
       junit: 'junit:junit:4.13.2',",False,other
timber-lint/build.gradle,timber-lint/build.gradle,bab580059dda35b2c33dbb3935275a26fb27eb2c,f13fafd0bf11dfaee972b2029a5435abc16824c2,"Update lint issue registration mechanism

https://googlesamples.github.io/android-custom-lint-rules/api-guide.html#writingalintcheck:basics/registeringtheissue","@@ -1,5 +1,7 @@
 apply plugin: 'java-library'
 apply plugin: 'kotlin'
+apply plugin: 'org.jetbrains.kotlin.kapt'
+apply plugin: 'com.android.lint'
 
 targetCompatibility = JavaVersion.VERSION_1_8
 sourceCompatibility = JavaVersion.VERSION_1_8
@@ -7,15 +9,10 @@ sourceCompatibility = JavaVersion.VERSION_1_8
 dependencies {
   compileOnly deps.lint.api
   compileOnly deps.lint.checks
-
+  compileOnly deps.auto.serviceAnnotations
+  kapt deps.auto.service
   testImplementation deps.junit
   testImplementation deps.lint.core
   testImplementation deps.lint.tests
   testImplementation deps.junit
 }
-
-jar {
-  manifest {
-    attributes('Lint-Registry-v2': 'timber.lint.TimberIssueRegistry')
-  }
-}","@@ -1,5 +1,7 @@
 apply plugin: 'java-library'
 apply plugin: 'kotlin'
+apply plugin: 'org.jetbrains.kotlin.kapt'
+apply plugin: 'com.android.lint'
 
 targetCompatibility = JavaVersion.VERSION_1_8
 sourceCompatibility = JavaVersion.VERSION_1_8
@@ -7,15 +9,10 @@ sourceCompatibility = JavaVersion.VERSION_1_8
 dependencies {
   compileOnly deps.lint.api
   compileOnly deps.lint.checks
-
+  compileOnly deps.auto.serviceAnnotations
+  kapt deps.auto.service
   testImplementation deps.junit
   testImplementation deps.lint.core
   testImplementation deps.lint.tests
   testImplementation deps.junit
 }
-
-jar {
-  manifest {
-    attributes('Lint-Registry-v2': 'timber.lint.TimberIssueRegistry')
-  }
-}",False,other
timber-lint/src/main/java/timber/lint/TimberIssueRegistry.java,,bab580059dda35b2c33dbb3935275a26fb27eb2c,f13fafd0bf11dfaee972b2029a5435abc16824c2,"Update lint issue registration mechanism

https://googlesamples.github.io/android-custom-lint-rules/api-guide.html#writingalintcheck:basics/registeringtheissue","@@ -1,17 +0,0 @@
-package timber.lint;
-
-import com.android.tools.lint.client.api.IssueRegistry;
-import com.android.tools.lint.detector.api.ApiKt;
-import com.android.tools.lint.detector.api.Issue;
-import java.util.Arrays;
-import java.util.List;
-
-public final class TimberIssueRegistry extends IssueRegistry {
-  @Override public List<Issue> getIssues() {
-    return Arrays.asList(WrongTimberUsageDetector.getIssues());
-  }
-
-  @Override public int getApi() {
-    return ApiKt.CURRENT_API;
-  }
-}","@@ -1,17 +0,0 @@
-package timber.lint;
-
-import com.android.tools.lint.client.api.IssueRegistry;
-import com.android.tools.lint.detector.api.ApiKt;
-import com.android.tools.lint.detector.api.Issue;
-import java.util.Arrays;
-import java.util.List;
-
-public final class TimberIssueRegistry extends IssueRegistry {
-  @Override public List<Issue> getIssues() {
-    return Arrays.asList(WrongTimberUsageDetector.getIssues());
-  }
-
-  @Override public int getApi() {
-    return ApiKt.CURRENT_API;
-  }
-}",False,source
,timber-lint/src/main/java/timber/lint/TimberIssueRegistry.kt,bab580059dda35b2c33dbb3935275a26fb27eb2c,f13fafd0bf11dfaee972b2029a5435abc16824c2,"Update lint issue registration mechanism

https://googlesamples.github.io/android-custom-lint-rules/api-guide.html#writingalintcheck:basics/registeringtheissue","@@ -0,0 +1,25 @@
+package timber.lint
+
+import com.android.tools.lint.client.api.IssueRegistry
+import com.android.tools.lint.client.api.Vendor
+import com.android.tools.lint.detector.api.CURRENT_API
+import com.google.auto.service.AutoService
+
+@AutoService(value = [IssueRegistry::class])
+class TimberIssueRegistry : IssueRegistry() {
+  override val issues = WrongTimberUsageDetector.getIssues().asList()
+
+  override val api = CURRENT_API
+
+  /**
+   * works with Studio 4.0 or later; see
+   * [com.android.tools.lint.detector.api.describeApi]
+   */
+  override val minApi = 7
+
+  override val vendor = Vendor(
+    vendorName = ""JakeWharton/timber"",
+    identifier = ""com.jakewharton.timber:timber:{version}"",
+    feedbackUrl = ""https://github.com/JakeWharton/timber/issues"",
+  )
+}
\ No newline at end of file","@@ -0,0 +1,25 @@
+package timber.lint
+
+import com.android.tools.lint.client.api.IssueRegistry
+import com.android.tools.lint.client.api.Vendor
+import com.android.tools.lint.detector.api.CURRENT_API
+import com.google.auto.service.AutoService
+
+@AutoService(value = [IssueRegistry::class])
+class TimberIssueRegistry : IssueRegistry() {
+  override val issues = WrongTimberUsageDetector.getIssues().asList()
+
+  override val api = CURRENT_API
+
+  /**
+   * works with Studio 4.0 or later; see
+   * [com.android.tools.lint.detector.api.describeApi]
+   */
+  override val minApi = 7
+
+  override val vendor = Vendor(
+    vendorName = ""JakeWharton/timber"",
+    identifier = ""com.jakewharton.timber:timber:{version}"",
+    feedbackUrl = ""https://github.com/JakeWharton/timber/issues"",
+  )
+}
\ No newline at end of file",False,source
timber-lint/src/main/java/timber/lint/TimberIssueRegistry.kt,timber-lint/src/main/java/timber/lint/TimberIssueRegistry.kt,291ff0e15f4dceddef9cfd942519df9f69d5c761,bab580059dda35b2c33dbb3935275a26fb27eb2c,Konvert WrongTimberUsageDetector to Kotlin,"@@ -3,19 +3,24 @@ package timber.lint
 import com.android.tools.lint.client.api.IssueRegistry
 import com.android.tools.lint.client.api.Vendor
 import com.android.tools.lint.detector.api.CURRENT_API
+import com.android.tools.lint.detector.api.Issue
 import com.google.auto.service.AutoService
 
+@Suppress(""UnstableApiUsage"", ""unused"")
 @AutoService(value = [IssueRegistry::class])
 class TimberIssueRegistry : IssueRegistry() {
-  override val issues = WrongTimberUsageDetector.getIssues().asList()
+  override val issues: List<Issue>
+    get() = WrongTimberUsageDetector.issues
 
-  override val api = CURRENT_API
+  override val api: Int
+    get() = CURRENT_API
 
   /**
    * works with Studio 4.0 or later; see
    * [com.android.tools.lint.detector.api.describeApi]
    */
-  override val minApi = 7
+  override val minApi: Int
+    get() = 7
 
   override val vendor = Vendor(
     vendorName = ""JakeWharton/timber"",","@@ -3,19 +3,24 @@ package timber.lint
 import com.android.tools.lint.client.api.IssueRegistry
 import com.android.tools.lint.client.api.Vendor
 import com.android.tools.lint.detector.api.CURRENT_API
+import com.android.tools.lint.detector.api.Issue
 import com.google.auto.service.AutoService
 
+@Suppress(""UnstableApiUsage"", ""unused"")
 @AutoService(value = [IssueRegistry::class])
 class TimberIssueRegistry : IssueRegistry() {
-  override val issues = WrongTimberUsageDetector.getIssues().asList()
+  override val issues: List<Issue>
+    get() = WrongTimberUsageDetector.issues
 
-  override val api = CURRENT_API
+  override val api: Int
+    get() = CURRENT_API
 
   /**
    * works with Studio 4.0 or later; see
    * [com.android.tools.lint.detector.api.describeApi]
    */
-  override val minApi = 7
+  override val minApi: Int
+    get() = 7
 
   override val vendor = Vendor(
     vendorName = ""JakeWharton/timber"",",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.java,291ff0e15f4dceddef9cfd942519df9f69d5c761,bab580059dda35b2c33dbb3935275a26fb27eb2c,Konvert WrongTimberUsageDetector to Kotlin,"@@ -1,814 +1,807 @@
-package timber.lint;
-
-import com.android.annotations.NonNull;
-import com.android.annotations.Nullable;
-import com.android.tools.lint.checks.StringFormatDetector;
-import com.android.tools.lint.client.api.JavaEvaluator;
-import com.android.tools.lint.detector.api.Category;
-import com.android.tools.lint.detector.api.Detector;
-import com.android.tools.lint.detector.api.Implementation;
-import com.android.tools.lint.detector.api.Incident;
-import com.android.tools.lint.detector.api.Issue;
-import com.android.tools.lint.detector.api.JavaContext;
-import com.android.tools.lint.detector.api.LintFix;
-import com.android.tools.lint.detector.api.Scope;
-import com.android.tools.lint.detector.api.Severity;
-import com.intellij.psi.PsiClass;
-import com.intellij.psi.PsiClassType;
-import com.intellij.psi.PsiElement;
-import com.intellij.psi.PsiField;
-import com.intellij.psi.PsiLiteralExpression;
-import com.intellij.psi.PsiMethod;
-import com.intellij.psi.PsiMethodCallExpression;
-import com.intellij.psi.PsiParameter;
-import com.intellij.psi.PsiType;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import org.jetbrains.uast.UBinaryExpression;
-import org.jetbrains.uast.UCallExpression;
-import org.jetbrains.uast.UElement;
-import org.jetbrains.uast.UExpression;
-import org.jetbrains.uast.UIfExpression;
-import org.jetbrains.uast.ULiteralExpression;
-import org.jetbrains.uast.UMethod;
-import org.jetbrains.uast.UQualifiedReferenceExpression;
-import org.jetbrains.uast.USimpleNameReferenceExpression;
-import org.jetbrains.uast.UastBinaryOperator;
-import org.jetbrains.uast.util.UastExpressionUtils;
-
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_BOOLEAN;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_BYTE;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_CHAR;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_DOUBLE;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_FLOAT;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_INT;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_LONG;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_NULL;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_OBJECT;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_SHORT;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_STRING;
-import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
-import static com.android.tools.lint.detector.api.Constraints.minSdkLessThan;
-import static com.android.tools.lint.detector.api.Lint.isKotlin;
-import static com.android.tools.lint.detector.api.Lint.isString;
-import static com.android.tools.lint.detector.api.Lint.skipParentheses;
-import static org.jetbrains.uast.UastBinaryOperator.PLUS;
-import static org.jetbrains.uast.UastBinaryOperator.PLUS_ASSIGN;
-import static org.jetbrains.uast.UastLiteralUtils.isInjectionHost;
-import static org.jetbrains.uast.UastUtils.evaluateString;
-
-public final class WrongTimberUsageDetector extends Detector implements Detector.UastScanner {
-  private final static String GET_STRING_METHOD = ""getString"";
-  private final static String TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)"";
-
-  @Override public List<String> getApplicableMethodNames() {
-    return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
-  }
-
-  @Override public void visitMethodCall(JavaContext context, UCallExpression call, PsiMethod method) {
-    String methodName = call.getMethodName();
-    JavaEvaluator evaluator = context.getEvaluator();
-
-    if (""format"".equals(methodName) && evaluator.isMemberInClass(method, ""java.lang.String"")) {
-      checkNestedStringFormat(context, call);
-      return;
+package timber.lint
+
+import com.android.tools.lint.detector.api.skipParentheses
+import org.jetbrains.uast.util.isMethodCall
+import com.android.tools.lint.detector.api.minSdkLessThan
+import com.android.tools.lint.detector.api.isString
+import com.android.tools.lint.detector.api.isKotlin
+import org.jetbrains.uast.isInjectionHost
+import org.jetbrains.uast.evaluateString
+import com.android.tools.lint.detector.api.Detector
+import com.android.tools.lint.detector.api.JavaContext
+import org.jetbrains.uast.UCallExpression
+import com.intellij.psi.PsiMethod
+import com.android.tools.lint.client.api.JavaEvaluator
+import com.android.tools.lint.detector.api.LintFix
+import org.jetbrains.uast.UElement
+import org.jetbrains.uast.UMethod
+import org.jetbrains.uast.UExpression
+import com.android.tools.lint.detector.api.Incident
+import org.jetbrains.uast.UQualifiedReferenceExpression
+import org.jetbrains.uast.UBinaryExpression
+import org.jetbrains.uast.UastBinaryOperator
+import org.jetbrains.uast.UIfExpression
+import com.intellij.psi.PsiMethodCallExpression
+import com.intellij.psi.PsiLiteralExpression
+import com.intellij.psi.PsiType
+import com.intellij.psi.PsiClassType
+import com.android.tools.lint.checks.StringFormatDetector
+import com.android.tools.lint.client.api.TYPE_BOOLEAN
+import com.android.tools.lint.client.api.TYPE_BOOLEAN_WRAPPER
+import com.android.tools.lint.client.api.TYPE_BYTE
+import com.android.tools.lint.client.api.TYPE_BYTE_WRAPPER
+import com.android.tools.lint.client.api.TYPE_CHAR
+import com.android.tools.lint.client.api.TYPE_DOUBLE
+import com.android.tools.lint.client.api.TYPE_DOUBLE_WRAPPER
+import com.android.tools.lint.client.api.TYPE_FLOAT
+import com.android.tools.lint.client.api.TYPE_FLOAT_WRAPPER
+import com.android.tools.lint.client.api.TYPE_INT
+import com.android.tools.lint.client.api.TYPE_INTEGER_WRAPPER
+import com.android.tools.lint.client.api.TYPE_LONG
+import com.android.tools.lint.client.api.TYPE_LONG_WRAPPER
+import com.android.tools.lint.client.api.TYPE_NULL
+import com.android.tools.lint.client.api.TYPE_OBJECT
+import com.android.tools.lint.client.api.TYPE_SHORT
+import com.android.tools.lint.client.api.TYPE_SHORT_WRAPPER
+import com.android.tools.lint.client.api.TYPE_STRING
+import com.android.tools.lint.detector.api.Category.Companion.CORRECTNESS
+import com.android.tools.lint.detector.api.Category.Companion.MESSAGES
+import com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString
+import com.android.tools.lint.detector.api.Detector.UastScanner
+import com.android.tools.lint.detector.api.Implementation
+import com.android.tools.lint.detector.api.Issue
+import com.android.tools.lint.detector.api.Scope.Companion.JAVA_FILE_SCOPE
+import com.android.tools.lint.detector.api.Severity.ERROR
+import com.android.tools.lint.detector.api.Severity.WARNING
+import org.jetbrains.uast.ULiteralExpression
+import org.jetbrains.uast.USimpleNameReferenceExpression
+import com.intellij.psi.PsiField
+import com.intellij.psi.PsiParameter
+import java.lang.Byte
+import java.lang.Double
+import java.lang.Float
+import java.lang.IllegalStateException
+import java.lang.Long
+import java.lang.Short
+import java.util.Calendar
+import java.util.Date
+import java.util.regex.Pattern
+
+class WrongTimberUsageDetector : Detector(), UastScanner {
+  override fun getApplicableMethodNames() = listOf(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"")
+
+  override fun visitMethodCall(context: JavaContext, node: UCallExpression, method: PsiMethod) {
+    val methodName = node.methodName
+    val evaluator = context.evaluator
+
+    if (""format"" == methodName && evaluator.isMemberInClass(method, ""java.lang.String"")) {
+      checkNestedStringFormat(context, node)
+      return
     }
     // As of API 26, Log tags are no longer limited to 23 chars.
-    if (""tag"".equals(methodName)
-        && evaluator.isMemberInClass(method, ""timber.log.Timber"")
-        && context.getProject().getMinSdk() <= 25) {
-      checkTagLength(context, call);
-      return;
+    if (""tag"" == methodName
+      && evaluator.isMemberInClass(method, ""timber.log.Timber"")
+      && context.project.minSdk < 26
+    ) {
+      checkTagLength(context, node)
+      return
     }
     if (evaluator.isMemberInClass(method, ""android.util.Log"")) {
-      LintFix fix = quickFixIssueLog(call);
-      context.report(ISSUE_LOG, call, context.getLocation(call), ""Using 'Log' instead of 'Timber'"",
-          fix);
-      return;
+      context.report(
+        Incident(
+          issue = ISSUE_LOG,
+          scope = node,
+          location = context.getLocation(node),
+          message = ""Using 'Log' instead of 'Timber'"",
+          fix = quickFixIssueLog(node)
+        )
+      )
+      return
     }
     // Handles Timber.X(..) and Timber.tag(..).X(..) where X in (v|d|i|w|e|wtf).
     if (isTimberLogMethod(method, evaluator)) {
-      checkMethodArguments(context, call);
-      checkFormatArguments(context, call);
-      checkExceptionLogging(context, call);
+      checkMethodArguments(context, node)
+      checkFormatArguments(context, node)
+      checkExceptionLogging(context, node)
     }
   }
 
-  private boolean isTimberLogMethod(PsiMethod method, JavaEvaluator evaluator) {
+  private fun isTimberLogMethod(method: PsiMethod, evaluator: JavaEvaluator): Boolean {
     return evaluator.isMemberInClass(method, ""timber.log.Timber"")
         || evaluator.isMemberInClass(method, ""timber.log.Timber.Companion"")
-        || evaluator.isMemberInClass(method, ""timber.log.Timber.Tree"");
+        || evaluator.isMemberInClass(method, ""timber.log.Timber.Tree"")
   }
 
-  private void checkNestedStringFormat(JavaContext context, UCallExpression call) {
-    UElement current = call;
+  private fun checkNestedStringFormat(context: JavaContext, call: UCallExpression) {
+    var current: UElement? = call
     while (true) {
-      current = skipParentheses(current.getUastParent());
-      if (current == null || current instanceof UMethod) {
+      current = skipParentheses(current!!.uastParent)
+      if (current == null || current is UMethod) {
         // Reached AST root or code block node; String.format not inside Timber.X(..).
-        return;
+        return
       }
-      if (UastExpressionUtils.isMethodCall(current)) {
-        UCallExpression maybeTimberLogCall = (UCallExpression) current;
-        JavaEvaluator evaluator = context.getEvaluator();
-        PsiMethod psiMethod = maybeTimberLogCall.resolve();
-        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
-            && evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")) {
-          LintFix fix = quickFixIssueFormat(call);
-          context.report(ISSUE_FORMAT, call, context.getLocation(call),
-              ""Using 'String#format' inside of 'Timber'"", fix);
-          return;
+      if (current.isMethodCall()) {
+        val psiMethod = (current as UCallExpression).resolve()
+        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod!!.name)
+          && context.evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")
+        ) {
+          context.report(
+            Incident(
+              issue = ISSUE_FORMAT,
+              scope = call,
+              location = context.getLocation(call),
+              message = ""Using 'String#format' inside of 'Timber'"",
+              fix = quickFixIssueFormat(call)
+            )
+          )
+          return
         }
       }
     }
   }
 
-  private void checkTagLength(JavaContext context, UCallExpression call) {
-    List<UExpression> arguments = call.getValueArguments();
-    UExpression argument = arguments.get(0);
-    String tag = evaluateString(context, argument, true);
-    if (tag != null && tag.length() > 23) {
-      String message =
-          String.format(Locale.US, ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
-              tag.length(), tag);
-      LintFix fix = quickFixIssueTagLength(argument, tag);
+  private fun checkTagLength(context: JavaContext, call: UCallExpression) {
+    val argument = call.valueArguments[0]
+    val tag = evaluateString(context, argument, true)
+    if (tag != null && tag.length > 23) {
       context.report(
-          new Incident(
-              ISSUE_TAG_LENGTH,
-              argument,
-              context.getLocation(argument),
-              message,
-              fix
-          ), minSdkLessThan(26)
-      );
+        Incident(
+          issue = ISSUE_TAG_LENGTH,
+          scope = argument,
+          location = context.getLocation(argument),
+          message = ""The logging tag can be at most 23 characters, was ${tag.length} ($tag)"",
+          fix = quickFixIssueTagLength(argument, tag)
+        ),
+        constraint = minSdkLessThan(26)
+      )
     }
   }
 
-  private static void checkFormatArguments(JavaContext context, UCallExpression call) {
-    List<UExpression> arguments = call.getValueArguments();
-    int numArguments = arguments.size();
+  private fun checkFormatArguments(context: JavaContext, call: UCallExpression) {
+    val arguments = call.valueArguments
+    val numArguments = arguments.size
     if (numArguments == 0) {
-      return;
+      return
     }
 
-    int startIndexOfArguments = 1;
-    UExpression formatStringArg = arguments.get(0);
-    if (isSubclassOf(context, formatStringArg, Throwable.class)) {
+    var startIndexOfArguments = 1
+    var formatStringArg = arguments[0]
+    if (isSubclassOf(context, formatStringArg, Throwable::class.java)) {
       if (numArguments == 1) {
-        return;
+        return
       }
-      formatStringArg = arguments.get(1);
-      startIndexOfArguments++;
+      formatStringArg = arguments[1]
+      startIndexOfArguments++
     }
 
-    String formatString = evaluateString(context, formatStringArg, true);
-    // We passed for example a method call
-    if (formatString == null) {
-      return;
-    }
+    val formatString = evaluateString(context, formatStringArg, true)
+      ?: return // We passed for example a method call
 
-    int formatArgumentCount = getFormatArgumentCount(formatString);
-    int passedArgCount = numArguments - startIndexOfArguments;
+    val formatArgumentCount = getFormatArgumentCount(formatString)
+    val passedArgCount = numArguments - startIndexOfArguments
     if (formatArgumentCount < passedArgCount) {
-      context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
-          Locale.US, ""Wrong argument count, format string `%1$s` requires ""
-              + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
-          passedArgCount));
-      return;
+      context.report(
+        Incident(
+          issue = ISSUE_ARG_COUNT,
+          scope = call,
+          location = context.getLocation(call),
+          message = ""Wrong argument count, format string `${formatString}` requires `${formatArgumentCount}` but format call supplies `${passedArgCount}`""
+        )
+      )
+      return
     }
 
     if (formatArgumentCount == 0) {
-      return;
+      return
     }
 
-    List<String> types = getStringArgumentTypes(formatString);
-    UExpression argument = null;
-    int argumentIndex = startIndexOfArguments;
-    boolean valid;
-    for (int i = 0; i < types.size(); i++) {
-      String formatType = types.get(i);
+    val types = getStringArgumentTypes(formatString)
+    var argument: UExpression? = null
+    var argumentIndex = startIndexOfArguments
+    var valid: Boolean
+    for (i in types.indices) {
+      val formatType = types[i]
       if (argumentIndex != numArguments) {
-        argument = arguments.get(argumentIndex++);
+        argument = arguments[argumentIndex++]
       } else {
-        context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
-            Locale.US, ""Wrong argument count, format string `%1$s` requires ""
-                + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
-            passedArgCount));
+        context.report(
+          Incident(
+            issue = ISSUE_ARG_COUNT,
+            scope = call,
+            location = context.getLocation(call),
+            message = ""Wrong argument count, format string `${formatString}` requires `${formatArgumentCount}` but format call supplies `${passedArgCount}`""
+          )
+        )
       }
 
-      Class type = getType(argument);
-      if (type == null) {
-        continue;
-      }
-
-      char last = formatType.charAt(formatType.length() - 1);
-      if (formatType.length() >= 2
-          && Character.toLowerCase(formatType.charAt(formatType.length() - 2)) == 't') {
+      val type = getType(argument) ?: continue
+      val last = formatType.last()
+      if (formatType.length >= 2 && formatType[formatType.length - 2].toLowerCase() == 't') {
         // Date time conversion.
-        switch (last) {
-          // time
-          case 'H':
-          case 'I':
-          case 'k':
-          case 'l':
-          case 'M':
-          case 'S':
-          case 'L':
-          case 'N':
-          case 'p':
-          case 'z':
-          case 'Z':
-          case 's':
-          case 'Q':
-            // date
-          case 'B':
-          case 'b':
-          case 'h':
-          case 'A':
-          case 'a':
-          case 'C':
-          case 'Y':
-          case 'y':
-          case 'j':
-          case 'm':
-          case 'd':
-          case 'e':
-            // date/time
-          case 'R':
-          case 'T':
-          case 'r':
-          case 'D':
-          case 'F':
-          case 'c':
-            valid = type == Integer.TYPE || type == Calendar.class || type == Date.class
-                || type == Long.TYPE;
+        when (last) {
+          'H', 'I', 'k', 'l', 'M', 'S', 'L', 'N', 'p', 'z', 'Z', 's', 'Q', // time
+          'B', 'b', 'h', 'A', 'a', 'C', 'Y', 'y', 'j', 'm', 'd', 'e', // date
+          'R', 'T', 'r', 'D', 'F', 'c' -> { // date/time
+            valid =
+              type == Integer.TYPE || type == Calendar::class.java || type == Date::class.java || type == java.lang.Long.TYPE
             if (!valid) {
-              String message = String.format(
-                  Locale.US, ""Wrong argument type for date formatting argument '#%1$d' ""
-                      + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                      + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-                  type.getSimpleName(), startIndexOfArguments + i + 1);
-              context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
+              context.report(
+                Incident(
+                  issue = ISSUE_ARG_TYPES,
+                  scope = call,
+                  location = context.getLocation(argument),
+                  message = ""Wrong argument type for date formatting argument '#${i + 1}' in `${formatString}`: conversion is '`${formatType}`', received `${type.simpleName}` (argument #${startIndexOfArguments + i + 1} in method call)""
+                )
+              )
             }
-            break;
-          default:
-            String message = String.format(Locale.US, ""Wrong suffix for date format '#%1$d' ""
-                    + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                    + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-                type.getSimpleName(), startIndexOfArguments + i + 1);
-            context.report(ISSUE_FORMAT, call, context.getLocation(argument), message);
+          }
+          else -> {
+            context.report(
+              Incident(
+                issue = ISSUE_FORMAT,
+                scope = call,
+                location = context.getLocation(argument),
+                message = ""Wrong suffix for date format '#${i + 1}' in `${formatString}`: conversion is '`${formatType}`', received `${type.simpleName}` (argument #${startIndexOfArguments + i + 1} in method call)""
+              )
+            )
+          }
         }
-        continue;
+        continue
       }
-      switch (last) {
-        case 'b':
-        case 'B':
-          valid = type == Boolean.TYPE;
-          break;
-        case 'x':
-        case 'X':
-        case 'd':
-        case 'o':
-        case 'e':
-        case 'E':
-        case 'f':
-        case 'g':
-        case 'G':
-        case 'a':
-        case 'A':
-          valid = type == Integer.TYPE
-              || type == Float.TYPE
-              || type == Double.TYPE
-              || type == Long.TYPE
-              || type == Byte.TYPE
-              || type == Short.TYPE;
-          break;
-        case 'c':
-        case 'C':
-          valid = type == Character.TYPE;
-          break;
-        case 'h':
-        case 'H':
-          valid = type != Boolean.TYPE && !Number.class.isAssignableFrom(type);
-          break;
-        case 's':
-        case 'S':
-        default:
-          valid = true;
+
+      valid = when (last) {
+        'b', 'B' -> type == java.lang.Boolean.TYPE
+        'x', 'X', 'd', 'o', 'e', 'E', 'f', 'g', 'G', 'a', 'A' -> {
+          type == Integer.TYPE || type == java.lang.Float.TYPE || type == java.lang.Double.TYPE || type == java.lang.Long.TYPE || type == java.lang.Byte.TYPE || type == java.lang.Short.TYPE
+        }
+        'c', 'C' -> type == Character.TYPE
+        'h', 'H' -> type != java.lang.Boolean.TYPE && !Number::class.java.isAssignableFrom(type)
+        's', 'S' -> true
+        else -> true
       }
       if (!valid) {
-        String message = String.format(Locale.US, ""Wrong argument type for formatting argument '#%1$d' ""
-                + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-            type.getSimpleName(), startIndexOfArguments + i + 1);
-        context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
+        context.report(
+          Incident(
+            issue = ISSUE_ARG_TYPES,
+            scope = call,
+            location = context.getLocation(argument),
+            message = ""Wrong argument type for formatting argument '#${i + 1}' in `${formatString}`: conversion is '`${formatType}`', received `${type.simpleName}` (argument #${startIndexOfArguments + i + 1} in method call)""
+          )
+        )
       }
     }
   }
 
-  private static Class<?> getType(UExpression expression) {
+  private fun getType(expression: UExpression?): Class<*>? {
     if (expression == null) {
-      return null;
-    }
-    if (expression instanceof PsiMethodCallExpression) {
-      PsiMethodCallExpression call = (PsiMethodCallExpression) expression;
-      PsiMethod method = call.resolveMethod();
-      if (method == null) {
-        return null;
-      }
-      String methodName = method.getName();
-      if (methodName.equals(GET_STRING_METHOD)) {
-        return String.class;
+      return null
+    }
+    if (expression is PsiMethodCallExpression) {
+      val call = expression as PsiMethodCallExpression
+      val method = call.resolveMethod() ?: return null
+      val methodName = method.name
+      if (methodName == GET_STRING_METHOD) {
+        return String::class.java
       }
-    } else if (expression instanceof PsiLiteralExpression) {
-      PsiLiteralExpression literalExpression = (PsiLiteralExpression) expression;
-      PsiType expressionType = literalExpression.getType();
-      if (isString(expressionType)) {
-        return String.class;
-      } else if (expressionType == PsiType.INT) {
-        return Integer.TYPE;
-      } else if (expressionType == PsiType.FLOAT) {
-        return Float.TYPE;
-      } else if (expressionType == PsiType.CHAR) {
-        return Character.TYPE;
-      } else if (expressionType == PsiType.BOOLEAN) {
-        return Boolean.TYPE;
-      } else if (expressionType == PsiType.NULL) {
-        return Object.class;
+    } else if (expression is PsiLiteralExpression) {
+      val literalExpression = expression as PsiLiteralExpression
+      val expressionType = literalExpression.type
+      when {
+        isString(expressionType!!) -> return String::class.java
+        expressionType === PsiType.INT -> return Integer.TYPE
+        expressionType === PsiType.FLOAT -> return java.lang.Float.TYPE
+        expressionType === PsiType.CHAR -> return Character.TYPE
+        expressionType === PsiType.BOOLEAN -> return java.lang.Boolean.TYPE
+        expressionType === PsiType.NULL -> return Any::class.java
       }
     }
 
-    PsiType type = expression.getExpressionType();
+    val type = expression.getExpressionType()
     if (type != null) {
-      Class<?> typeClass = getTypeClass(type);
-      return typeClass != null ? typeClass : Object.class;
+      val typeClass = getTypeClass(type)
+      return typeClass ?: Any::class.java
     }
 
-    return null;
+    return null
   }
 
-  private static Class<?> getTypeClass(@Nullable PsiType type) {
-    if (type != null) {
-      return getTypeClass(type.getCanonicalText());
+  private fun getTypeClass(type: PsiType?): Class<*>? {
+    return when (type?.canonicalText) {
+      null -> null
+      TYPE_STRING, ""String"" -> String::class.java
+      TYPE_INT -> Integer.TYPE
+      TYPE_BOOLEAN -> java.lang.Boolean.TYPE
+      TYPE_NULL -> Object::class.java
+      TYPE_LONG -> Long.TYPE
+      TYPE_FLOAT -> Float.TYPE
+      TYPE_DOUBLE -> Double.TYPE
+      TYPE_CHAR -> Character.TYPE
+      TYPE_OBJECT -> null
+      TYPE_INTEGER_WRAPPER, TYPE_SHORT_WRAPPER, TYPE_BYTE_WRAPPER, TYPE_LONG_WRAPPER -> Integer.TYPE
+      TYPE_FLOAT_WRAPPER, TYPE_DOUBLE_WRAPPER -> Float.TYPE
+      TYPE_BOOLEAN_WRAPPER -> java.lang.Boolean.TYPE
+      TYPE_BYTE -> Byte.TYPE
+      TYPE_SHORT -> Short.TYPE
+      ""Date"", ""java.util.Date"" -> Date::class.java
+      ""Calendar"", ""java.util.Calendar"" -> Calendar::class.java
+      ""BigDecimal"", ""java.math.BigDecimal"" -> Float.TYPE
+      ""BigInteger"", ""java.math.BigInteger"" -> Integer.TYPE
+      else -> null
     }
-    return null;
   }
 
-  private static Class<?> getTypeClass(@Nullable String typeClassName) {
-    if (typeClassName == null) {
-      return null;
-    } else if (typeClassName.equals(TYPE_STRING) || ""String"".equals(typeClassName)) {
-      return String.class;
-    } else if (typeClassName.equals(TYPE_INT)) {
-      return Integer.TYPE;
-    } else if (typeClassName.equals(TYPE_BOOLEAN)) {
-      return Boolean.TYPE;
-    } else if (typeClassName.equals(TYPE_NULL)) {
-      return Object.class;
-    } else if (typeClassName.equals(TYPE_LONG)) {
-      return Long.TYPE;
-    } else if (typeClassName.equals(TYPE_FLOAT)) {
-      return Float.TYPE;
-    } else if (typeClassName.equals(TYPE_DOUBLE)) {
-      return Double.TYPE;
-    } else if (typeClassName.equals(TYPE_CHAR)) {
-      return Character.TYPE;
-    } else if (""BigDecimal"".equals(typeClassName) || ""java.math.BigDecimal"".equals(typeClassName)) {
-      return Float.TYPE;
-    } else if (""BigInteger"".equals(typeClassName) || ""java.math.BigInteger"".equals(typeClassName)) {
-      return Integer.TYPE;
-    } else if (typeClassName.equals(TYPE_OBJECT)) {
-      return null;
-    } else if (typeClassName.startsWith(""java.lang."")) {
-      if (""java.lang.Integer"".equals(typeClassName)
-          || ""java.lang.Short"".equals(typeClassName)
-          || ""java.lang.Byte"".equals(typeClassName)
-          || ""java.lang.Long"".equals(typeClassName)) {
-        return Integer.TYPE;
-      } else if (""java.lang.Float"".equals(typeClassName) || ""java.lang.Double"".equals(
-          typeClassName)) {
-        return Float.TYPE;
-      } else if (""java.lang.Boolean"".equals(typeClassName)) {
-        return Boolean.TYPE;
-      } else {
-        return null;
-      }
-    } else if (typeClassName.equals(TYPE_BYTE)) {
-      return Byte.TYPE;
-    } else if (typeClassName.equals(TYPE_SHORT)) {
-      return Short.TYPE;
-    } else if (""Date"".equals(typeClassName) || ""java.util.Date"".equals(typeClassName)) {
-      return Date.class;
-    } else if (""Calendar"".equals(typeClassName) || ""java.util.Calendar"".equals(typeClassName)) {
-      return Calendar.class;
-    } else {
-      return null;
+  private fun isSubclassOf(
+    context: JavaContext, expression: UExpression, cls: Class<*>
+  ): Boolean {
+    val expressionType = expression.getExpressionType()
+    if (expressionType is PsiClassType) {
+      return context.evaluator.extendsClass(expressionType.resolve(), cls.name, false)
     }
+    return false
   }
 
-  private static boolean isSubclassOf(JavaContext context, UExpression expression, Class<?> cls) {
-    PsiType expressionType = expression.getExpressionType();
-    if (expressionType instanceof PsiClassType) {
-      PsiClassType classType = (PsiClassType) expressionType;
-      PsiClass resolvedClass = classType.resolve();
-      return context.getEvaluator().extendsClass(resolvedClass, cls.getName(), false);
-    }
-    return false;
-  }
+  private fun getStringArgumentTypes(formatString: String): List<String> {
+    val types = mutableListOf<String>()
+    val matcher = StringFormatDetector.FORMAT.matcher(formatString)
+    var index = 0
+    var prevIndex = 0
 
-  private static List<String> getStringArgumentTypes(String formatString) {
-    List<String> types = new ArrayList<>();
-    Matcher matcher = StringFormatDetector.FORMAT.matcher(formatString);
-    int index = 0;
-    int prevIndex = 0;
     while (true) {
       if (matcher.find(index)) {
-        int matchStart = matcher.start();
+        val matchStart = matcher.start()
         while (prevIndex < matchStart) {
-          char c = formatString.charAt(prevIndex);
+          val c = formatString[prevIndex]
           if (c == '\\') {
-            prevIndex++;
+            prevIndex++
           }
-          prevIndex++;
+          prevIndex++
         }
         if (prevIndex > matchStart) {
-          index = prevIndex;
-          continue;
+          index = prevIndex
+          continue
         }
 
-        index = matcher.end();
-        String str = formatString.substring(matchStart, matcher.end());
-        if (""%%"".equals(str) || ""%n"".equals(str)) {
-          continue;
+        index = matcher.end()
+        val str = formatString.substring(matchStart, matcher.end())
+        if (""%%"" == str || ""%n"" == str) {
+          continue
         }
-        String time = matcher.group(5);
-        if (""t"".equalsIgnoreCase(time)) {
-          types.add(time + matcher.group(6));
+        val time = matcher.group(5)
+        types += if (""t"".equals(time, ignoreCase = true)) {
+          time + matcher.group(6)
         } else {
-          types.add(matcher.group(6));
+          matcher.group(6)
         }
       } else {
-        break;
+        break
       }
     }
-    return types;
+    return types
   }
 
-  private static int getFormatArgumentCount(@NonNull String s) {
-    Matcher matcher = StringFormatDetector.FORMAT.matcher(s);
-    int index = 0;
-    int prevIndex = 0;
-    int nextNumber = 1;
-    int max = 0;
+  private fun getFormatArgumentCount(s: String): Int {
+    val matcher = StringFormatDetector.FORMAT.matcher(s)
+    var index = 0
+    var prevIndex = 0
+    var nextNumber = 1
+    var max = 0
     while (true) {
       if (matcher.find(index)) {
-        String value = matcher.group(6);
-        if (""%"".equals(value) || ""n"".equals(value)) {
-          index = matcher.end();
-          continue;
+        val value = matcher.group(6)
+        if (""%"" == value || ""n"" == value) {
+          index = matcher.end()
+          continue
         }
-        int matchStart = matcher.start();
-        for (; prevIndex < matchStart; prevIndex++) {
-          char c = s.charAt(prevIndex);
+        val matchStart = matcher.start()
+        while (prevIndex < matchStart) {
+          val c = s[prevIndex]
           if (c == '\\') {
-            prevIndex++;
+            prevIndex++
           }
+          prevIndex++
         }
         if (prevIndex > matchStart) {
-          index = prevIndex;
-          continue;
+          index = prevIndex
+          continue
         }
 
-        int number;
-        String numberString = matcher.group(1);
+        var number: Int
+        var numberString = matcher.group(1)
         if (numberString != null) {
           // Strip off trailing $
-          numberString = numberString.substring(0, numberString.length() - 1);
-          number = Integer.parseInt(numberString);
-          nextNumber = number + 1;
+          numberString = numberString.substring(0, numberString.length - 1)
+          number = numberString.toInt()
+          nextNumber = number + 1
         } else {
-          number = nextNumber++;
+          number = nextNumber++
         }
         if (number > max) {
-          max = number;
+          max = number
         }
-        index = matcher.end();
+        index = matcher.end()
       } else {
-        break;
+        break
       }
     }
-
-    return max;
+    return max
   }
 
-  private void checkMethodArguments(JavaContext context, UCallExpression call) {
-    List<UExpression> arguments = call.getValueArguments();
-    int numArguments = arguments.size();
-    for (int i = 0; i < numArguments; i++) {
-      UExpression argument = arguments.get(i);
-      if (checkElement(context, call, argument)) {
-        break;
-      }
-      if (i > 0 && isSubclassOf(context, argument, Throwable.class)) {
-        LintFix fix = quickFixIssueThrowable(call, arguments, argument);
-        context.report(ISSUE_THROWABLE, call, context.getLocation(call),
-            ""Throwable should be first argument"", fix);
+  private fun checkMethodArguments(context: JavaContext, call: UCallExpression) {
+    call.valueArguments.forEachIndexed loop@{ i, argument ->
+      if (checkElement(context, call, argument)) return@loop
+
+      if (i > 0 && isSubclassOf(context, argument, Throwable::class.java)) {
+        context.report(
+          Incident(
+            issue = ISSUE_THROWABLE,
+            scope = call,
+            location = context.getLocation(call),
+            message = ""Throwable should be first argument"",
+            fix = quickFixIssueThrowable(call, call.valueArguments, argument)
+          )
+        )
       }
     }
   }
 
-  private void checkExceptionLogging(JavaContext context, UCallExpression call) {
-    List<UExpression> arguments = call.getValueArguments();
-    int numArguments = arguments.size();
-
-    if (numArguments > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
-      UExpression messageArg = arguments.get(1);
+  private fun checkExceptionLogging(context: JavaContext, call: UCallExpression) {
+    val arguments = call.valueArguments
+    val numArguments = arguments.size
+    if (numArguments > 1 && isSubclassOf(context, arguments[0], Throwable::class.java)) {
+      val messageArg = arguments[1]
 
       if (isLoggingExceptionMessage(context, messageArg)) {
-        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
-            ""Explicitly logging exception message is redundant"",
-            quickFixRemoveRedundantArgument(messageArg));
-        return;
+        context.report(
+          Incident(
+            issue = ISSUE_EXCEPTION_LOGGING,
+            scope = messageArg,
+            location = context.getLocation(call),
+            message = ""Explicitly logging exception message is redundant"",
+            fix = quickFixRemoveRedundantArgument(messageArg)
+          )
+        )
+        return
       }
 
-      String s = evaluateString(context, messageArg, true);
+      val s = evaluateString(context, messageArg, true)
       if (s == null && !canEvaluateExpression(messageArg)) {
         // Parameters and non-final fields can't be evaluated.
-        return;
+        return
       }
 
       if (s == null || s.isEmpty()) {
-        LintFix fix = quickFixRemoveRedundantArgument(messageArg);
-        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
-            ""Use single-argument log method instead of null/empty message"", fix);
+        context.report(
+          Incident(
+            issue = ISSUE_EXCEPTION_LOGGING,
+            scope = messageArg,
+            location = context.getLocation(call),
+            message = ""Use single-argument log method instead of null/empty message"",
+            fix = quickFixRemoveRedundantArgument(messageArg)
+          )
+        )
       }
-    } else if (numArguments == 1 && !isSubclassOf(context, arguments.get(0), Throwable.class)) {
-      UExpression messageArg = arguments.get(0);
+    } else if (numArguments == 1 && !isSubclassOf(context, arguments[0], Throwable::class.java)) {
+      val messageArg = arguments[0]
 
       if (isLoggingExceptionMessage(context, messageArg)) {
-        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
-            ""Explicitly logging exception message is redundant"",
-            quickFixReplaceMessageWithThrowable(messageArg));
+        context.report(
+          Incident(
+            issue = ISSUE_EXCEPTION_LOGGING,
+            scope = messageArg,
+            location = context.getLocation(call),
+            message = ""Explicitly logging exception message is redundant"",
+            fix = quickFixReplaceMessageWithThrowable(messageArg)
+          )
+        )
       }
     }
   }
 
-  private boolean isLoggingExceptionMessage(JavaContext context, UExpression arg) {
-    if (!(arg instanceof UQualifiedReferenceExpression)) {
-      return false;
+  private fun isLoggingExceptionMessage(context: JavaContext, arg: UExpression): Boolean {
+    if (arg !is UQualifiedReferenceExpression) {
+      return false
     }
 
-    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
-    PsiElement psi = argExpression.getSourcePsi();
-
-    if (psi != null && isKotlin(psi.getLanguage())) {
-      return isPropertyOnSubclassOf(context, argExpression, ""message"", Throwable.class);
+    val psi = arg.sourcePsi
+    if (psi != null && isKotlin(psi.language)) {
+      return isPropertyOnSubclassOf(context, arg, ""message"", Throwable::class.java)
     }
 
-    UExpression selector = argExpression.getSelector();
+    val selector = arg.selector
 
     // what other UExpressions could be a selector?
-    if (!(selector instanceof UCallExpression)) {
-      return false;
-    }
-
-    return isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
-            Throwable.class);
+    return if (selector !is UCallExpression) {
+      false
+    } else isCallFromMethodInSubclassOf(
+      context = context,
+      call = selector,
+      methodName = ""getMessage"",
+      classType = Throwable::class.java
+    )
   }
 
-  private static boolean canEvaluateExpression(UExpression expression) {
+  private fun canEvaluateExpression(expression: UExpression): Boolean {
     // TODO - try using CallGraph?
-    if (expression instanceof ULiteralExpression) {
-      return true;
+    if (expression is ULiteralExpression) {
+      return true
     }
-    if (!(expression instanceof USimpleNameReferenceExpression)) {
-      return false;
+    if (expression !is USimpleNameReferenceExpression) {
+      return false
     }
-    PsiElement resolvedElement = ((USimpleNameReferenceExpression) expression).resolve();
-    return !(resolvedElement instanceof PsiField || resolvedElement instanceof PsiParameter);
+    val resolvedElement = expression.resolve()
+    return !(resolvedElement is PsiField || resolvedElement is PsiParameter)
   }
 
-  private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,
-      String methodName, Class classType) {
-    JavaEvaluator evaluator = context.getEvaluator();
-    PsiMethod method = call.resolve();
-    return method != null //
-        && methodName.equals(call.getMethodName()) //
-        && evaluator.isMemberInSubClassOf(method, classType.getCanonicalName(), false);
+  private fun isCallFromMethodInSubclassOf(
+    context: JavaContext, call: UCallExpression, methodName: String, classType: Class<*>
+  ): Boolean {
+    val method = call.resolve()
+    return method != null
+        && methodName == call.methodName
+        && context.evaluator.isMemberInSubClassOf(method, classType.canonicalName, false)
   }
 
-  private static boolean isPropertyOnSubclassOf(JavaContext context,
-          UQualifiedReferenceExpression expression, String propertyName, Class classType) {
-    return isSubclassOf(context, expression.getReceiver(), classType)
-            && expression.getSelector().asSourceString().equals(propertyName);
+  private fun isPropertyOnSubclassOf(
+    context: JavaContext,
+    expression: UQualifiedReferenceExpression,
+    propertyName: String,
+    classType: Class<*>
+  ): Boolean {
+    return isSubclassOf(context, expression.receiver, classType)
+        && expression.selector.asSourceString() == propertyName
   }
 
-  private boolean checkElement(JavaContext context, UCallExpression call, UElement element) {
-    if (element instanceof UBinaryExpression) {
-      UBinaryExpression binaryExpression = (UBinaryExpression) element;
-      UastBinaryOperator operator = binaryExpression.getOperator();
-      if (operator == PLUS || operator == PLUS_ASSIGN) {
-        Class argumentType = getType(binaryExpression);
-        if (argumentType == String.class) {
-          if (isInjectionHost(binaryExpression.getLeftOperand())
-                  && isInjectionHost(binaryExpression.getRightOperand())) {
-            return false;
+  private fun checkElement(
+    context: JavaContext, call: UCallExpression, element: UElement?
+  ): Boolean {
+    if (element is UBinaryExpression) {
+      val operator = element.operator
+      if (operator === UastBinaryOperator.PLUS || operator === UastBinaryOperator.PLUS_ASSIGN) {
+        val argumentType = getType(element)
+        if (argumentType == String::class.java) {
+          if (element.leftOperand.isInjectionHost()
+            && element.rightOperand.isInjectionHost()
+          ) {
+            return false
           }
-          LintFix fix = quickFixIssueBinary(binaryExpression);
-          context.report(ISSUE_BINARY, call, context.getLocation(element),
-              ""Replace String concatenation with Timber's string formatting"", fix);
-          return true;
+          context.report(
+            Incident(
+              issue = ISSUE_BINARY,
+              scope = call,
+              location = context.getLocation(element),
+              message = ""Replace String concatenation with Timber's string formatting"",
+              fix = quickFixIssueBinary(element)
+            )
+          )
+          return true
         }
       }
-    } else if (element instanceof UIfExpression) {
-      return checkConditionalUsage(context, call, element);
+    } else if (element is UIfExpression) {
+      return checkConditionalUsage(context, call, element)
     }
-    return false;
+    return false
   }
 
-  private boolean checkConditionalUsage(JavaContext context, UCallExpression call,
-      UElement element) {
-    UElement thenElement;
-    UElement elseElement;
-    if (element instanceof UIfExpression) {
-      UIfExpression ifArg = (UIfExpression) element;
-      thenElement = ifArg.getThenExpression();
-      elseElement = ifArg.getElseExpression();
+  private fun checkConditionalUsage(
+    context: JavaContext, call: UCallExpression, element: UElement
+  ): Boolean {
+    return if (element is UIfExpression) {
+      if (checkElement(context, call, element.thenExpression)) {
+        false
+      } else {
+        checkElement(context, call, element.elseExpression)
+      }
     } else {
-      return false;
+      false
     }
-    if (checkElement(context, call, thenElement)) {
-      return false;
-    }
-    return checkElement(context, call, elseElement);
   }
 
-  private LintFix quickFixIssueLog(UCallExpression logCall) {
-    List<UExpression> arguments = logCall.getValueArguments();
-    String methodName = logCall.getMethodName();
-    UExpression tag = arguments.get(0);
+  private fun quickFixIssueLog(logCall: UCallExpression): LintFix {
+    val arguments = logCall.valueArguments
+    val methodName = logCall.methodName
+    val tag = arguments[0]
 
     // 1st suggestion respects author's tag preference.
     // 2nd suggestion drops it (Timber defaults to calling class name).
-    String fixSource1 = ""Timber.tag("" + tag.asSourceString() + "")."";
-    String fixSource2 = ""Timber."";
-
-    int numArguments = arguments.size();
-    if (numArguments == 2) {
-      UExpression msgOrThrowable = arguments.get(1);
-      fixSource1 += methodName + ""("" + msgOrThrowable.asSourceString() + "")"";
-      fixSource2 += methodName + ""("" + msgOrThrowable.asSourceString() + "")"";
-    } else if (numArguments == 3) {
-      UExpression msg = arguments.get(1);
-      UExpression throwable = arguments.get(2);
-      fixSource1 +=
-          methodName + ""("" + throwable.asSourceString() + "", "" + msg.asSourceString() + "")"";
-      fixSource2 +=
-          methodName + ""("" + throwable.asSourceString() + "", "" + msg.asSourceString() + "")"";
-    } else {
-      throw new IllegalStateException(""android.util.Log overloads should have 2 or 3 arguments"");
+    var fixSource1 = ""Timber.tag(${tag.asSourceString()}).""
+    var fixSource2 = ""Timber.""
+
+    when (arguments.size) {
+      2 -> {
+        val msgOrThrowable = arguments[1]
+        fixSource1 += ""$methodName(${msgOrThrowable.asSourceString()})""
+        fixSource2 += ""$methodName(${msgOrThrowable.asSourceString()})""
+      }
+      3 -> {
+        val msg = arguments[1]
+        val throwable = arguments[2]
+        fixSource1 += ""$methodName(${throwable.asSourceString()}, ${msg.asSourceString()})""
+        fixSource2 += ""$methodName(${throwable.asSourceString()}, ${msg.asSourceString()})""
+      }
+      else -> {
+        throw IllegalStateException(""android.util.Log overloads should have 2 or 3 arguments"")
+      }
     }
 
-    String logCallSource = logCall.asSourceString();
-    LintFix.GroupBuilder fixGrouper = fix().group();
-    fixGrouper.add(
-        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource1).build());
-    fixGrouper.add(
-        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource2).build());
-    return fixGrouper.build();
+    val logCallSource = logCall.asSourceString()
+    return fix().group()
+      .add(
+        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource1).build()
+      )
+      .add(
+        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource2).build()
+      )
+      .build()
   }
 
-  private LintFix quickFixIssueFormat(UCallExpression stringFormatCall) {
+  private fun quickFixIssueFormat(stringFormatCall: UCallExpression): LintFix {
     // Handles:
     // 1) String.format(..)
     // 2) format(...) [static import]
-    UExpression callReceiver = stringFormatCall.getReceiver();
-    String callSourceString = callReceiver == null ? """" : callReceiver.asSourceString() + ""."";
-    callSourceString += stringFormatCall.getMethodName();
+    val callReceiver = stringFormatCall.receiver
+    var callSourceString = if (callReceiver == null) """" else ""${callReceiver.asSourceString()}.""
+    callSourceString += stringFormatCall.methodName
 
     return fix().name(""Remove String.format(...)"").composite() //
-        // Delete closing parenthesis of String.format(...)
-        .add(fix().replace().pattern(callSourceString + ""\\(.*(\\))"").with("""").build())
-        // Delete ""String.format(""
-        .add(fix().replace().text(callSourceString + ""("").with("""").build()).build();
+      // Delete closing parenthesis of String.format(...)
+      .add(fix().replace().pattern(""$callSourceString\\(.*(\\))"").with("""").build())
+      // Delete ""String.format(""
+      .add(fix().replace().text(""$callSourceString("").with("""").build()).build()
   }
 
-  private LintFix quickFixIssueThrowable(UCallExpression call, List<UExpression> arguments,
-      UExpression throwable) {
-    String rearrangedArgs = throwable.asSourceString();
-    for (UExpression arg : arguments) {
-      if (arg != throwable) {
-        rearrangedArgs += ("", "" + arg.asSourceString());
+  private fun quickFixIssueThrowable(
+    call: UCallExpression, arguments: List<UExpression>, throwable: UExpression
+  ): LintFix {
+    val rearrangedArgs = buildString {
+      append(throwable.asSourceString())
+      arguments.forEach { arg ->
+        if (arg !== throwable) {
+          append("", ${arg.asSourceString()}"")
+        }
       }
     }
-    return fix().replace() //
-        .pattern(""\\."" + call.getMethodName() + ""\\((.*)\\)"").with(rearrangedArgs).build();
+    return fix()
+      .replace()
+      .pattern(""\\."" + call.methodName + ""\\((.*)\\)"")
+      .with(rearrangedArgs)
+      .build()
   }
 
-  private LintFix quickFixIssueBinary(UBinaryExpression binaryExpression) {
-    UExpression leftOperand = binaryExpression.getLeftOperand();
-    UExpression rightOperand = binaryExpression.getRightOperand();
-    boolean isLeftLiteral = isInjectionHost(leftOperand);
-    boolean isRightLiteral = isInjectionHost(rightOperand);
+  private fun quickFixIssueBinary(binaryExpression: UBinaryExpression): LintFix {
+    val leftOperand = binaryExpression.leftOperand
+    val rightOperand = binaryExpression.rightOperand
+    val isLeftLiteral = leftOperand.isInjectionHost()
+    val isRightLiteral = rightOperand.isInjectionHost()
 
     // ""a"" + ""b"" => ""ab""
     if (isLeftLiteral && isRightLiteral) {
-      return fix().replace() //
-          .text(binaryExpression.asSourceString())
-          .with(""\"""" + evaluateString(binaryExpression) + ""\"""")
-          .build();
+      return fix().replace()
+        .text(binaryExpression.asSourceString())
+        .with(""\""${binaryExpression.evaluateString()}\"""")
+        .build()
     }
 
-    String args;
-    if (isLeftLiteral) {
-      args = ""\"""" + evaluateString(leftOperand) + ""%s\"", "" + rightOperand.asSourceString();
-    } else if (isRightLiteral) {
-      args = ""\""%s"" + evaluateString(rightOperand) + ""\"", "" + leftOperand.asSourceString();
-    } else {
-      args = ""\""%s%s\"", "" + leftOperand.asSourceString() + "", "" + rightOperand.asSourceString();
+    val args: String = when {
+      isLeftLiteral -> {
+        ""\""${leftOperand.evaluateString()}%s\"", ${rightOperand.asSourceString()}""
+      }
+      isRightLiteral -> {
+        ""\""%s${rightOperand.evaluateString()}\"", ${leftOperand.asSourceString()}""
+      }
+      else -> {
+        ""\""%s%s\"", ${leftOperand.asSourceString()}, ${rightOperand.asSourceString()}""
+      }
     }
-    return fix().replace().text(binaryExpression.asSourceString()).with(args).build();
+    return fix().replace().text(binaryExpression.asSourceString()).with(args).build()
   }
 
-  private LintFix quickFixIssueTagLength(UExpression argument, String tag) {
-    int numCharsToTrim = tag.length() - 23;
+  private fun quickFixIssueTagLength(argument: UExpression, tag: String): LintFix {
+    val numCharsToTrim = tag.length - 23
     return fix().replace()
-        .name(""Strip last "" + (numCharsToTrim == 1 ? ""char"" : numCharsToTrim + "" chars""))
-        .text(argument.asSourceString())
-        .with(""\"""" + tag.substring(0, 23) + ""\"""")
-        .build();
+      .name(""Strip last "" + if (numCharsToTrim == 1) ""char"" else ""$numCharsToTrim chars"")
+      .text(argument.asSourceString())
+      .with(""\""${tag.substring(0, 23)}\"""")
+      .build()
   }
 
-  private LintFix quickFixRemoveRedundantArgument(UExpression arg) {
+  private fun quickFixRemoveRedundantArgument(arg: UExpression): LintFix {
     return fix().replace()
-        .name(""Remove redundant argument"")
-        .text("", "" + arg.asSourceString())
-        .with("""")
-        .build();
+      .name(""Remove redundant argument"")
+      .text("", ${arg.asSourceString()}"")
+      .with("""")
+      .build()
   }
 
-  private LintFix quickFixReplaceMessageWithThrowable(UExpression arg) {
+  private fun quickFixReplaceMessageWithThrowable(arg: UExpression): LintFix {
     // guaranteed based on callers of this method
-    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
-    UExpression receiver = argExpression.getReceiver();
-
+    val receiver = (arg as UQualifiedReferenceExpression).receiver
     return fix().replace()
-        .name(""Replace message with throwable"")
-        .text(arg.asSourceString())
-        .with(receiver.asSourceString())
-        .build();
+      .name(""Replace message with throwable"")
+      .text(arg.asSourceString())
+      .with(receiver.asSourceString())
+      .build()
   }
 
-  static Issue[] getIssues() {
-    return new Issue[] {
-        ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,
-        ISSUE_TAG_LENGTH, ISSUE_EXCEPTION_LOGGING
-    };
+  companion object {
+    private const val GET_STRING_METHOD = ""getString""
+    private const val TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)""
+
+    val ISSUE_LOG = Issue.create(
+      id = ""LogNotTimber"",
+      briefDescription = ""Logging call to Log instead of Timber"",
+      explanation = ""Since Timber is included in the project, it is likely that calls to Log should instead be going to Timber."",
+      category = MESSAGES,
+      priority = 5,
+      severity = WARNING,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_FORMAT = Issue.create(
+      id = ""StringFormatInTimber"",
+      briefDescription = ""Logging call with Timber contains String#format()"",
+      explanation = ""Since Timber handles String.format automatically, you may not use String#format()."",
+      category = MESSAGES,
+      priority = 5,
+      severity = WARNING,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_THROWABLE = Issue.create(
+      id = ""ThrowableNotAtBeginning"",
+      briefDescription = ""Exception in Timber not at the beginning"",
+      explanation = ""In Timber you have to pass a Throwable at the beginning of the call."",
+      category = MESSAGES,
+      priority = 5,
+      severity = WARNING,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_BINARY = Issue.create(
+      id = ""BinaryOperationInTimber"",
+      briefDescription = ""Use String#format()"",
+      explanation = ""Since Timber handles String#format() automatically, use this instead of String concatenation."",
+      category = MESSAGES,
+      priority = 5,
+      severity = WARNING,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_ARG_COUNT = Issue.create(
+      id = ""TimberArgCount"",
+      briefDescription = ""Formatting argument types incomplete or inconsistent"",
+      explanation = ""When a formatted string takes arguments, you need to pass at least that amount of arguments to the formatting call."",
+      category = MESSAGES,
+      priority = 9,
+      severity = ERROR,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_ARG_TYPES = Issue.create(
+      id = ""TimberArgTypes"",
+      briefDescription = ""Formatting string doesn't match passed arguments"",
+      explanation = ""The argument types that you specified in your formatting string does not match the types of the arguments that you passed to your formatting call."",
+      category = MESSAGES,
+      priority = 9,
+      severity = ERROR,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_TAG_LENGTH = Issue.create(
+      id = ""TimberTagLength"",
+      briefDescription = ""Too Long Log Tags"",
+      explanation = ""Log tags are only allowed to be at most"" + "" 23 tag characters long."",
+      category = CORRECTNESS,
+      priority = 5,
+      severity = ERROR,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_EXCEPTION_LOGGING = Issue.create(
+      id = ""TimberExceptionLogging"",
+      briefDescription = ""Exception Logging"",
+      explanation = ""Explicitly including the exception message is redundant when supplying an exception to log."",
+      category = CORRECTNESS,
+      priority = 3,
+      severity = WARNING,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+
+    val issues = listOf(
+      ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,
+      ISSUE_TAG_LENGTH, ISSUE_EXCEPTION_LOGGING
+    )
   }
-
-  public static final Issue ISSUE_LOG =
-      Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
-          ""Since Timber is included in the project, it is likely that calls to Log should instead""
-              + "" be going to Timber."", Category.MESSAGES, 5, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_FORMAT =
-      Issue.create(""StringFormatInTimber"", ""Logging call with Timber contains String#format()"",
-          ""Since Timber handles String.format automatically, you may not use String#format()."",
-          Category.MESSAGES, 5, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_THROWABLE =
-      Issue.create(""ThrowableNotAtBeginning"", ""Exception in Timber not at the beginning"",
-          ""In Timber you have to pass a Throwable at the beginning of the call."", Category.MESSAGES,
-          5, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_BINARY =
-      Issue.create(""BinaryOperationInTimber"", ""Use String#format()"",
-          ""Since Timber handles String#format() automatically, use this instead of String""
-              + "" concatenation."", Category.MESSAGES, 5, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_ARG_COUNT =
-      Issue.create(""TimberArgCount"", ""Formatting argument types incomplete or inconsistent"",
-          ""When a formatted string takes arguments, you need to pass at least that amount of""
-              + "" arguments to the formatting call."", Category.MESSAGES, 9, Severity.ERROR,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_ARG_TYPES =
-      Issue.create(""TimberArgTypes"", ""Formatting string doesn't match passed arguments"",
-          ""The argument types that you specified in your formatting string does not match the types""
-              + "" of the arguments that you passed to your formatting call."", Category.MESSAGES, 9,
-          Severity.ERROR,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_TAG_LENGTH = Issue.create(""TimberTagLength"", ""Too Long Log Tags"",
-      ""Log tags are only allowed to be at most"" + "" 23 tag characters long."", Category.CORRECTNESS,
-      5, Severity.ERROR, new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_EXCEPTION_LOGGING =
-      Issue.create(""TimberExceptionLogging"", ""Exception Logging"", ""Explicitly including the""
-              + "" exception message is redundant when supplying an exception to log."",
-          Category.CORRECTNESS, 3, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
 }","@@ -1,814 +1,807 @@
-package timber.lint;
-
-import com.android.annotations.NonNull;
-import com.android.annotations.Nullable;
-import com.android.tools.lint.checks.StringFormatDetector;
-import com.android.tools.lint.client.api.JavaEvaluator;
-import com.android.tools.lint.detector.api.Category;
-import com.android.tools.lint.detector.api.Detector;
-import com.android.tools.lint.detector.api.Implementation;
-import com.android.tools.lint.detector.api.Incident;
-import com.android.tools.lint.detector.api.Issue;
-import com.android.tools.lint.detector.api.JavaContext;
-import com.android.tools.lint.detector.api.LintFix;
-import com.android.tools.lint.detector.api.Scope;
-import com.android.tools.lint.detector.api.Severity;
-import com.intellij.psi.PsiClass;
-import com.intellij.psi.PsiClassType;
-import com.intellij.psi.PsiElement;
-import com.intellij.psi.PsiField;
-import com.intellij.psi.PsiLiteralExpression;
-import com.intellij.psi.PsiMethod;
-import com.intellij.psi.PsiMethodCallExpression;
-import com.intellij.psi.PsiParameter;
-import com.intellij.psi.PsiType;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import org.jetbrains.uast.UBinaryExpression;
-import org.jetbrains.uast.UCallExpression;
-import org.jetbrains.uast.UElement;
-import org.jetbrains.uast.UExpression;
-import org.jetbrains.uast.UIfExpression;
-import org.jetbrains.uast.ULiteralExpression;
-import org.jetbrains.uast.UMethod;
-import org.jetbrains.uast.UQualifiedReferenceExpression;
-import org.jetbrains.uast.USimpleNameReferenceExpression;
-import org.jetbrains.uast.UastBinaryOperator;
-import org.jetbrains.uast.util.UastExpressionUtils;
-
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_BOOLEAN;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_BYTE;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_CHAR;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_DOUBLE;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_FLOAT;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_INT;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_LONG;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_NULL;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_OBJECT;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_SHORT;
-import static com.android.tools.lint.client.api.JavaEvaluatorKt.TYPE_STRING;
-import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
-import static com.android.tools.lint.detector.api.Constraints.minSdkLessThan;
-import static com.android.tools.lint.detector.api.Lint.isKotlin;
-import static com.android.tools.lint.detector.api.Lint.isString;
-import static com.android.tools.lint.detector.api.Lint.skipParentheses;
-import static org.jetbrains.uast.UastBinaryOperator.PLUS;
-import static org.jetbrains.uast.UastBinaryOperator.PLUS_ASSIGN;
-import static org.jetbrains.uast.UastLiteralUtils.isInjectionHost;
-import static org.jetbrains.uast.UastUtils.evaluateString;
-
-public final class WrongTimberUsageDetector extends Detector implements Detector.UastScanner {
-  private final static String GET_STRING_METHOD = ""getString"";
-  private final static String TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)"";
-
-  @Override public List<String> getApplicableMethodNames() {
-    return Arrays.asList(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"");
-  }
-
-  @Override public void visitMethodCall(JavaContext context, UCallExpression call, PsiMethod method) {
-    String methodName = call.getMethodName();
-    JavaEvaluator evaluator = context.getEvaluator();
-
-    if (""format"".equals(methodName) && evaluator.isMemberInClass(method, ""java.lang.String"")) {
-      checkNestedStringFormat(context, call);
-      return;
+package timber.lint
+
+import com.android.tools.lint.detector.api.skipParentheses
+import org.jetbrains.uast.util.isMethodCall
+import com.android.tools.lint.detector.api.minSdkLessThan
+import com.android.tools.lint.detector.api.isString
+import com.android.tools.lint.detector.api.isKotlin
+import org.jetbrains.uast.isInjectionHost
+import org.jetbrains.uast.evaluateString
+import com.android.tools.lint.detector.api.Detector
+import com.android.tools.lint.detector.api.JavaContext
+import org.jetbrains.uast.UCallExpression
+import com.intellij.psi.PsiMethod
+import com.android.tools.lint.client.api.JavaEvaluator
+import com.android.tools.lint.detector.api.LintFix
+import org.jetbrains.uast.UElement
+import org.jetbrains.uast.UMethod
+import org.jetbrains.uast.UExpression
+import com.android.tools.lint.detector.api.Incident
+import org.jetbrains.uast.UQualifiedReferenceExpression
+import org.jetbrains.uast.UBinaryExpression
+import org.jetbrains.uast.UastBinaryOperator
+import org.jetbrains.uast.UIfExpression
+import com.intellij.psi.PsiMethodCallExpression
+import com.intellij.psi.PsiLiteralExpression
+import com.intellij.psi.PsiType
+import com.intellij.psi.PsiClassType
+import com.android.tools.lint.checks.StringFormatDetector
+import com.android.tools.lint.client.api.TYPE_BOOLEAN
+import com.android.tools.lint.client.api.TYPE_BOOLEAN_WRAPPER
+import com.android.tools.lint.client.api.TYPE_BYTE
+import com.android.tools.lint.client.api.TYPE_BYTE_WRAPPER
+import com.android.tools.lint.client.api.TYPE_CHAR
+import com.android.tools.lint.client.api.TYPE_DOUBLE
+import com.android.tools.lint.client.api.TYPE_DOUBLE_WRAPPER
+import com.android.tools.lint.client.api.TYPE_FLOAT
+import com.android.tools.lint.client.api.TYPE_FLOAT_WRAPPER
+import com.android.tools.lint.client.api.TYPE_INT
+import com.android.tools.lint.client.api.TYPE_INTEGER_WRAPPER
+import com.android.tools.lint.client.api.TYPE_LONG
+import com.android.tools.lint.client.api.TYPE_LONG_WRAPPER
+import com.android.tools.lint.client.api.TYPE_NULL
+import com.android.tools.lint.client.api.TYPE_OBJECT
+import com.android.tools.lint.client.api.TYPE_SHORT
+import com.android.tools.lint.client.api.TYPE_SHORT_WRAPPER
+import com.android.tools.lint.client.api.TYPE_STRING
+import com.android.tools.lint.detector.api.Category.Companion.CORRECTNESS
+import com.android.tools.lint.detector.api.Category.Companion.MESSAGES
+import com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString
+import com.android.tools.lint.detector.api.Detector.UastScanner
+import com.android.tools.lint.detector.api.Implementation
+import com.android.tools.lint.detector.api.Issue
+import com.android.tools.lint.detector.api.Scope.Companion.JAVA_FILE_SCOPE
+import com.android.tools.lint.detector.api.Severity.ERROR
+import com.android.tools.lint.detector.api.Severity.WARNING
+import org.jetbrains.uast.ULiteralExpression
+import org.jetbrains.uast.USimpleNameReferenceExpression
+import com.intellij.psi.PsiField
+import com.intellij.psi.PsiParameter
+import java.lang.Byte
+import java.lang.Double
+import java.lang.Float
+import java.lang.IllegalStateException
+import java.lang.Long
+import java.lang.Short
+import java.util.Calendar
+import java.util.Date
+import java.util.regex.Pattern
+
+class WrongTimberUsageDetector : Detector(), UastScanner {
+  override fun getApplicableMethodNames() = listOf(""tag"", ""format"", ""v"", ""d"", ""i"", ""w"", ""e"", ""wtf"")
+
+  override fun visitMethodCall(context: JavaContext, node: UCallExpression, method: PsiMethod) {
+    val methodName = node.methodName
+    val evaluator = context.evaluator
+
+    if (""format"" == methodName && evaluator.isMemberInClass(method, ""java.lang.String"")) {
+      checkNestedStringFormat(context, node)
+      return
     }
     // As of API 26, Log tags are no longer limited to 23 chars.
-    if (""tag"".equals(methodName)
-        && evaluator.isMemberInClass(method, ""timber.log.Timber"")
-        && context.getProject().getMinSdk() <= 25) {
-      checkTagLength(context, call);
-      return;
+    if (""tag"" == methodName
+      && evaluator.isMemberInClass(method, ""timber.log.Timber"")
+      && context.project.minSdk < 26
+    ) {
+      checkTagLength(context, node)
+      return
     }
     if (evaluator.isMemberInClass(method, ""android.util.Log"")) {
-      LintFix fix = quickFixIssueLog(call);
-      context.report(ISSUE_LOG, call, context.getLocation(call), ""Using 'Log' instead of 'Timber'"",
-          fix);
-      return;
+      context.report(
+        Incident(
+          issue = ISSUE_LOG,
+          scope = node,
+          location = context.getLocation(node),
+          message = ""Using 'Log' instead of 'Timber'"",
+          fix = quickFixIssueLog(node)
+        )
+      )
+      return
     }
     // Handles Timber.X(..) and Timber.tag(..).X(..) where X in (v|d|i|w|e|wtf).
     if (isTimberLogMethod(method, evaluator)) {
-      checkMethodArguments(context, call);
-      checkFormatArguments(context, call);
-      checkExceptionLogging(context, call);
+      checkMethodArguments(context, node)
+      checkFormatArguments(context, node)
+      checkExceptionLogging(context, node)
     }
   }
 
-  private boolean isTimberLogMethod(PsiMethod method, JavaEvaluator evaluator) {
+  private fun isTimberLogMethod(method: PsiMethod, evaluator: JavaEvaluator): Boolean {
     return evaluator.isMemberInClass(method, ""timber.log.Timber"")
         || evaluator.isMemberInClass(method, ""timber.log.Timber.Companion"")
-        || evaluator.isMemberInClass(method, ""timber.log.Timber.Tree"");
+        || evaluator.isMemberInClass(method, ""timber.log.Timber.Tree"")
   }
 
-  private void checkNestedStringFormat(JavaContext context, UCallExpression call) {
-    UElement current = call;
+  private fun checkNestedStringFormat(context: JavaContext, call: UCallExpression) {
+    var current: UElement? = call
     while (true) {
-      current = skipParentheses(current.getUastParent());
-      if (current == null || current instanceof UMethod) {
+      current = skipParentheses(current!!.uastParent)
+      if (current == null || current is UMethod) {
         // Reached AST root or code block node; String.format not inside Timber.X(..).
-        return;
+        return
       }
-      if (UastExpressionUtils.isMethodCall(current)) {
-        UCallExpression maybeTimberLogCall = (UCallExpression) current;
-        JavaEvaluator evaluator = context.getEvaluator();
-        PsiMethod psiMethod = maybeTimberLogCall.resolve();
-        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.getName())
-            && evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")) {
-          LintFix fix = quickFixIssueFormat(call);
-          context.report(ISSUE_FORMAT, call, context.getLocation(call),
-              ""Using 'String#format' inside of 'Timber'"", fix);
-          return;
+      if (current.isMethodCall()) {
+        val psiMethod = (current as UCallExpression).resolve()
+        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod!!.name)
+          && context.evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")
+        ) {
+          context.report(
+            Incident(
+              issue = ISSUE_FORMAT,
+              scope = call,
+              location = context.getLocation(call),
+              message = ""Using 'String#format' inside of 'Timber'"",
+              fix = quickFixIssueFormat(call)
+            )
+          )
+          return
         }
       }
     }
   }
 
-  private void checkTagLength(JavaContext context, UCallExpression call) {
-    List<UExpression> arguments = call.getValueArguments();
-    UExpression argument = arguments.get(0);
-    String tag = evaluateString(context, argument, true);
-    if (tag != null && tag.length() > 23) {
-      String message =
-          String.format(Locale.US, ""The logging tag can be at most 23 characters, was %1$d (%2$s)"",
-              tag.length(), tag);
-      LintFix fix = quickFixIssueTagLength(argument, tag);
+  private fun checkTagLength(context: JavaContext, call: UCallExpression) {
+    val argument = call.valueArguments[0]
+    val tag = evaluateString(context, argument, true)
+    if (tag != null && tag.length > 23) {
       context.report(
-          new Incident(
-              ISSUE_TAG_LENGTH,
-              argument,
-              context.getLocation(argument),
-              message,
-              fix
-          ), minSdkLessThan(26)
-      );
+        Incident(
+          issue = ISSUE_TAG_LENGTH,
+          scope = argument,
+          location = context.getLocation(argument),
+          message = ""The logging tag can be at most 23 characters, was ${tag.length} ($tag)"",
+          fix = quickFixIssueTagLength(argument, tag)
+        ),
+        constraint = minSdkLessThan(26)
+      )
     }
   }
 
-  private static void checkFormatArguments(JavaContext context, UCallExpression call) {
-    List<UExpression> arguments = call.getValueArguments();
-    int numArguments = arguments.size();
+  private fun checkFormatArguments(context: JavaContext, call: UCallExpression) {
+    val arguments = call.valueArguments
+    val numArguments = arguments.size
     if (numArguments == 0) {
-      return;
+      return
     }
 
-    int startIndexOfArguments = 1;
-    UExpression formatStringArg = arguments.get(0);
-    if (isSubclassOf(context, formatStringArg, Throwable.class)) {
+    var startIndexOfArguments = 1
+    var formatStringArg = arguments[0]
+    if (isSubclassOf(context, formatStringArg, Throwable::class.java)) {
       if (numArguments == 1) {
-        return;
+        return
       }
-      formatStringArg = arguments.get(1);
-      startIndexOfArguments++;
+      formatStringArg = arguments[1]
+      startIndexOfArguments++
     }
 
-    String formatString = evaluateString(context, formatStringArg, true);
-    // We passed for example a method call
-    if (formatString == null) {
-      return;
-    }
+    val formatString = evaluateString(context, formatStringArg, true)
+      ?: return // We passed for example a method call
 
-    int formatArgumentCount = getFormatArgumentCount(formatString);
-    int passedArgCount = numArguments - startIndexOfArguments;
+    val formatArgumentCount = getFormatArgumentCount(formatString)
+    val passedArgCount = numArguments - startIndexOfArguments
     if (formatArgumentCount < passedArgCount) {
-      context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
-          Locale.US, ""Wrong argument count, format string `%1$s` requires ""
-              + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
-          passedArgCount));
-      return;
+      context.report(
+        Incident(
+          issue = ISSUE_ARG_COUNT,
+          scope = call,
+          location = context.getLocation(call),
+          message = ""Wrong argument count, format string `${formatString}` requires `${formatArgumentCount}` but format call supplies `${passedArgCount}`""
+        )
+      )
+      return
     }
 
     if (formatArgumentCount == 0) {
-      return;
+      return
     }
 
-    List<String> types = getStringArgumentTypes(formatString);
-    UExpression argument = null;
-    int argumentIndex = startIndexOfArguments;
-    boolean valid;
-    for (int i = 0; i < types.size(); i++) {
-      String formatType = types.get(i);
+    val types = getStringArgumentTypes(formatString)
+    var argument: UExpression? = null
+    var argumentIndex = startIndexOfArguments
+    var valid: Boolean
+    for (i in types.indices) {
+      val formatType = types[i]
       if (argumentIndex != numArguments) {
-        argument = arguments.get(argumentIndex++);
+        argument = arguments[argumentIndex++]
       } else {
-        context.report(ISSUE_ARG_COUNT, call, context.getLocation(call), String.format(
-            Locale.US, ""Wrong argument count, format string `%1$s` requires ""
-                + ""`%2$d` but format call supplies `%3$d`"", formatString, formatArgumentCount,
-            passedArgCount));
+        context.report(
+          Incident(
+            issue = ISSUE_ARG_COUNT,
+            scope = call,
+            location = context.getLocation(call),
+            message = ""Wrong argument count, format string `${formatString}` requires `${formatArgumentCount}` but format call supplies `${passedArgCount}`""
+          )
+        )
       }
 
-      Class type = getType(argument);
-      if (type == null) {
-        continue;
-      }
-
-      char last = formatType.charAt(formatType.length() - 1);
-      if (formatType.length() >= 2
-          && Character.toLowerCase(formatType.charAt(formatType.length() - 2)) == 't') {
+      val type = getType(argument) ?: continue
+      val last = formatType.last()
+      if (formatType.length >= 2 && formatType[formatType.length - 2].toLowerCase() == 't') {
         // Date time conversion.
-        switch (last) {
-          // time
-          case 'H':
-          case 'I':
-          case 'k':
-          case 'l':
-          case 'M':
-          case 'S':
-          case 'L':
-          case 'N':
-          case 'p':
-          case 'z':
-          case 'Z':
-          case 's':
-          case 'Q':
-            // date
-          case 'B':
-          case 'b':
-          case 'h':
-          case 'A':
-          case 'a':
-          case 'C':
-          case 'Y':
-          case 'y':
-          case 'j':
-          case 'm':
-          case 'd':
-          case 'e':
-            // date/time
-          case 'R':
-          case 'T':
-          case 'r':
-          case 'D':
-          case 'F':
-          case 'c':
-            valid = type == Integer.TYPE || type == Calendar.class || type == Date.class
-                || type == Long.TYPE;
+        when (last) {
+          'H', 'I', 'k', 'l', 'M', 'S', 'L', 'N', 'p', 'z', 'Z', 's', 'Q', // time
+          'B', 'b', 'h', 'A', 'a', 'C', 'Y', 'y', 'j', 'm', 'd', 'e', // date
+          'R', 'T', 'r', 'D', 'F', 'c' -> { // date/time
+            valid =
+              type == Integer.TYPE || type == Calendar::class.java || type == Date::class.java || type == java.lang.Long.TYPE
             if (!valid) {
-              String message = String.format(
-                  Locale.US, ""Wrong argument type for date formatting argument '#%1$d' ""
-                      + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                      + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-                  type.getSimpleName(), startIndexOfArguments + i + 1);
-              context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
+              context.report(
+                Incident(
+                  issue = ISSUE_ARG_TYPES,
+                  scope = call,
+                  location = context.getLocation(argument),
+                  message = ""Wrong argument type for date formatting argument '#${i + 1}' in `${formatString}`: conversion is '`${formatType}`', received `${type.simpleName}` (argument #${startIndexOfArguments + i + 1} in method call)""
+                )
+              )
             }
-            break;
-          default:
-            String message = String.format(Locale.US, ""Wrong suffix for date format '#%1$d' ""
-                    + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                    + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-                type.getSimpleName(), startIndexOfArguments + i + 1);
-            context.report(ISSUE_FORMAT, call, context.getLocation(argument), message);
+          }
+          else -> {
+            context.report(
+              Incident(
+                issue = ISSUE_FORMAT,
+                scope = call,
+                location = context.getLocation(argument),
+                message = ""Wrong suffix for date format '#${i + 1}' in `${formatString}`: conversion is '`${formatType}`', received `${type.simpleName}` (argument #${startIndexOfArguments + i + 1} in method call)""
+              )
+            )
+          }
         }
-        continue;
+        continue
       }
-      switch (last) {
-        case 'b':
-        case 'B':
-          valid = type == Boolean.TYPE;
-          break;
-        case 'x':
-        case 'X':
-        case 'd':
-        case 'o':
-        case 'e':
-        case 'E':
-        case 'f':
-        case 'g':
-        case 'G':
-        case 'a':
-        case 'A':
-          valid = type == Integer.TYPE
-              || type == Float.TYPE
-              || type == Double.TYPE
-              || type == Long.TYPE
-              || type == Byte.TYPE
-              || type == Short.TYPE;
-          break;
-        case 'c':
-        case 'C':
-          valid = type == Character.TYPE;
-          break;
-        case 'h':
-        case 'H':
-          valid = type != Boolean.TYPE && !Number.class.isAssignableFrom(type);
-          break;
-        case 's':
-        case 'S':
-        default:
-          valid = true;
+
+      valid = when (last) {
+        'b', 'B' -> type == java.lang.Boolean.TYPE
+        'x', 'X', 'd', 'o', 'e', 'E', 'f', 'g', 'G', 'a', 'A' -> {
+          type == Integer.TYPE || type == java.lang.Float.TYPE || type == java.lang.Double.TYPE || type == java.lang.Long.TYPE || type == java.lang.Byte.TYPE || type == java.lang.Short.TYPE
+        }
+        'c', 'C' -> type == Character.TYPE
+        'h', 'H' -> type != java.lang.Boolean.TYPE && !Number::class.java.isAssignableFrom(type)
+        's', 'S' -> true
+        else -> true
       }
       if (!valid) {
-        String message = String.format(Locale.US, ""Wrong argument type for formatting argument '#%1$d' ""
-                + ""in `%2$s`: conversion is '`%3$s`', received `%4$s` ""
-                + ""(argument #%5$d in method call)"", i + 1, formatString, formatType,
-            type.getSimpleName(), startIndexOfArguments + i + 1);
-        context.report(ISSUE_ARG_TYPES, call, context.getLocation(argument), message);
+        context.report(
+          Incident(
+            issue = ISSUE_ARG_TYPES,
+            scope = call,
+            location = context.getLocation(argument),
+            message = ""Wrong argument type for formatting argument '#${i + 1}' in `${formatString}`: conversion is '`${formatType}`', received `${type.simpleName}` (argument #${startIndexOfArguments + i + 1} in method call)""
+          )
+        )
       }
     }
   }
 
-  private static Class<?> getType(UExpression expression) {
+  private fun getType(expression: UExpression?): Class<*>? {
     if (expression == null) {
-      return null;
-    }
-    if (expression instanceof PsiMethodCallExpression) {
-      PsiMethodCallExpression call = (PsiMethodCallExpression) expression;
-      PsiMethod method = call.resolveMethod();
-      if (method == null) {
-        return null;
-      }
-      String methodName = method.getName();
-      if (methodName.equals(GET_STRING_METHOD)) {
-        return String.class;
+      return null
+    }
+    if (expression is PsiMethodCallExpression) {
+      val call = expression as PsiMethodCallExpression
+      val method = call.resolveMethod() ?: return null
+      val methodName = method.name
+      if (methodName == GET_STRING_METHOD) {
+        return String::class.java
       }
-    } else if (expression instanceof PsiLiteralExpression) {
-      PsiLiteralExpression literalExpression = (PsiLiteralExpression) expression;
-      PsiType expressionType = literalExpression.getType();
-      if (isString(expressionType)) {
-        return String.class;
-      } else if (expressionType == PsiType.INT) {
-        return Integer.TYPE;
-      } else if (expressionType == PsiType.FLOAT) {
-        return Float.TYPE;
-      } else if (expressionType == PsiType.CHAR) {
-        return Character.TYPE;
-      } else if (expressionType == PsiType.BOOLEAN) {
-        return Boolean.TYPE;
-      } else if (expressionType == PsiType.NULL) {
-        return Object.class;
+    } else if (expression is PsiLiteralExpression) {
+      val literalExpression = expression as PsiLiteralExpression
+      val expressionType = literalExpression.type
+      when {
+        isString(expressionType!!) -> return String::class.java
+        expressionType === PsiType.INT -> return Integer.TYPE
+        expressionType === PsiType.FLOAT -> return java.lang.Float.TYPE
+        expressionType === PsiType.CHAR -> return Character.TYPE
+        expressionType === PsiType.BOOLEAN -> return java.lang.Boolean.TYPE
+        expressionType === PsiType.NULL -> return Any::class.java
       }
     }
 
-    PsiType type = expression.getExpressionType();
+    val type = expression.getExpressionType()
     if (type != null) {
-      Class<?> typeClass = getTypeClass(type);
-      return typeClass != null ? typeClass : Object.class;
+      val typeClass = getTypeClass(type)
+      return typeClass ?: Any::class.java
     }
 
-    return null;
+    return null
   }
 
-  private static Class<?> getTypeClass(@Nullable PsiType type) {
-    if (type != null) {
-      return getTypeClass(type.getCanonicalText());
+  private fun getTypeClass(type: PsiType?): Class<*>? {
+    return when (type?.canonicalText) {
+      null -> null
+      TYPE_STRING, ""String"" -> String::class.java
+      TYPE_INT -> Integer.TYPE
+      TYPE_BOOLEAN -> java.lang.Boolean.TYPE
+      TYPE_NULL -> Object::class.java
+      TYPE_LONG -> Long.TYPE
+      TYPE_FLOAT -> Float.TYPE
+      TYPE_DOUBLE -> Double.TYPE
+      TYPE_CHAR -> Character.TYPE
+      TYPE_OBJECT -> null
+      TYPE_INTEGER_WRAPPER, TYPE_SHORT_WRAPPER, TYPE_BYTE_WRAPPER, TYPE_LONG_WRAPPER -> Integer.TYPE
+      TYPE_FLOAT_WRAPPER, TYPE_DOUBLE_WRAPPER -> Float.TYPE
+      TYPE_BOOLEAN_WRAPPER -> java.lang.Boolean.TYPE
+      TYPE_BYTE -> Byte.TYPE
+      TYPE_SHORT -> Short.TYPE
+      ""Date"", ""java.util.Date"" -> Date::class.java
+      ""Calendar"", ""java.util.Calendar"" -> Calendar::class.java
+      ""BigDecimal"", ""java.math.BigDecimal"" -> Float.TYPE
+      ""BigInteger"", ""java.math.BigInteger"" -> Integer.TYPE
+      else -> null
     }
-    return null;
   }
 
-  private static Class<?> getTypeClass(@Nullable String typeClassName) {
-    if (typeClassName == null) {
-      return null;
-    } else if (typeClassName.equals(TYPE_STRING) || ""String"".equals(typeClassName)) {
-      return String.class;
-    } else if (typeClassName.equals(TYPE_INT)) {
-      return Integer.TYPE;
-    } else if (typeClassName.equals(TYPE_BOOLEAN)) {
-      return Boolean.TYPE;
-    } else if (typeClassName.equals(TYPE_NULL)) {
-      return Object.class;
-    } else if (typeClassName.equals(TYPE_LONG)) {
-      return Long.TYPE;
-    } else if (typeClassName.equals(TYPE_FLOAT)) {
-      return Float.TYPE;
-    } else if (typeClassName.equals(TYPE_DOUBLE)) {
-      return Double.TYPE;
-    } else if (typeClassName.equals(TYPE_CHAR)) {
-      return Character.TYPE;
-    } else if (""BigDecimal"".equals(typeClassName) || ""java.math.BigDecimal"".equals(typeClassName)) {
-      return Float.TYPE;
-    } else if (""BigInteger"".equals(typeClassName) || ""java.math.BigInteger"".equals(typeClassName)) {
-      return Integer.TYPE;
-    } else if (typeClassName.equals(TYPE_OBJECT)) {
-      return null;
-    } else if (typeClassName.startsWith(""java.lang."")) {
-      if (""java.lang.Integer"".equals(typeClassName)
-          || ""java.lang.Short"".equals(typeClassName)
-          || ""java.lang.Byte"".equals(typeClassName)
-          || ""java.lang.Long"".equals(typeClassName)) {
-        return Integer.TYPE;
-      } else if (""java.lang.Float"".equals(typeClassName) || ""java.lang.Double"".equals(
-          typeClassName)) {
-        return Float.TYPE;
-      } else if (""java.lang.Boolean"".equals(typeClassName)) {
-        return Boolean.TYPE;
-      } else {
-        return null;
-      }
-    } else if (typeClassName.equals(TYPE_BYTE)) {
-      return Byte.TYPE;
-    } else if (typeClassName.equals(TYPE_SHORT)) {
-      return Short.TYPE;
-    } else if (""Date"".equals(typeClassName) || ""java.util.Date"".equals(typeClassName)) {
-      return Date.class;
-    } else if (""Calendar"".equals(typeClassName) || ""java.util.Calendar"".equals(typeClassName)) {
-      return Calendar.class;
-    } else {
-      return null;
+  private fun isSubclassOf(
+    context: JavaContext, expression: UExpression, cls: Class<*>
+  ): Boolean {
+    val expressionType = expression.getExpressionType()
+    if (expressionType is PsiClassType) {
+      return context.evaluator.extendsClass(expressionType.resolve(), cls.name, false)
     }
+    return false
   }
 
-  private static boolean isSubclassOf(JavaContext context, UExpression expression, Class<?> cls) {
-    PsiType expressionType = expression.getExpressionType();
-    if (expressionType instanceof PsiClassType) {
-      PsiClassType classType = (PsiClassType) expressionType;
-      PsiClass resolvedClass = classType.resolve();
-      return context.getEvaluator().extendsClass(resolvedClass, cls.getName(), false);
-    }
-    return false;
-  }
+  private fun getStringArgumentTypes(formatString: String): List<String> {
+    val types = mutableListOf<String>()
+    val matcher = StringFormatDetector.FORMAT.matcher(formatString)
+    var index = 0
+    var prevIndex = 0
 
-  private static List<String> getStringArgumentTypes(String formatString) {
-    List<String> types = new ArrayList<>();
-    Matcher matcher = StringFormatDetector.FORMAT.matcher(formatString);
-    int index = 0;
-    int prevIndex = 0;
     while (true) {
       if (matcher.find(index)) {
-        int matchStart = matcher.start();
+        val matchStart = matcher.start()
         while (prevIndex < matchStart) {
-          char c = formatString.charAt(prevIndex);
+          val c = formatString[prevIndex]
           if (c == '\\') {
-            prevIndex++;
+            prevIndex++
           }
-          prevIndex++;
+          prevIndex++
         }
         if (prevIndex > matchStart) {
-          index = prevIndex;
-          continue;
+          index = prevIndex
+          continue
         }
 
-        index = matcher.end();
-        String str = formatString.substring(matchStart, matcher.end());
-        if (""%%"".equals(str) || ""%n"".equals(str)) {
-          continue;
+        index = matcher.end()
+        val str = formatString.substring(matchStart, matcher.end())
+        if (""%%"" == str || ""%n"" == str) {
+          continue
         }
-        String time = matcher.group(5);
-        if (""t"".equalsIgnoreCase(time)) {
-          types.add(time + matcher.group(6));
+        val time = matcher.group(5)
+        types += if (""t"".equals(time, ignoreCase = true)) {
+          time + matcher.group(6)
         } else {
-          types.add(matcher.group(6));
+          matcher.group(6)
         }
       } else {
-        break;
+        break
       }
     }
-    return types;
+    return types
   }
 
-  private static int getFormatArgumentCount(@NonNull String s) {
-    Matcher matcher = StringFormatDetector.FORMAT.matcher(s);
-    int index = 0;
-    int prevIndex = 0;
-    int nextNumber = 1;
-    int max = 0;
+  private fun getFormatArgumentCount(s: String): Int {
+    val matcher = StringFormatDetector.FORMAT.matcher(s)
+    var index = 0
+    var prevIndex = 0
+    var nextNumber = 1
+    var max = 0
     while (true) {
       if (matcher.find(index)) {
-        String value = matcher.group(6);
-        if (""%"".equals(value) || ""n"".equals(value)) {
-          index = matcher.end();
-          continue;
+        val value = matcher.group(6)
+        if (""%"" == value || ""n"" == value) {
+          index = matcher.end()
+          continue
         }
-        int matchStart = matcher.start();
-        for (; prevIndex < matchStart; prevIndex++) {
-          char c = s.charAt(prevIndex);
+        val matchStart = matcher.start()
+        while (prevIndex < matchStart) {
+          val c = s[prevIndex]
           if (c == '\\') {
-            prevIndex++;
+            prevIndex++
           }
+          prevIndex++
         }
         if (prevIndex > matchStart) {
-          index = prevIndex;
-          continue;
+          index = prevIndex
+          continue
         }
 
-        int number;
-        String numberString = matcher.group(1);
+        var number: Int
+        var numberString = matcher.group(1)
         if (numberString != null) {
           // Strip off trailing $
-          numberString = numberString.substring(0, numberString.length() - 1);
-          number = Integer.parseInt(numberString);
-          nextNumber = number + 1;
+          numberString = numberString.substring(0, numberString.length - 1)
+          number = numberString.toInt()
+          nextNumber = number + 1
         } else {
-          number = nextNumber++;
+          number = nextNumber++
         }
         if (number > max) {
-          max = number;
+          max = number
         }
-        index = matcher.end();
+        index = matcher.end()
       } else {
-        break;
+        break
       }
     }
-
-    return max;
+    return max
   }
 
-  private void checkMethodArguments(JavaContext context, UCallExpression call) {
-    List<UExpression> arguments = call.getValueArguments();
-    int numArguments = arguments.size();
-    for (int i = 0; i < numArguments; i++) {
-      UExpression argument = arguments.get(i);
-      if (checkElement(context, call, argument)) {
-        break;
-      }
-      if (i > 0 && isSubclassOf(context, argument, Throwable.class)) {
-        LintFix fix = quickFixIssueThrowable(call, arguments, argument);
-        context.report(ISSUE_THROWABLE, call, context.getLocation(call),
-            ""Throwable should be first argument"", fix);
+  private fun checkMethodArguments(context: JavaContext, call: UCallExpression) {
+    call.valueArguments.forEachIndexed loop@{ i, argument ->
+      if (checkElement(context, call, argument)) return@loop
+
+      if (i > 0 && isSubclassOf(context, argument, Throwable::class.java)) {
+        context.report(
+          Incident(
+            issue = ISSUE_THROWABLE,
+            scope = call,
+            location = context.getLocation(call),
+            message = ""Throwable should be first argument"",
+            fix = quickFixIssueThrowable(call, call.valueArguments, argument)
+          )
+        )
       }
     }
   }
 
-  private void checkExceptionLogging(JavaContext context, UCallExpression call) {
-    List<UExpression> arguments = call.getValueArguments();
-    int numArguments = arguments.size();
-
-    if (numArguments > 1 && isSubclassOf(context, arguments.get(0), Throwable.class)) {
-      UExpression messageArg = arguments.get(1);
+  private fun checkExceptionLogging(context: JavaContext, call: UCallExpression) {
+    val arguments = call.valueArguments
+    val numArguments = arguments.size
+    if (numArguments > 1 && isSubclassOf(context, arguments[0], Throwable::class.java)) {
+      val messageArg = arguments[1]
 
       if (isLoggingExceptionMessage(context, messageArg)) {
-        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
-            ""Explicitly logging exception message is redundant"",
-            quickFixRemoveRedundantArgument(messageArg));
-        return;
+        context.report(
+          Incident(
+            issue = ISSUE_EXCEPTION_LOGGING,
+            scope = messageArg,
+            location = context.getLocation(call),
+            message = ""Explicitly logging exception message is redundant"",
+            fix = quickFixRemoveRedundantArgument(messageArg)
+          )
+        )
+        return
       }
 
-      String s = evaluateString(context, messageArg, true);
+      val s = evaluateString(context, messageArg, true)
       if (s == null && !canEvaluateExpression(messageArg)) {
         // Parameters and non-final fields can't be evaluated.
-        return;
+        return
       }
 
       if (s == null || s.isEmpty()) {
-        LintFix fix = quickFixRemoveRedundantArgument(messageArg);
-        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
-            ""Use single-argument log method instead of null/empty message"", fix);
+        context.report(
+          Incident(
+            issue = ISSUE_EXCEPTION_LOGGING,
+            scope = messageArg,
+            location = context.getLocation(call),
+            message = ""Use single-argument log method instead of null/empty message"",
+            fix = quickFixRemoveRedundantArgument(messageArg)
+          )
+        )
       }
-    } else if (numArguments == 1 && !isSubclassOf(context, arguments.get(0), Throwable.class)) {
-      UExpression messageArg = arguments.get(0);
+    } else if (numArguments == 1 && !isSubclassOf(context, arguments[0], Throwable::class.java)) {
+      val messageArg = arguments[0]
 
       if (isLoggingExceptionMessage(context, messageArg)) {
-        context.report(ISSUE_EXCEPTION_LOGGING, messageArg, context.getLocation(call),
-            ""Explicitly logging exception message is redundant"",
-            quickFixReplaceMessageWithThrowable(messageArg));
+        context.report(
+          Incident(
+            issue = ISSUE_EXCEPTION_LOGGING,
+            scope = messageArg,
+            location = context.getLocation(call),
+            message = ""Explicitly logging exception message is redundant"",
+            fix = quickFixReplaceMessageWithThrowable(messageArg)
+          )
+        )
       }
     }
   }
 
-  private boolean isLoggingExceptionMessage(JavaContext context, UExpression arg) {
-    if (!(arg instanceof UQualifiedReferenceExpression)) {
-      return false;
+  private fun isLoggingExceptionMessage(context: JavaContext, arg: UExpression): Boolean {
+    if (arg !is UQualifiedReferenceExpression) {
+      return false
     }
 
-    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
-    PsiElement psi = argExpression.getSourcePsi();
-
-    if (psi != null && isKotlin(psi.getLanguage())) {
-      return isPropertyOnSubclassOf(context, argExpression, ""message"", Throwable.class);
+    val psi = arg.sourcePsi
+    if (psi != null && isKotlin(psi.language)) {
+      return isPropertyOnSubclassOf(context, arg, ""message"", Throwable::class.java)
     }
 
-    UExpression selector = argExpression.getSelector();
+    val selector = arg.selector
 
     // what other UExpressions could be a selector?
-    if (!(selector instanceof UCallExpression)) {
-      return false;
-    }
-
-    return isCallFromMethodInSubclassOf(context, (UCallExpression) selector, ""getMessage"",
-            Throwable.class);
+    return if (selector !is UCallExpression) {
+      false
+    } else isCallFromMethodInSubclassOf(
+      context = context,
+      call = selector,
+      methodName = ""getMessage"",
+      classType = Throwable::class.java
+    )
   }
 
-  private static boolean canEvaluateExpression(UExpression expression) {
+  private fun canEvaluateExpression(expression: UExpression): Boolean {
     // TODO - try using CallGraph?
-    if (expression instanceof ULiteralExpression) {
-      return true;
+    if (expression is ULiteralExpression) {
+      return true
     }
-    if (!(expression instanceof USimpleNameReferenceExpression)) {
-      return false;
+    if (expression !is USimpleNameReferenceExpression) {
+      return false
     }
-    PsiElement resolvedElement = ((USimpleNameReferenceExpression) expression).resolve();
-    return !(resolvedElement instanceof PsiField || resolvedElement instanceof PsiParameter);
+    val resolvedElement = expression.resolve()
+    return !(resolvedElement is PsiField || resolvedElement is PsiParameter)
   }
 
-  private static boolean isCallFromMethodInSubclassOf(JavaContext context, UCallExpression call,
-      String methodName, Class classType) {
-    JavaEvaluator evaluator = context.getEvaluator();
-    PsiMethod method = call.resolve();
-    return method != null //
-        && methodName.equals(call.getMethodName()) //
-        && evaluator.isMemberInSubClassOf(method, classType.getCanonicalName(), false);
+  private fun isCallFromMethodInSubclassOf(
+    context: JavaContext, call: UCallExpression, methodName: String, classType: Class<*>
+  ): Boolean {
+    val method = call.resolve()
+    return method != null
+        && methodName == call.methodName
+        && context.evaluator.isMemberInSubClassOf(method, classType.canonicalName, false)
   }
 
-  private static boolean isPropertyOnSubclassOf(JavaContext context,
-          UQualifiedReferenceExpression expression, String propertyName, Class classType) {
-    return isSubclassOf(context, expression.getReceiver(), classType)
-            && expression.getSelector().asSourceString().equals(propertyName);
+  private fun isPropertyOnSubclassOf(
+    context: JavaContext,
+    expression: UQualifiedReferenceExpression,
+    propertyName: String,
+    classType: Class<*>
+  ): Boolean {
+    return isSubclassOf(context, expression.receiver, classType)
+        && expression.selector.asSourceString() == propertyName
   }
 
-  private boolean checkElement(JavaContext context, UCallExpression call, UElement element) {
-    if (element instanceof UBinaryExpression) {
-      UBinaryExpression binaryExpression = (UBinaryExpression) element;
-      UastBinaryOperator operator = binaryExpression.getOperator();
-      if (operator == PLUS || operator == PLUS_ASSIGN) {
-        Class argumentType = getType(binaryExpression);
-        if (argumentType == String.class) {
-          if (isInjectionHost(binaryExpression.getLeftOperand())
-                  && isInjectionHost(binaryExpression.getRightOperand())) {
-            return false;
+  private fun checkElement(
+    context: JavaContext, call: UCallExpression, element: UElement?
+  ): Boolean {
+    if (element is UBinaryExpression) {
+      val operator = element.operator
+      if (operator === UastBinaryOperator.PLUS || operator === UastBinaryOperator.PLUS_ASSIGN) {
+        val argumentType = getType(element)
+        if (argumentType == String::class.java) {
+          if (element.leftOperand.isInjectionHost()
+            && element.rightOperand.isInjectionHost()
+          ) {
+            return false
           }
-          LintFix fix = quickFixIssueBinary(binaryExpression);
-          context.report(ISSUE_BINARY, call, context.getLocation(element),
-              ""Replace String concatenation with Timber's string formatting"", fix);
-          return true;
+          context.report(
+            Incident(
+              issue = ISSUE_BINARY,
+              scope = call,
+              location = context.getLocation(element),
+              message = ""Replace String concatenation with Timber's string formatting"",
+              fix = quickFixIssueBinary(element)
+            )
+          )
+          return true
         }
       }
-    } else if (element instanceof UIfExpression) {
-      return checkConditionalUsage(context, call, element);
+    } else if (element is UIfExpression) {
+      return checkConditionalUsage(context, call, element)
     }
-    return false;
+    return false
   }
 
-  private boolean checkConditionalUsage(JavaContext context, UCallExpression call,
-      UElement element) {
-    UElement thenElement;
-    UElement elseElement;
-    if (element instanceof UIfExpression) {
-      UIfExpression ifArg = (UIfExpression) element;
-      thenElement = ifArg.getThenExpression();
-      elseElement = ifArg.getElseExpression();
+  private fun checkConditionalUsage(
+    context: JavaContext, call: UCallExpression, element: UElement
+  ): Boolean {
+    return if (element is UIfExpression) {
+      if (checkElement(context, call, element.thenExpression)) {
+        false
+      } else {
+        checkElement(context, call, element.elseExpression)
+      }
     } else {
-      return false;
+      false
     }
-    if (checkElement(context, call, thenElement)) {
-      return false;
-    }
-    return checkElement(context, call, elseElement);
   }
 
-  private LintFix quickFixIssueLog(UCallExpression logCall) {
-    List<UExpression> arguments = logCall.getValueArguments();
-    String methodName = logCall.getMethodName();
-    UExpression tag = arguments.get(0);
+  private fun quickFixIssueLog(logCall: UCallExpression): LintFix {
+    val arguments = logCall.valueArguments
+    val methodName = logCall.methodName
+    val tag = arguments[0]
 
     // 1st suggestion respects author's tag preference.
     // 2nd suggestion drops it (Timber defaults to calling class name).
-    String fixSource1 = ""Timber.tag("" + tag.asSourceString() + "")."";
-    String fixSource2 = ""Timber."";
-
-    int numArguments = arguments.size();
-    if (numArguments == 2) {
-      UExpression msgOrThrowable = arguments.get(1);
-      fixSource1 += methodName + ""("" + msgOrThrowable.asSourceString() + "")"";
-      fixSource2 += methodName + ""("" + msgOrThrowable.asSourceString() + "")"";
-    } else if (numArguments == 3) {
-      UExpression msg = arguments.get(1);
-      UExpression throwable = arguments.get(2);
-      fixSource1 +=
-          methodName + ""("" + throwable.asSourceString() + "", "" + msg.asSourceString() + "")"";
-      fixSource2 +=
-          methodName + ""("" + throwable.asSourceString() + "", "" + msg.asSourceString() + "")"";
-    } else {
-      throw new IllegalStateException(""android.util.Log overloads should have 2 or 3 arguments"");
+    var fixSource1 = ""Timber.tag(${tag.asSourceString()}).""
+    var fixSource2 = ""Timber.""
+
+    when (arguments.size) {
+      2 -> {
+        val msgOrThrowable = arguments[1]
+        fixSource1 += ""$methodName(${msgOrThrowable.asSourceString()})""
+        fixSource2 += ""$methodName(${msgOrThrowable.asSourceString()})""
+      }
+      3 -> {
+        val msg = arguments[1]
+        val throwable = arguments[2]
+        fixSource1 += ""$methodName(${throwable.asSourceString()}, ${msg.asSourceString()})""
+        fixSource2 += ""$methodName(${throwable.asSourceString()}, ${msg.asSourceString()})""
+      }
+      else -> {
+        throw IllegalStateException(""android.util.Log overloads should have 2 or 3 arguments"")
+      }
     }
 
-    String logCallSource = logCall.asSourceString();
-    LintFix.GroupBuilder fixGrouper = fix().group();
-    fixGrouper.add(
-        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource1).build());
-    fixGrouper.add(
-        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource2).build());
-    return fixGrouper.build();
+    val logCallSource = logCall.asSourceString()
+    return fix().group()
+      .add(
+        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource1).build()
+      )
+      .add(
+        fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource2).build()
+      )
+      .build()
   }
 
-  private LintFix quickFixIssueFormat(UCallExpression stringFormatCall) {
+  private fun quickFixIssueFormat(stringFormatCall: UCallExpression): LintFix {
     // Handles:
     // 1) String.format(..)
     // 2) format(...) [static import]
-    UExpression callReceiver = stringFormatCall.getReceiver();
-    String callSourceString = callReceiver == null ? """" : callReceiver.asSourceString() + ""."";
-    callSourceString += stringFormatCall.getMethodName();
+    val callReceiver = stringFormatCall.receiver
+    var callSourceString = if (callReceiver == null) """" else ""${callReceiver.asSourceString()}.""
+    callSourceString += stringFormatCall.methodName
 
     return fix().name(""Remove String.format(...)"").composite() //
-        // Delete closing parenthesis of String.format(...)
-        .add(fix().replace().pattern(callSourceString + ""\\(.*(\\))"").with("""").build())
-        // Delete ""String.format(""
-        .add(fix().replace().text(callSourceString + ""("").with("""").build()).build();
+      // Delete closing parenthesis of String.format(...)
+      .add(fix().replace().pattern(""$callSourceString\\(.*(\\))"").with("""").build())
+      // Delete ""String.format(""
+      .add(fix().replace().text(""$callSourceString("").with("""").build()).build()
   }
 
-  private LintFix quickFixIssueThrowable(UCallExpression call, List<UExpression> arguments,
-      UExpression throwable) {
-    String rearrangedArgs = throwable.asSourceString();
-    for (UExpression arg : arguments) {
-      if (arg != throwable) {
-        rearrangedArgs += ("", "" + arg.asSourceString());
+  private fun quickFixIssueThrowable(
+    call: UCallExpression, arguments: List<UExpression>, throwable: UExpression
+  ): LintFix {
+    val rearrangedArgs = buildString {
+      append(throwable.asSourceString())
+      arguments.forEach { arg ->
+        if (arg !== throwable) {
+          append("", ${arg.asSourceString()}"")
+        }
       }
     }
-    return fix().replace() //
-        .pattern(""\\."" + call.getMethodName() + ""\\((.*)\\)"").with(rearrangedArgs).build();
+    return fix()
+      .replace()
+      .pattern(""\\."" + call.methodName + ""\\((.*)\\)"")
+      .with(rearrangedArgs)
+      .build()
   }
 
-  private LintFix quickFixIssueBinary(UBinaryExpression binaryExpression) {
-    UExpression leftOperand = binaryExpression.getLeftOperand();
-    UExpression rightOperand = binaryExpression.getRightOperand();
-    boolean isLeftLiteral = isInjectionHost(leftOperand);
-    boolean isRightLiteral = isInjectionHost(rightOperand);
+  private fun quickFixIssueBinary(binaryExpression: UBinaryExpression): LintFix {
+    val leftOperand = binaryExpression.leftOperand
+    val rightOperand = binaryExpression.rightOperand
+    val isLeftLiteral = leftOperand.isInjectionHost()
+    val isRightLiteral = rightOperand.isInjectionHost()
 
     // ""a"" + ""b"" => ""ab""
     if (isLeftLiteral && isRightLiteral) {
-      return fix().replace() //
-          .text(binaryExpression.asSourceString())
-          .with(""\"""" + evaluateString(binaryExpression) + ""\"""")
-          .build();
+      return fix().replace()
+        .text(binaryExpression.asSourceString())
+        .with(""\""${binaryExpression.evaluateString()}\"""")
+        .build()
     }
 
-    String args;
-    if (isLeftLiteral) {
-      args = ""\"""" + evaluateString(leftOperand) + ""%s\"", "" + rightOperand.asSourceString();
-    } else if (isRightLiteral) {
-      args = ""\""%s"" + evaluateString(rightOperand) + ""\"", "" + leftOperand.asSourceString();
-    } else {
-      args = ""\""%s%s\"", "" + leftOperand.asSourceString() + "", "" + rightOperand.asSourceString();
+    val args: String = when {
+      isLeftLiteral -> {
+        ""\""${leftOperand.evaluateString()}%s\"", ${rightOperand.asSourceString()}""
+      }
+      isRightLiteral -> {
+        ""\""%s${rightOperand.evaluateString()}\"", ${leftOperand.asSourceString()}""
+      }
+      else -> {
+        ""\""%s%s\"", ${leftOperand.asSourceString()}, ${rightOperand.asSourceString()}""
+      }
     }
-    return fix().replace().text(binaryExpression.asSourceString()).with(args).build();
+    return fix().replace().text(binaryExpression.asSourceString()).with(args).build()
   }
 
-  private LintFix quickFixIssueTagLength(UExpression argument, String tag) {
-    int numCharsToTrim = tag.length() - 23;
+  private fun quickFixIssueTagLength(argument: UExpression, tag: String): LintFix {
+    val numCharsToTrim = tag.length - 23
     return fix().replace()
-        .name(""Strip last "" + (numCharsToTrim == 1 ? ""char"" : numCharsToTrim + "" chars""))
-        .text(argument.asSourceString())
-        .with(""\"""" + tag.substring(0, 23) + ""\"""")
-        .build();
+      .name(""Strip last "" + if (numCharsToTrim == 1) ""char"" else ""$numCharsToTrim chars"")
+      .text(argument.asSourceString())
+      .with(""\""${tag.substring(0, 23)}\"""")
+      .build()
   }
 
-  private LintFix quickFixRemoveRedundantArgument(UExpression arg) {
+  private fun quickFixRemoveRedundantArgument(arg: UExpression): LintFix {
     return fix().replace()
-        .name(""Remove redundant argument"")
-        .text("", "" + arg.asSourceString())
-        .with("""")
-        .build();
+      .name(""Remove redundant argument"")
+      .text("", ${arg.asSourceString()}"")
+      .with("""")
+      .build()
   }
 
-  private LintFix quickFixReplaceMessageWithThrowable(UExpression arg) {
+  private fun quickFixReplaceMessageWithThrowable(arg: UExpression): LintFix {
     // guaranteed based on callers of this method
-    UQualifiedReferenceExpression argExpression = (UQualifiedReferenceExpression) arg;
-    UExpression receiver = argExpression.getReceiver();
-
+    val receiver = (arg as UQualifiedReferenceExpression).receiver
     return fix().replace()
-        .name(""Replace message with throwable"")
-        .text(arg.asSourceString())
-        .with(receiver.asSourceString())
-        .build();
+      .name(""Replace message with throwable"")
+      .text(arg.asSourceString())
+      .with(receiver.asSourceString())
+      .build()
   }
 
-  static Issue[] getIssues() {
-    return new Issue[] {
-        ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,
-        ISSUE_TAG_LENGTH, ISSUE_EXCEPTION_LOGGING
-    };
+  companion object {
+    private const val GET_STRING_METHOD = ""getString""
+    private const val TIMBER_TREE_LOG_METHOD_REGEXP = ""(v|d|i|w|e|wtf)""
+
+    val ISSUE_LOG = Issue.create(
+      id = ""LogNotTimber"",
+      briefDescription = ""Logging call to Log instead of Timber"",
+      explanation = ""Since Timber is included in the project, it is likely that calls to Log should instead be going to Timber."",
+      category = MESSAGES,
+      priority = 5,
+      severity = WARNING,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_FORMAT = Issue.create(
+      id = ""StringFormatInTimber"",
+      briefDescription = ""Logging call with Timber contains String#format()"",
+      explanation = ""Since Timber handles String.format automatically, you may not use String#format()."",
+      category = MESSAGES,
+      priority = 5,
+      severity = WARNING,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_THROWABLE = Issue.create(
+      id = ""ThrowableNotAtBeginning"",
+      briefDescription = ""Exception in Timber not at the beginning"",
+      explanation = ""In Timber you have to pass a Throwable at the beginning of the call."",
+      category = MESSAGES,
+      priority = 5,
+      severity = WARNING,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_BINARY = Issue.create(
+      id = ""BinaryOperationInTimber"",
+      briefDescription = ""Use String#format()"",
+      explanation = ""Since Timber handles String#format() automatically, use this instead of String concatenation."",
+      category = MESSAGES,
+      priority = 5,
+      severity = WARNING,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_ARG_COUNT = Issue.create(
+      id = ""TimberArgCount"",
+      briefDescription = ""Formatting argument types incomplete or inconsistent"",
+      explanation = ""When a formatted string takes arguments, you need to pass at least that amount of arguments to the formatting call."",
+      category = MESSAGES,
+      priority = 9,
+      severity = ERROR,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_ARG_TYPES = Issue.create(
+      id = ""TimberArgTypes"",
+      briefDescription = ""Formatting string doesn't match passed arguments"",
+      explanation = ""The argument types that you specified in your formatting string does not match the types of the arguments that you passed to your formatting call."",
+      category = MESSAGES,
+      priority = 9,
+      severity = ERROR,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_TAG_LENGTH = Issue.create(
+      id = ""TimberTagLength"",
+      briefDescription = ""Too Long Log Tags"",
+      explanation = ""Log tags are only allowed to be at most"" + "" 23 tag characters long."",
+      category = CORRECTNESS,
+      priority = 5,
+      severity = ERROR,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+    val ISSUE_EXCEPTION_LOGGING = Issue.create(
+      id = ""TimberExceptionLogging"",
+      briefDescription = ""Exception Logging"",
+      explanation = ""Explicitly including the exception message is redundant when supplying an exception to log."",
+      category = CORRECTNESS,
+      priority = 3,
+      severity = WARNING,
+      implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
+    )
+
+    val issues = listOf(
+      ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,
+      ISSUE_TAG_LENGTH, ISSUE_EXCEPTION_LOGGING
+    )
   }
-
-  public static final Issue ISSUE_LOG =
-      Issue.create(""LogNotTimber"", ""Logging call to Log instead of Timber"",
-          ""Since Timber is included in the project, it is likely that calls to Log should instead""
-              + "" be going to Timber."", Category.MESSAGES, 5, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_FORMAT =
-      Issue.create(""StringFormatInTimber"", ""Logging call with Timber contains String#format()"",
-          ""Since Timber handles String.format automatically, you may not use String#format()."",
-          Category.MESSAGES, 5, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_THROWABLE =
-      Issue.create(""ThrowableNotAtBeginning"", ""Exception in Timber not at the beginning"",
-          ""In Timber you have to pass a Throwable at the beginning of the call."", Category.MESSAGES,
-          5, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_BINARY =
-      Issue.create(""BinaryOperationInTimber"", ""Use String#format()"",
-          ""Since Timber handles String#format() automatically, use this instead of String""
-              + "" concatenation."", Category.MESSAGES, 5, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_ARG_COUNT =
-      Issue.create(""TimberArgCount"", ""Formatting argument types incomplete or inconsistent"",
-          ""When a formatted string takes arguments, you need to pass at least that amount of""
-              + "" arguments to the formatting call."", Category.MESSAGES, 9, Severity.ERROR,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_ARG_TYPES =
-      Issue.create(""TimberArgTypes"", ""Formatting string doesn't match passed arguments"",
-          ""The argument types that you specified in your formatting string does not match the types""
-              + "" of the arguments that you passed to your formatting call."", Category.MESSAGES, 9,
-          Severity.ERROR,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_TAG_LENGTH = Issue.create(""TimberTagLength"", ""Too Long Log Tags"",
-      ""Log tags are only allowed to be at most"" + "" 23 tag characters long."", Category.CORRECTNESS,
-      5, Severity.ERROR, new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
-  public static final Issue ISSUE_EXCEPTION_LOGGING =
-      Issue.create(""TimberExceptionLogging"", ""Exception Logging"", ""Explicitly including the""
-              + "" exception message is redundant when supplying an exception to log."",
-          Category.CORRECTNESS, 3, Severity.WARNING,
-          new Implementation(WrongTimberUsageDetector.class, Scope.JAVA_FILE_SCOPE));
 }",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,291ff0e15f4dceddef9cfd942519df9f69d5c761,bab580059dda35b2c33dbb3935275a26fb27eb2c,Konvert WrongTimberUsageDetector to Kotlin,"@@ -922,7 +922,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(*WrongTimberUsageDetector.getIssues())
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expectClean()
   }
@@ -939,7 +939,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(*WrongTimberUsageDetector.getIssues())
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expectClean()
   }
@@ -956,7 +956,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(*WrongTimberUsageDetector.getIssues())
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expectClean()
   }
@@ -978,7 +978,7 @@ class WrongTimberUsageDetectorTest {
                 |}
                 """""".trimMargin())
         )
-        .issues(*WrongTimberUsageDetector.getIssues())
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
   }","@@ -922,7 +922,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(*WrongTimberUsageDetector.getIssues())
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expectClean()
   }
@@ -939,7 +939,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(*WrongTimberUsageDetector.getIssues())
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expectClean()
   }
@@ -956,7 +956,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(*WrongTimberUsageDetector.getIssues())
+        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
         .expectClean()
   }
@@ -978,7 +978,7 @@ class WrongTimberUsageDetectorTest {
                 |}
                 """""".trimMargin())
         )
-        .issues(*WrongTimberUsageDetector.getIssues())
+        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
         .run()
         .expectClean()
   }",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.kt,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.kt,c83e3ebe282817e8131abfcd8e3567efead08c07,403f51daef47580f0f0331b57cb089f134e62b99,Update Lint checks for Kotlin consumers,"@@ -74,7 +74,10 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
     val methodName = node.methodName
     val evaluator = context.evaluator
 
-    if (""format"" == methodName && evaluator.isMemberInClass(method, ""java.lang.String"")) {
+    if (""format"" == methodName &&
+      (evaluator.isMemberInClass(method, ""java.lang.String"") ||
+          evaluator.isMemberInClass(method, ""kotlin.text.StringsKt__StringsJVMKt""))
+    ) {
       checkNestedStringFormat(context, node)
       return
     }
@@ -122,8 +125,9 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       }
       if (current.isMethodCall()) {
         val psiMethod = (current as UCallExpression).resolve()
-        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod!!.name)
-          && context.evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")
+        if (psiMethod != null &&
+          Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.name)
+          && isTimberLogMethod(psiMethod, context.evaluator)
         ) {
           context.report(
             Incident(
@@ -615,15 +619,15 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       3 -> {
         val msg = arguments[1]
         val throwable = arguments[2]
-        fixSource1 += ""$methodName(${throwable.asSourceString()}, ${msg.asSourceString()})""
-        fixSource2 += ""$methodName(${throwable.asSourceString()}, ${msg.asSourceString()})""
+        fixSource1 += ""$methodName(${throwable.sourcePsi?.text}, ${msg.asSourceString()})""
+        fixSource2 += ""$methodName(${throwable.sourcePsi?.text}, ${msg.asSourceString()})""
       }
       else -> {
         throw IllegalStateException(""android.util.Log overloads should have 2 or 3 arguments"")
       }
     }
 
-    val logCallSource = logCall.asSourceString()
+    val logCallSource = logCall.uastParent!!.sourcePsi?.text
     return fix().group()
       .add(
         fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource1).build()","@@ -74,7 +74,10 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
     val methodName = node.methodName
     val evaluator = context.evaluator
 
-    if (""format"" == methodName && evaluator.isMemberInClass(method, ""java.lang.String"")) {
+    if (""format"" == methodName &&
+      (evaluator.isMemberInClass(method, ""java.lang.String"") ||
+          evaluator.isMemberInClass(method, ""kotlin.text.StringsKt__StringsJVMKt""))
+    ) {
       checkNestedStringFormat(context, node)
       return
     }
@@ -122,8 +125,9 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       }
       if (current.isMethodCall()) {
         val psiMethod = (current as UCallExpression).resolve()
-        if (Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod!!.name)
-          && context.evaluator.isMemberInClass(psiMethod, ""timber.log.Timber"")
+        if (psiMethod != null &&
+          Pattern.matches(TIMBER_TREE_LOG_METHOD_REGEXP, psiMethod.name)
+          && isTimberLogMethod(psiMethod, context.evaluator)
         ) {
           context.report(
             Incident(
@@ -615,15 +619,15 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       3 -> {
         val msg = arguments[1]
         val throwable = arguments[2]
-        fixSource1 += ""$methodName(${throwable.asSourceString()}, ${msg.asSourceString()})""
-        fixSource2 += ""$methodName(${throwable.asSourceString()}, ${msg.asSourceString()})""
+        fixSource1 += ""$methodName(${throwable.sourcePsi?.text}, ${msg.asSourceString()})""
+        fixSource2 += ""$methodName(${throwable.sourcePsi?.text}, ${msg.asSourceString()})""
       }
       else -> {
         throw IllegalStateException(""android.util.Log overloads should have 2 or 3 arguments"")
       }
     }
 
-    val logCallSource = logCall.asSourceString()
+    val logCallSource = logCall.uastParent!!.sourcePsi?.text
     return fix().group()
       .add(
         fix().replace().text(logCallSource).shortenNames().reformat(true).with(fixSource1).build()",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,c83e3ebe282817e8131abfcd8e3567efead08c07,403f51daef47580f0f0331b57cb089f134e62b99,Update Lint checks for Kotlin consumers,"@@ -2,7 +2,6 @@ package timber.lint
 
 import com.android.tools.lint.checks.infrastructure.TestFiles.java
 import com.android.tools.lint.checks.infrastructure.TestFiles.kotlin
-import com.android.tools.lint.checks.infrastructure.TestFiles.kt
 import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
 import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
 import org.junit.Test
@@ -32,6 +31,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"");
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |import android.util.Log
+                |class Example {
+                |  fun log() {
+                |    Log.d(""TAG"", ""msg"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
@@ -40,16 +47,27 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
             |    Log.d(""TAG"", ""msg"");
             |    ~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"")
+            |    ~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(""msg""):
+            |Fix for src/foo/Example.java line 5: Replace with Timber.tag(""TAG"").d(""msg""):
             |@@ -5 +5
             |-     Log.d(""TAG"", ""msg"");
             |+     Timber.tag(""TAG"").d(""msg"");
-            |Fix for src/foo/Example.java line 4: Replace with Timber.d(""msg""):
+            |Fix for src/foo/Example.java line 5: Replace with Timber.d(""msg""):
             |@@ -5 +5
             |-     Log.d(""TAG"", ""msg"");
             |+     Timber.d(""msg"");
+            |Fix for src/foo/Example.kt line 5: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"")
+            |+     Timber.tag(""TAG"").d(""msg"")
+            |Fix for src/foo/Example.kt line 5: Replace with Timber.d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"")
+            |+     Timber.d(""msg"")
             |"""""".trimMargin())
   }
 
@@ -63,6 +81,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"", new Exception());
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import android.util.Log
+                |class Example {
+                |  fun log() {
+                |    Log.d(""TAG"", ""msg"", Exception())
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
@@ -71,16 +97,27 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
             |    Log.d(""TAG"", ""msg"", new Exception());
             |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"", Exception())
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |Fix for src/foo/Example.java line 5: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
             |@@ -5 +5
             |-     Log.d(""TAG"", ""msg"", new Exception());
             |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
-            |Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), ""msg""):
+            |Fix for src/foo/Example.java line 5: Replace with Timber.d(new Exception(), ""msg""):
             |@@ -5 +5
             |-     Log.d(""TAG"", ""msg"", new Exception());
             |+     Timber.d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.kt line 5: Replace with Timber.tag(""TAG"").d(Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", Exception())
+            |+     Timber.tag(""TAG"").d(Exception(), ""msg"")
+            |Fix for src/foo/Example.kt line 5: Replace with Timber.d(Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", Exception())
+            |+     Timber.d(Exception(), ""msg"")
             |"""""".trimMargin())
   }
 
@@ -93,6 +130,13 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |class Example {
+                |  fun log() {
+                |    android.util.Log.d(""TAG"", ""msg"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
@@ -101,16 +145,27 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
             |    android.util.Log.d(""TAG"", ""msg"");
             |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"")
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(""msg""):
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(""msg""):
             |@@ -4 +4
             |-     android.util.Log.d(""TAG"", ""msg"");
             |+     Timber.tag(""TAG"").d(""msg"");
-            |Fix for src/foo/Example.java line 3: Replace with Timber.d(""msg""):
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(""msg""):
             |@@ -4 +4
             |-     android.util.Log.d(""TAG"", ""msg"");
             |+     Timber.d(""msg"");
+            |Fix for src/foo/Example.kt line 4: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"")
+            |+     Timber.tag(""TAG"").d(""msg"")
+            |Fix for src/foo/Example.kt line 4: Replace with Timber.d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"")
+            |+     Timber.d(""msg"")
             |"""""".trimMargin())
   }
 
@@ -123,6 +178,13 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"", new Exception());
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |class Example {
+                |  fun log() {
+                |    android.util.Log.d(""TAG"", ""msg"", Exception())
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
@@ -131,16 +193,27 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
             |    android.util.Log.d(""TAG"", ""msg"", new Exception());
             |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"", Exception())
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
             |@@ -4 +4
             |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
             |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
-            |Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), ""msg""):
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), ""msg""):
             |@@ -4 +4
             |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
             |+     Timber.d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.kt line 4: Replace with Timber.tag(""TAG"").d(Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", Exception())
+            |+     Timber.tag(""TAG"").d(Exception(), ""msg"")
+            |Fix for src/foo/Example.kt line 4: Replace with Timber.d(Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", Exception())
+            |+     Timber.d(Exception(), ""msg"")
             |"""""".trimMargin())
   }
 
@@ -154,6 +227,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(String.format(""%s"", ""arg1""));
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(String.format(""%s"", ""arg1""))
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
@@ -162,12 +243,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
             |     Timber.d(String.format(""%s"", ""arg1""));
             |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(String.format(""%s"", ""arg1""))
+            |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 4: Remove String.format(...):
+            |Fix for src/foo/Example.java line 5: Remove String.format(...):
             |@@ -5 +5
             |-      Timber.d(String.format(""%s"", ""arg1""));
             |+      Timber.d(""%s"", ""arg1"");
+            |Fix for src/foo/Example.kt line 5: Remove String.format(...):
+            |@@ -5 +5
+            |-      Timber.d(String.format(""%s"", ""arg1""))
+            |+      Timber.d(""%s"", ""arg1"")
             |"""""".trimMargin())
   }
 
@@ -182,6 +270,15 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(format(""%s"", ""arg1""));
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |import java.lang.String.format
+                |class Example {
+                |  fun log() {
+                |     Timber.d(format(""%s"", ""arg1""))
+                |  }
                 |}"""""".trimMargin())
         )
         // Remove when AGP 7.1.0-alpha07 is out
@@ -193,12 +290,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
             |     Timber.d(format(""%s"", ""arg1""));
             |              ~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(format(""%s"", ""arg1""))
+            |              ~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 5: Remove String.format(...):
+            |Fix for src/foo/Example.java line 6: Remove String.format(...):
             |@@ -6 +6
             |-      Timber.d(format(""%s"", ""arg1""));
             |+      Timber.d(""%s"", ""arg1"");
+            |Fix for src/foo/Example.kt line 6: Remove String.format(...):
+            |@@ -6 +6
+            |-      Timber.d(format(""%s"", ""arg1""))
+            |+      Timber.d(""%s"", ""arg1"")
             |"""""".trimMargin())
   }
 
@@ -213,6 +317,15 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.d(id(String.format(""%s"", ""arg1"")));
                 |  }
                 |  private String id(String s) { return s; }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(id(String.format(""%s"", ""arg1"")))
+                |  }
+                |  private fun id(s: String): String { return s }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
@@ -221,7 +334,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
             |     Timber.d(id(String.format(""%s"", ""arg1"")));
             |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(id(String.format(""%s"", ""arg1"")))
+            |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
   }
 
   @Test fun innerStringFormatInNestedAssignment() {
@@ -236,6 +352,7 @@ class WrongTimberUsageDetectorTest {
                 |    Timber.d(msg = String.format(""msg""));
                 |  }
                 |}"""""".trimMargin())
+          // no kotlin equivalent, since nested assignments do not exist
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -251,13 +368,21 @@ class WrongTimberUsageDetectorTest {
         .files(TIMBER_STUB,
             java(""""""
                 |package foo;
-                |import timber.log.Timber;
                 |public class Example {
                 |  public void log() {
                 |    for(;;) {
                 |      String name = String.format(""msg"");
                 |    }
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |class Example {
+                |  fun log() {
+                |    while(true) {
+                |      val name = String.format(""msg"")
+                |    }
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
@@ -274,6 +399,13 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    new Exception(String.format(""msg""));
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |class Example {
+                |  fun log() {
+                |    Exception(String.format(""msg""))
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
@@ -288,6 +420,13 @@ class WrongTimberUsageDetectorTest {
                 |package foo;
                 |public class Example {
                 |  static String[] X = { String.format(""%s"", 100) };
+                |}"""""".trimMargin()),
+           kotlin(""""""
+                |package foo
+                |class Example {
+                |  companion object {
+                |    val X = arrayOf(String.format(""%s"", 100))
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
@@ -306,6 +445,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(""%s"", e);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(""%s"", e)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
@@ -314,12 +462,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
             |     Timber.d(""%s"", e);
             |     ~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
+            |     Timber.d(""%s"", e)
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 5: Replace with e, ""%s"":
+            |Fix for src/foo/Example.java line 6: Replace with e, ""%s"":
             |@@ -6 +6
             |-      Timber.d(""%s"", e);
             |+      Timber.d(e, ""%s"");
+            |Fix for src/foo/Example.kt line 6: Replace with e, ""%s"":
+            |@@ -6 +6
+            |-      Timber.d(""%s"", e)
+            |+      Timber.d(e, ""%s"")
             |"""""".trimMargin())
   }
 
@@ -333,6 +488,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""foo"" + ""bar"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(""foo"" + ""bar"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
@@ -351,6 +514,15 @@ class WrongTimberUsageDetectorTest {
                 |     String foo = ""foo"";
                 |     Timber.d(foo + ""bar"");
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val foo = ""foo""
+                |     Timber.d(""${""$""}{foo}bar"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
@@ -379,6 +551,15 @@ class WrongTimberUsageDetectorTest {
                 |     String bar = ""bar"";
                 |     Timber.d(""foo"" + bar);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val bar = ""bar""
+                |     Timber.d(""foo${""$""}bar"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
@@ -408,6 +589,16 @@ class WrongTimberUsageDetectorTest {
                 |     String bar = ""bar"";
                 |     Timber.d(foo + bar);
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val foo = ""foo""
+                |     val bar = ""bar""
+                |     Timber.d(""${""$""}foo${""$""}bar"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
@@ -436,6 +627,15 @@ class WrongTimberUsageDetectorTest {
                 |     String s = ""world!"";
                 |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val s = ""world!""
+                |     Timber.d(if(true) ""Hello, ${""$""}s"" else ""Bye"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
@@ -457,6 +657,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s %s"", ""arg1"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(""%s %s"", ""arg1"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
@@ -465,7 +673,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
             |     Timber.d(""%s %s"", ""arg1"");
             |     ~~~~~~~~~~~~~~~~~~~~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.d(""%s %s"", ""arg1"")
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun tooManyArgs() {
@@ -478,6 +689,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s"", ""arg1"", ""arg2"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(""%s"", ""arg1"", ""arg2"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
@@ -486,7 +705,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
             |     Timber.d(""%s"", ""arg1"", ""arg2"");
             |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.d(""%s"", ""arg1"", ""arg2"")
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun wrongArgTypes() {
@@ -499,6 +721,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%d"", ""arg1"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(""%d"", ""arg1"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
@@ -507,7 +737,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
             |     Timber.d(""%d"", ""arg1"");
             |                    ~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.d(""%d"", ""arg1"")
+            |                     ~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun tagTooLongLiteralOnly() {
@@ -521,6 +754,14 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
                 |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"")
+                |  }
+                |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
@@ -544,6 +785,15 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
                 |  }
                 |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  private val field = ""x""
+                |  fun log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvw${""$""}field"")
+                |  }
+                |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
@@ -566,6 +816,14 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
                 |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"")
+                |  }
+                |}"""""".trimMargin()),
             manifest().minSdk(26)
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
@@ -573,7 +831,7 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
-    @Test fun tagTooLongLiteralPlusFieldOnlyBeforeApi26() {
+  @Test fun tagTooLongLiteralPlusFieldOnlyBeforeApi26() {
         lint()
             .files(TIMBER_STUB,
                 java(""""""
@@ -585,6 +843,15 @@ class WrongTimberUsageDetectorTest {
                     |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
                     |  }
                     |}"""""".trimMargin()),
+                kotlin(""""""
+                    |package foo
+                    |import timber.log.Timber
+                    |class Example {
+                    |  private val field = ""x""
+                    |  fun log() {
+                    |     Timber.tag(""abcdefghijklmnopqrstuvw${""$""}field"")
+                    |  }
+                    |}"""""".trimMargin()),
                     manifest().minSdk(26)
                 )
                 .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
@@ -602,17 +869,26 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.tag(""tag"").d(""%s %s"", ""arg1"")
+                |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
-
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
             |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
             |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s %s"", ""arg1"")
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun tooManyArgsInTag() {
@@ -625,6 +901,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
@@ -633,7 +917,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
             |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
             |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"")
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun wrongArgTypesInTag() {
@@ -646,6 +933,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%d"", ""arg1"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.tag(""tag"").d(""%d"", ""arg1"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
@@ -654,7 +949,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
             |     Timber.tag(""tag"").d(""%d"", ""arg1"");
             |                               ~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.tag(""tag"").d(""%d"", ""arg1"")
+            |                                ~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun exceptionLoggingUsingExceptionMessage() {
@@ -668,6 +966,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e.getMessage());
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e.message)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -676,12 +983,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
             |     Timber.d(e.getMessage());
             |     ~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e.message)
+            |     ~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 5: Replace message with throwable:
+            |Fix for src/foo/Example.java line 6: Replace message with throwable:
             |@@ -6 +6
             |-      Timber.d(e.getMessage());
             |+      Timber.d(e);
+            |Fix for src/foo/Example.kt line 6: Replace message with throwable:
+            |@@ -6 +6
+            |-      Timber.d(e.message)
+            |+      Timber.d(e)
             |"""""".trimMargin())
   }
 
@@ -696,6 +1010,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, e.getMessage());
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, e.message)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -704,37 +1027,15 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
             |     Timber.d(e, e.getMessage());
             |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e, e.message)
+            |     ~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
             |Fix for src/foo/Example.java line 5: Remove redundant argument:
             |@@ -6 +6
             |-      Timber.d(e, e.getMessage());
             |+      Timber.d(e);
-            |"""""".trimMargin())
-  }
-
-  @Test fun exceptionLoggingUsingExceptionMessageArgumentInKotlin() {
-    lint()
-        .files(TIMBER_STUB,
-            kt(""""""
-              |package foo
-              |import timber.log.Timber
-              |class Example {
-              |  fun log() {
-              |     val e = Exception()
-              |     Timber.d(e, e.message)
-              |  }
-              |}
-              """""".trimMargin())
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""""""
-            |src/foo/Example.kt:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
-            |     Timber.d(e, e.message)
-            |     ~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
-              .expectFixDiffs(""""""
             |Fix for src/foo/Example.kt line 5: Remove redundant argument:
             |@@ -6 +6
             |-      Timber.d(e, e.message)
@@ -754,6 +1055,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, msg);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val msg = ""Hello""
+                |     val e = Exception()
+                |     Timber.d(e, msg)  
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -771,6 +1082,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log(Exception e, String message) {
                 |     Timber.d(e, message);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log(e: Exception, message: String) {
+                |     Timber.d(e, message)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -791,6 +1110,17 @@ class WrongTimberUsageDetectorTest {
                 |  private String method() {
                 |    return ""foo"";
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log(e: Exception) {
+                |     Timber.d(e, method())
+                |  }
+                |  private fun method(): String {
+                |     return ""foo""
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -810,6 +1140,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  private var message = """"
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, message)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -829,6 +1169,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  private val message = """"
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, message)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -847,6 +1197,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, """");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, """")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -855,12 +1214,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
             |     Timber.d(e, """");
             |     ~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, """")
+            |     ~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |Fix for src/foo/Example.java line 6: Remove redundant argument:
             |@@ -6 +6
             |-      Timber.d(e, """");
             |+      Timber.d(e);
+            |Fix for src/foo/Example.kt line 6: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, """")
+            |+      Timber.d(e)
             |"""""".trimMargin())
   }
 
@@ -875,6 +1241,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, null);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, null)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -883,12 +1258,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
             |     Timber.d(e, null);
             |     ~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, null)
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |Fix for src/foo/Example.java line 6: Remove redundant argument:
             |@@ -6 +6
             |-      Timber.d(e, null);
             |+      Timber.d(e);
+            |Fix for src/foo/Example.kt line 6: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, null)
+            |+      Timber.d(e)
             |"""""".trimMargin())
   }
 
@@ -903,6 +1285,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, ""Valid message"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, ""Valid message"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -920,6 +1311,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Timber.d(""%tc"", new java.util.Date());
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |    Timber.d(""%tc"", java.util.Date())
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
@@ -937,6 +1336,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Timber.d(""%tc"", System.currentTimeMillis());
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |    Timber.d(""%tc"", System.currentTimeMillis())
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
@@ -954,7 +1361,8 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%b"", Boolean.valueOf(true));
                 |  }
-                |}"""""".trimMargin())
+                |}"""""".trimMargin()),
+            // no kotlin equivalent, since primitive wrappers do not exist
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
@@ -976,6 +1384,19 @@ class WrongTimberUsageDetectorTest {
                 |    Timber.d(bar.baz);
                 |  }
                 |}
+                """""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  class Bar {
+                |    val baz = ""timber""
+                |  }
+                |  fun log() {
+                |    val bar = Bar()
+                |    Timber.d(bar.baz)
+                |  }
+                |}
                 """""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)","@@ -2,7 +2,6 @@ package timber.lint
 
 import com.android.tools.lint.checks.infrastructure.TestFiles.java
 import com.android.tools.lint.checks.infrastructure.TestFiles.kotlin
-import com.android.tools.lint.checks.infrastructure.TestFiles.kt
 import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
 import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
 import org.junit.Test
@@ -32,6 +31,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"");
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |import android.util.Log
+                |class Example {
+                |  fun log() {
+                |    Log.d(""TAG"", ""msg"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
@@ -40,16 +47,27 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
             |    Log.d(""TAG"", ""msg"");
             |    ~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"")
+            |    ~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(""msg""):
+            |Fix for src/foo/Example.java line 5: Replace with Timber.tag(""TAG"").d(""msg""):
             |@@ -5 +5
             |-     Log.d(""TAG"", ""msg"");
             |+     Timber.tag(""TAG"").d(""msg"");
-            |Fix for src/foo/Example.java line 4: Replace with Timber.d(""msg""):
+            |Fix for src/foo/Example.java line 5: Replace with Timber.d(""msg""):
             |@@ -5 +5
             |-     Log.d(""TAG"", ""msg"");
             |+     Timber.d(""msg"");
+            |Fix for src/foo/Example.kt line 5: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"")
+            |+     Timber.tag(""TAG"").d(""msg"")
+            |Fix for src/foo/Example.kt line 5: Replace with Timber.d(""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"")
+            |+     Timber.d(""msg"")
             |"""""".trimMargin())
   }
 
@@ -63,6 +81,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Log.d(""TAG"", ""msg"", new Exception());
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import android.util.Log
+                |class Example {
+                |  fun log() {
+                |    Log.d(""TAG"", ""msg"", Exception())
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
@@ -71,16 +97,27 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
             |    Log.d(""TAG"", ""msg"", new Exception());
             |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    Log.d(""TAG"", ""msg"", Exception())
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |Fix for src/foo/Example.java line 5: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
             |@@ -5 +5
             |-     Log.d(""TAG"", ""msg"", new Exception());
             |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
-            |Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), ""msg""):
+            |Fix for src/foo/Example.java line 5: Replace with Timber.d(new Exception(), ""msg""):
             |@@ -5 +5
             |-     Log.d(""TAG"", ""msg"", new Exception());
             |+     Timber.d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.kt line 5: Replace with Timber.tag(""TAG"").d(Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", Exception())
+            |+     Timber.tag(""TAG"").d(Exception(), ""msg"")
+            |Fix for src/foo/Example.kt line 5: Replace with Timber.d(Exception(), ""msg""):
+            |@@ -5 +5
+            |-     Log.d(""TAG"", ""msg"", Exception())
+            |+     Timber.d(Exception(), ""msg"")
             |"""""".trimMargin())
   }
 
@@ -93,6 +130,13 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |class Example {
+                |  fun log() {
+                |    android.util.Log.d(""TAG"", ""msg"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
@@ -101,16 +145,27 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
             |    android.util.Log.d(""TAG"", ""msg"");
             |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"")
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(""msg""):
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(""msg""):
             |@@ -4 +4
             |-     android.util.Log.d(""TAG"", ""msg"");
             |+     Timber.tag(""TAG"").d(""msg"");
-            |Fix for src/foo/Example.java line 3: Replace with Timber.d(""msg""):
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(""msg""):
             |@@ -4 +4
             |-     android.util.Log.d(""TAG"", ""msg"");
             |+     Timber.d(""msg"");
+            |Fix for src/foo/Example.kt line 4: Replace with Timber.tag(""TAG"").d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"")
+            |+     Timber.tag(""TAG"").d(""msg"")
+            |Fix for src/foo/Example.kt line 4: Replace with Timber.d(""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"")
+            |+     Timber.d(""msg"")
             |"""""".trimMargin())
   }
 
@@ -123,6 +178,13 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    android.util.Log.d(""TAG"", ""msg"", new Exception());
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |class Example {
+                |  fun log() {
+                |    android.util.Log.d(""TAG"", ""msg"", Exception())
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_LOG)
@@ -131,16 +193,27 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
             |    android.util.Log.d(""TAG"", ""msg"", new Exception());
             |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
+            |    android.util.Log.d(""TAG"", ""msg"", Exception())
+            |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 3: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
+            |Fix for src/foo/Example.java line 4: Replace with Timber.tag(""TAG"").d(new Exception(), ""msg""):
             |@@ -4 +4
             |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
             |+     Timber.tag(""TAG"").d(new Exception(), ""msg"");
-            |Fix for src/foo/Example.java line 3: Replace with Timber.d(new Exception(), ""msg""):
+            |Fix for src/foo/Example.java line 4: Replace with Timber.d(new Exception(), ""msg""):
             |@@ -4 +4
             |-     android.util.Log.d(""TAG"", ""msg"", new Exception());
             |+     Timber.d(new Exception(), ""msg"");
+            |Fix for src/foo/Example.kt line 4: Replace with Timber.tag(""TAG"").d(Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", Exception())
+            |+     Timber.tag(""TAG"").d(Exception(), ""msg"")
+            |Fix for src/foo/Example.kt line 4: Replace with Timber.d(Exception(), ""msg""):
+            |@@ -4 +4
+            |-     android.util.Log.d(""TAG"", ""msg"", Exception())
+            |+     Timber.d(Exception(), ""msg"")
             |"""""".trimMargin())
   }
 
@@ -154,6 +227,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(String.format(""%s"", ""arg1""));
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(String.format(""%s"", ""arg1""))
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
@@ -162,12 +243,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
             |     Timber.d(String.format(""%s"", ""arg1""));
             |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(String.format(""%s"", ""arg1""))
+            |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 4: Remove String.format(...):
+            |Fix for src/foo/Example.java line 5: Remove String.format(...):
             |@@ -5 +5
             |-      Timber.d(String.format(""%s"", ""arg1""));
             |+      Timber.d(""%s"", ""arg1"");
+            |Fix for src/foo/Example.kt line 5: Remove String.format(...):
+            |@@ -5 +5
+            |-      Timber.d(String.format(""%s"", ""arg1""))
+            |+      Timber.d(""%s"", ""arg1"")
             |"""""".trimMargin())
   }
 
@@ -182,6 +270,15 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(format(""%s"", ""arg1""));
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |import java.lang.String.format
+                |class Example {
+                |  fun log() {
+                |     Timber.d(format(""%s"", ""arg1""))
+                |  }
                 |}"""""".trimMargin())
         )
         // Remove when AGP 7.1.0-alpha07 is out
@@ -193,12 +290,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
             |     Timber.d(format(""%s"", ""arg1""));
             |              ~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(format(""%s"", ""arg1""))
+            |              ~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 5: Remove String.format(...):
+            |Fix for src/foo/Example.java line 6: Remove String.format(...):
             |@@ -6 +6
             |-      Timber.d(format(""%s"", ""arg1""));
             |+      Timber.d(""%s"", ""arg1"");
+            |Fix for src/foo/Example.kt line 6: Remove String.format(...):
+            |@@ -6 +6
+            |-      Timber.d(format(""%s"", ""arg1""))
+            |+      Timber.d(""%s"", ""arg1"")
             |"""""".trimMargin())
   }
 
@@ -213,6 +317,15 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.d(id(String.format(""%s"", ""arg1"")));
                 |  }
                 |  private String id(String s) { return s; }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(id(String.format(""%s"", ""arg1"")))
+                |  }
+                |  private fun id(s: String): String { return s }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
@@ -221,7 +334,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
             |     Timber.d(id(String.format(""%s"", ""arg1"")));
             |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
+            |     Timber.d(id(String.format(""%s"", ""arg1"")))
+            |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
   }
 
   @Test fun innerStringFormatInNestedAssignment() {
@@ -236,6 +352,7 @@ class WrongTimberUsageDetectorTest {
                 |    Timber.d(msg = String.format(""msg""));
                 |  }
                 |}"""""".trimMargin())
+          // no kotlin equivalent, since nested assignments do not exist
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
         .run()
@@ -251,13 +368,21 @@ class WrongTimberUsageDetectorTest {
         .files(TIMBER_STUB,
             java(""""""
                 |package foo;
-                |import timber.log.Timber;
                 |public class Example {
                 |  public void log() {
                 |    for(;;) {
                 |      String name = String.format(""msg"");
                 |    }
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |class Example {
+                |  fun log() {
+                |    while(true) {
+                |      val name = String.format(""msg"")
+                |    }
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
@@ -274,6 +399,13 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    new Exception(String.format(""msg""));
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |class Example {
+                |  fun log() {
+                |    Exception(String.format(""msg""))
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
@@ -288,6 +420,13 @@ class WrongTimberUsageDetectorTest {
                 |package foo;
                 |public class Example {
                 |  static String[] X = { String.format(""%s"", 100) };
+                |}"""""".trimMargin()),
+           kotlin(""""""
+                |package foo
+                |class Example {
+                |  companion object {
+                |    val X = arrayOf(String.format(""%s"", 100))
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
@@ -306,6 +445,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(""%s"", e);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(""%s"", e)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
@@ -314,12 +462,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
             |     Timber.d(""%s"", e);
             |     ~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
+            |     Timber.d(""%s"", e)
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 5: Replace with e, ""%s"":
+            |Fix for src/foo/Example.java line 6: Replace with e, ""%s"":
             |@@ -6 +6
             |-      Timber.d(""%s"", e);
             |+      Timber.d(e, ""%s"");
+            |Fix for src/foo/Example.kt line 6: Replace with e, ""%s"":
+            |@@ -6 +6
+            |-      Timber.d(""%s"", e)
+            |+      Timber.d(e, ""%s"")
             |"""""".trimMargin())
   }
 
@@ -333,6 +488,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""foo"" + ""bar"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(""foo"" + ""bar"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
@@ -351,6 +514,15 @@ class WrongTimberUsageDetectorTest {
                 |     String foo = ""foo"";
                 |     Timber.d(foo + ""bar"");
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val foo = ""foo""
+                |     Timber.d(""${""$""}{foo}bar"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
@@ -379,6 +551,15 @@ class WrongTimberUsageDetectorTest {
                 |     String bar = ""bar"";
                 |     Timber.d(""foo"" + bar);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val bar = ""bar""
+                |     Timber.d(""foo${""$""}bar"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
@@ -408,6 +589,16 @@ class WrongTimberUsageDetectorTest {
                 |     String bar = ""bar"";
                 |     Timber.d(foo + bar);
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val foo = ""foo""
+                |     val bar = ""bar""
+                |     Timber.d(""${""$""}foo${""$""}bar"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
@@ -436,6 +627,15 @@ class WrongTimberUsageDetectorTest {
                 |     String s = ""world!"";
                 |     Timber.d(true ? ""Hello, "" + s : ""Bye"");
                 |  }
+                |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val s = ""world!""
+                |     Timber.d(if(true) ""Hello, ${""$""}s"" else ""Bye"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_BINARY)
@@ -457,6 +657,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s %s"", ""arg1"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(""%s %s"", ""arg1"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
@@ -465,7 +673,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
             |     Timber.d(""%s %s"", ""arg1"");
             |     ~~~~~~~~~~~~~~~~~~~~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.d(""%s %s"", ""arg1"")
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun tooManyArgs() {
@@ -478,6 +689,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%s"", ""arg1"", ""arg2"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(""%s"", ""arg1"", ""arg2"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
@@ -486,7 +705,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
             |     Timber.d(""%s"", ""arg1"", ""arg2"");
             |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.d(""%s"", ""arg1"", ""arg2"")
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun wrongArgTypes() {
@@ -499,6 +721,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%d"", ""arg1"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.d(""%d"", ""arg1"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
@@ -507,7 +737,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
             |     Timber.d(""%d"", ""arg1"");
             |                    ~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.d(""%d"", ""arg1"")
+            |                     ~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun tagTooLongLiteralOnly() {
@@ -521,6 +754,14 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
                 |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"")
+                |  }
+                |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
@@ -544,6 +785,15 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
                 |  }
                 |}"""""".trimMargin()),
+          kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  private val field = ""x""
+                |  fun log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvw${""$""}field"")
+                |  }
+                |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
@@ -566,6 +816,14 @@ class WrongTimberUsageDetectorTest {
                 |     Timber.tag(""abcdefghijklmnopqrstuvwx"");
                 |  }
                 |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.tag(""abcdefghijklmnopqrstuvwx"")
+                |  }
+                |}"""""".trimMargin()),
             manifest().minSdk(26)
         )
         .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
@@ -573,7 +831,7 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
-    @Test fun tagTooLongLiteralPlusFieldOnlyBeforeApi26() {
+  @Test fun tagTooLongLiteralPlusFieldOnlyBeforeApi26() {
         lint()
             .files(TIMBER_STUB,
                 java(""""""
@@ -585,6 +843,15 @@ class WrongTimberUsageDetectorTest {
                     |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
                     |  }
                     |}"""""".trimMargin()),
+                kotlin(""""""
+                    |package foo
+                    |import timber.log.Timber
+                    |class Example {
+                    |  private val field = ""x""
+                    |  fun log() {
+                    |     Timber.tag(""abcdefghijklmnopqrstuvw${""$""}field"")
+                    |  }
+                    |}"""""".trimMargin()),
                     manifest().minSdk(26)
                 )
                 .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
@@ -602,17 +869,26 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.tag(""tag"").d(""%s %s"", ""arg1"")
+                |  }
                 |}"""""".trimMargin())
         )
-        .allowMissingSdk()
-
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
             |     Timber.tag(""tag"").d(""%s %s"", ""arg1"");
             |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s %s"", ""arg1"")
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun tooManyArgsInTag() {
@@ -625,6 +901,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
@@ -633,7 +917,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
             |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"");
             |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
+            |     Timber.tag(""tag"").d(""%s"", ""arg1"", ""arg2"")
+            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun wrongArgTypesInTag() {
@@ -646,6 +933,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.tag(""tag"").d(""%d"", ""arg1"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     Timber.tag(""tag"").d(""%d"", ""arg1"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
@@ -654,7 +949,10 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
             |     Timber.tag(""tag"").d(""%d"", ""arg1"");
             |                               ~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
+            |src/foo/Example.kt:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
+            |     Timber.tag(""tag"").d(""%d"", ""arg1"")
+            |                                ~~~~
+            |2 errors, 0 warnings"""""".trimMargin())
   }
 
   @Test fun exceptionLoggingUsingExceptionMessage() {
@@ -668,6 +966,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e.getMessage());
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e.message)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -676,12 +983,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
             |     Timber.d(e.getMessage());
             |     ~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e.message)
+            |     ~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 5: Replace message with throwable:
+            |Fix for src/foo/Example.java line 6: Replace message with throwable:
             |@@ -6 +6
             |-      Timber.d(e.getMessage());
             |+      Timber.d(e);
+            |Fix for src/foo/Example.kt line 6: Replace message with throwable:
+            |@@ -6 +6
+            |-      Timber.d(e.message)
+            |+      Timber.d(e)
             |"""""".trimMargin())
   }
 
@@ -696,6 +1010,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, e.getMessage());
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, e.message)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -704,37 +1027,15 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
             |     Timber.d(e, e.getMessage());
             |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
+            |     Timber.d(e, e.message)
+            |     ~~~~~~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
             |Fix for src/foo/Example.java line 5: Remove redundant argument:
             |@@ -6 +6
             |-      Timber.d(e, e.getMessage());
             |+      Timber.d(e);
-            |"""""".trimMargin())
-  }
-
-  @Test fun exceptionLoggingUsingExceptionMessageArgumentInKotlin() {
-    lint()
-        .files(TIMBER_STUB,
-            kt(""""""
-              |package foo
-              |import timber.log.Timber
-              |class Example {
-              |  fun log() {
-              |     val e = Exception()
-              |     Timber.d(e, e.message)
-              |  }
-              |}
-              """""".trimMargin())
-        )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
-        .run()
-        .expect(""""""
-            |src/foo/Example.kt:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
-            |     Timber.d(e, e.message)
-            |     ~~~~~~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
-              .expectFixDiffs(""""""
             |Fix for src/foo/Example.kt line 5: Remove redundant argument:
             |@@ -6 +6
             |-      Timber.d(e, e.message)
@@ -754,6 +1055,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, msg);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val msg = ""Hello""
+                |     val e = Exception()
+                |     Timber.d(e, msg)  
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -771,6 +1082,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log(Exception e, String message) {
                 |     Timber.d(e, message);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log(e: Exception, message: String) {
+                |     Timber.d(e, message)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -791,6 +1110,17 @@ class WrongTimberUsageDetectorTest {
                 |  private String method() {
                 |    return ""foo"";
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log(e: Exception) {
+                |     Timber.d(e, method())
+                |  }
+                |  private fun method(): String {
+                |     return ""foo""
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -810,6 +1140,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  private var message = """"
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, message)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -829,6 +1169,16 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, message);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  private val message = """"
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, message)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -847,6 +1197,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, """");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, """")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -855,12 +1214,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
             |     Timber.d(e, """");
             |     ~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, """")
+            |     ~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |Fix for src/foo/Example.java line 6: Remove redundant argument:
             |@@ -6 +6
             |-      Timber.d(e, """");
             |+      Timber.d(e);
+            |Fix for src/foo/Example.kt line 6: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, """")
+            |+      Timber.d(e)
             |"""""".trimMargin())
   }
 
@@ -875,6 +1241,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, null);
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, null)
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -883,12 +1258,19 @@ class WrongTimberUsageDetectorTest {
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
             |     Timber.d(e, null);
             |     ~~~~~~~~~~~~~~~~~
-            |0 errors, 1 warnings"""""".trimMargin())
+            |src/foo/Example.kt:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
+            |     Timber.d(e, null)
+            |     ~~~~~~~~~~~~~~~~~
+            |0 errors, 2 warnings"""""".trimMargin())
         .expectFixDiffs(""""""
-            |Fix for src/foo/Example.java line 5: Remove redundant argument:
+            |Fix for src/foo/Example.java line 6: Remove redundant argument:
             |@@ -6 +6
             |-      Timber.d(e, null);
             |+      Timber.d(e);
+            |Fix for src/foo/Example.kt line 6: Remove redundant argument:
+            |@@ -6 +6
+            |-      Timber.d(e, null)
+            |+      Timber.d(e)
             |"""""".trimMargin())
   }
 
@@ -903,6 +1285,15 @@ class WrongTimberUsageDetectorTest {
                 |     Exception e = new Exception();
                 |     Timber.d(e, ""Valid message"");
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |     val e = Exception()
+                |     Timber.d(e, ""Valid message"")
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
@@ -920,6 +1311,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Timber.d(""%tc"", new java.util.Date());
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |    Timber.d(""%tc"", java.util.Date())
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
@@ -937,6 +1336,14 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |    Timber.d(""%tc"", System.currentTimeMillis());
                 |  }
+                |}"""""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  fun log() {
+                |    Timber.d(""%tc"", System.currentTimeMillis())
+                |  }
                 |}"""""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
@@ -954,7 +1361,8 @@ class WrongTimberUsageDetectorTest {
                 |  public void log() {
                 |     Timber.d(""%b"", Boolean.valueOf(true));
                 |  }
-                |}"""""".trimMargin())
+                |}"""""".trimMargin()),
+            // no kotlin equivalent, since primitive wrappers do not exist
         )
         .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
         .run()
@@ -976,6 +1384,19 @@ class WrongTimberUsageDetectorTest {
                 |    Timber.d(bar.baz);
                 |  }
                 |}
+                """""".trimMargin()),
+            kotlin(""""""
+                |package foo
+                |import timber.log.Timber
+                |class Example {
+                |  class Bar {
+                |    val baz = ""timber""
+                |  }
+                |  fun log() {
+                |    val bar = Bar()
+                |    Timber.d(bar.baz)
+                |  }
+                |}
                 """""".trimMargin())
         )
         .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)",False,test
timber-sample/src/main/java/com/example/timber/ui/LintActivity.java,timber-sample/src/main/java/com/example/timber/ui/JavaLintActivity.java,c83e3ebe282817e8131abfcd8e3567efead08c07,403f51daef47580f0f0331b57cb089f134e62b99,Update Lint checks for Kotlin consumers,"@@ -10,7 +10,7 @@ import timber.log.Timber;
 import static java.lang.String.format;
 
 @SuppressLint(""Registered"") //
-public class LintActivity extends Activity {
+public class JavaLintActivity extends Activity {
   /**
    * Below are some examples of how NOT to use Timber.
    *","@@ -0,0 +1,78 @@
+package com.example.timber.ui;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.os.Bundle;
+import android.util.Log;
+import androidx.annotation.Nullable;
+import timber.log.Timber;
+
+import static java.lang.String.format;
+
+@SuppressLint(""Registered"") //
+public class JavaLintActivity extends Activity {
+  /**
+   * Below are some examples of how NOT to use Timber.
+   *
+   * To see how a particular lint issue behaves, comment/remove its corresponding id from the set
+   * of SuppressLint ids below.
+   */
+  @SuppressLint({
+      ""LogNotTimber"", //
+      ""StringFormatInTimber"", //
+      ""ThrowableNotAtBeginning"", //
+      ""BinaryOperationInTimber"", //
+      ""TimberArgCount"", //
+      ""TimberArgTypes"", //
+      ""TimberTagLength"", //
+      ""TimberExceptionLogging"" //
+  }) //
+  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+
+    // LogNotTimber
+    Log.d(""TAG"", ""msg"");
+    Log.d(""TAG"", ""msg"", new Exception());
+    android.util.Log.d(""TAG"", ""msg"");
+    android.util.Log.d(""TAG"", ""msg"", new Exception());
+
+    // StringFormatInTimber
+    Timber.w(String.format(""%s"", getString()));
+    Timber.w(format(""%s"", getString()));
+
+    // ThrowableNotAtBeginning
+    Timber.d(""%s"", new Exception());
+
+    // BinaryOperationInTimber
+    String foo = ""foo"";
+    String bar = ""bar"";
+    Timber.d(""foo"" + ""bar"");
+    Timber.d(""foo"" + bar);
+    Timber.d(foo + ""bar"");
+    Timber.d(foo + bar);
+
+    // TimberArgCount
+    Timber.d(""%s %s"", ""arg0"");
+    Timber.d(""%s"", ""arg0"", ""arg1"");
+    Timber.tag(""tag"").d(""%s %s"", ""arg0"");
+    Timber.tag(""tag"").d(""%s"", ""arg0"", ""arg1"");
+
+    // TimberArgTypes
+    Timber.d(""%d"", ""arg0"");
+    Timber.tag(""tag"").d(""%d"", ""arg0"");
+
+    // TimberTagLength
+    Timber.tag(""abcdefghijklmnopqrstuvwx"");
+    Timber.tag(""abcdefghijklmnopqrstuvw"" + ""x"");
+
+    // TimberExceptionLogging
+    Timber.d(new Exception(), new Exception().getMessage());
+    Timber.d(new Exception(), """");
+    Timber.d(new Exception(), null);
+    Timber.d(new Exception().getMessage());
+  }
+
+  private String getString() {
+    return ""foo"";
+  }
+}",True,source
,timber-sample/src/main/java/com/example/timber/ui/KotlinLintActivity.kt,c83e3ebe282817e8131abfcd8e3567efead08c07,403f51daef47580f0f0331b57cb089f134e62b99,Update Lint checks for Kotlin consumers,"@@ -0,0 +1,76 @@
+package com.example.timber.ui
+
+import android.annotation.SuppressLint
+import android.app.Activity
+import android.os.Bundle
+import android.util.Log
+import timber.log.Timber
+import java.lang.Exception
+import java.lang.String.format
+
+@SuppressLint(""Registered"")
+class KotlinLintActivity : Activity() {
+  /**
+   * Below are some examples of how NOT to use Timber.
+   *
+   * To see how a particular lint issue behaves, comment/remove its corresponding id from the set
+   * of SuppressLint ids below.
+   */
+  @SuppressLint(
+    ""LogNotTimber"",
+    ""StringFormatInTimber"",
+    ""ThrowableNotAtBeginning"",
+    ""BinaryOperationInTimber"",
+    ""TimberArgCount"",
+    ""TimberArgTypes"",
+    ""TimberTagLength"",
+    ""TimberExceptionLogging""
+  )
+  @Suppress(""RemoveRedundantQualifierName"")
+  override fun onCreate(savedInstanceState: Bundle?) {
+    super.onCreate(savedInstanceState)
+
+    // LogNotTimber
+    Log.d(""TAG"", ""msg"")
+    Log.d(""TAG"", ""msg"", Exception())
+    android.util.Log.d(""TAG"", ""msg"")
+    android.util.Log.d(""TAG"", ""msg"", Exception())
+
+    // StringFormatInTimber
+    Timber.w(String.format(""%s"", getString()))
+    Timber.w(format(""%s"", getString()))
+
+    // ThrowableNotAtBeginning
+    Timber.d(""%s"", Exception())
+
+    // BinaryOperationInTimber
+    val foo = ""foo""
+    val bar = ""bar""
+    Timber.d(""foo"" + ""bar"")
+    Timber.d(""foo$bar"")
+    Timber.d(""${foo}bar"")
+    Timber.d(""$foo$bar"")
+
+    // TimberArgCount
+    Timber.d(""%s %s"", ""arg0"")
+    Timber.d(""%s"", ""arg0"", ""arg1"")
+    Timber.tag(""tag"").d(""%s %s"", ""arg0"")
+    Timber.tag(""tag"").d(""%s"", ""arg0"", ""arg1"")
+
+    // TimberArgTypes
+    Timber.d(""%d"", ""arg0"")
+    Timber.tag(""tag"").d(""%d"", ""arg0"")
+
+    // TimberTagLength
+    Timber.tag(""abcdefghijklmnopqrstuvwx"")
+    Timber.tag(""abcdefghijklmnopqrstuvw"" + ""x"")
+
+    // TimberExceptionLogging
+    Timber.d(Exception(), Exception().message)
+    Timber.d(Exception(), """")
+    Timber.d(Exception(), null)
+    Timber.d(Exception().message)
+  }
+
+  private fun getString() = ""foo""
+}
\ No newline at end of file","@@ -0,0 +1,76 @@
+package com.example.timber.ui
+
+import android.annotation.SuppressLint
+import android.app.Activity
+import android.os.Bundle
+import android.util.Log
+import timber.log.Timber
+import java.lang.Exception
+import java.lang.String.format
+
+@SuppressLint(""Registered"")
+class KotlinLintActivity : Activity() {
+  /**
+   * Below are some examples of how NOT to use Timber.
+   *
+   * To see how a particular lint issue behaves, comment/remove its corresponding id from the set
+   * of SuppressLint ids below.
+   */
+  @SuppressLint(
+    ""LogNotTimber"",
+    ""StringFormatInTimber"",
+    ""ThrowableNotAtBeginning"",
+    ""BinaryOperationInTimber"",
+    ""TimberArgCount"",
+    ""TimberArgTypes"",
+    ""TimberTagLength"",
+    ""TimberExceptionLogging""
+  )
+  @Suppress(""RemoveRedundantQualifierName"")
+  override fun onCreate(savedInstanceState: Bundle?) {
+    super.onCreate(savedInstanceState)
+
+    // LogNotTimber
+    Log.d(""TAG"", ""msg"")
+    Log.d(""TAG"", ""msg"", Exception())
+    android.util.Log.d(""TAG"", ""msg"")
+    android.util.Log.d(""TAG"", ""msg"", Exception())
+
+    // StringFormatInTimber
+    Timber.w(String.format(""%s"", getString()))
+    Timber.w(format(""%s"", getString()))
+
+    // ThrowableNotAtBeginning
+    Timber.d(""%s"", Exception())
+
+    // BinaryOperationInTimber
+    val foo = ""foo""
+    val bar = ""bar""
+    Timber.d(""foo"" + ""bar"")
+    Timber.d(""foo$bar"")
+    Timber.d(""${foo}bar"")
+    Timber.d(""$foo$bar"")
+
+    // TimberArgCount
+    Timber.d(""%s %s"", ""arg0"")
+    Timber.d(""%s"", ""arg0"", ""arg1"")
+    Timber.tag(""tag"").d(""%s %s"", ""arg0"")
+    Timber.tag(""tag"").d(""%s"", ""arg0"", ""arg1"")
+
+    // TimberArgTypes
+    Timber.d(""%d"", ""arg0"")
+    Timber.tag(""tag"").d(""%d"", ""arg0"")
+
+    // TimberTagLength
+    Timber.tag(""abcdefghijklmnopqrstuvwx"")
+    Timber.tag(""abcdefghijklmnopqrstuvw"" + ""x"")
+
+    // TimberExceptionLogging
+    Timber.d(Exception(), Exception().message)
+    Timber.d(Exception(), """")
+    Timber.d(Exception(), null)
+    Timber.d(Exception().message)
+  }
+
+  private fun getString() = ""foo""
+}
\ No newline at end of file",False,source
.buildscript/deploy_snapshot.sh,,5699f8d9d9b16a4495579540b4bb69fd10d11e83,8537da288374037858b5291f5eb92fcbb03579ac,Delete deploy_snapshot.sh,"@@ -1,26 +0,0 @@
-#!/bin/bash
-#
-# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo.
-#
-# Adapted from https://coderwall.com/p/9b_lfq and
-# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/
-
-SLUG=""JakeWharton/timber""
-JDK=""oraclejdk8""
-BRANCH=""master""
-
-set -e
-
-if [ ""$TRAVIS_REPO_SLUG"" != ""$SLUG"" ]; then
-  echo ""Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.""
-elif [ ""$TRAVIS_JDK_VERSION"" != ""$JDK"" ]; then
-  echo ""Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.""
-elif [ ""$TRAVIS_PULL_REQUEST"" != ""false"" ]; then
-  echo ""Skipping snapshot deployment: was pull request.""
-elif [ ""$TRAVIS_BRANCH"" != ""$BRANCH"" ]; then
-  echo ""Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.""
-else
-  echo ""Deploying snapshot...""
-  ./gradlew clean uploadArchives
-  echo ""Snapshot deployed!""
-fi","@@ -1,26 +0,0 @@
-#!/bin/bash
-#
-# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo.
-#
-# Adapted from https://coderwall.com/p/9b_lfq and
-# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/
-
-SLUG=""JakeWharton/timber""
-JDK=""oraclejdk8""
-BRANCH=""master""
-
-set -e
-
-if [ ""$TRAVIS_REPO_SLUG"" != ""$SLUG"" ]; then
-  echo ""Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.""
-elif [ ""$TRAVIS_JDK_VERSION"" != ""$JDK"" ]; then
-  echo ""Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.""
-elif [ ""$TRAVIS_PULL_REQUEST"" != ""false"" ]; then
-  echo ""Skipping snapshot deployment: was pull request.""
-elif [ ""$TRAVIS_BRANCH"" != ""$BRANCH"" ]; then
-  echo ""Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.""
-else
-  echo ""Deploying snapshot...""
-  ./gradlew clean uploadArchives
-  echo ""Snapshot deployed!""
-fi",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,1762be3c120b4ae874bdd4d437de7b9f047b03cb,5699f8d9d9b16a4495579540b4bb69fd10d11e83,Prepare version 5.0,"@@ -43,5 +43,5 @@ jobs:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           BRANCH: site
           FOLDER: timber/build/dokka/html/
-          TARGET_FOLDER: docs/4.x/
+          TARGET_FOLDER: docs/5.x/
           CLEAN: true","@@ -43,5 +43,5 @@ jobs:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           BRANCH: site
           FOLDER: timber/build/dokka/html/
-          TARGET_FOLDER: docs/4.x/
+          TARGET_FOLDER: docs/5.x/
           CLEAN: true",False,other
CHANGELOG.md,CHANGELOG.md,1762be3c120b4ae874bdd4d437de7b9f047b03cb,5699f8d9d9b16a4495579540b4bb69fd10d11e83,Prepare version 5.0,"@@ -1,28 +1,45 @@
-Change Log
-==========
+# Change log
 
-Version 4.7.1 *(2018-06-28)*
-----------------------------
+## [Unreleased]
+
+
+## [5.0.0] - 2021-08-10
+
+The library has been rewritten in Kotlin, but it remains binary-compatible with 4.x.
+The intent is to support Kotlin multiplatform in the future.
+This is otherwise a relatively minor, bug-fix release.
+
+### Changed
+
+- Minimum supported API level is now 14.
+- Minimum supported AGP (for embedded lint checks) is now 7.0.
+
+### Fixed
+
+- `DebugTree` now finds first non-library class name which prevents exceptions in optimized builds where expected stackframes may have been inlined.
+- Enforce 23-character truncated tag length until API 26 per AOSP sources.
+- Support `Long` type for date/time format arguments when validating format strings in lint checks.
+- Do not report string literal concatenation in lint checks on log message.
+
+
+## [4.7.1] - 2018-06-28
 
  * Fix: Redundant argument lint check now works correctly on Kotlin sources.
 
 
-Version 4.7.0 *(2018-03-27)*
-----------------------------
+## [4.7.0] - 2018-03-27
 
  * Fix: Support lint version 26.1.0.
  * Fix: Check single-argument log method in TimberExceptionLogging.
 
 
-Version 4.6.1 *(2018-02-12)*
-----------------------------
+## [4.6.1] - 2018-02-12
 
  * Fix: Lint checks now handle more edge cases around exception and message source.
  * Fix: Useless `BuildConfig` class is no longer included.
 
 
-Version 4.6.0 *(2017-10-30)*
-----------------------------
+## [4.6.0] - 2017-10-30
 
  * New: Lint checks have been ported to UAST, their stability improved, and quick-fix suggestions added. They require Android Gradle Plugin 3.0 or newer to run.
  * New: Added nullability annotations for Kotlin users.
@@ -30,14 +47,12 @@ Version 4.6.0 *(2017-10-30)*
  * Fix: Handle when a `null` array is supplied for the message arguments. This can occur when using various bytecode optimization tools.
 
 
-Version 4.5.1 *(2017-01-20)*
-----------------------------
+## [4.5.1] - 2017-01-20
 
  * Fix: String formatting lint check now correctly works with dates.
 
 
-Version 4.5.0 *(2017-01-09)*
-----------------------------
+## [4.5.0] - 2017-01-09
 
  * New: Automatically truncate class name tags to Android's limit of 23 characters.
  * New: Lint check for detecting null/empty messages or using the exception message when logging an
@@ -45,27 +60,23 @@ Version 4.5.0 *(2017-01-09)*
  * Fix: Correct NPE in lint check when using String.format.
 
 
-Version 4.4.0 *(2016-12-06)*
-----------------------------
+## [4.4.0] - 2016-12-06
 
  * New: `Tree.formatMessage` method allows customization of message formatting and rendering.
  * New: Lint checks ported to new IntelliJ PSI infrastructure.
 
 
-Version 4.3.1 *(2016-09-19)*
-----------------------------
+## [4.3.1] - 2016-09-19
 
  * New: Add `isLoggable` convenience method which also provides the tag.
 
 
-Version 4.3.0 *(2016-08-18)*
-----------------------------
+## [4.3.0] - 2016-08-18
 
  * New: Overloads for all log methods which accept only a `Throwable` without a message.
 
 
-Version 4.2.0 *(2016-08-12)*
-----------------------------
+## [4.2.0] - 2016-08-12
 
  * New: `Timber.plant` now has a varargs overload for planting multiple trees at once.
  * New: minSdkVersion is now 9 because reasons.
@@ -73,21 +84,18 @@ Version 4.2.0 *(2016-08-12)*
  * Fix: Allow lint checks to run when `Timber.tag(..).v(..)`-style logging is used.
 
 
-Version 4.1.2 *(2016-03-30)*
-----------------------------
+## [4.1.2] - 2016-03-30
 
  * Fix: Tag-length lint check now only triggers on calls to `Timber`'s `tag` method. Previously it would
    match _any_ `tag` method and flag arguments longer than 23 characters.
 
 
-Version 4.1.1 *(2016-02-19)*
-----------------------------
+## [4.1.1] - 2016-02-19
 
  * New: Add method for retreiving the number of installed trees.
 
 
-Version 4.1.0 *(2015-10-19)*
-----------------------------
+## [4.1.0] - 2015-10-19
 
  * New: Consumer ProGuard rule automatically suppresses a warning for the use `@NonNls` on the 'message'
    argument for logging method. The warning was only for users running ProGuard and can safely be ignored.
@@ -98,15 +106,13 @@ Version 4.1.0 *(2015-10-19)*
  * Fix: 'BinaryOperationInTimber' lint rule now only triggers for string concatenation.
 
 
-Version 4.0.1 *(2015-10-07)*
-----------------------------
+## [4.0.1] - 2015-10-07
 
  * Fix: TimberArgTypes lint rule now allows booleans and numbers in '%s' format markers.
  * Fix: Lint rules now support running on Java 7 VMs.
 
 
-Version 4.0.0 *(2015-10-07)*
-----------------------------
+## [4.0.0] - 2015-10-07
 
  * New: Library is now an .aar! This means the lint rules are automatically applied to consuming
    projects.
@@ -114,29 +120,25 @@ Version 4.0.0 *(2015-10-07)*
  * Fix: Ensure thread safety when logging and adding or removing trees concurrently.
 
 
-Version 3.1.0 *(2015-05-11)*
-----------------------------
+## [3.1.0] - 2015-05-11
 
  * New: `Tree.isLoggable` method allows a tree to determine whether a statement should be logged
    based on its priority. Defaults to logging all levels.
 
 
-Version 3.0.2 *(2015-05-01)*
-----------------------------
+## [3.0.2] - 2015-05-01
 
  * Fix: Strip multiple anonymous class markers (e.g., `$1$2`) from class names when `DebugTree`
    is creating an inferred tag.
 
 
-Version 3.0.1 *(2015-04-17)*
-----------------------------
+## [3.0.1] - 2015-04-17
 
  * Fix: String formatting is now always applied when arguments are present. Previously it would
    only trigger when an exception was included.
 
 
-Version 3.0.0 *(2015-04-16)*
-----------------------------
+## [3.0.0] - 2015-04-16
 
  * New: `Tree` and `DebugTree` APIs are much more extensible requiring only a single method to
    override.
@@ -149,105 +151,130 @@ Version 3.0.0 *(2015-04-16)*
  * Fix: Multiple planted `DebugTree`s now each correctly received tags set from a call to `tag`.
 
 
-Version 2.7.1 *(2015-02-17)*
-----------------------------
+## [2.7.1] - 2015-02-17
 
  * Fix: Switch method of getting calling class to be consistent across API levels.
 
 
-Version 2.7.0 *(2015-02-17)*
-----------------------------
+## [2.7.0] - 2015-02-17
 
  * New: `DebugTree` subclasses can now override `logMessage` for access to the priority, tag, and
    entire message for every log.
  * Fix: Prevent overriding `Tree` and `TaggedTree` methods on `DebugTree`.
 
 
-Version 2.6.0 *(2015-02-17)*
-----------------------------
+## [2.6.0] - 2015-02-17
 
  * New: `DebugTree` subclasses can now override `createTag()` to specify log tags. `nextTag()` is
    also accessible for querying if an explicit tag was set.
 
 
-Version 2.5.1 *(2015-01-19)*
-----------------------------
+## [2.5.1] - 2015-01-19
 
  * Fix: Properly split lines which contain both newlines and are over 4000 characters.
  * Explicitly forbid `null` tree instances.
 
 
-Version 2.5.0 *(2014-11-08)*
-----------------------------
+## [2.5.0] - 2014-11-08
 
  * New: `Timber.asTree()` exposes functionality as a `Tree` instance rather than static methods.
 
 
-Version 2.4.2 *(2014-11-07)*
-----------------------------
+## [2.4.2] - 2014-11-07
 
  * Eliminate heap allocation when dispatching log calls.
 
 
-Version 2.4.1 *(2014-06-19)*
-----------------------------
+## [2.4.1] - 2014-06-19
 
  * Fix: Calls with no message but a `Throwable` are now correctly logged.
 
 
-Version 2.4.0 *(2014-06-10)*
-----------------------------
+## [2.4.0] - 2014-06-10
 
  * New: `uproot` and `uprootAll` methods allow removing trees.
 
 
-Version 2.3.0 *(2014-05-21)*
-----------------------------
+## [2.3.0] - 2014-05-21
 
  * New: Messages longer than 4000 characters will be split into multiple lines.
 
 
-Version 2.2.2 *(2014-02-12)*
-----------------------------
+## [2.2.2] - 2014-02-12
 
  * Fix: Include debug level in previous fix which avoids formatting messages with no arguments.
 
 
-Version 2.2.1 *(2014-02-11)*
-----------------------------
+## [2.2.1] - 2014-02-11
 
  * Fix: Do not attempt to format log messages which do not have arguments.
 
 
-Version 2.2.0 *(2014-02-02)*
-----------------------------
+## [2.2.0] - 2014-02-02
 
  * New: verbose log level added (`v()`).
  * New: `timber-lint` module adds lint check to ensure you are calling `Timber` and not `Log`.
  * Fix: Specifying custom tags is now thread-safe.
 
 
-Version 2.1.0 *(2013-11-21)*
-----------------------------
+## [2.1.0] - 2013-11-21
 
  * New: `tag` method allows specifying custom one-time tag. Redux!
 
 
-Version 2.0.0 *(2013-10-21)*
-----------------------------
+## [2.0.0] - 2013-10-21
 
  * Logging API is now exposed as static methods on `Timber`. Behavior is added by installing `Tree`
    instances for logging.
 
 
-Version 1.1.0 *(2013-07-22)*
-----------------------------
+## [1.1.0] - 2013-07-22
 
  * New: `tag` method allows specifying custom one-time tag.
  * Fix: Exception-containing methods now log at the correct level.
 
 
-Version 1.0.0 *(2013-07-17)*
-----------------------------
+## [1.0.0] - 2013-07-17
 
 Initial cut. (Get it?)
+
+
+
+
+[Unreleased]: https://github.com/JakeWharton/timber/compare/5.0.0...HEAD
+[5.0.0]: https://github.com/JakeWharton/timber/releases/tag/5.0.0
+[4.7.1]: https://github.com/JakeWharton/timber/releases/tag/4.7.1
+[4.7.0]: https://github.com/JakeWharton/timber/releases/tag/4.7.0
+[4.6.1]: https://github.com/JakeWharton/timber/releases/tag/4.6.1
+[4.6.0]: https://github.com/JakeWharton/timber/releases/tag/4.6.0
+[4.5.1]: https://github.com/JakeWharton/timber/releases/tag/4.5.1
+[4.5.0]: https://github.com/JakeWharton/timber/releases/tag/4.5.0
+[4.4.0]: https://github.com/JakeWharton/timber/releases/tag/4.4.0
+[4.3.1]: https://github.com/JakeWharton/timber/releases/tag/4.3.1
+[4.3.0]: https://github.com/JakeWharton/timber/releases/tag/4.3.0
+[4.2.0]: https://github.com/JakeWharton/timber/releases/tag/4.2.0
+[4.1.2]: https://github.com/JakeWharton/timber/releases/tag/4.1.2
+[4.1.1]: https://github.com/JakeWharton/timber/releases/tag/4.1.1
+[4.1.0]: https://github.com/JakeWharton/timber/releases/tag/4.1.0
+[4.0.1]: https://github.com/JakeWharton/timber/releases/tag/4.0.1
+[4.0.0]: https://github.com/JakeWharton/timber/releases/tag/4.0.0
+[3.1.0]: https://github.com/JakeWharton/timber/releases/tag/3.1.0
+[3.0.2]: https://github.com/JakeWharton/timber/releases/tag/3.0.2
+[3.0.1]: https://github.com/JakeWharton/timber/releases/tag/3.0.1
+[3.0.0]: https://github.com/JakeWharton/timber/releases/tag/3.0.0
+[2.7.1]: https://github.com/JakeWharton/timber/releases/tag/2.7.1
+[2.7.0]: https://github.com/JakeWharton/timber/releases/tag/2.7.0
+[2.6.0]: https://github.com/JakeWharton/timber/releases/tag/2.6.0
+[2.5.1]: https://github.com/JakeWharton/timber/releases/tag/2.5.1
+[2.5.0]: https://github.com/JakeWharton/timber/releases/tag/2.5.0
+[2.4.2]: https://github.com/JakeWharton/timber/releases/tag/2.4.2
+[2.4.1]: https://github.com/JakeWharton/timber/releases/tag/2.4.1
+[2.4.0]: https://github.com/JakeWharton/timber/releases/tag/2.4.0
+[2.3.0]: https://github.com/JakeWharton/timber/releases/tag/2.3.0
+[2.2.2]: https://github.com/JakeWharton/timber/releases/tag/2.2.2
+[2.2.1]: https://github.com/JakeWharton/timber/releases/tag/2.2.1
+[2.2.0]: https://github.com/JakeWharton/timber/releases/tag/2.2.0
+[2.1.0]: https://github.com/JakeWharton/timber/releases/tag/2.1.0
+[2.0.0]: https://github.com/JakeWharton/timber/releases/tag/2.0.0
+[1.1.0]: https://github.com/JakeWharton/timber/releases/tag/1.1.0
+[1.0.0]: https://github.com/JakeWharton/timber/releases/tag/1.0.0","@@ -1,28 +1,45 @@
-Change Log
-==========
+# Change log
 
-Version 4.7.1 *(2018-06-28)*
-----------------------------
+## [Unreleased]
+
+
+## [5.0.0] - 2021-08-10
+
+The library has been rewritten in Kotlin, but it remains binary-compatible with 4.x.
+The intent is to support Kotlin multiplatform in the future.
+This is otherwise a relatively minor, bug-fix release.
+
+### Changed
+
+- Minimum supported API level is now 14.
+- Minimum supported AGP (for embedded lint checks) is now 7.0.
+
+### Fixed
+
+- `DebugTree` now finds first non-library class name which prevents exceptions in optimized builds where expected stackframes may have been inlined.
+- Enforce 23-character truncated tag length until API 26 per AOSP sources.
+- Support `Long` type for date/time format arguments when validating format strings in lint checks.
+- Do not report string literal concatenation in lint checks on log message.
+
+
+## [4.7.1] - 2018-06-28
 
  * Fix: Redundant argument lint check now works correctly on Kotlin sources.
 
 
-Version 4.7.0 *(2018-03-27)*
-----------------------------
+## [4.7.0] - 2018-03-27
 
  * Fix: Support lint version 26.1.0.
  * Fix: Check single-argument log method in TimberExceptionLogging.
 
 
-Version 4.6.1 *(2018-02-12)*
-----------------------------
+## [4.6.1] - 2018-02-12
 
  * Fix: Lint checks now handle more edge cases around exception and message source.
  * Fix: Useless `BuildConfig` class is no longer included.
 
 
-Version 4.6.0 *(2017-10-30)*
-----------------------------
+## [4.6.0] - 2017-10-30
 
  * New: Lint checks have been ported to UAST, their stability improved, and quick-fix suggestions added. They require Android Gradle Plugin 3.0 or newer to run.
  * New: Added nullability annotations for Kotlin users.
@@ -30,14 +47,12 @@ Version 4.6.0 *(2017-10-30)*
  * Fix: Handle when a `null` array is supplied for the message arguments. This can occur when using various bytecode optimization tools.
 
 
-Version 4.5.1 *(2017-01-20)*
-----------------------------
+## [4.5.1] - 2017-01-20
 
  * Fix: String formatting lint check now correctly works with dates.
 
 
-Version 4.5.0 *(2017-01-09)*
-----------------------------
+## [4.5.0] - 2017-01-09
 
  * New: Automatically truncate class name tags to Android's limit of 23 characters.
  * New: Lint check for detecting null/empty messages or using the exception message when logging an
@@ -45,27 +60,23 @@ Version 4.5.0 *(2017-01-09)*
  * Fix: Correct NPE in lint check when using String.format.
 
 
-Version 4.4.0 *(2016-12-06)*
-----------------------------
+## [4.4.0] - 2016-12-06
 
  * New: `Tree.formatMessage` method allows customization of message formatting and rendering.
  * New: Lint checks ported to new IntelliJ PSI infrastructure.
 
 
-Version 4.3.1 *(2016-09-19)*
-----------------------------
+## [4.3.1] - 2016-09-19
 
  * New: Add `isLoggable` convenience method which also provides the tag.
 
 
-Version 4.3.0 *(2016-08-18)*
-----------------------------
+## [4.3.0] - 2016-08-18
 
  * New: Overloads for all log methods which accept only a `Throwable` without a message.
 
 
-Version 4.2.0 *(2016-08-12)*
-----------------------------
+## [4.2.0] - 2016-08-12
 
  * New: `Timber.plant` now has a varargs overload for planting multiple trees at once.
  * New: minSdkVersion is now 9 because reasons.
@@ -73,21 +84,18 @@ Version 4.2.0 *(2016-08-12)*
  * Fix: Allow lint checks to run when `Timber.tag(..).v(..)`-style logging is used.
 
 
-Version 4.1.2 *(2016-03-30)*
-----------------------------
+## [4.1.2] - 2016-03-30
 
  * Fix: Tag-length lint check now only triggers on calls to `Timber`'s `tag` method. Previously it would
    match _any_ `tag` method and flag arguments longer than 23 characters.
 
 
-Version 4.1.1 *(2016-02-19)*
-----------------------------
+## [4.1.1] - 2016-02-19
 
  * New: Add method for retreiving the number of installed trees.
 
 
-Version 4.1.0 *(2015-10-19)*
-----------------------------
+## [4.1.0] - 2015-10-19
 
  * New: Consumer ProGuard rule automatically suppresses a warning for the use `@NonNls` on the 'message'
    argument for logging method. The warning was only for users running ProGuard and can safely be ignored.
@@ -98,15 +106,13 @@ Version 4.1.0 *(2015-10-19)*
  * Fix: 'BinaryOperationInTimber' lint rule now only triggers for string concatenation.
 
 
-Version 4.0.1 *(2015-10-07)*
-----------------------------
+## [4.0.1] - 2015-10-07
 
  * Fix: TimberArgTypes lint rule now allows booleans and numbers in '%s' format markers.
  * Fix: Lint rules now support running on Java 7 VMs.
 
 
-Version 4.0.0 *(2015-10-07)*
-----------------------------
+## [4.0.0] - 2015-10-07
 
  * New: Library is now an .aar! This means the lint rules are automatically applied to consuming
    projects.
@@ -114,29 +120,25 @@ Version 4.0.0 *(2015-10-07)*
  * Fix: Ensure thread safety when logging and adding or removing trees concurrently.
 
 
-Version 3.1.0 *(2015-05-11)*
-----------------------------
+## [3.1.0] - 2015-05-11
 
  * New: `Tree.isLoggable` method allows a tree to determine whether a statement should be logged
    based on its priority. Defaults to logging all levels.
 
 
-Version 3.0.2 *(2015-05-01)*
-----------------------------
+## [3.0.2] - 2015-05-01
 
  * Fix: Strip multiple anonymous class markers (e.g., `$1$2`) from class names when `DebugTree`
    is creating an inferred tag.
 
 
-Version 3.0.1 *(2015-04-17)*
-----------------------------
+## [3.0.1] - 2015-04-17
 
  * Fix: String formatting is now always applied when arguments are present. Previously it would
    only trigger when an exception was included.
 
 
-Version 3.0.0 *(2015-04-16)*
-----------------------------
+## [3.0.0] - 2015-04-16
 
  * New: `Tree` and `DebugTree` APIs are much more extensible requiring only a single method to
    override.
@@ -149,105 +151,130 @@ Version 3.0.0 *(2015-04-16)*
  * Fix: Multiple planted `DebugTree`s now each correctly received tags set from a call to `tag`.
 
 
-Version 2.7.1 *(2015-02-17)*
-----------------------------
+## [2.7.1] - 2015-02-17
 
  * Fix: Switch method of getting calling class to be consistent across API levels.
 
 
-Version 2.7.0 *(2015-02-17)*
-----------------------------
+## [2.7.0] - 2015-02-17
 
  * New: `DebugTree` subclasses can now override `logMessage` for access to the priority, tag, and
    entire message for every log.
  * Fix: Prevent overriding `Tree` and `TaggedTree` methods on `DebugTree`.
 
 
-Version 2.6.0 *(2015-02-17)*
-----------------------------
+## [2.6.0] - 2015-02-17
 
  * New: `DebugTree` subclasses can now override `createTag()` to specify log tags. `nextTag()` is
    also accessible for querying if an explicit tag was set.
 
 
-Version 2.5.1 *(2015-01-19)*
-----------------------------
+## [2.5.1] - 2015-01-19
 
  * Fix: Properly split lines which contain both newlines and are over 4000 characters.
  * Explicitly forbid `null` tree instances.
 
 
-Version 2.5.0 *(2014-11-08)*
-----------------------------
+## [2.5.0] - 2014-11-08
 
  * New: `Timber.asTree()` exposes functionality as a `Tree` instance rather than static methods.
 
 
-Version 2.4.2 *(2014-11-07)*
-----------------------------
+## [2.4.2] - 2014-11-07
 
  * Eliminate heap allocation when dispatching log calls.
 
 
-Version 2.4.1 *(2014-06-19)*
-----------------------------
+## [2.4.1] - 2014-06-19
 
  * Fix: Calls with no message but a `Throwable` are now correctly logged.
 
 
-Version 2.4.0 *(2014-06-10)*
-----------------------------
+## [2.4.0] - 2014-06-10
 
  * New: `uproot` and `uprootAll` methods allow removing trees.
 
 
-Version 2.3.0 *(2014-05-21)*
-----------------------------
+## [2.3.0] - 2014-05-21
 
  * New: Messages longer than 4000 characters will be split into multiple lines.
 
 
-Version 2.2.2 *(2014-02-12)*
-----------------------------
+## [2.2.2] - 2014-02-12
 
  * Fix: Include debug level in previous fix which avoids formatting messages with no arguments.
 
 
-Version 2.2.1 *(2014-02-11)*
-----------------------------
+## [2.2.1] - 2014-02-11
 
  * Fix: Do not attempt to format log messages which do not have arguments.
 
 
-Version 2.2.0 *(2014-02-02)*
-----------------------------
+## [2.2.0] - 2014-02-02
 
  * New: verbose log level added (`v()`).
  * New: `timber-lint` module adds lint check to ensure you are calling `Timber` and not `Log`.
  * Fix: Specifying custom tags is now thread-safe.
 
 
-Version 2.1.0 *(2013-11-21)*
-----------------------------
+## [2.1.0] - 2013-11-21
 
  * New: `tag` method allows specifying custom one-time tag. Redux!
 
 
-Version 2.0.0 *(2013-10-21)*
-----------------------------
+## [2.0.0] - 2013-10-21
 
  * Logging API is now exposed as static methods on `Timber`. Behavior is added by installing `Tree`
    instances for logging.
 
 
-Version 1.1.0 *(2013-07-22)*
-----------------------------
+## [1.1.0] - 2013-07-22
 
  * New: `tag` method allows specifying custom one-time tag.
  * Fix: Exception-containing methods now log at the correct level.
 
 
-Version 1.0.0 *(2013-07-17)*
-----------------------------
+## [1.0.0] - 2013-07-17
 
 Initial cut. (Get it?)
+
+
+
+
+[Unreleased]: https://github.com/JakeWharton/timber/compare/5.0.0...HEAD
+[5.0.0]: https://github.com/JakeWharton/timber/releases/tag/5.0.0
+[4.7.1]: https://github.com/JakeWharton/timber/releases/tag/4.7.1
+[4.7.0]: https://github.com/JakeWharton/timber/releases/tag/4.7.0
+[4.6.1]: https://github.com/JakeWharton/timber/releases/tag/4.6.1
+[4.6.0]: https://github.com/JakeWharton/timber/releases/tag/4.6.0
+[4.5.1]: https://github.com/JakeWharton/timber/releases/tag/4.5.1
+[4.5.0]: https://github.com/JakeWharton/timber/releases/tag/4.5.0
+[4.4.0]: https://github.com/JakeWharton/timber/releases/tag/4.4.0
+[4.3.1]: https://github.com/JakeWharton/timber/releases/tag/4.3.1
+[4.3.0]: https://github.com/JakeWharton/timber/releases/tag/4.3.0
+[4.2.0]: https://github.com/JakeWharton/timber/releases/tag/4.2.0
+[4.1.2]: https://github.com/JakeWharton/timber/releases/tag/4.1.2
+[4.1.1]: https://github.com/JakeWharton/timber/releases/tag/4.1.1
+[4.1.0]: https://github.com/JakeWharton/timber/releases/tag/4.1.0
+[4.0.1]: https://github.com/JakeWharton/timber/releases/tag/4.0.1
+[4.0.0]: https://github.com/JakeWharton/timber/releases/tag/4.0.0
+[3.1.0]: https://github.com/JakeWharton/timber/releases/tag/3.1.0
+[3.0.2]: https://github.com/JakeWharton/timber/releases/tag/3.0.2
+[3.0.1]: https://github.com/JakeWharton/timber/releases/tag/3.0.1
+[3.0.0]: https://github.com/JakeWharton/timber/releases/tag/3.0.0
+[2.7.1]: https://github.com/JakeWharton/timber/releases/tag/2.7.1
+[2.7.0]: https://github.com/JakeWharton/timber/releases/tag/2.7.0
+[2.6.0]: https://github.com/JakeWharton/timber/releases/tag/2.6.0
+[2.5.1]: https://github.com/JakeWharton/timber/releases/tag/2.5.1
+[2.5.0]: https://github.com/JakeWharton/timber/releases/tag/2.5.0
+[2.4.2]: https://github.com/JakeWharton/timber/releases/tag/2.4.2
+[2.4.1]: https://github.com/JakeWharton/timber/releases/tag/2.4.1
+[2.4.0]: https://github.com/JakeWharton/timber/releases/tag/2.4.0
+[2.3.0]: https://github.com/JakeWharton/timber/releases/tag/2.3.0
+[2.2.2]: https://github.com/JakeWharton/timber/releases/tag/2.2.2
+[2.2.1]: https://github.com/JakeWharton/timber/releases/tag/2.2.1
+[2.2.0]: https://github.com/JakeWharton/timber/releases/tag/2.2.0
+[2.1.0]: https://github.com/JakeWharton/timber/releases/tag/2.1.0
+[2.0.0]: https://github.com/JakeWharton/timber/releases/tag/2.0.0
+[1.1.0]: https://github.com/JakeWharton/timber/releases/tag/1.1.0
+[1.0.0]: https://github.com/JakeWharton/timber/releases/tag/1.0.0",False,other
README.md,README.md,1762be3c120b4ae874bdd4d437de7b9f047b03cb,5699f8d9d9b16a4495579540b4bb69fd10d11e83,Prepare version 5.0,"@@ -83,10 +83,38 @@ Download
 --------
 
 ```groovy
-implementation 'com.jakewharton.timber:timber:4.7.1'
+repositories {
+  mavenCental()
+}
+
+dependencies {
+  implementation 'com.jakewharton.timber:timber:5.0.0'
+}
 ```
 
-Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
+Documentation is available at [jakewharton.github.io/timber/docs/5.x/](https://jakewharton.github.io/timber/docs/5.x/).
+
+<details>
+<summary>Snapshots of the development version are available in Sonatype's snapshots repository.</summary>
+<p>
+
+```groovy
+repositories {
+  mavenCental()
+  maven {
+    url 'https://oss.sonatype.org/content/repositories/snapshots/'
+  }
+}
+
+dependencies {
+  implementation 'com.jakewharton.timber:timber:5.1.0-SNAPSHOT'
+}
+```
+
+Snapshot documentation is available at [jakewharton.github.io/timber/docs/latest/](https://jakewharton.github.io/timber/docs/latest/).
+
+</p>
+</details>
 
 
 License","@@ -83,10 +83,38 @@ Download
 --------
 
 ```groovy
-implementation 'com.jakewharton.timber:timber:4.7.1'
+repositories {
+  mavenCental()
+}
+
+dependencies {
+  implementation 'com.jakewharton.timber:timber:5.0.0'
+}
 ```
 
-Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
+Documentation is available at [jakewharton.github.io/timber/docs/5.x/](https://jakewharton.github.io/timber/docs/5.x/).
+
+<details>
+<summary>Snapshots of the development version are available in Sonatype's snapshots repository.</summary>
+<p>
+
+```groovy
+repositories {
+  mavenCental()
+  maven {
+    url 'https://oss.sonatype.org/content/repositories/snapshots/'
+  }
+}
+
+dependencies {
+  implementation 'com.jakewharton.timber:timber:5.1.0-SNAPSHOT'
+}
+```
+
+Snapshot documentation is available at [jakewharton.github.io/timber/docs/latest/](https://jakewharton.github.io/timber/docs/latest/).
+
+</p>
+</details>
 
 
 License",False,readme
RELEASING.md,RELEASING.md,1762be3c120b4ae874bdd4d437de7b9f047b03cb,5699f8d9d9b16a4495579540b4bb69fd10d11e83,Prepare version 5.0,"@@ -1,13 +1,46 @@
-Releasing
-========
-
- 1. Change the version in `gradle.properties` to a non-SNAPSHOT version.
- 2. Update the `CHANGELOG.md` for the impending release.
- 3. Update the `README.md` with the new version.
- 4. `git commit -am ""Prepare for release X.Y.Z.""` (where X.Y.Z is the new version)
- 5. `./gradlew clean uploadArchives`
- 6. `git tag -a X.Y.Z -m ""Version X.Y.Z""` (where X.Y.Z is the new version)
- 7. Update the `gradle.properties` to the next SNAPSHOT version.
- 8. `git commit -am ""Prepare next development version.""`
- 9. `git push && git push --tags`
- 10. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
+# Releasing
+
+1. Update the `VERSION_NAME` in `gradle.properties` to the release version.
+
+2. Update the `CHANGELOG.md`:
+   1. Change the `Unreleased` header to the release version.
+   2. Add a link URL to ensure the header link works.
+   3. Add a new `Unreleased` section to the top.
+
+3. Update the `README.md`:
+   1. Change the ""Download"" section to reflect the new release version.
+   2. Change the snapshot section to reflect the next ""SNAPSHOT"" version, if it is changing.
+   3. Update the Kotlin version compatibility table
+
+4. Commit
+
+   ```
+   $ git commit -am ""Prepare version X.Y.X""
+   ```
+
+5. Manually release and upload artifacts
+   1. Run `./gradlew -p mosaic clean publish`
+   2. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
+   3. If either fails, drop the Sonatype repo, fix the problem, commit, and restart this section.
+
+6. Tag
+
+   ```
+   $ git tag -am ""Version X.Y.Z"" X.Y.Z
+   ```
+
+7. Update the `VERSION_NAME` in `gradle.properties` to the next ""SNAPSHOT"" version.
+
+8. Commit
+
+   ```
+   $ git commit -am ""Prepare next development version""
+   ```
+
+9. Push!
+
+   ```
+   $ git push && git push --tags
+   ```
+
+   This will trigger a GitHub Action workflow which will create a GitHub release.","@@ -1,13 +1,46 @@
-Releasing
-========
-
- 1. Change the version in `gradle.properties` to a non-SNAPSHOT version.
- 2. Update the `CHANGELOG.md` for the impending release.
- 3. Update the `README.md` with the new version.
- 4. `git commit -am ""Prepare for release X.Y.Z.""` (where X.Y.Z is the new version)
- 5. `./gradlew clean uploadArchives`
- 6. `git tag -a X.Y.Z -m ""Version X.Y.Z""` (where X.Y.Z is the new version)
- 7. Update the `gradle.properties` to the next SNAPSHOT version.
- 8. `git commit -am ""Prepare next development version.""`
- 9. `git push && git push --tags`
- 10. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
+# Releasing
+
+1. Update the `VERSION_NAME` in `gradle.properties` to the release version.
+
+2. Update the `CHANGELOG.md`:
+   1. Change the `Unreleased` header to the release version.
+   2. Add a link URL to ensure the header link works.
+   3. Add a new `Unreleased` section to the top.
+
+3. Update the `README.md`:
+   1. Change the ""Download"" section to reflect the new release version.
+   2. Change the snapshot section to reflect the next ""SNAPSHOT"" version, if it is changing.
+   3. Update the Kotlin version compatibility table
+
+4. Commit
+
+   ```
+   $ git commit -am ""Prepare version X.Y.X""
+   ```
+
+5. Manually release and upload artifacts
+   1. Run `./gradlew -p mosaic clean publish`
+   2. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
+   3. If either fails, drop the Sonatype repo, fix the problem, commit, and restart this section.
+
+6. Tag
+
+   ```
+   $ git tag -am ""Version X.Y.Z"" X.Y.Z
+   ```
+
+7. Update the `VERSION_NAME` in `gradle.properties` to the next ""SNAPSHOT"" version.
+
+8. Commit
+
+   ```
+   $ git commit -am ""Prepare next development version""
+   ```
+
+9. Push!
+
+   ```
+   $ git push && git push --tags
+   ```
+
+   This will trigger a GitHub Action workflow which will create a GitHub release.",False,other
gradle.properties,gradle.properties,1762be3c120b4ae874bdd4d437de7b9f047b03cb,5699f8d9d9b16a4495579540b4bb69fd10d11e83,Prepare version 5.0,"@@ -1,7 +1,7 @@
 GROUP=com.jakewharton.timber
 
 # HEY! If you change the major version here be sure to update release.yaml doc target folder!
-VERSION_NAME=4.8.0-SNAPSHOT
+VERSION_NAME=5.0.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,7 +1,7 @@
 GROUP=com.jakewharton.timber
 
 # HEY! If you change the major version here be sure to update release.yaml doc target folder!
-VERSION_NAME=4.8.0-SNAPSHOT
+VERSION_NAME=5.0.0
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
gradle.properties,gradle.properties,adae9b871254846cbb4c69cb823623ad6bafb83b,1762be3c120b4ae874bdd4d437de7b9f047b03cb,Prepare next development version,"@@ -1,7 +1,7 @@
 GROUP=com.jakewharton.timber
 
 # HEY! If you change the major version here be sure to update release.yaml doc target folder!
-VERSION_NAME=5.0.0
+VERSION_NAME=5.1.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,7 +1,7 @@
 GROUP=com.jakewharton.timber
 
 # HEY! If you change the major version here be sure to update release.yaml doc target folder!
-VERSION_NAME=5.0.0
+VERSION_NAME=5.1.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
timber-lint/src/main/java/timber/lint/TimberIssueRegistry.kt,timber-lint/src/main/java/timber/lint/TimberIssueRegistry.kt,880a2e6336f127544a8f3da2379682ea6b89e79f,8537da288374037858b5291f5eb92fcbb03579ac,Run tests on all issues to surface fallthrough errors,"@@ -10,7 +10,7 @@ import com.google.auto.service.AutoService
 @AutoService(value = [IssueRegistry::class])
 class TimberIssueRegistry : IssueRegistry() {
   override val issues: List<Issue>
-    get() = WrongTimberUsageDetector.issues
+    get() = WrongTimberUsageDetector.issues.asList()
 
   override val api: Int
     get() = CURRENT_API","@@ -10,7 +10,7 @@ import com.google.auto.service.AutoService
 @AutoService(value = [IssueRegistry::class])
 class TimberIssueRegistry : IssueRegistry() {
   override val issues: List<Issue>
-    get() = WrongTimberUsageDetector.issues
+    get() = WrongTimberUsageDetector.issues.asList()
 
   override val api: Int
     get() = CURRENT_API",False,source
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.kt,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.kt,880a2e6336f127544a8f3da2379682ea6b89e79f,8537da288374037858b5291f5eb92fcbb03579ac,Run tests on all issues to surface fallthrough errors,"@@ -803,7 +803,7 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
     )
 
-    val issues = listOf(
+    val issues = arrayOf(
       ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,
       ISSUE_TAG_LENGTH, ISSUE_EXCEPTION_LOGGING
     )","@@ -803,7 +803,7 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       implementation = Implementation(WrongTimberUsageDetector::class.java, JAVA_FILE_SCOPE)
     )
 
-    val issues = listOf(
+    val issues = arrayOf(
       ISSUE_LOG, ISSUE_FORMAT, ISSUE_THROWABLE, ISSUE_BINARY, ISSUE_ARG_COUNT, ISSUE_ARG_TYPES,
       ISSUE_TAG_LENGTH, ISSUE_EXCEPTION_LOGGING
     )",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,880a2e6336f127544a8f3da2379682ea6b89e79f,8537da288374037858b5291f5eb92fcbb03579ac,Run tests on all issues to surface fallthrough errors,"@@ -5,6 +5,7 @@ import com.android.tools.lint.checks.infrastructure.TestFiles.kotlin
 import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
 import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
 import org.junit.Test
+import timber.lint.WrongTimberUsageDetector.Companion.issues
 
 class WrongTimberUsageDetectorTest {
   private val TIMBER_STUB = kotlin(""""""
@@ -41,7 +42,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -91,7 +92,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -139,7 +140,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -187,7 +188,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -237,7 +238,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -284,7 +285,7 @@ class WrongTimberUsageDetectorTest {
         // Remove when AGP 7.1.0-alpha07 is out
         // https://groups.google.com/g/lint-dev/c/BigCO8sMhKU
         .allowCompilationErrors()
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -328,7 +329,7 @@ class WrongTimberUsageDetectorTest {
                 |  private fun id(s: String): String { return s }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -354,7 +355,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin())
           // no kotlin equivalent, since nested assignments do not exist
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -385,7 +386,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -408,7 +409,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -429,7 +430,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -456,7 +457,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
@@ -498,7 +499,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -525,7 +526,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -562,7 +563,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -601,7 +602,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:7: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -638,7 +639,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -667,7 +668,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
@@ -699,7 +700,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
@@ -731,7 +732,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
@@ -764,7 +765,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
@@ -796,7 +797,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
@@ -826,7 +827,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
             manifest().minSdk(26)
         )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -854,7 +855,7 @@ class WrongTimberUsageDetectorTest {
                     |}"""""".trimMargin()),
                     manifest().minSdk(26)
                 )
-                .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+                .issues(*issues)
                 .run()
                 .expectClean()
     }
@@ -879,7 +880,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
@@ -911,7 +912,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
@@ -943,7 +944,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
@@ -977,7 +978,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
@@ -1021,7 +1022,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
@@ -1067,7 +1068,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1092,7 +1093,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1123,7 +1124,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1152,7 +1153,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1181,7 +1182,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1208,7 +1209,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
@@ -1252,7 +1253,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
@@ -1296,7 +1297,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1321,7 +1322,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1346,7 +1347,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1364,7 +1365,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
             // no kotlin equivalent, since primitive wrappers do not exist
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1399,7 +1400,7 @@ class WrongTimberUsageDetectorTest {
                 |}
                 """""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }","@@ -5,6 +5,7 @@ import com.android.tools.lint.checks.infrastructure.TestFiles.kotlin
 import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
 import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
 import org.junit.Test
+import timber.lint.WrongTimberUsageDetector.Companion.issues
 
 class WrongTimberUsageDetectorTest {
   private val TIMBER_STUB = kotlin(""""""
@@ -41,7 +42,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -91,7 +92,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -139,7 +140,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -187,7 +188,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_LOG)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:4: Warning: Using 'Log' instead of 'Timber' [LogNotTimber]
@@ -237,7 +238,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -284,7 +285,7 @@ class WrongTimberUsageDetectorTest {
         // Remove when AGP 7.1.0-alpha07 is out
         // https://groups.google.com/g/lint-dev/c/BigCO8sMhKU
         .allowCompilationErrors()
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -328,7 +329,7 @@ class WrongTimberUsageDetectorTest {
                 |  private fun id(s: String): String { return s }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -354,7 +355,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin())
           // no kotlin equivalent, since nested assignments do not exist
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -385,7 +386,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -408,7 +409,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -429,7 +430,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_FORMAT)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -456,7 +457,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_THROWABLE)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
@@ -498,7 +499,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -525,7 +526,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -562,7 +563,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -601,7 +602,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:7: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -638,7 +639,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_BINARY)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -667,7 +668,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
@@ -699,7 +700,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
@@ -731,7 +732,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
@@ -764,7 +765,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
@@ -796,7 +797,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
@@ -826,7 +827,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
             manifest().minSdk(26)
         )
-        .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -854,7 +855,7 @@ class WrongTimberUsageDetectorTest {
                     |}"""""".trimMargin()),
                     manifest().minSdk(26)
                 )
-                .issues(WrongTimberUsageDetector.ISSUE_TAG_LENGTH)
+                .issues(*issues)
                 .run()
                 .expectClean()
     }
@@ -879,7 +880,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s %s requires 2 but format call supplies 1 [TimberArgCount]
@@ -911,7 +912,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_COUNT)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument count, format string %s requires 1 but format call supplies 2 [TimberArgCount]
@@ -943,7 +944,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
@@ -977,7 +978,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
@@ -1021,7 +1022,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
@@ -1067,7 +1068,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1092,7 +1093,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1123,7 +1124,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1152,7 +1153,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1181,7 +1182,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1208,7 +1209,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
@@ -1252,7 +1253,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
@@ -1296,7 +1297,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1321,7 +1322,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1346,7 +1347,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1364,7 +1365,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
             // no kotlin equivalent, since primitive wrappers do not exist
         )
-        .issues(WrongTimberUsageDetector.ISSUE_ARG_TYPES)
+        .issues(*issues)
         .run()
         .expectClean()
   }
@@ -1399,7 +1400,7 @@ class WrongTimberUsageDetectorTest {
                 |}
                 """""".trimMargin())
         )
-        .issues(WrongTimberUsageDetector.ISSUE_EXCEPTION_LOGGING)
+        .issues(*issues)
         .run()
         .expectClean()
   }",False,test
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.kt,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.kt,21628df0942f3957421c20352e39e1c93e6507db,880a2e6336f127544a8f3da2379682ea6b89e79f,"Fix Lint fallthrough errors

Closes #434","@@ -81,13 +81,8 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       checkNestedStringFormat(context, node)
       return
     }
-    // As of API 26, Log tags are no longer limited to 23 chars.
-    if (""tag"" == methodName
-      && evaluator.isMemberInClass(method, ""timber.log.Timber"")
-      && context.project.minSdk < 26
-    ) {
-      checkTagLength(context, node)
-      return
+    if (""tag"" == methodName && evaluator.isMemberInClass(method, ""timber.log.Timber"")) {
+      checkTagLengthIfMinSdkLessThan26(context, node)
     }
     if (evaluator.isMemberInClass(method, ""android.util.Log"")) {
       context.report(
@@ -144,7 +139,7 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
     }
   }
 
-  private fun checkTagLength(context: JavaContext, call: UCallExpression) {
+  private fun checkTagLengthIfMinSdkLessThan26(context: JavaContext, call: UCallExpression) {
     val argument = call.valueArguments[0]
     val tag = evaluateString(context, argument, true)
     if (tag != null && tag.length > 23) {
@@ -156,6 +151,7 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
           message = ""The logging tag can be at most 23 characters, was ${tag.length} ($tag)"",
           fix = quickFixIssueTagLength(argument, tag)
         ),
+        // As of API 26, Log tags are no longer limited to 23 chars.
         constraint = minSdkLessThan(26)
       )
     }
@@ -178,7 +174,7 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       startIndexOfArguments++
     }
 
-    val formatString = evaluateString(context, formatStringArg, true)
+    val formatString = evaluateString(context, formatStringArg, false)
       ?: return // We passed for example a method call
 
     val formatArgumentCount = getFormatArgumentCount(formatString)","@@ -81,13 +81,8 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       checkNestedStringFormat(context, node)
       return
     }
-    // As of API 26, Log tags are no longer limited to 23 chars.
-    if (""tag"" == methodName
-      && evaluator.isMemberInClass(method, ""timber.log.Timber"")
-      && context.project.minSdk < 26
-    ) {
-      checkTagLength(context, node)
-      return
+    if (""tag"" == methodName && evaluator.isMemberInClass(method, ""timber.log.Timber"")) {
+      checkTagLengthIfMinSdkLessThan26(context, node)
     }
     if (evaluator.isMemberInClass(method, ""android.util.Log"")) {
       context.report(
@@ -144,7 +139,7 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
     }
   }
 
-  private fun checkTagLength(context: JavaContext, call: UCallExpression) {
+  private fun checkTagLengthIfMinSdkLessThan26(context: JavaContext, call: UCallExpression) {
     val argument = call.valueArguments[0]
     val tag = evaluateString(context, argument, true)
     if (tag != null && tag.length > 23) {
@@ -156,6 +151,7 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
           message = ""The logging tag can be at most 23 characters, was ${tag.length} ($tag)"",
           fix = quickFixIssueTagLength(argument, tag)
         ),
+        // As of API 26, Log tags are no longer limited to 23 chars.
         constraint = minSdkLessThan(26)
       )
     }
@@ -178,7 +174,7 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       startIndexOfArguments++
     }
 
-    val formatString = evaluateString(context, formatStringArg, true)
+    val formatString = evaluateString(context, formatStringArg, false)
       ?: return // We passed for example a method call
 
     val formatArgumentCount = getFormatArgumentCount(formatString)",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,21628df0942f3957421c20352e39e1c93e6507db,880a2e6336f127544a8f3da2379682ea6b89e79f,"Fix Lint fallthrough errors

Closes #434","@@ -435,6 +435,33 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
+  @Test fun validStringFormatExtracted() {
+    lint()
+      .files(TIMBER_STUB,
+          java(""""""
+              |package foo;
+              |import timber.log.Timber;
+              |public class Example {
+              |  public void log() {
+              |    String message = String.format(""%s"", ""foo"");
+              |    Timber.d(message);
+              |  }
+              |}"""""".trimMargin()),
+          kotlin(""""""
+              |package foo
+              |import timber.log.Timber
+              |class Example {
+              |  fun log() {
+              |    val message = String.format(""%s"", ""foo"")
+              |    Timber.d(message)
+              |  }
+              |}"""""".trimMargin()),
+      )
+      .issues(*issues)
+      .run()
+      .expectClean()
+  }
+
   @Test fun throwableNotAtBeginning() {
     lint()
         .files(TIMBER_STUB,
@@ -774,38 +801,6 @@ class WrongTimberUsageDetectorTest {
             |1 errors, 0 warnings"""""".trimMargin())
   }
 
-  @Test fun tagTooLongLiteralPlusField() {
-    lint()
-        .files(TIMBER_STUB,
-            java(""""""
-                |package foo;
-                |import timber.log.Timber;
-                |public class Example {
-                |  private final String field = ""x"";
-                |  public void log() {
-                |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
-                |  }
-                |}"""""".trimMargin()),
-          kotlin(""""""
-                |package foo
-                |import timber.log.Timber
-                |class Example {
-                |  private val field = ""x""
-                |  fun log() {
-                |     Timber.tag(""abcdefghijklmnopqrstuvw${""$""}field"")
-                |  }
-                |}"""""".trimMargin()),
-                manifest().minSdk(25)
-        )
-        .issues(*issues)
-        .run()
-        .expect(""""""
-            |src/foo/Example.java:6: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
-            |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
-            |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
-  }
-
   @Test fun tagTooLongLiteralOnlyBeforeApi26() {
     lint()
         .files(TIMBER_STUB,
@@ -832,34 +827,6 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
-  @Test fun tagTooLongLiteralPlusFieldOnlyBeforeApi26() {
-        lint()
-            .files(TIMBER_STUB,
-                java(""""""
-                    |package foo;
-                    |import timber.log.Timber;
-                    |public class Example {
-                    |  private final String field = ""x"";
-                    |  public void log() {
-                    |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
-                    |  }
-                    |}"""""".trimMargin()),
-                kotlin(""""""
-                    |package foo
-                    |import timber.log.Timber
-                    |class Example {
-                    |  private val field = ""x""
-                    |  fun log() {
-                    |     Timber.tag(""abcdefghijklmnopqrstuvw${""$""}field"")
-                    |  }
-                    |}"""""".trimMargin()),
-                    manifest().minSdk(26)
-                )
-                .issues(*issues)
-                .run()
-                .expectClean()
-    }
-
   @Test fun tooManyFormatArgsInTag() {
     lint()
         .files(TIMBER_STUB,","@@ -435,6 +435,33 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
+  @Test fun validStringFormatExtracted() {
+    lint()
+      .files(TIMBER_STUB,
+          java(""""""
+              |package foo;
+              |import timber.log.Timber;
+              |public class Example {
+              |  public void log() {
+              |    String message = String.format(""%s"", ""foo"");
+              |    Timber.d(message);
+              |  }
+              |}"""""".trimMargin()),
+          kotlin(""""""
+              |package foo
+              |import timber.log.Timber
+              |class Example {
+              |  fun log() {
+              |    val message = String.format(""%s"", ""foo"")
+              |    Timber.d(message)
+              |  }
+              |}"""""".trimMargin()),
+      )
+      .issues(*issues)
+      .run()
+      .expectClean()
+  }
+
   @Test fun throwableNotAtBeginning() {
     lint()
         .files(TIMBER_STUB,
@@ -774,38 +801,6 @@ class WrongTimberUsageDetectorTest {
             |1 errors, 0 warnings"""""".trimMargin())
   }
 
-  @Test fun tagTooLongLiteralPlusField() {
-    lint()
-        .files(TIMBER_STUB,
-            java(""""""
-                |package foo;
-                |import timber.log.Timber;
-                |public class Example {
-                |  private final String field = ""x"";
-                |  public void log() {
-                |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
-                |  }
-                |}"""""".trimMargin()),
-          kotlin(""""""
-                |package foo
-                |import timber.log.Timber
-                |class Example {
-                |  private val field = ""x""
-                |  fun log() {
-                |     Timber.tag(""abcdefghijklmnopqrstuvw${""$""}field"")
-                |  }
-                |}"""""".trimMargin()),
-                manifest().minSdk(25)
-        )
-        .issues(*issues)
-        .run()
-        .expect(""""""
-            |src/foo/Example.java:6: Error: The logging tag can be at most 23 characters, was 24 (abcdefghijklmnopqrstuvwx) [TimberTagLength]
-            |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
-            |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-            |1 errors, 0 warnings"""""".trimMargin())
-  }
-
   @Test fun tagTooLongLiteralOnlyBeforeApi26() {
     lint()
         .files(TIMBER_STUB,
@@ -832,34 +827,6 @@ class WrongTimberUsageDetectorTest {
         .expectClean()
   }
 
-  @Test fun tagTooLongLiteralPlusFieldOnlyBeforeApi26() {
-        lint()
-            .files(TIMBER_STUB,
-                java(""""""
-                    |package foo;
-                    |import timber.log.Timber;
-                    |public class Example {
-                    |  private final String field = ""x"";
-                    |  public void log() {
-                    |     Timber.tag(""abcdefghijklmnopqrstuvw"" + field);
-                    |  }
-                    |}"""""".trimMargin()),
-                kotlin(""""""
-                    |package foo
-                    |import timber.log.Timber
-                    |class Example {
-                    |  private val field = ""x""
-                    |  fun log() {
-                    |     Timber.tag(""abcdefghijklmnopqrstuvw${""$""}field"")
-                    |  }
-                    |}"""""".trimMargin()),
-                    manifest().minSdk(26)
-                )
-                .issues(*issues)
-                .run()
-                .expectClean()
-    }
-
   @Test fun tooManyFormatArgsInTag() {
     lint()
         .files(TIMBER_STUB,",False,test
timber/src/test/java/timber/log/TimberTest.kt,timber/src/test/java/timber/log/TimberTest.kt,d89a83917644d254319885375d8a10ea995c8df6,adae9b871254846cbb4c69cb823623ad6bafb83b,Add more test for anonymous class stripping from tag,"@@ -187,6 +187,85 @@ class TimberTest {
         .hasNoMoreMessages()
   }
 
+  @Suppress(""ObjectLiteralToLambda"") // Lambdas != anonymous classes.
+  @Test fun debugTreeTagGenerationStripsAnonymousClassMarkerWithInnerSAMLambda() {
+    Timber.plant(Timber.DebugTree())
+    object : Runnable {
+      override fun run() {
+        Timber.d(""Hello, world!"")
+
+        Runnable { Timber.d(""Hello, world!"") }.run()
+      }
+    }.run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Suppress(""ObjectLiteralToLambda"") // Lambdas != anonymous classes.
+  @Test fun debugTreeTagGenerationStripsAnonymousClassMarkerWithOuterSAMLambda() {
+    Timber.plant(Timber.DebugTree())
+
+    Runnable {
+      Timber.d(""Hello, world!"")
+
+      object : Runnable {
+        override fun run() {
+          Timber.d(""Hello, world!"")
+        }
+      }.run()
+    }.run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  // NOTE: this will fail on some future version of Kotlin when lambdas are compiled using invokedynamic
+  // Fix will be to expect the tag to be ""TimberTest"" as opposed to ""TimberTest\$debugTreeTag""
+  @Test
+  fun debugTreeTagGenerationStripsAnonymousLambdaClassMarker() {
+    Timber.plant(Timber.DebugTree())
+
+    val outer = {
+      Timber.d(""Hello, world!"")
+
+      val inner = {
+        Timber.d(""Hello, world!"")
+      }
+
+      inner()
+    }
+
+    outer()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test
+  fun debugTreeTagGenerationForSAMLambdasUsesClassName() {
+    Timber.plant(Timber.DebugTree())
+
+    Runnable {
+      Timber.d(""Hello, world!"")
+
+      Runnable {
+        Timber.d(""Hello, world!"")
+      }.run()
+    }.run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
   private class ClassNameThatIsReallyReallyReallyLong {
     init {
       Timber.i(""Hello, world!"")","@@ -187,6 +187,85 @@ class TimberTest {
         .hasNoMoreMessages()
   }
 
+  @Suppress(""ObjectLiteralToLambda"") // Lambdas != anonymous classes.
+  @Test fun debugTreeTagGenerationStripsAnonymousClassMarkerWithInnerSAMLambda() {
+    Timber.plant(Timber.DebugTree())
+    object : Runnable {
+      override fun run() {
+        Timber.d(""Hello, world!"")
+
+        Runnable { Timber.d(""Hello, world!"") }.run()
+      }
+    }.run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Suppress(""ObjectLiteralToLambda"") // Lambdas != anonymous classes.
+  @Test fun debugTreeTagGenerationStripsAnonymousClassMarkerWithOuterSAMLambda() {
+    Timber.plant(Timber.DebugTree())
+
+    Runnable {
+      Timber.d(""Hello, world!"")
+
+      object : Runnable {
+        override fun run() {
+          Timber.d(""Hello, world!"")
+        }
+      }.run()
+    }.run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  // NOTE: this will fail on some future version of Kotlin when lambdas are compiled using invokedynamic
+  // Fix will be to expect the tag to be ""TimberTest"" as opposed to ""TimberTest\$debugTreeTag""
+  @Test
+  fun debugTreeTagGenerationStripsAnonymousLambdaClassMarker() {
+    Timber.plant(Timber.DebugTree())
+
+    val outer = {
+      Timber.d(""Hello, world!"")
+
+      val inner = {
+        Timber.d(""Hello, world!"")
+      }
+
+      inner()
+    }
+
+    outer()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
+  @Test
+  fun debugTreeTagGenerationForSAMLambdasUsesClassName() {
+    Timber.plant(Timber.DebugTree())
+
+    Runnable {
+      Timber.d(""Hello, world!"")
+
+      Runnable {
+        Timber.d(""Hello, world!"")
+      }.run()
+    }.run()
+
+    assertLog()
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasNoMoreMessages()
+  }
+
   private class ClassNameThatIsReallyReallyReallyLong {
     init {
       Timber.i(""Hello, world!"")",False,test
CHANGELOG.md,CHANGELOG.md,f38e2dc893773d318efb1edf3dd1cda7f13c32dc,694f6bc882570eb693c6a188f01aaa3fc2f8d1b2,Prepare version 5.0.1,"@@ -3,6 +3,13 @@
 ## [Unreleased]
 
 
+## [5.0.1] - 2021-08-13
+
+### Fixed
+
+- Fix TimberArgCount lint check false positive on some calls to `String.format`.
+
+
 ## [5.0.0] - 2021-08-10
 
 The library has been rewritten in Kotlin, but it remains binary-compatible with 4.x.
@@ -241,7 +248,8 @@ Initial cut. (Get it?)
 
 
 
-[Unreleased]: https://github.com/JakeWharton/timber/compare/5.0.0...HEAD
+[Unreleased]: https://github.com/JakeWharton/timber/compare/5.0.1...HEAD
+[5.0.1]: https://github.com/JakeWharton/timber/releases/tag/5.0.1
 [5.0.0]: https://github.com/JakeWharton/timber/releases/tag/5.0.0
 [4.7.1]: https://github.com/JakeWharton/timber/releases/tag/4.7.1
 [4.7.0]: https://github.com/JakeWharton/timber/releases/tag/4.7.0","@@ -3,6 +3,13 @@
 ## [Unreleased]
 
 
+## [5.0.1] - 2021-08-13
+
+### Fixed
+
+- Fix TimberArgCount lint check false positive on some calls to `String.format`.
+
+
 ## [5.0.0] - 2021-08-10
 
 The library has been rewritten in Kotlin, but it remains binary-compatible with 4.x.
@@ -241,7 +248,8 @@ Initial cut. (Get it?)
 
 
 
-[Unreleased]: https://github.com/JakeWharton/timber/compare/5.0.0...HEAD
+[Unreleased]: https://github.com/JakeWharton/timber/compare/5.0.1...HEAD
+[5.0.1]: https://github.com/JakeWharton/timber/releases/tag/5.0.1
 [5.0.0]: https://github.com/JakeWharton/timber/releases/tag/5.0.0
 [4.7.1]: https://github.com/JakeWharton/timber/releases/tag/4.7.1
 [4.7.0]: https://github.com/JakeWharton/timber/releases/tag/4.7.0",False,other
README.md,README.md,f38e2dc893773d318efb1edf3dd1cda7f13c32dc,694f6bc882570eb693c6a188f01aaa3fc2f8d1b2,Prepare version 5.0.1,"@@ -88,7 +88,7 @@ repositories {
 }
 
 dependencies {
-  implementation 'com.jakewharton.timber:timber:5.0.0'
+  implementation 'com.jakewharton.timber:timber:5.0.1'
 }
 ```","@@ -88,7 +88,7 @@ repositories {
 }
 
 dependencies {
-  implementation 'com.jakewharton.timber:timber:5.0.0'
+  implementation 'com.jakewharton.timber:timber:5.0.1'
 }
 ```",False,readme
gradle.properties,gradle.properties,f38e2dc893773d318efb1edf3dd1cda7f13c32dc,694f6bc882570eb693c6a188f01aaa3fc2f8d1b2,Prepare version 5.0.1,"@@ -1,7 +1,7 @@
 GROUP=com.jakewharton.timber
 
 # HEY! If you change the major version here be sure to update release.yaml doc target folder!
-VERSION_NAME=5.1.0-SNAPSHOT
+VERSION_NAME=5.0.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,7 +1,7 @@
 GROUP=com.jakewharton.timber
 
 # HEY! If you change the major version here be sure to update release.yaml doc target folder!
-VERSION_NAME=5.1.0-SNAPSHOT
+VERSION_NAME=5.0.1
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
RELEASING.md,RELEASING.md,70aaa745e5cc9b8ff6a8363ab895258762b53682,f38e2dc893773d318efb1edf3dd1cda7f13c32dc,Correct release steps for this repository,"@@ -19,7 +19,7 @@
    ```
 
 5. Manually release and upload artifacts
-   1. Run `./gradlew -p mosaic clean publish`
+   1. Run `./gradlew clean publish`
    2. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
    3. If either fails, drop the Sonatype repo, fix the problem, commit, and restart this section.","@@ -19,7 +19,7 @@
    ```
 
 5. Manually release and upload artifacts
-   1. Run `./gradlew -p mosaic clean publish`
+   1. Run `./gradlew clean publish`
    2. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
    3. If either fails, drop the Sonatype repo, fix the problem, commit, and restart this section.",False,other
gradle.properties,gradle.properties,5f4bcd9922cbf94cf7486852ccfc8fd64d506988,70aaa745e5cc9b8ff6a8363ab895258762b53682,Prepare next development version,"@@ -1,7 +1,7 @@
 GROUP=com.jakewharton.timber
 
 # HEY! If you change the major version here be sure to update release.yaml doc target folder!
-VERSION_NAME=5.0.1
+VERSION_NAME=5.1.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.","@@ -1,7 +1,7 @@
 GROUP=com.jakewharton.timber
 
 # HEY! If you change the major version here be sure to update release.yaml doc target folder!
-VERSION_NAME=5.0.1
+VERSION_NAME=5.1.0-SNAPSHOT
 
 POM_DESCRIPTION=No-nonsense injectable logging.",False,other
README.md,README.md,0c2d7fb80a33f87235eddc15f90781150de2cedd,5f4bcd9922cbf94cf7486852ccfc8fd64d506988,Fix typo on README,"@@ -100,7 +100,7 @@ Documentation is available at [jakewharton.github.io/timber/docs/5.x/](https://j
 
 ```groovy
 repositories {
-  mavenCental()
+  mavenCentral()
   maven {
     url 'https://oss.sonatype.org/content/repositories/snapshots/'
   }","@@ -100,7 +100,7 @@ Documentation is available at [jakewharton.github.io/timber/docs/5.x/](https://j
 
 ```groovy
 repositories {
-  mavenCental()
+  mavenCentral()
   maven {
     url 'https://oss.sonatype.org/content/repositories/snapshots/'
   }",False,readme
README.md,README.md,d4fdbb90ce7d13a371f1fc5fae4f0dad095ee9a4,99365bd46190d595d601cd454d87aa6ccef9dbfe,"Update README.md

This is a typo, change it to mavenCentral(). Thanks","@@ -84,7 +84,7 @@ Download
 
 ```groovy
 repositories {
-  mavenCental()
+  mavenCentral()
 }
 
 dependencies {","@@ -84,7 +84,7 @@ Download
 
 ```groovy
 repositories {
-  mavenCental()
+  mavenCentral()
 }
 
 dependencies {",False,readme
.github/workflows/build.yaml,.github/workflows/build.yaml,abf851a49c67f4145b0436fbc7bf8f926f942cd3,bb2bedaec2ecc48fa858e56c075db47e209de82b,"Bump actions/checkout from 2.3.4 to 2.3.5

Bumps [actions/checkout](https://github.com/actions/checkout) from 2.3.4 to 2.3.5.
- [Release notes](https://github.com/actions/checkout/releases)
- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
- [Commits](https://github.com/actions/checkout/compare/v2.3.4...v2.3.5)

---
updated-dependencies:
- dependency-name: actions/checkout
  dependency-type: direct:production
  update-type: version-update:semver-patch
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -13,7 +13,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.3.4
+      - uses: actions/checkout@v2.3.5
       - uses: gradle/wrapper-validation-action@v1
 
       - uses: actions/setup-java@v2","@@ -13,7 +13,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.3.4
+      - uses: actions/checkout@v2.3.5
       - uses: gradle/wrapper-validation-action@v1
 
       - uses: actions/setup-java@v2",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,abf851a49c67f4145b0436fbc7bf8f926f942cd3,bb2bedaec2ecc48fa858e56c075db47e209de82b,"Bump actions/checkout from 2.3.4 to 2.3.5

Bumps [actions/checkout](https://github.com/actions/checkout) from 2.3.4 to 2.3.5.
- [Release notes](https://github.com/actions/checkout/releases)
- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
- [Commits](https://github.com/actions/checkout/compare/v2.3.4...v2.3.5)

---
updated-dependencies:
- dependency-name: actions/checkout
  dependency-type: direct:production
  update-type: version-update:semver-patch
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -10,7 +10,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.3.4
+      - uses: actions/checkout@v2.3.5
 
       - uses: actions/setup-java@v2
         with:","@@ -10,7 +10,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.3.4
+      - uses: actions/checkout@v2.3.5
 
       - uses: actions/setup-java@v2
         with:",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,4616e44b6bb595e9038a53d19ee93b70cf52fa7a,f4e81ce3ae88735d4a82afd96066da010f437eeb,"Bump actions/checkout from 2.3.5 to 2.4.0

Bumps [actions/checkout](https://github.com/actions/checkout) from 2.3.5 to 2.4.0.
- [Release notes](https://github.com/actions/checkout/releases)
- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
- [Commits](https://github.com/actions/checkout/compare/v2.3.5...v2.4.0)

---
updated-dependencies:
- dependency-name: actions/checkout
  dependency-type: direct:production
  update-type: version-update:semver-minor
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -13,7 +13,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.3.5
+      - uses: actions/checkout@v2.4.0
       - uses: gradle/wrapper-validation-action@v1
 
       - uses: actions/setup-java@v2","@@ -13,7 +13,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.3.5
+      - uses: actions/checkout@v2.4.0
       - uses: gradle/wrapper-validation-action@v1
 
       - uses: actions/setup-java@v2",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,4616e44b6bb595e9038a53d19ee93b70cf52fa7a,f4e81ce3ae88735d4a82afd96066da010f437eeb,"Bump actions/checkout from 2.3.5 to 2.4.0

Bumps [actions/checkout](https://github.com/actions/checkout) from 2.3.5 to 2.4.0.
- [Release notes](https://github.com/actions/checkout/releases)
- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
- [Commits](https://github.com/actions/checkout/compare/v2.3.5...v2.4.0)

---
updated-dependencies:
- dependency-name: actions/checkout
  dependency-type: direct:production
  update-type: version-update:semver-minor
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -10,7 +10,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.3.5
+      - uses: actions/checkout@v2.4.0
 
       - uses: actions/setup-java@v2
         with:","@@ -10,7 +10,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.3.5
+      - uses: actions/checkout@v2.4.0
 
       - uses: actions/setup-java@v2
         with:",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,5ebf90a6bb34db0a7cd1edf39bd53e085f736a21,064d75f7283b4e06c7e47d18095a9317db8289f0,Update gradle to 7.2,"@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.1.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.2-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.1.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.2-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,3fe83f58030c84a6278fa67f41327d706b8aa465,6639dd831fc39f0ab4f9499506ec34aed9ce99c1,Update gradle-wrapper.properties,"@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.2-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.3-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists","@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.2-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.3-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,2e8a1daa50466d953a9f908c7759a871551f9f13,dc45d69b081a03e3fb83e81a7aee0f430f46b4f1,"Bump actions/checkout from 2.4.0 to 3

Bumps [actions/checkout](https://github.com/actions/checkout) from 2.4.0 to 3.
- [Release notes](https://github.com/actions/checkout/releases)
- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
- [Commits](https://github.com/actions/checkout/compare/v2.4.0...v3)

---
updated-dependencies:
- dependency-name: actions/checkout
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -13,7 +13,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.4.0
+      - uses: actions/checkout@v3
       - uses: gradle/wrapper-validation-action@v1
 
       - uses: actions/setup-java@v2","@@ -13,7 +13,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.4.0
+      - uses: actions/checkout@v3
       - uses: gradle/wrapper-validation-action@v1
 
       - uses: actions/setup-java@v2",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,2e8a1daa50466d953a9f908c7759a871551f9f13,dc45d69b081a03e3fb83e81a7aee0f430f46b4f1,"Bump actions/checkout from 2.4.0 to 3

Bumps [actions/checkout](https://github.com/actions/checkout) from 2.4.0 to 3.
- [Release notes](https://github.com/actions/checkout/releases)
- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
- [Commits](https://github.com/actions/checkout/compare/v2.4.0...v3)

---
updated-dependencies:
- dependency-name: actions/checkout
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -10,7 +10,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.4.0
+      - uses: actions/checkout@v3
 
       - uses: actions/setup-java@v2
         with:","@@ -10,7 +10,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v2.4.0
+      - uses: actions/checkout@v3
 
       - uses: actions/setup-java@v2
         with:",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,a8692bdf1ce0b4840071fcbe025e7c7dbb19f3cf,ba660c9957ece36be8ae169da1850397410179ad,"Bump actions/setup-java from 2 to 3

Bumps [actions/setup-java](https://github.com/actions/setup-java) from 2 to 3.
- [Release notes](https://github.com/actions/setup-java/releases)
- [Commits](https://github.com/actions/setup-java/compare/v2...v3)

---
updated-dependencies:
- dependency-name: actions/setup-java
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -16,7 +16,7 @@ jobs:
       - uses: actions/checkout@v3
       - uses: gradle/wrapper-validation-action@v1
 
-      - uses: actions/setup-java@v2
+      - uses: actions/setup-java@v3
         with:
           distribution: 'zulu'
           java-version: 11","@@ -16,7 +16,7 @@ jobs:
       - uses: actions/checkout@v3
       - uses: gradle/wrapper-validation-action@v1
 
-      - uses: actions/setup-java@v2
+      - uses: actions/setup-java@v3
         with:
           distribution: 'zulu'
           java-version: 11",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,a8692bdf1ce0b4840071fcbe025e7c7dbb19f3cf,ba660c9957ece36be8ae169da1850397410179ad,"Bump actions/setup-java from 2 to 3

Bumps [actions/setup-java](https://github.com/actions/setup-java) from 2 to 3.
- [Release notes](https://github.com/actions/setup-java/releases)
- [Commits](https://github.com/actions/setup-java/compare/v2...v3)

---
updated-dependencies:
- dependency-name: actions/setup-java
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -12,7 +12,7 @@ jobs:
     steps:
       - uses: actions/checkout@v3
 
-      - uses: actions/setup-java@v2
+      - uses: actions/setup-java@v3
         with:
           distribution: 'zulu'
           java-version: 11","@@ -12,7 +12,7 @@ jobs:
     steps:
       - uses: actions/checkout@v3
 
-      - uses: actions/setup-java@v2
+      - uses: actions/setup-java@v3
         with:
           distribution: 'zulu'
           java-version: 11",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,5de54880fd345daffd7f3762270ff205544f0b7c,9954d94abbaea9d003243be5b69f8ae0ffc0c99d,"Bump actions/checkout from 3 to 4

Bumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4.
- [Release notes](https://github.com/actions/checkout/releases)
- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
- [Commits](https://github.com/actions/checkout/compare/v3...v4)

---
updated-dependencies:
- dependency-name: actions/checkout
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -13,7 +13,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v3
+      - uses: actions/checkout@v4
       - uses: gradle/wrapper-validation-action@v1
 
       - uses: actions/setup-java@v3","@@ -13,7 +13,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v3
+      - uses: actions/checkout@v4
       - uses: gradle/wrapper-validation-action@v1
 
       - uses: actions/setup-java@v3",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,5de54880fd345daffd7f3762270ff205544f0b7c,9954d94abbaea9d003243be5b69f8ae0ffc0c99d,"Bump actions/checkout from 3 to 4

Bumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4.
- [Release notes](https://github.com/actions/checkout/releases)
- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
- [Commits](https://github.com/actions/checkout/compare/v3...v4)

---
updated-dependencies:
- dependency-name: actions/checkout
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -10,7 +10,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v3
+      - uses: actions/checkout@v4
 
       - uses: actions/setup-java@v3
         with:","@@ -10,7 +10,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v3
+      - uses: actions/checkout@v4
 
       - uses: actions/setup-java@v3
         with:",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,5ad7930b9f9f82354e2833c7d3d499c9ed2d1928,9ef1ddde8b4319d23f2ce06d50aae08adf4db77c,"Bump actions/setup-java from 3 to 4

Bumps [actions/setup-java](https://github.com/actions/setup-java) from 3 to 4.
- [Release notes](https://github.com/actions/setup-java/releases)
- [Commits](https://github.com/actions/setup-java/compare/v3...v4)

---
updated-dependencies:
- dependency-name: actions/setup-java
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -16,7 +16,7 @@ jobs:
       - uses: actions/checkout@v4
       - uses: gradle/wrapper-validation-action@v1
 
-      - uses: actions/setup-java@v3
+      - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
           java-version: 11","@@ -16,7 +16,7 @@ jobs:
       - uses: actions/checkout@v4
       - uses: gradle/wrapper-validation-action@v1
 
-      - uses: actions/setup-java@v3
+      - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
           java-version: 11",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,5ad7930b9f9f82354e2833c7d3d499c9ed2d1928,9ef1ddde8b4319d23f2ce06d50aae08adf4db77c,"Bump actions/setup-java from 3 to 4

Bumps [actions/setup-java](https://github.com/actions/setup-java) from 3 to 4.
- [Release notes](https://github.com/actions/setup-java/releases)
- [Commits](https://github.com/actions/setup-java/compare/v3...v4)

---
updated-dependencies:
- dependency-name: actions/setup-java
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -12,7 +12,7 @@ jobs:
     steps:
       - uses: actions/checkout@v4
 
-      - uses: actions/setup-java@v3
+      - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
           java-version: 11","@@ -12,7 +12,7 @@ jobs:
     steps:
       - uses: actions/checkout@v4
 
-      - uses: actions/setup-java@v3
+      - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
           java-version: 11",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,8b3b7f8c6ae82c5d9ccbcb099d450995740023d6,2b956bc09ecc3d4e9d707104568f61b741fa7182,"Bump ffurrer2/extract-release-notes from 1 to 2

Bumps [ffurrer2/extract-release-notes](https://github.com/ffurrer2/extract-release-notes) from 1 to 2.
- [Release notes](https://github.com/ffurrer2/extract-release-notes/releases)
- [Changelog](https://github.com/ffurrer2/extract-release-notes/blob/main/CHANGELOG.md)
- [Commits](https://github.com/ffurrer2/extract-release-notes/compare/v1...v2)

---
updated-dependencies:
- dependency-name: ffurrer2/extract-release-notes
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -26,7 +26,7 @@ jobs:
 
       - name: Extract release notes
         id: release_notes
-        uses: ffurrer2/extract-release-notes@v1
+        uses: ffurrer2/extract-release-notes@v2
 
       - name: Create release
         uses: softprops/action-gh-release@v1","@@ -26,7 +26,7 @@ jobs:
 
       - name: Extract release notes
         id: release_notes
-        uses: ffurrer2/extract-release-notes@v1
+        uses: ffurrer2/extract-release-notes@v2
 
       - name: Create release
         uses: softprops/action-gh-release@v1",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,5bac2c49b031443fd25c4393791c354531dd4d34,9ad481422f9830eee47e64025e881665288a6f4f,"Bump gradle/wrapper-validation-action from 1 to 2

Bumps [gradle/wrapper-validation-action](https://github.com/gradle/wrapper-validation-action) from 1 to 2.
- [Release notes](https://github.com/gradle/wrapper-validation-action/releases)
- [Commits](https://github.com/gradle/wrapper-validation-action/compare/v1...v2)

---
updated-dependencies:
- dependency-name: gradle/wrapper-validation-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -14,7 +14,7 @@ jobs:
 
     steps:
       - uses: actions/checkout@v4
-      - uses: gradle/wrapper-validation-action@v1
+      - uses: gradle/wrapper-validation-action@v2
 
       - uses: actions/setup-java@v4
         with:","@@ -14,7 +14,7 @@ jobs:
 
     steps:
       - uses: actions/checkout@v4
-      - uses: gradle/wrapper-validation-action@v1
+      - uses: gradle/wrapper-validation-action@v2
 
       - uses: actions/setup-java@v4
         with:",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,dc4e068fa2bdaa0ce34a8b4d722a6d725070b9cd,dfc4e70bd1a4b4e1e136647b96fc9c9dbcb41f65,"Bump softprops/action-gh-release from 1 to 2

Bumps [softprops/action-gh-release](https://github.com/softprops/action-gh-release) from 1 to 2.
- [Release notes](https://github.com/softprops/action-gh-release/releases)
- [Changelog](https://github.com/softprops/action-gh-release/blob/master/CHANGELOG.md)
- [Commits](https://github.com/softprops/action-gh-release/compare/v1...v2)

---
updated-dependencies:
- dependency-name: softprops/action-gh-release
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>","@@ -29,7 +29,7 @@ jobs:
         uses: ffurrer2/extract-release-notes@v2
 
       - name: Create release
-        uses: softprops/action-gh-release@v1
+        uses: softprops/action-gh-release@v2
         with:
           body: ${{ steps.release_notes.outputs.release_notes }}
         env:","@@ -29,7 +29,7 @@ jobs:
         uses: ffurrer2/extract-release-notes@v2
 
       - name: Create release
-        uses: softprops/action-gh-release@v1
+        uses: softprops/action-gh-release@v2
         with:
           body: ${{ steps.release_notes.outputs.release_notes }}
         env:",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,e6db346a2934a55bb940d0a5d293a931f54de066,d226eb0391d6d32547dad7b2c77da84010d61aac,"Bump gradle/wrapper-validation-action from 2 to 3 (#499)

* Bump gradle/wrapper-validation-action from 2 to 3

Bumps [gradle/wrapper-validation-action](https://github.com/gradle/wrapper-validation-action) from 2 to 3.
- [Release notes](https://github.com/gradle/wrapper-validation-action/releases)
- [Commits](https://github.com/gradle/wrapper-validation-action/compare/v2...v3)

---
updated-dependencies:
- dependency-name: gradle/wrapper-validation-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>

* Update build.yaml

---------

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -14,7 +14,7 @@ jobs:
 
     steps:
       - uses: actions/checkout@v4
-      - uses: gradle/wrapper-validation-action@v2
+      - uses: gradle/actions/wrapper-validation@v3
 
       - uses: actions/setup-java@v4
         with:","@@ -14,7 +14,7 @@ jobs:
 
     steps:
       - uses: actions/checkout@v4
-      - uses: gradle/wrapper-validation-action@v2
+      - uses: gradle/actions/wrapper-validation@v3
 
       - uses: actions/setup-java@v4
         with:",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,beb8051248164a74b264d30427f633aaf4bda841,e6db346a2934a55bb940d0a5d293a931f54de066,"Bump gradle/actions from 3 to 4 (#507)

Bumps [gradle/actions](https://github.com/gradle/actions) from 3 to 4.
- [Release notes](https://github.com/gradle/actions/releases)
- [Commits](https://github.com/gradle/actions/compare/v3...v4)

---
updated-dependencies:
- dependency-name: gradle/actions
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>","@@ -14,7 +14,7 @@ jobs:
 
     steps:
       - uses: actions/checkout@v4
-      - uses: gradle/actions/wrapper-validation@v3
+      - uses: gradle/actions/wrapper-validation@v4
 
       - uses: actions/setup-java@v4
         with:","@@ -14,7 +14,7 @@ jobs:
 
     steps:
       - uses: actions/checkout@v4
-      - uses: gradle/actions/wrapper-validation@v3
+      - uses: gradle/actions/wrapper-validation@v4
 
       - uses: actions/setup-java@v4
         with:",False,other
timber/japicmp/build.gradle,timber/japicmp/build.gradle,e3474f11db5832305bd30d54c172dea9cd7e38b9,beb8051248164a74b264d30427f633aaf4bda841,Switched from 'force' to 'strictly' to facilitate upgrading gradle wrapper version (#516),"@@ -4,9 +4,11 @@ configurations {
 }
 
 dependencies {
-  baseline('com.jakewharton.timber:timber:4.7.1') {
+  baseline('com.jakewharton.timber:timber') {
+    version {
+      strictly ""4.7.1""
+    }
     transitive = false
-    force = true
   }
   latest project(path: ':timber', configuration: 'releaseRuntimeElements')
 }","@@ -4,9 +4,11 @@ configurations {
 }
 
 dependencies {
-  baseline('com.jakewharton.timber:timber:4.7.1') {
+  baseline('com.jakewharton.timber:timber') {
+    version {
+      strictly ""4.7.1""
+    }
     transitive = false
-    force = true
   }
   latest project(path: ':timber', configuration: 'releaseRuntimeElements')
 }",False,other
,renovate.json,548616a4906ba7bda9995de791e9927ff3d8a8ed,e3474f11db5832305bd30d54c172dea9cd7e38b9,"Add renovate.json (#517)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -0,0 +1,6 @@
+{
+  ""$schema"": ""https://docs.renovatebot.com/renovate-schema.json"",
+  ""extends"": [
+    ""config:recommended""
+  ]
+}","@@ -0,0 +1,6 @@
+{
+  ""$schema"": ""https://docs.renovatebot.com/renovate-schema.json"",
+  ""extends"": [
+    ""config:recommended""
+  ]
+}",False,other
build.gradle,build.gradle,402e49689089d1df7b4d730350ba4d1941a9a58b,548616a4906ba7bda9995de791e9927ff3d8a8ed,"Update dependency com.google.truth:truth to v1.4.4 (#522)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -32,7 +32,7 @@ buildscript {
       annotations: 'org.jetbrains:annotations:20.1.0',
 
       junit: 'junit:junit:4.13.2',
-      truth: 'com.google.truth:truth:1.1.2',
+      truth: 'com.google.truth:truth:1.4.4',
       robolectric: 'org.robolectric:robolectric:4.6.1',
   ]","@@ -32,7 +32,7 @@ buildscript {
       annotations: 'org.jetbrains:annotations:20.1.0',
 
       junit: 'junit:junit:4.13.2',
-      truth: 'com.google.truth:truth:1.1.2',
+      truth: 'com.google.truth:truth:1.4.4',
       robolectric: 'org.robolectric:robolectric:4.6.1',
   ]",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,304f15c212dbe0cd74b09ce35a46aef6a95b1e91,402e49689089d1df7b4d730350ba4d1941a9a58b,"Update dependency gradle to v7.6.5 (#521)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,5 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.6.5-bin.zip
+networkTimeout=10000
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists","@@ -1,5 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.6.5-bin.zip
+networkTimeout=10000
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists",False,other
gradlew,gradlew,304f15c212dbe0cd74b09ce35a46aef6a95b1e91,402e49689089d1df7b4d730350ba4d1941a9a58b,"Update dependency gradle to v7.6.5 (#521)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,7 +1,7 @@
-#!/usr/bin/env sh
+#!/bin/sh
 
 #
-# Copyright 2015 the original author or authors.
+# Copyright © 2015-2021 the original authors.
 #
 # Licensed under the Apache License, Version 2.0 (the ""License"");
 # you may not use this file except in compliance with the License.
@@ -17,67 +17,101 @@
 #
 
 ##############################################################################
-##
-##  Gradle start up script for UN*X
-##
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The ""traditional"" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in ""$@"", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
 ##############################################################################
 
 # Attempt to set APP_HOME
+
 # Resolve links: $0 may be a link
-PRG=""$0""
-# Need this for relative symlinks.
-while [ -h ""$PRG"" ] ; do
-    ls=`ls -ld ""$PRG""`
-    link=`expr ""$ls"" : '.*-> \(.*\)$'`
-    if expr ""$link"" : '/.*' > /dev/null; then
-        PRG=""$link""
-    else
-        PRG=`dirname ""$PRG""`""/$link""
-    fi
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%""${app_path##*/}""}  # leaves a trailing /; empty if no leading path
+    [ -h ""$app_path"" ]
+do
+    ls=$( ls -ld ""$app_path"" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
 done
-SAVED=""`pwd`""
-cd ""`dirname \""$PRG\""`/"" >/dev/null
-APP_HOME=""`pwd -P`""
-cd ""$SAVED"" >/dev/null
 
-APP_NAME=""Gradle""
-APP_BASE_NAME=`basename ""$0""`
+# This is normally unused
+# shellcheck disable=SC2034
+APP_BASE_NAME=${0##*/}
+APP_HOME=$( cd ""${APP_HOME:-./}"" && pwd -P ) || exit
 
 # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
 DEFAULT_JVM_OPTS='""-Xmx64m"" ""-Xms64m""'
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD=""maximum""
+MAX_FD=maximum
 
 warn () {
     echo ""$*""
-}
+} >&2
 
 die () {
     echo
     echo ""$*""
     echo
     exit 1
-}
+} >&2
 
 # OS specific support (must be 'true' or 'false').
 cygwin=false
 msys=false
 darwin=false
 nonstop=false
-case ""`uname`"" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MSYS* | MINGW* )
-    msys=true
-    ;;
-  NONSTOP* )
-    nonstop=true
-    ;;
+case ""$( uname )"" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
 esac
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
@@ -87,9 +121,9 @@ CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 if [ -n ""$JAVA_HOME"" ] ; then
     if [ -x ""$JAVA_HOME/jre/sh/java"" ] ; then
         # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD=""$JAVA_HOME/jre/sh/java""
+        JAVACMD=$JAVA_HOME/jre/sh/java
     else
-        JAVACMD=""$JAVA_HOME/bin/java""
+        JAVACMD=$JAVA_HOME/bin/java
     fi
     if [ ! -x ""$JAVACMD"" ] ; then
         die ""ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
@@ -98,7 +132,7 @@ Please set the JAVA_HOME variable in your environment to match the
 location of your Java installation.""
     fi
 else
-    JAVACMD=""java""
+    JAVACMD=java
     which java >/dev/null 2>&1 || die ""ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
 
 Please set the JAVA_HOME variable in your environment to match the
@@ -106,80 +140,105 @@ location of your Java installation.""
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ ""$cygwin"" = ""false"" -a ""$darwin"" = ""false"" -a ""$nonstop"" = ""false"" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ ""$MAX_FD"" = ""maximum"" -o ""$MAX_FD"" = ""max"" ] ; then
-            MAX_FD=""$MAX_FD_LIMIT""
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn ""Could not set maximum file descriptor limit: $MAX_FD""
-        fi
-    else
-        warn ""Could not query maximum file descriptor limit: $MAX_FD_LIMIT""
-    fi
+if ! ""$cygwin"" && ! ""$darwin"" && ! ""$nonstop"" ; then
+    case $MAX_FD in #(
+      max*)
+        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC3045 
+        MAX_FD=$( ulimit -H -n ) ||
+            warn ""Could not query maximum file descriptor limit""
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC3045 
+        ulimit -n ""$MAX_FD"" ||
+            warn ""Could not set maximum file descriptor limit to $MAX_FD""
+    esac
 fi
 
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS=""$GRADLE_OPTS \""-Xdock:name=$APP_NAME\"" \""-Xdock:icon=$APP_HOME/media/gradle.icns\""""
-fi
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
 
 # For Cygwin or MSYS, switch paths to Windows format before running java
-if [ ""$cygwin"" = ""true"" -o ""$msys"" = ""true"" ] ; then
-    APP_HOME=`cygpath --path --mixed ""$APP_HOME""`
-    CLASSPATH=`cygpath --path --mixed ""$CLASSPATH""`
-
-    JAVACMD=`cygpath --unix ""$JAVACMD""`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS=""$ROOTDIRS$SEP$dir""
-        SEP=""|""
-    done
-    OURCYGPATTERN=""(^($ROOTDIRS))""
-    # Add a user-defined pattern to the cygpath arguments
-    if [ ""$GRADLE_CYGPATTERN"" != """" ] ; then
-        OURCYGPATTERN=""$OURCYGPATTERN|($GRADLE_CYGPATTERN)""
-    fi
+if ""$cygwin"" || ""$msys"" ; then
+    APP_HOME=$( cygpath --path --mixed ""$APP_HOME"" )
+    CLASSPATH=$( cygpath --path --mixed ""$CLASSPATH"" )
+
+    JAVACMD=$( cygpath --unix ""$JAVACMD"" )
+
     # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in ""$@"" ; do
-        CHECK=`echo ""$arg""|egrep -c ""$OURCYGPATTERN"" -`
-        CHECK2=`echo ""$arg""|egrep -c ""^-""`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed ""$arg""`
-        else
-            eval `echo args$i`=""\""$arg\""""
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e ""$t"" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed ""$arg"" )
         fi
-        i=`expr $i + 1`
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- ""$@"" ""$arg""      # push replacement arg
     done
-    case $i in
-        0) set -- ;;
-        1) set -- ""$args0"" ;;
-        2) set -- ""$args0"" ""$args1"" ;;
-        3) set -- ""$args0"" ""$args1"" ""$args2"" ;;
-        4) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ;;
-        5) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ;;
-        6) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ;;
-        7) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ;;
-        8) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ;;
-        9) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ""$args8"" ;;
-    esac
 fi
 
-# Escape application args
-save () {
-    for i do printf %s\\n ""$i"" | sed ""s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"" ; done
-    echo "" ""
-}
-APP_ARGS=`save ""$@""`
+# Collect all arguments for the java command;
+#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
+#     shell script including quotes and variable substitutions, so put them in
+#     double quotes to make sure that they get re-expanded; and
+#   * put everything else in single quotes, so that it's not re-expanded.
+
+set -- \
+        ""-Dorg.gradle.appname=$APP_BASE_NAME"" \
+        -classpath ""$CLASSPATH"" \
+        org.gradle.wrapper.GradleWrapperMain \
+        ""$@""
+
+# Stop when ""xargs"" is not available.
+if ! command -v xargs >/dev/null 2>&1
+then
+    die ""xargs is not available""
+fi
+
+# Use ""xargs"" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<""$var"" ) &&
+#   set -- ""${ARGS[@]}"" ""$@""
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single ""set"" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
 
-# Collect all arguments for the java command, following the shell quoting and substitution rules
-eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS ""\""-Dorg.gradle.appname=$APP_BASE_NAME\"""" -classpath ""\""$CLASSPATH\"""" org.gradle.wrapper.GradleWrapperMain ""$APP_ARGS""
+eval ""set -- $(
+        printf '%s\n' ""$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS"" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )"" '""$@""'
 
 exec ""$JAVACMD"" ""$@""","@@ -1,7 +1,7 @@
-#!/usr/bin/env sh
+#!/bin/sh
 
 #
-# Copyright 2015 the original author or authors.
+# Copyright © 2015-2021 the original authors.
 #
 # Licensed under the Apache License, Version 2.0 (the ""License"");
 # you may not use this file except in compliance with the License.
@@ -17,67 +17,101 @@
 #
 
 ##############################################################################
-##
-##  Gradle start up script for UN*X
-##
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The ""traditional"" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in ""$@"", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
 ##############################################################################
 
 # Attempt to set APP_HOME
+
 # Resolve links: $0 may be a link
-PRG=""$0""
-# Need this for relative symlinks.
-while [ -h ""$PRG"" ] ; do
-    ls=`ls -ld ""$PRG""`
-    link=`expr ""$ls"" : '.*-> \(.*\)$'`
-    if expr ""$link"" : '/.*' > /dev/null; then
-        PRG=""$link""
-    else
-        PRG=`dirname ""$PRG""`""/$link""
-    fi
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%""${app_path##*/}""}  # leaves a trailing /; empty if no leading path
+    [ -h ""$app_path"" ]
+do
+    ls=$( ls -ld ""$app_path"" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
 done
-SAVED=""`pwd`""
-cd ""`dirname \""$PRG\""`/"" >/dev/null
-APP_HOME=""`pwd -P`""
-cd ""$SAVED"" >/dev/null
 
-APP_NAME=""Gradle""
-APP_BASE_NAME=`basename ""$0""`
+# This is normally unused
+# shellcheck disable=SC2034
+APP_BASE_NAME=${0##*/}
+APP_HOME=$( cd ""${APP_HOME:-./}"" && pwd -P ) || exit
 
 # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
 DEFAULT_JVM_OPTS='""-Xmx64m"" ""-Xms64m""'
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD=""maximum""
+MAX_FD=maximum
 
 warn () {
     echo ""$*""
-}
+} >&2
 
 die () {
     echo
     echo ""$*""
     echo
     exit 1
-}
+} >&2
 
 # OS specific support (must be 'true' or 'false').
 cygwin=false
 msys=false
 darwin=false
 nonstop=false
-case ""`uname`"" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MSYS* | MINGW* )
-    msys=true
-    ;;
-  NONSTOP* )
-    nonstop=true
-    ;;
+case ""$( uname )"" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
 esac
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
@@ -87,9 +121,9 @@ CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 if [ -n ""$JAVA_HOME"" ] ; then
     if [ -x ""$JAVA_HOME/jre/sh/java"" ] ; then
         # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD=""$JAVA_HOME/jre/sh/java""
+        JAVACMD=$JAVA_HOME/jre/sh/java
     else
-        JAVACMD=""$JAVA_HOME/bin/java""
+        JAVACMD=$JAVA_HOME/bin/java
     fi
     if [ ! -x ""$JAVACMD"" ] ; then
         die ""ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
@@ -98,7 +132,7 @@ Please set the JAVA_HOME variable in your environment to match the
 location of your Java installation.""
     fi
 else
-    JAVACMD=""java""
+    JAVACMD=java
     which java >/dev/null 2>&1 || die ""ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
 
 Please set the JAVA_HOME variable in your environment to match the
@@ -106,80 +140,105 @@ location of your Java installation.""
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ ""$cygwin"" = ""false"" -a ""$darwin"" = ""false"" -a ""$nonstop"" = ""false"" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ ""$MAX_FD"" = ""maximum"" -o ""$MAX_FD"" = ""max"" ] ; then
-            MAX_FD=""$MAX_FD_LIMIT""
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn ""Could not set maximum file descriptor limit: $MAX_FD""
-        fi
-    else
-        warn ""Could not query maximum file descriptor limit: $MAX_FD_LIMIT""
-    fi
+if ! ""$cygwin"" && ! ""$darwin"" && ! ""$nonstop"" ; then
+    case $MAX_FD in #(
+      max*)
+        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC3045 
+        MAX_FD=$( ulimit -H -n ) ||
+            warn ""Could not query maximum file descriptor limit""
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC3045 
+        ulimit -n ""$MAX_FD"" ||
+            warn ""Could not set maximum file descriptor limit to $MAX_FD""
+    esac
 fi
 
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS=""$GRADLE_OPTS \""-Xdock:name=$APP_NAME\"" \""-Xdock:icon=$APP_HOME/media/gradle.icns\""""
-fi
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
 
 # For Cygwin or MSYS, switch paths to Windows format before running java
-if [ ""$cygwin"" = ""true"" -o ""$msys"" = ""true"" ] ; then
-    APP_HOME=`cygpath --path --mixed ""$APP_HOME""`
-    CLASSPATH=`cygpath --path --mixed ""$CLASSPATH""`
-
-    JAVACMD=`cygpath --unix ""$JAVACMD""`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS=""$ROOTDIRS$SEP$dir""
-        SEP=""|""
-    done
-    OURCYGPATTERN=""(^($ROOTDIRS))""
-    # Add a user-defined pattern to the cygpath arguments
-    if [ ""$GRADLE_CYGPATTERN"" != """" ] ; then
-        OURCYGPATTERN=""$OURCYGPATTERN|($GRADLE_CYGPATTERN)""
-    fi
+if ""$cygwin"" || ""$msys"" ; then
+    APP_HOME=$( cygpath --path --mixed ""$APP_HOME"" )
+    CLASSPATH=$( cygpath --path --mixed ""$CLASSPATH"" )
+
+    JAVACMD=$( cygpath --unix ""$JAVACMD"" )
+
     # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in ""$@"" ; do
-        CHECK=`echo ""$arg""|egrep -c ""$OURCYGPATTERN"" -`
-        CHECK2=`echo ""$arg""|egrep -c ""^-""`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed ""$arg""`
-        else
-            eval `echo args$i`=""\""$arg\""""
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e ""$t"" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed ""$arg"" )
         fi
-        i=`expr $i + 1`
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- ""$@"" ""$arg""      # push replacement arg
     done
-    case $i in
-        0) set -- ;;
-        1) set -- ""$args0"" ;;
-        2) set -- ""$args0"" ""$args1"" ;;
-        3) set -- ""$args0"" ""$args1"" ""$args2"" ;;
-        4) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ;;
-        5) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ;;
-        6) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ;;
-        7) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ;;
-        8) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ;;
-        9) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ""$args8"" ;;
-    esac
 fi
 
-# Escape application args
-save () {
-    for i do printf %s\\n ""$i"" | sed ""s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"" ; done
-    echo "" ""
-}
-APP_ARGS=`save ""$@""`
+# Collect all arguments for the java command;
+#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
+#     shell script including quotes and variable substitutions, so put them in
+#     double quotes to make sure that they get re-expanded; and
+#   * put everything else in single quotes, so that it's not re-expanded.
+
+set -- \
+        ""-Dorg.gradle.appname=$APP_BASE_NAME"" \
+        -classpath ""$CLASSPATH"" \
+        org.gradle.wrapper.GradleWrapperMain \
+        ""$@""
+
+# Stop when ""xargs"" is not available.
+if ! command -v xargs >/dev/null 2>&1
+then
+    die ""xargs is not available""
+fi
+
+# Use ""xargs"" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<""$var"" ) &&
+#   set -- ""${ARGS[@]}"" ""$@""
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single ""set"" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
 
-# Collect all arguments for the java command, following the shell quoting and substitution rules
-eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS ""\""-Dorg.gradle.appname=$APP_BASE_NAME\"""" -classpath ""\""$CLASSPATH\"""" org.gradle.wrapper.GradleWrapperMain ""$APP_ARGS""
+eval ""set -- $(
+        printf '%s\n' ""$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS"" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )"" '""$@""'
 
 exec ""$JAVACMD"" ""$@""",False,other
gradlew.bat,gradlew.bat,304f15c212dbe0cd74b09ce35a46aef6a95b1e91,402e49689089d1df7b4d730350ba4d1941a9a58b,"Update dependency gradle to v7.6.5 (#521)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -14,7 +14,7 @@
 @rem limitations under the License.
 @rem
 
-@if ""%DEBUG%"" == """" @echo off
+@if ""%DEBUG%""=="""" @echo off
 @rem ##########################################################################
 @rem
 @rem  Gradle startup script for Windows
@@ -25,7 +25,8 @@
 if ""%OS%""==""Windows_NT"" setlocal
 
 set DIRNAME=%~dp0
-if ""%DIRNAME%"" == """" set DIRNAME=.
+if ""%DIRNAME%""=="""" set DIRNAME=.
+@rem This is normally unused
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
@@ -40,7 +41,7 @@ if defined JAVA_HOME goto findJavaFromJavaHome
 
 set JAVA_EXE=java.exe
 %JAVA_EXE% -version >NUL 2>&1
-if ""%ERRORLEVEL%"" == ""0"" goto execute
+if %ERRORLEVEL% equ 0 goto execute
 
 echo.
 echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
@@ -75,13 +76,15 @@ set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
 
 :end
 @rem End local scope for the variables with windows NT shell
-if ""%ERRORLEVEL%""==""0"" goto mainEnd
+if %ERRORLEVEL% equ 0 goto mainEnd
 
 :fail
 rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
 rem the _cmd.exe /c_ return code!
-if  not """" == ""%GRADLE_EXIT_CONSOLE%"" exit 1
-exit /b 1
+set EXIT_CODE=%ERRORLEVEL%
+if %EXIT_CODE% equ 0 set EXIT_CODE=1
+if not """"==""%GRADLE_EXIT_CONSOLE%"" exit %EXIT_CODE%
+exit /b %EXIT_CODE%
 
 :mainEnd
 if ""%OS%""==""Windows_NT"" endlocal","@@ -14,7 +14,7 @@
 @rem limitations under the License.
 @rem
 
-@if ""%DEBUG%"" == """" @echo off
+@if ""%DEBUG%""=="""" @echo off
 @rem ##########################################################################
 @rem
 @rem  Gradle startup script for Windows
@@ -25,7 +25,8 @@
 if ""%OS%""==""Windows_NT"" setlocal
 
 set DIRNAME=%~dp0
-if ""%DIRNAME%"" == """" set DIRNAME=.
+if ""%DIRNAME%""=="""" set DIRNAME=.
+@rem This is normally unused
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
@@ -40,7 +41,7 @@ if defined JAVA_HOME goto findJavaFromJavaHome
 
 set JAVA_EXE=java.exe
 %JAVA_EXE% -version >NUL 2>&1
-if ""%ERRORLEVEL%"" == ""0"" goto execute
+if %ERRORLEVEL% equ 0 goto execute
 
 echo.
 echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
@@ -75,13 +76,15 @@ set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
 
 :end
 @rem End local scope for the variables with windows NT shell
-if ""%ERRORLEVEL%""==""0"" goto mainEnd
+if %ERRORLEVEL% equ 0 goto mainEnd
 
 :fail
 rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
 rem the _cmd.exe /c_ return code!
-if  not """" == ""%GRADLE_EXIT_CONSOLE%"" exit 1
-exit /b 1
+set EXIT_CODE=%ERRORLEVEL%
+if %EXIT_CODE% equ 0 set EXIT_CODE=1
+if not """"==""%GRADLE_EXIT_CONSOLE%"" exit %EXIT_CODE%
+exit /b %EXIT_CODE%
 
 :mainEnd
 if ""%OS%""==""Windows_NT"" endlocal",True,other
build.gradle,build.gradle,9fa95e40043562c17ed94a7c7785c90dea80b09a,304f15c212dbe0cd74b09ce35a46aef6a95b1e91,"Update versions.autoService to v1.1.1 (#523)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -6,7 +6,7 @@ buildscript {
       'compileSdk': 30,
 
       'kotlin': '1.5.21',
-      'autoService': '1.0-rc7',
+      'autoService': '1.1.1',
 
       // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
       'androidPlugin': '7.0.0',","@@ -6,7 +6,7 @@ buildscript {
       'compileSdk': 30,
 
       'kotlin': '1.5.21',
-      'autoService': '1.0-rc7',
+      'autoService': '1.1.1',
 
       // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
       'androidPlugin': '7.0.0',",False,other
timber-sample/build.gradle,timber-sample/build.gradle,aa4607959eaea98e8d28a7882246d6f18a1aa3c5,9fa95e40043562c17ed94a7c7785c90dea80b09a,Update build.grade to include namespace (#524),"@@ -1,6 +1,7 @@
 apply plugin: 'com.android.application'
 
 android {
+  namespace 'com.example.timber'
   compileSdkVersion versions.compileSdk
 
   buildFeatures {","@@ -1,6 +1,7 @@
 apply plugin: 'com.android.application'
 
 android {
+  namespace 'com.example.timber'
   compileSdkVersion versions.compileSdk
 
   buildFeatures {",False,other
timber/build.gradle,timber/build.gradle,aa4607959eaea98e8d28a7882246d6f18a1aa3c5,9fa95e40043562c17ed94a7c7785c90dea80b09a,Update build.grade to include namespace (#524),"@@ -4,6 +4,7 @@ apply plugin: 'com.vanniktech.maven.publish'
 apply plugin: 'org.jetbrains.dokka' // Must be applied here for publish plugin.
 
 android {
+  namespace 'timber.log'
   compileSdkVersion versions.compileSdk
 
   defaultConfig {","@@ -4,6 +4,7 @@ apply plugin: 'com.vanniktech.maven.publish'
 apply plugin: 'org.jetbrains.dokka' // Must be applied here for publish plugin.
 
 android {
+  namespace 'timber.log'
   compileSdkVersion versions.compileSdk
 
   defaultConfig {",False,other
timber/src/main/AndroidManifest.xml,,aa4607959eaea98e8d28a7882246d6f18a1aa3c5,9fa95e40043562c17ed94a7c7785c90dea80b09a,Update build.grade to include namespace (#524),"@@ -1,3 +0,0 @@
-<manifest package=""timber.log"">
-    <application/>
-</manifest>","@@ -1,3 +0,0 @@
-<manifest package=""timber.log"">
-    <application/>
-</manifest>",False,source
.github/dependabot.yaml,,4df20d0ef4033c33e8fdfa05c60b2a33f5b871b7,aa4607959eaea98e8d28a7882246d6f18a1aa3c5,"Delete dependabot.yaml (#532)

We're a Renovate household.","@@ -1,7 +0,0 @@
-version: 2
-
-updates:
-  - package-ecosystem: ""github-actions""
-    directory: ""/""
-    schedule:
-      interval: ""daily""","@@ -1,7 +0,0 @@
-version: 2
-
-updates:
-  - package-ecosystem: ""github-actions""
-    directory: ""/""
-    schedule:
-      interval: ""daily""",False,other
,.github/renovate.json5,5ff18d6c70864b4d6651ebadf8ae1d0ab4abf70f,4df20d0ef4033c33e8fdfa05c60b2a33f5b871b7,"Centralize CI build JDK, update with Renovate (#533)","@@ -0,0 +1,26 @@
+{
+	$schema: 'https://docs.renovatebot.com/renovate-schema.json',
+	extends: [
+		'config:recommended',
+	],
+	ignorePresets: [
+		// Ensure we get the latest version and are not pinned to old versions.
+		'workarounds:javaLTSVersions',
+	],
+	customManagers: [
+		// Update .java-version file with the latest JDK version.
+		{
+			customType: 'regex',
+			fileMatch: [
+				'\\.java-version$',
+			],
+			matchStrings: [
+				'(?<currentValue>.*)\\n',
+			],
+			datasourceTemplate: 'java-version',
+			depNameTemplate: 'java',
+			// Only write the major version.
+			extractVersionTemplate: '^(?<version>\\d+)',
+		},
+	],
+}","@@ -0,0 +1,26 @@
+{
+	$schema: 'https://docs.renovatebot.com/renovate-schema.json',
+	extends: [
+		'config:recommended',
+	],
+	ignorePresets: [
+		// Ensure we get the latest version and are not pinned to old versions.
+		'workarounds:javaLTSVersions',
+	],
+	customManagers: [
+		// Update .java-version file with the latest JDK version.
+		{
+			customType: 'regex',
+			fileMatch: [
+				'\\.java-version$',
+			],
+			matchStrings: [
+				'(?<currentValue>.*)\\n',
+			],
+			datasourceTemplate: 'java-version',
+			depNameTemplate: 'java',
+			// Only write the major version.
+			extractVersionTemplate: '^(?<version>\\d+)',
+		},
+	],
+}",False,other
,.github/workflows/.java-version,5ff18d6c70864b4d6651ebadf8ae1d0ab4abf70f,4df20d0ef4033c33e8fdfa05c60b2a33f5b871b7,"Centralize CI build JDK, update with Renovate (#533)","@@ -0,0 +1 @@
+11","@@ -0,0 +1 @@
+11",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,5ff18d6c70864b4d6651ebadf8ae1d0ab4abf70f,4df20d0ef4033c33e8fdfa05c60b2a33f5b871b7,"Centralize CI build JDK, update with Renovate (#533)","@@ -19,7 +19,7 @@ jobs:
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
-          java-version: 11
+          java-version-file: .github/workflows/.java-version
 
       - run: ./gradlew build dokkaHtml","@@ -19,7 +19,7 @@ jobs:
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
-          java-version: 11
+          java-version-file: .github/workflows/.java-version
 
       - run: ./gradlew build dokkaHtml",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,5ff18d6c70864b4d6651ebadf8ae1d0ab4abf70f,4df20d0ef4033c33e8fdfa05c60b2a33f5b871b7,"Centralize CI build JDK, update with Renovate (#533)","@@ -15,7 +15,7 @@ jobs:
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
-          java-version: 11
+          java-version-file: .github/workflows/.java-version
 
 # TODO!
 #      - run: ./gradlew -p mosaic publish","@@ -15,7 +15,7 @@ jobs:
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
-          java-version: 11
+          java-version-file: .github/workflows/.java-version
 
 # TODO!
 #      - run: ./gradlew -p mosaic publish",False,other
renovate.json,,5ff18d6c70864b4d6651ebadf8ae1d0ab4abf70f,4df20d0ef4033c33e8fdfa05c60b2a33f5b871b7,"Centralize CI build JDK, update with Renovate (#533)","@@ -1,6 +0,0 @@
-{
-  ""$schema"": ""https://docs.renovatebot.com/renovate-schema.json"",
-  ""extends"": [
-    ""config:recommended""
-  ]
-}","@@ -1,6 +0,0 @@
-{
-  ""$schema"": ""https://docs.renovatebot.com/renovate-schema.json"",
-  ""extends"": [
-    ""config:recommended""
-  ]
-}",False,other
build.gradle,build.gradle,c4bf6e50caff5b3699aa2df679a918c7aa9b22e2,5ff18d6c70864b4d6651ebadf8ae1d0ab4abf70f,"Update dependency org.jetbrains.dokka:dokka-gradle-plugin to v1.9.20 (#528)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -48,7 +48,7 @@ buildscript {
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.9'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
-    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.4.32'
+    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'
   }
 }","@@ -48,7 +48,7 @@ buildscript {
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.9'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
-    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.4.32'
+    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'
   }
 }",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,9dac5e01366764c396363c8b648300c100f1e29d,c4bf6e50caff5b3699aa2df679a918c7aa9b22e2,CI build tweaks (#536),"@@ -2,24 +2,27 @@ name: build
 
 on:
   pull_request: {}
+  workflow_dispatch: {}
   push:
     branches:
-      - '**'
+      - 'trunk'
     tags-ignore:
       - '**'
 
+env:
+  GRADLE_OPTS: ""-Dorg.gradle.daemon=false -Dorg.gradle.vfs.watch=false -Dkotlin.incremental=false  -Dorg.gradle.logging.stacktrace=full""
+
 jobs:
   build:
     runs-on: ubuntu-latest
 
     steps:
       - uses: actions/checkout@v4
-      - uses: gradle/actions/wrapper-validation@v4
-
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
           java-version-file: .github/workflows/.java-version
+      - uses: gradle/actions/setup-gradle@v4
 
       - run: ./gradlew build dokkaHtml","@@ -2,24 +2,27 @@ name: build
 
 on:
   pull_request: {}
+  workflow_dispatch: {}
   push:
     branches:
-      - '**'
+      - 'trunk'
     tags-ignore:
       - '**'
 
+env:
+  GRADLE_OPTS: ""-Dorg.gradle.daemon=false -Dorg.gradle.vfs.watch=false -Dkotlin.incremental=false  -Dorg.gradle.logging.stacktrace=full""
+
 jobs:
   build:
     runs-on: ubuntu-latest
 
     steps:
       - uses: actions/checkout@v4
-      - uses: gradle/actions/wrapper-validation@v4
-
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
           java-version-file: .github/workflows/.java-version
+      - uses: gradle/actions/setup-gradle@v4
 
       - run: ./gradlew build dokkaHtml",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,9dac5e01366764c396363c8b648300c100f1e29d,c4bf6e50caff5b3699aa2df679a918c7aa9b22e2,CI build tweaks (#536),"@@ -5,17 +5,20 @@ on:
     tags:
       - '**'
 
+env:
+  GRADLE_OPTS: ""-Dorg.gradle.daemon=false -Dorg.gradle.vfs.watch=false -Dkotlin.incremental=false  -Dorg.gradle.logging.stacktrace=full""
+
 jobs:
   release:
     runs-on: ubuntu-latest
 
     steps:
       - uses: actions/checkout@v4
-
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
           java-version-file: .github/workflows/.java-version
+      - uses: gradle/actions/setup-gradle@v4
 
 # TODO!
 #      - run: ./gradlew -p mosaic publish","@@ -5,17 +5,20 @@ on:
     tags:
       - '**'
 
+env:
+  GRADLE_OPTS: ""-Dorg.gradle.daemon=false -Dorg.gradle.vfs.watch=false -Dkotlin.incremental=false  -Dorg.gradle.logging.stacktrace=full""
+
 jobs:
   release:
     runs-on: ubuntu-latest
 
     steps:
       - uses: actions/checkout@v4
-
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'
           java-version-file: .github/workflows/.java-version
+      - uses: gradle/actions/setup-gradle@v4
 
 # TODO!
 #      - run: ./gradlew -p mosaic publish",False,other
build.gradle,build.gradle,d8299c08d052180023091567a21a89594beb26fc,9dac5e01366764c396363c8b648300c100f1e29d,Remove Ben Manes versions plugin (#537),"@@ -1,5 +1,3 @@
-apply plugin: 'com.github.ben-manes.versions'
-
 buildscript {
   ext.versions = [
       'minSdk': 14,
@@ -45,7 +43,6 @@ buildscript {
   dependencies {
     classpath deps.androidPlugin
     classpath deps.kotlin.plugin
-    classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.9'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
     classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'","@@ -1,5 +1,3 @@
-apply plugin: 'com.github.ben-manes.versions'
-
 buildscript {
   ext.versions = [
       'minSdk': 14,
@@ -45,7 +43,6 @@ buildscript {
   dependencies {
     classpath deps.androidPlugin
     classpath deps.kotlin.plugin
-    classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.9'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
     classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'",False,other
timber-lint/build.gradle,timber-lint/build.gradle,469cfc3adbb772ea29bbc1ad828d26be35013af1,d8299c08d052180023091567a21a89594beb26fc,Use modern Kotlin JVM plugin name (#538),"@@ -1,5 +1,4 @@
-apply plugin: 'java-library'
-apply plugin: 'kotlin'
+apply plugin: 'org.jetbrains.kotlin.jvm'
 apply plugin: 'org.jetbrains.kotlin.kapt'
 apply plugin: 'com.android.lint'","@@ -1,5 +1,4 @@
-apply plugin: 'java-library'
-apply plugin: 'kotlin'
+apply plugin: 'org.jetbrains.kotlin.jvm'
 apply plugin: 'org.jetbrains.kotlin.kapt'
 apply plugin: 'com.android.lint'",False,other
.github/workflows/.java-version,.github/workflows/.java-version,899bca4cae4e6bedf1b751986f26deaf3923f4bd,469cfc3adbb772ea29bbc1ad828d26be35013af1,"Update to Kotlin 2.2, AGP 8.10, Gradle 8.13 (#530)


---------

Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -1 +1 @@
-11
+17","@@ -1 +1 @@
-11
+17",False,other
build.gradle,build.gradle,899bca4cae4e6bedf1b751986f26deaf3923f4bd,469cfc3adbb772ea29bbc1ad828d26be35013af1,"Update to Kotlin 2.2, AGP 8.10, Gradle 8.13 (#530)


---------

Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -3,11 +3,11 @@ buildscript {
       'minSdk': 14,
       'compileSdk': 30,
 
-      'kotlin': '1.5.21',
+      'kotlin': '2.2.0',
       'autoService': '1.1.1',
 
       // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
-      'androidPlugin': '7.0.0',
+      'androidPlugin': '8.10.0',
       'androidTools': '30.0.0',
   ]
 
@@ -31,7 +31,7 @@ buildscript {
 
       junit: 'junit:junit:4.13.2',
       truth: 'com.google.truth:truth:1.4.4',
-      robolectric: 'org.robolectric:robolectric:4.6.1',
+      robolectric: 'org.robolectric:robolectric:4.15.1',
   ]
 
   repositories {
@@ -43,7 +43,7 @@ buildscript {
   dependencies {
     classpath deps.androidPlugin
     classpath deps.kotlin.plugin
-    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.9'
+    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.1'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
     classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'
   }","@@ -3,11 +3,11 @@ buildscript {
       'minSdk': 14,
       'compileSdk': 30,
 
-      'kotlin': '1.5.21',
+      'kotlin': '2.2.0',
       'autoService': '1.1.1',
 
       // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
-      'androidPlugin': '7.0.0',
+      'androidPlugin': '8.10.0',
       'androidTools': '30.0.0',
   ]
 
@@ -31,7 +31,7 @@ buildscript {
 
       junit: 'junit:junit:4.13.2',
       truth: 'com.google.truth:truth:1.4.4',
-      robolectric: 'org.robolectric:robolectric:4.6.1',
+      robolectric: 'org.robolectric:robolectric:4.15.1',
   ]
 
   repositories {
@@ -43,7 +43,7 @@ buildscript {
   dependencies {
     classpath deps.androidPlugin
     classpath deps.kotlin.plugin
-    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.2.9'
+    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.1'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
     classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'
   }",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,899bca4cae4e6bedf1b751986f26deaf3923f4bd,469cfc3adbb772ea29bbc1ad828d26be35013af1,"Update to Kotlin 2.2, AGP 8.10, Gradle 8.13 (#530)


---------

Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -1,6 +1,7 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.6.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
 networkTimeout=10000
+validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists","@@ -1,6 +1,7 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.6.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
 networkTimeout=10000
+validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists",False,other
gradlew,gradlew,899bca4cae4e6bedf1b751986f26deaf3923f4bd,469cfc3adbb772ea29bbc1ad828d26be35013af1,"Update to Kotlin 2.2, AGP 8.10, Gradle 8.13 (#530)


---------

Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -15,6 +15,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #
+# SPDX-License-Identifier: Apache-2.0
+#
 
 ##############################################################################
 #
@@ -55,7 +57,7 @@
 #       Darwin, MinGW, and NonStop.
 #
 #   (3) This script is generated from the Groovy template
-#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
 #       within the Gradle project.
 #
 #       You can find Gradle at https://github.com/gradle/gradle/.
@@ -83,10 +85,8 @@ done
 # This is normally unused
 # shellcheck disable=SC2034
 APP_BASE_NAME=${0##*/}
-APP_HOME=$( cd ""${APP_HOME:-./}"" && pwd -P ) || exit
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS='""-Xmx64m"" ""-Xms64m""'
+# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
+APP_HOME=$( cd -P ""${APP_HOME:-./}"" > /dev/null && printf '%s\n' ""$PWD"" ) || exit
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD=maximum
@@ -133,10 +133,13 @@ location of your Java installation.""
     fi
 else
     JAVACMD=java
-    which java >/dev/null 2>&1 || die ""ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+    if ! command -v java >/dev/null 2>&1
+    then
+        die ""ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
 
 Please set the JAVA_HOME variable in your environment to match the
 location of your Java installation.""
+    fi
 fi
 
 # Increase the maximum file descriptors if we can.
@@ -144,7 +147,7 @@ if ! ""$cygwin"" && ! ""$darwin"" && ! ""$nonstop"" ; then
     case $MAX_FD in #(
       max*)
         # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
-        # shellcheck disable=SC3045 
+        # shellcheck disable=SC2039,SC3045
         MAX_FD=$( ulimit -H -n ) ||
             warn ""Could not query maximum file descriptor limit""
     esac
@@ -152,7 +155,7 @@ if ! ""$cygwin"" && ! ""$darwin"" && ! ""$nonstop"" ; then
       '' | soft) :;; #(
       *)
         # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
-        # shellcheck disable=SC3045 
+        # shellcheck disable=SC2039,SC3045
         ulimit -n ""$MAX_FD"" ||
             warn ""Could not set maximum file descriptor limit to $MAX_FD""
     esac
@@ -197,11 +200,15 @@ if ""$cygwin"" || ""$msys"" ; then
     done
 fi
 
-# Collect all arguments for the java command;
-#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
-#     shell script including quotes and variable substitutions, so put them in
-#     double quotes to make sure that they get re-expanded; and
-#   * put everything else in single quotes, so that it's not re-expanded.
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='""-Xmx64m"" ""-Xms64m""'
+
+# Collect all arguments for the java command:
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
+#     and any embedded shellness will be escaped.
+#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
+#     treated as '${Hostname}' itself on the command line.
 
 set -- \
         ""-Dorg.gradle.appname=$APP_BASE_NAME"" \","@@ -15,6 +15,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #
+# SPDX-License-Identifier: Apache-2.0
+#
 
 ##############################################################################
 #
@@ -55,7 +57,7 @@
 #       Darwin, MinGW, and NonStop.
 #
 #   (3) This script is generated from the Groovy template
-#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
 #       within the Gradle project.
 #
 #       You can find Gradle at https://github.com/gradle/gradle/.
@@ -83,10 +85,8 @@ done
 # This is normally unused
 # shellcheck disable=SC2034
 APP_BASE_NAME=${0##*/}
-APP_HOME=$( cd ""${APP_HOME:-./}"" && pwd -P ) || exit
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS='""-Xmx64m"" ""-Xms64m""'
+# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
+APP_HOME=$( cd -P ""${APP_HOME:-./}"" > /dev/null && printf '%s\n' ""$PWD"" ) || exit
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD=maximum
@@ -133,10 +133,13 @@ location of your Java installation.""
     fi
 else
     JAVACMD=java
-    which java >/dev/null 2>&1 || die ""ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+    if ! command -v java >/dev/null 2>&1
+    then
+        die ""ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
 
 Please set the JAVA_HOME variable in your environment to match the
 location of your Java installation.""
+    fi
 fi
 
 # Increase the maximum file descriptors if we can.
@@ -144,7 +147,7 @@ if ! ""$cygwin"" && ! ""$darwin"" && ! ""$nonstop"" ; then
     case $MAX_FD in #(
       max*)
         # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
-        # shellcheck disable=SC3045 
+        # shellcheck disable=SC2039,SC3045
         MAX_FD=$( ulimit -H -n ) ||
             warn ""Could not query maximum file descriptor limit""
     esac
@@ -152,7 +155,7 @@ if ! ""$cygwin"" && ! ""$darwin"" && ! ""$nonstop"" ; then
       '' | soft) :;; #(
       *)
         # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
-        # shellcheck disable=SC3045 
+        # shellcheck disable=SC2039,SC3045
         ulimit -n ""$MAX_FD"" ||
             warn ""Could not set maximum file descriptor limit to $MAX_FD""
     esac
@@ -197,11 +200,15 @@ if ""$cygwin"" || ""$msys"" ; then
     done
 fi
 
-# Collect all arguments for the java command;
-#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
-#     shell script including quotes and variable substitutions, so put them in
-#     double quotes to make sure that they get re-expanded; and
-#   * put everything else in single quotes, so that it's not re-expanded.
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='""-Xmx64m"" ""-Xms64m""'
+
+# Collect all arguments for the java command:
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
+#     and any embedded shellness will be escaped.
+#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
+#     treated as '${Hostname}' itself on the command line.
 
 set -- \
         ""-Dorg.gradle.appname=$APP_BASE_NAME"" \",False,other
gradlew.bat,gradlew.bat,899bca4cae4e6bedf1b751986f26deaf3923f4bd,469cfc3adbb772ea29bbc1ad828d26be35013af1,"Update to Kotlin 2.2, AGP 8.10, Gradle 8.13 (#530)


---------

Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -13,6 +13,8 @@
 @rem See the License for the specific language governing permissions and
 @rem limitations under the License.
 @rem
+@rem SPDX-License-Identifier: Apache-2.0
+@rem
 
 @if ""%DEBUG%""=="""" @echo off
 @rem ##########################################################################
@@ -43,11 +45,11 @@ set JAVA_EXE=java.exe
 %JAVA_EXE% -version >NUL 2>&1
 if %ERRORLEVEL% equ 0 goto execute
 
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
+echo. 1>&2
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
 
 goto fail
 
@@ -57,11 +59,11 @@ set JAVA_EXE=%JAVA_HOME%/bin/java.exe
 
 if exist ""%JAVA_EXE%"" goto execute
 
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
+echo. 1>&2
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
 
 goto fail","@@ -13,6 +13,8 @@
 @rem See the License for the specific language governing permissions and
 @rem limitations under the License.
 @rem
+@rem SPDX-License-Identifier: Apache-2.0
+@rem
 
 @if ""%DEBUG%""=="""" @echo off
 @rem ##########################################################################
@@ -43,11 +45,11 @@ set JAVA_EXE=java.exe
 %JAVA_EXE% -version >NUL 2>&1
 if %ERRORLEVEL% equ 0 goto execute
 
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
+echo. 1>&2
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
 
 goto fail
 
@@ -57,11 +59,11 @@ set JAVA_EXE=%JAVA_HOME%/bin/java.exe
 
 if exist ""%JAVA_EXE%"" goto execute
 
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
+echo. 1>&2
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
 
 goto fail",True,other
timber-lint/build.gradle,timber-lint/build.gradle,899bca4cae4e6bedf1b751986f26deaf3923f4bd,469cfc3adbb772ea29bbc1ad828d26be35013af1,"Update to Kotlin 2.2, AGP 8.10, Gradle 8.13 (#530)


---------

Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -2,8 +2,13 @@ apply plugin: 'org.jetbrains.kotlin.jvm'
 apply plugin: 'org.jetbrains.kotlin.kapt'
 apply plugin: 'com.android.lint'
 
-targetCompatibility = JavaVersion.VERSION_1_8
-sourceCompatibility = JavaVersion.VERSION_1_8
+kotlin {
+  jvmToolchain(17)
+}
+
+lint {
+  baseline = file(""lint-baseline.xml"")
+}
 
 dependencies {
   compileOnly deps.lint.api","@@ -2,8 +2,13 @@ apply plugin: 'org.jetbrains.kotlin.jvm'
 apply plugin: 'org.jetbrains.kotlin.kapt'
 apply plugin: 'com.android.lint'
 
-targetCompatibility = JavaVersion.VERSION_1_8
-sourceCompatibility = JavaVersion.VERSION_1_8
+kotlin {
+  jvmToolchain(17)
+}
+
+lint {
+  baseline = file(""lint-baseline.xml"")
+}
 
 dependencies {
   compileOnly deps.lint.api",False,other
,timber-lint/lint-baseline.xml,899bca4cae4e6bedf1b751986f26deaf3923f4bd,469cfc3adbb772ea29bbc1ad828d26be35013af1,"Update to Kotlin 2.2, AGP 8.10, Gradle 8.13 (#530)


---------

Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -0,0 +1,961 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<issues format=""6"" by=""lint 8.10.0"" type=""baseline"" client=""gradle"" dependencies=""false"" name=""AGP (8.10.0)"" variant=""all"" version=""8.10.0"">
+
+    <issue
+        id=""JavaPluginLanguageLevel""
+        message=""no Java language level directives""
+        errorLine1=""apply plugin: &apos;java-library&apos;""
+        errorLine2=""~~~~~~~~~~~~~~~~~~~~~~~~~~~~"">
+        <location
+            file=""build.gradle""
+            line=""1""
+            column=""1""/>
+    </issue>
+
+    <issue
+        id=""LintImplTextFormat""
+        message=""&quot;format()&quot; looks like a call; surround with backtics in string to display as symbol, e.g. \`format()\`""
+        errorLine1=""      explanation = &quot;Since Timber handles String.format automatically, you may not use String#format().&quot;,""
+        errorLine2=""                                                                                              ~~~~~~~~"">
+        <location
+            file=""src/main/java/timber/lint/WrongTimberUsageDetector.kt""
+            line=""741""
+            column=""95""/>
+    </issue>
+
+    <issue
+        id=""LintImplTextFormat""
+        message=""&quot;format()&quot; looks like a call; surround with backtics in string to display as symbol, e.g. \`format()\`""
+        errorLine1=""      explanation = &quot;Since Timber handles String#format() automatically, use this instead of String concatenation.&quot;,""
+        errorLine2=""                                                 ~~~~~~~~"">
+        <location
+            file=""src/main/java/timber/lint/WrongTimberUsageDetector.kt""
+            line=""759""
+            column=""50""/>
+    </issue>
+
+    <issue
+        id=""LintImplDollarEscapes""
+        message=""In unit tests, use the fullwidth dollar sign, `＄`, instead of `$`, to avoid having to use cumbersome escapes. Lint will treat a `＄` as a `$`.""
+        errorLine1=""                |     Timber.d(&quot;${&quot;$&quot;}{foo}bar&quot;)""
+        errorLine2=""                                ~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""552""
+            column=""33""/>
+    </issue>
+
+    <issue
+        id=""LintImplDollarEscapes""
+        message=""In unit tests, use the fullwidth dollar sign, `＄`, instead of `$`, to avoid having to use cumbersome escapes. Lint will treat a `＄` as a `$`.""
+        errorLine1=""                |     Timber.d(&quot;foo${&quot;$&quot;}bar&quot;)""
+        errorLine2=""                                   ~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""589""
+            column=""36""/>
+    </issue>
+
+    <issue
+        id=""LintImplDollarEscapes""
+        message=""In unit tests, use the fullwidth dollar sign, `＄`, instead of `$`, to avoid having to use cumbersome escapes. Lint will treat a `＄` as a `$`.""
+        errorLine1=""                |     Timber.d(&quot;${&quot;$&quot;}foo${&quot;$&quot;}bar&quot;)""
+        errorLine2=""                                ~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""628""
+            column=""33""/>
+    </issue>
+
+    <issue
+        id=""LintImplDollarEscapes""
+        message=""In unit tests, use the fullwidth dollar sign, `＄`, instead of `$`, to avoid having to use cumbersome escapes. Lint will treat a `＄` as a `$`.""
+        errorLine1=""                |     Timber.d(if(true) &quot;Hello, ${&quot;$&quot;}s&quot; else &quot;Bye&quot;)""
+        errorLine2=""                                                ~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""665""
+            column=""49""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""35""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""43""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""85""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""93""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""134""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""141""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""182""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""189""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""231""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""239""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""274""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""283""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""321""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""330""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""355""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""378""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""387""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""403""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""410""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""424""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""431""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""              |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                    ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""449""
+            column=""21""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""              |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                    ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""458""
+            column=""21""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""476""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""485""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""519""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""527""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""545""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""554""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""582""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""591""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""620""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""630""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""658""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""667""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""688""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""696""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""720""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""728""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""752""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""760""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""784""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""792""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""814""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""822""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""840""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""848""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""872""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""880""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""904""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""912""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""937""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""946""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""981""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""990""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1026""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1036""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1053""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1061""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1081""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1092""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1111""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1121""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1140""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1150""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1168""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1177""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1212""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1221""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1256""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1265""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1282""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1290""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1307""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1315""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1332""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                &quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                    ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1355""
+            column=""21""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                &quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                    ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1368""
+            column=""21""/>
+    </issue>
+
+    <issue
+        id=""UElementAsPsi""
+        message=""Do not use `UElement` as `PsiElement`""
+        errorLine1=""    if (expression is PsiMethodCallExpression) {""
+        errorLine2=""        ~~~~~~~~~~"">
+        <location
+            file=""src/main/java/timber/lint/WrongTimberUsageDetector.kt""
+            line=""279""
+            column=""9""/>
+    </issue>
+
+    <issue
+        id=""UElementAsPsi""
+        message=""Do not use `UElement` as `PsiElement`""
+        errorLine1=""    } else if (expression is PsiLiteralExpression) {""
+        errorLine2=""               ~~~~~~~~~~"">
+        <location
+            file=""src/main/java/timber/lint/WrongTimberUsageDetector.kt""
+            line=""286""
+            column=""16""/>
+    </issue>
+
+</issues>","@@ -0,0 +1,961 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<issues format=""6"" by=""lint 8.10.0"" type=""baseline"" client=""gradle"" dependencies=""false"" name=""AGP (8.10.0)"" variant=""all"" version=""8.10.0"">
+
+    <issue
+        id=""JavaPluginLanguageLevel""
+        message=""no Java language level directives""
+        errorLine1=""apply plugin: &apos;java-library&apos;""
+        errorLine2=""~~~~~~~~~~~~~~~~~~~~~~~~~~~~"">
+        <location
+            file=""build.gradle""
+            line=""1""
+            column=""1""/>
+    </issue>
+
+    <issue
+        id=""LintImplTextFormat""
+        message=""&quot;format()&quot; looks like a call; surround with backtics in string to display as symbol, e.g. \`format()\`""
+        errorLine1=""      explanation = &quot;Since Timber handles String.format automatically, you may not use String#format().&quot;,""
+        errorLine2=""                                                                                              ~~~~~~~~"">
+        <location
+            file=""src/main/java/timber/lint/WrongTimberUsageDetector.kt""
+            line=""741""
+            column=""95""/>
+    </issue>
+
+    <issue
+        id=""LintImplTextFormat""
+        message=""&quot;format()&quot; looks like a call; surround with backtics in string to display as symbol, e.g. \`format()\`""
+        errorLine1=""      explanation = &quot;Since Timber handles String#format() automatically, use this instead of String concatenation.&quot;,""
+        errorLine2=""                                                 ~~~~~~~~"">
+        <location
+            file=""src/main/java/timber/lint/WrongTimberUsageDetector.kt""
+            line=""759""
+            column=""50""/>
+    </issue>
+
+    <issue
+        id=""LintImplDollarEscapes""
+        message=""In unit tests, use the fullwidth dollar sign, `＄`, instead of `$`, to avoid having to use cumbersome escapes. Lint will treat a `＄` as a `$`.""
+        errorLine1=""                |     Timber.d(&quot;${&quot;$&quot;}{foo}bar&quot;)""
+        errorLine2=""                                ~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""552""
+            column=""33""/>
+    </issue>
+
+    <issue
+        id=""LintImplDollarEscapes""
+        message=""In unit tests, use the fullwidth dollar sign, `＄`, instead of `$`, to avoid having to use cumbersome escapes. Lint will treat a `＄` as a `$`.""
+        errorLine1=""                |     Timber.d(&quot;foo${&quot;$&quot;}bar&quot;)""
+        errorLine2=""                                   ~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""589""
+            column=""36""/>
+    </issue>
+
+    <issue
+        id=""LintImplDollarEscapes""
+        message=""In unit tests, use the fullwidth dollar sign, `＄`, instead of `$`, to avoid having to use cumbersome escapes. Lint will treat a `＄` as a `$`.""
+        errorLine1=""                |     Timber.d(&quot;${&quot;$&quot;}foo${&quot;$&quot;}bar&quot;)""
+        errorLine2=""                                ~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""628""
+            column=""33""/>
+    </issue>
+
+    <issue
+        id=""LintImplDollarEscapes""
+        message=""In unit tests, use the fullwidth dollar sign, `＄`, instead of `$`, to avoid having to use cumbersome escapes. Lint will treat a `＄` as a `$`.""
+        errorLine1=""                |     Timber.d(if(true) &quot;Hello, ${&quot;$&quot;}s&quot; else &quot;Bye&quot;)""
+        errorLine2=""                                                ~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""665""
+            column=""49""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""35""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""43""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""85""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""93""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""134""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""141""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""182""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""189""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""231""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""239""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""274""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""283""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""321""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""330""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""355""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""378""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""387""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""403""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""410""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""424""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""431""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""              |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                    ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""449""
+            column=""21""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""              |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                    ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""458""
+            column=""21""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""476""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""485""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""519""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""527""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""545""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""554""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""582""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""591""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""620""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""630""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""658""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""667""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""688""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""696""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""720""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""728""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""752""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""760""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""784""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""792""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""814""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""822""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""840""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""848""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""872""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""880""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""904""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""912""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""937""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""946""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""981""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""990""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1026""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1036""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1053""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1061""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1081""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1092""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1111""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1121""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1140""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1150""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1168""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1177""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1212""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1221""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1256""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1265""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1282""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1290""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1307""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1315""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                |}&quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                      ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1332""
+            column=""23""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction""
+        errorLine1=""                &quot;&quot;&quot;.trimMargin()),""
+        errorLine2=""                    ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1355""
+            column=""21""/>
+    </issue>
+
+    <issue
+        id=""LintImplTrimIndent""
+        message=""No need to call `.trimMargin()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction""
+        errorLine1=""                &quot;&quot;&quot;.trimMargin())""
+        errorLine2=""                    ~~~~~~~~~~~~"">
+        <location
+            file=""src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt""
+            line=""1368""
+            column=""21""/>
+    </issue>
+
+    <issue
+        id=""UElementAsPsi""
+        message=""Do not use `UElement` as `PsiElement`""
+        errorLine1=""    if (expression is PsiMethodCallExpression) {""
+        errorLine2=""        ~~~~~~~~~~"">
+        <location
+            file=""src/main/java/timber/lint/WrongTimberUsageDetector.kt""
+            line=""279""
+            column=""9""/>
+    </issue>
+
+    <issue
+        id=""UElementAsPsi""
+        message=""Do not use `UElement` as `PsiElement`""
+        errorLine1=""    } else if (expression is PsiLiteralExpression) {""
+        errorLine2=""               ~~~~~~~~~~"">
+        <location
+            file=""src/main/java/timber/lint/WrongTimberUsageDetector.kt""
+            line=""286""
+            column=""16""/>
+    </issue>
+
+</issues>",False,other
timber-sample/src/main/AndroidManifest.xml,timber-sample/src/main/AndroidManifest.xml,899bca4cae4e6bedf1b751986f26deaf3923f4bd,469cfc3adbb772ea29bbc1ad828d26be35013af1,"Update to Kotlin 2.2, AGP 8.10, Gradle 8.13 (#530)


---------

Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -1,8 +1,7 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
 
 <manifest xmlns:android=""http://schemas.android.com/apk/res/android""
-    xmlns:tools=""http://schemas.android.com/tools""
-    package=""com.example.timber"">
+    xmlns:tools=""http://schemas.android.com/tools"">
 
   <application
       android:allowBackup=""false""","@@ -1,8 +1,7 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
 
 <manifest xmlns:android=""http://schemas.android.com/apk/res/android""
-    xmlns:tools=""http://schemas.android.com/tools""
-    package=""com.example.timber"">
+    xmlns:tools=""http://schemas.android.com/tools"">
 
   <application
       android:allowBackup=""false""",False,source
timber/build.gradle,timber/build.gradle,899bca4cae4e6bedf1b751986f26deaf3923f4bd,469cfc3adbb772ea29bbc1ad828d26be35013af1,"Update to Kotlin 2.2, AGP 8.10, Gradle 8.13 (#530)


---------

Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -3,6 +3,11 @@ apply plugin: 'org.jetbrains.kotlin.android'
 apply plugin: 'com.vanniktech.maven.publish'
 apply plugin: 'org.jetbrains.dokka' // Must be applied here for publish plugin.
 
+
+kotlin {
+  jvmToolchain(17)
+}
+
 android {
   namespace 'timber.log'
   compileSdkVersion versions.compileSdk","@@ -3,6 +3,11 @@ apply plugin: 'org.jetbrains.kotlin.android'
 apply plugin: 'com.vanniktech.maven.publish'
 apply plugin: 'org.jetbrains.dokka' // Must be applied here for publish plugin.
 
+
+kotlin {
+  jvmToolchain(17)
+}
+
 android {
   namespace 'timber.log'
   compileSdkVersion versions.compileSdk",False,other
timber/src/test/java/timber/log/TimberTest.kt,timber/src/test/java/timber/log/TimberTest.kt,899bca4cae4e6bedf1b751986f26deaf3923f4bd,469cfc3adbb772ea29bbc1ad828d26be35013af1,"Update to Kotlin 2.2, AGP 8.10, Gradle 8.13 (#530)


---------

Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -224,8 +224,6 @@ class TimberTest {
         .hasNoMoreMessages()
   }
 
-  // NOTE: this will fail on some future version of Kotlin when lambdas are compiled using invokedynamic
-  // Fix will be to expect the tag to be ""TimberTest"" as opposed to ""TimberTest\$debugTreeTag""
   @Test
   fun debugTreeTagGenerationStripsAnonymousLambdaClassMarker() {
     Timber.plant(Timber.DebugTree())
@@ -243,8 +241,8 @@ class TimberTest {
     outer()
 
     assertLog()
-        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
-        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
         .hasNoMoreMessages()
   }","@@ -224,8 +224,6 @@ class TimberTest {
         .hasNoMoreMessages()
   }
 
-  // NOTE: this will fail on some future version of Kotlin when lambdas are compiled using invokedynamic
-  // Fix will be to expect the tag to be ""TimberTest"" as opposed to ""TimberTest\$debugTreeTag""
   @Test
   fun debugTreeTagGenerationStripsAnonymousLambdaClassMarker() {
     Timber.plant(Timber.DebugTree())
@@ -243,8 +241,8 @@ class TimberTest {
     outer()
 
     assertLog()
-        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
-        .hasDebugMessage(""TimberTest\$debugTreeTag"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
+        .hasDebugMessage(""TimberTest"", ""Hello, world!"")
         .hasNoMoreMessages()
   }",False,test
build.gradle,build.gradle,20bd8ab7e9b5297f1c3e5673436e1e9a30d3e48b,899bca4cae4e6bedf1b751986f26deaf3923f4bd,"Update dependency com.vanniktech:gradle-maven-publish-plugin to v0.33.0 (#525)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -44,7 +44,7 @@ buildscript {
     classpath deps.androidPlugin
     classpath deps.kotlin.plugin
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.1'
-    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
+    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.33.0'
     classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'
   }
 }","@@ -44,7 +44,7 @@ buildscript {
     classpath deps.androidPlugin
     classpath deps.kotlin.plugin
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.1'
-    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
+    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.33.0'
     classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'
   }
 }",False,other
build.gradle,build.gradle,f8923249e77e5970dc68b5eace7fd0e0e40923f9,20bd8ab7e9b5297f1c3e5673436e1e9a30d3e48b,"Update dependency com.android.tools.build:gradle to v8.11.0 (#518)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -7,7 +7,7 @@ buildscript {
       'autoService': '1.1.1',
 
       // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
-      'androidPlugin': '8.10.0',
+      'androidPlugin': '8.11.0',
       'androidTools': '30.0.0',
   ]","@@ -7,7 +7,7 @@ buildscript {
       'autoService': '1.1.1',
 
       // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
-      'androidPlugin': '8.10.0',
+      'androidPlugin': '8.11.0',
       'androidTools': '30.0.0',
   ]",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,341d13f7da0325ff7a1da838f24b5e394f59a38a,f8923249e77e5970dc68b5eace7fd0e0e40923f9,"Update dependency gradle to v8.14.2 (#527)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,6 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.2-bin.zip
 networkTimeout=10000
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME","@@ -1,6 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.2-bin.zip
 networkTimeout=10000
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME",False,other
gradlew,gradlew,341d13f7da0325ff7a1da838f24b5e394f59a38a,f8923249e77e5970dc68b5eace7fd0e0e40923f9,"Update dependency gradle to v8.14.2 (#527)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -114,7 +114,7 @@ case ""$( uname )"" in                #(
   NONSTOP* )        nonstop=true ;;
 esac
 
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+CLASSPATH=""\\\""\\\""""
 
 
 # Determine the Java command to use to start the JVM.
@@ -213,7 +213,7 @@ DEFAULT_JVM_OPTS='""-Xmx64m"" ""-Xms64m""'
 set -- \
         ""-Dorg.gradle.appname=$APP_BASE_NAME"" \
         -classpath ""$CLASSPATH"" \
-        org.gradle.wrapper.GradleWrapperMain \
+        -jar ""$APP_HOME/gradle/wrapper/gradle-wrapper.jar"" \
         ""$@""
 
 # Stop when ""xargs"" is not available.","@@ -114,7 +114,7 @@ case ""$( uname )"" in                #(
   NONSTOP* )        nonstop=true ;;
 esac
 
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+CLASSPATH=""\\\""\\\""""
 
 
 # Determine the Java command to use to start the JVM.
@@ -213,7 +213,7 @@ DEFAULT_JVM_OPTS='""-Xmx64m"" ""-Xms64m""'
 set -- \
         ""-Dorg.gradle.appname=$APP_BASE_NAME"" \
         -classpath ""$CLASSPATH"" \
-        org.gradle.wrapper.GradleWrapperMain \
+        -jar ""$APP_HOME/gradle/wrapper/gradle-wrapper.jar"" \
         ""$@""
 
 # Stop when ""xargs"" is not available.",False,other
gradlew.bat,gradlew.bat,341d13f7da0325ff7a1da838f24b5e394f59a38a,f8923249e77e5970dc68b5eace7fd0e0e40923f9,"Update dependency gradle to v8.14.2 (#527)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -70,11 +70,11 @@ goto fail
 :execute
 @rem Setup the command line
 
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+set CLASSPATH=
 
 
 @rem Execute Gradle
-""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" org.gradle.wrapper.GradleWrapperMain %*
+""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" -jar ""%APP_HOME%\gradle\wrapper\gradle-wrapper.jar"" %*
 
 :end
 @rem End local scope for the variables with windows NT shell","@@ -70,11 +70,11 @@ goto fail
 :execute
 @rem Setup the command line
 
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+set CLASSPATH=
 
 
 @rem Execute Gradle
-""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" org.gradle.wrapper.GradleWrapperMain %*
+""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" -jar ""%APP_HOME%\gradle\wrapper\gradle-wrapper.jar"" %*
 
 :end
 @rem End local scope for the variables with windows NT shell",True,other
build.gradle,build.gradle,e38bca91724e5bd0fdd66f93f18ebd9ffc977670,341d13f7da0325ff7a1da838f24b5e394f59a38a,"Update dependency me.champeau.gradle:japicmp-gradle-plugin to v0.4.6 (#526)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -43,7 +43,7 @@ buildscript {
   dependencies {
     classpath deps.androidPlugin
     classpath deps.kotlin.plugin
-    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.1'
+    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.6'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.33.0'
     classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'
   }","@@ -43,7 +43,7 @@ buildscript {
   dependencies {
     classpath deps.androidPlugin
     classpath deps.kotlin.plugin
-    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.1'
+    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.6'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.33.0'
     classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'
   }",False,other
build.gradle,build.gradle,0b8f40737ecb5f7c2d54027ed1394e66efac432f,e38bca91724e5bd0fdd66f93f18ebd9ffc977670,"Update dependency org.jetbrains.dokka:dokka-gradle-plugin to v2 (#543)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -45,7 +45,7 @@ buildscript {
     classpath deps.kotlin.plugin
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.6'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.33.0'
-    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'
+    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:2.0.0'
   }
 }","@@ -45,7 +45,7 @@ buildscript {
     classpath deps.kotlin.plugin
     classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.6'
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.33.0'
-    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.20'
+    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:2.0.0'
   }
 }",False,other
build.gradle,build.gradle,83113a4ced8a4e3e405b7f29ff033f06ec99cd82,0b8f40737ecb5f7c2d54027ed1394e66efac432f,Migrate to version catalog (#549),"@@ -1,39 +1,4 @@
 buildscript {
-  ext.versions = [
-      'minSdk': 14,
-      'compileSdk': 30,
-
-      'kotlin': '2.2.0',
-      'autoService': '1.1.1',
-
-      // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
-      'androidPlugin': '8.11.0',
-      'androidTools': '30.0.0',
-  ]
-
-  ext.deps = [
-      androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
-      'kotlin': [
-          'plugin': ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
-          'stdlib': ""org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"",
-      ],
-      'lint': [
-          'core': ""com.android.tools.lint:lint:${versions.androidTools}"",
-          'api': ""com.android.tools.lint:lint-api:${versions.androidTools}"",
-          'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
-          'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
-      ],
-      'auto': [
-          'service': ""com.google.auto.service:auto-service:${versions.autoService}"",
-          'serviceAnnotations': ""com.google.auto.service:auto-service-annotations:${versions.autoService}"",
-      ],
-      annotations: 'org.jetbrains:annotations:20.1.0',
-
-      junit: 'junit:junit:4.13.2',
-      truth: 'com.google.truth:truth:1.4.4',
-      robolectric: 'org.robolectric:robolectric:4.15.1',
-  ]
-
   repositories {
     mavenCentral()
     google()
@@ -41,11 +6,11 @@ buildscript {
   }
 
   dependencies {
-    classpath deps.androidPlugin
-    classpath deps.kotlin.plugin
-    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.6'
-    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.33.0'
-    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:2.0.0'
+    classpath libs.gradlePlugin.android
+    classpath libs.gradlePlugin.kotlin
+    classpath libs.gradlePlugin.japicmp
+    classpath libs.gradlePlugin.mavenPublish
+    classpath libs.gradlePlugin.dokka
   }
 }","@@ -1,39 +1,4 @@
 buildscript {
-  ext.versions = [
-      'minSdk': 14,
-      'compileSdk': 30,
-
-      'kotlin': '2.2.0',
-      'autoService': '1.1.1',
-
-      // Update WrongTimberUsageDetectorTest#innerStringFormatWithStaticImport when >= 7.1.0-alpha07
-      'androidPlugin': '8.11.0',
-      'androidTools': '30.0.0',
-  ]
-
-  ext.deps = [
-      androidPlugin: ""com.android.tools.build:gradle:${versions.androidPlugin}"",
-      'kotlin': [
-          'plugin': ""org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"",
-          'stdlib': ""org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"",
-      ],
-      'lint': [
-          'core': ""com.android.tools.lint:lint:${versions.androidTools}"",
-          'api': ""com.android.tools.lint:lint-api:${versions.androidTools}"",
-          'checks': ""com.android.tools.lint:lint-checks:${versions.androidTools}"",
-          'tests': ""com.android.tools.lint:lint-tests:${versions.androidTools}"",
-      ],
-      'auto': [
-          'service': ""com.google.auto.service:auto-service:${versions.autoService}"",
-          'serviceAnnotations': ""com.google.auto.service:auto-service-annotations:${versions.autoService}"",
-      ],
-      annotations: 'org.jetbrains:annotations:20.1.0',
-
-      junit: 'junit:junit:4.13.2',
-      truth: 'com.google.truth:truth:1.4.4',
-      robolectric: 'org.robolectric:robolectric:4.15.1',
-  ]
-
   repositories {
     mavenCentral()
     google()
@@ -41,11 +6,11 @@ buildscript {
   }
 
   dependencies {
-    classpath deps.androidPlugin
-    classpath deps.kotlin.plugin
-    classpath 'me.champeau.gradle:japicmp-gradle-plugin:0.4.6'
-    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.33.0'
-    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:2.0.0'
+    classpath libs.gradlePlugin.android
+    classpath libs.gradlePlugin.kotlin
+    classpath libs.gradlePlugin.japicmp
+    classpath libs.gradlePlugin.mavenPublish
+    classpath libs.gradlePlugin.dokka
   }
 }",False,other
,gradle/libs.versions.toml,83113a4ced8a4e3e405b7f29ff033f06ec99cd82,0b8f40737ecb5f7c2d54027ed1394e66efac432f,Migrate to version catalog (#549),"@@ -0,0 +1,28 @@
+[versions]
+agp = ""8.11.0""
+androidTools = ""30.0.0"" # Update this values in sync with agp.
+kotlin = ""2.2.0""
+autoService = ""1.1.1""
+minSdk = ""14""
+compileSdk = ""30""
+
+[libraries]
+gradlePlugin-android = { module = ""com.android.tools.build:gradle"", version.ref = ""agp"" }
+gradlePlugin-kotlin = { module = ""org.jetbrains.kotlin:kotlin-gradle-plugin"", version.ref = ""kotlin"" }
+gradlePlugin-dokka = ""org.jetbrains.dokka:dokka-gradle-plugin:2.0.0""
+gradlePlugin-japicmp = ""me.champeau.gradle:japicmp-gradle-plugin:0.4.6""
+gradlePlugin-mavenPublish = ""com.vanniktech:gradle-maven-publish-plugin:0.33.0""
+
+annotations = ""org.jetbrains:annotations:20.1.0""
+auto-service = { module = ""com.google.auto.service:auto-service"", version.ref = ""autoService"" }
+auto-annotations = { module = ""com.google.auto.service:auto-service-annotations"", version.ref = ""autoService"" }
+
+lint-core = { module = ""com.android.tools.lint:lint"", version.ref = ""androidTools"" }
+lint-api = { module = ""com.android.tools.lint:lint-api"", version.ref = ""androidTools"" }
+lint-checks = { module = ""com.android.tools.lint:lint-checks"", version.ref = ""androidTools"" }
+lint-tests = { module = ""com.android.tools.lint:lint-tests"", version.ref = ""androidTools"" }
+
+junit = ""junit:junit:4.13.2""
+
+truth = ""com.google.truth:truth:1.4.4""
+robolectric = ""org.robolectric:robolectric:4.15.1""","@@ -0,0 +1,28 @@
+[versions]
+agp = ""8.11.0""
+androidTools = ""30.0.0"" # Update this values in sync with agp.
+kotlin = ""2.2.0""
+autoService = ""1.1.1""
+minSdk = ""14""
+compileSdk = ""30""
+
+[libraries]
+gradlePlugin-android = { module = ""com.android.tools.build:gradle"", version.ref = ""agp"" }
+gradlePlugin-kotlin = { module = ""org.jetbrains.kotlin:kotlin-gradle-plugin"", version.ref = ""kotlin"" }
+gradlePlugin-dokka = ""org.jetbrains.dokka:dokka-gradle-plugin:2.0.0""
+gradlePlugin-japicmp = ""me.champeau.gradle:japicmp-gradle-plugin:0.4.6""
+gradlePlugin-mavenPublish = ""com.vanniktech:gradle-maven-publish-plugin:0.33.0""
+
+annotations = ""org.jetbrains:annotations:20.1.0""
+auto-service = { module = ""com.google.auto.service:auto-service"", version.ref = ""autoService"" }
+auto-annotations = { module = ""com.google.auto.service:auto-service-annotations"", version.ref = ""autoService"" }
+
+lint-core = { module = ""com.android.tools.lint:lint"", version.ref = ""androidTools"" }
+lint-api = { module = ""com.android.tools.lint:lint-api"", version.ref = ""androidTools"" }
+lint-checks = { module = ""com.android.tools.lint:lint-checks"", version.ref = ""androidTools"" }
+lint-tests = { module = ""com.android.tools.lint:lint-tests"", version.ref = ""androidTools"" }
+
+junit = ""junit:junit:4.13.2""
+
+truth = ""com.google.truth:truth:1.4.4""
+robolectric = ""org.robolectric:robolectric:4.15.1""",False,other
timber-lint/build.gradle,timber-lint/build.gradle,83113a4ced8a4e3e405b7f29ff033f06ec99cd82,0b8f40737ecb5f7c2d54027ed1394e66efac432f,Migrate to version catalog (#549),"@@ -11,12 +11,12 @@ lint {
 }
 
 dependencies {
-  compileOnly deps.lint.api
-  compileOnly deps.lint.checks
-  compileOnly deps.auto.serviceAnnotations
-  kapt deps.auto.service
-  testImplementation deps.junit
-  testImplementation deps.lint.core
-  testImplementation deps.lint.tests
-  testImplementation deps.junit
+  compileOnly libs.lint.api
+  compileOnly libs.lint.checks
+  compileOnly libs.auto.annotations
+  kapt libs.auto.service
+  testImplementation libs.junit
+  testImplementation libs.lint.core
+  testImplementation libs.lint.tests
+  testImplementation libs.junit
 }","@@ -11,12 +11,12 @@ lint {
 }
 
 dependencies {
-  compileOnly deps.lint.api
-  compileOnly deps.lint.checks
-  compileOnly deps.auto.serviceAnnotations
-  kapt deps.auto.service
-  testImplementation deps.junit
-  testImplementation deps.lint.core
-  testImplementation deps.lint.tests
-  testImplementation deps.junit
+  compileOnly libs.lint.api
+  compileOnly libs.lint.checks
+  compileOnly libs.auto.annotations
+  kapt libs.auto.service
+  testImplementation libs.junit
+  testImplementation libs.lint.core
+  testImplementation libs.lint.tests
+  testImplementation libs.junit
 }",False,other
timber-sample/build.gradle,timber-sample/build.gradle,83113a4ced8a4e3e405b7f29ff033f06ec99cd82,0b8f40737ecb5f7c2d54027ed1394e66efac432f,Migrate to version catalog (#549),"@@ -2,7 +2,7 @@ apply plugin: 'com.android.application'
 
 android {
   namespace 'com.example.timber'
-  compileSdkVersion versions.compileSdk
+  compileSdkVersion libs.versions.compileSdk.get().toInteger()
 
   buildFeatures {
     buildConfig = true
@@ -11,8 +11,8 @@ android {
 
   defaultConfig {
     applicationId 'com.example.timber'
-    minSdkVersion versions.minSdk
-    targetSdkVersion versions.compileSdk
+    minSdkVersion libs.versions.minSdk.get()
+    targetSdkVersion libs.versions.compileSdk.get().toInteger()
     versionCode 1
     versionName '1.0.0'
   }","@@ -2,7 +2,7 @@ apply plugin: 'com.android.application'
 
 android {
   namespace 'com.example.timber'
-  compileSdkVersion versions.compileSdk
+  compileSdkVersion libs.versions.compileSdk.get().toInteger()
 
   buildFeatures {
     buildConfig = true
@@ -11,8 +11,8 @@ android {
 
   defaultConfig {
     applicationId 'com.example.timber'
-    minSdkVersion versions.minSdk
-    targetSdkVersion versions.compileSdk
+    minSdkVersion libs.versions.minSdk.get()
+    targetSdkVersion libs.versions.compileSdk.get().toInteger()
     versionCode 1
     versionName '1.0.0'
   }",False,other
timber/build.gradle,timber/build.gradle,83113a4ced8a4e3e405b7f29ff033f06ec99cd82,0b8f40737ecb5f7c2d54027ed1394e66efac432f,Migrate to version catalog (#549),"@@ -10,10 +10,10 @@ kotlin {
 
 android {
   namespace 'timber.log'
-  compileSdkVersion versions.compileSdk
+  compileSdkVersion libs.versions.compileSdk.get().toInteger()
 
   defaultConfig {
-    minSdkVersion versions.minSdk
+    minSdkVersion libs.versions.minSdk.get()
     consumerProguardFiles 'consumer-proguard-rules.pro'
   }
 
@@ -24,13 +24,12 @@ android {
 }
 
 dependencies {
-  api deps.kotlin.stdlib
-  implementation deps.annotations
+  implementation libs.annotations
 
-  testImplementation deps.annotations
-  testImplementation deps.junit
-  testImplementation deps.truth
-  testImplementation deps.robolectric
+  testImplementation libs.annotations
+  testImplementation libs.junit
+  testImplementation libs.truth
+  testImplementation libs.robolectric
 
   lintPublish project(':timber-lint')
 }","@@ -10,10 +10,10 @@ kotlin {
 
 android {
   namespace 'timber.log'
-  compileSdkVersion versions.compileSdk
+  compileSdkVersion libs.versions.compileSdk.get().toInteger()
 
   defaultConfig {
-    minSdkVersion versions.minSdk
+    minSdkVersion libs.versions.minSdk.get()
     consumerProguardFiles 'consumer-proguard-rules.pro'
   }
 
@@ -24,13 +24,12 @@ android {
 }
 
 dependencies {
-  api deps.kotlin.stdlib
-  implementation deps.annotations
+  implementation libs.annotations
 
-  testImplementation deps.annotations
-  testImplementation deps.junit
-  testImplementation deps.truth
-  testImplementation deps.robolectric
+  testImplementation libs.annotations
+  testImplementation libs.junit
+  testImplementation libs.truth
+  testImplementation libs.robolectric
 
   lintPublish project(':timber-lint')
 }",False,other
.github/renovate.json5,.github/renovate.json5,1f0a934e0f6fbf1e2e4896c6cc6e3de55352692e,83113a4ced8a4e3e405b7f29ff033f06ec99cd82,Group AGP updates (#552),"@@ -3,6 +3,14 @@
 	extends: [
 		'config:recommended',
 	],
+	packageRules: [
+		{
+			groupName: 'AGP',
+			matchPackagePatterns: [
+				'com.android.tools.*',
+			],
+		},
+	],
 	ignorePresets: [
 		// Ensure we get the latest version and are not pinned to old versions.
 		'workarounds:javaLTSVersions',","@@ -3,6 +3,14 @@
 	extends: [
 		'config:recommended',
 	],
+	packageRules: [
+		{
+			groupName: 'AGP',
+			matchPackagePatterns: [
+				'com.android.tools.*',
+			],
+		},
+	],
 	ignorePresets: [
 		// Ensure we get the latest version and are not pinned to old versions.
 		'workarounds:javaLTSVersions',",False,other
.github/workflows/.java-version,.github/workflows/.java-version,e0a79d3017f247ee877e128463bb7e9b691dab37,1f0a934e0f6fbf1e2e4896c6cc6e3de55352692e,"Update dependency java to v22 (#540)



---------

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -1 +1 @@
-17
+22","@@ -1 +1 @@
-17
+22",False,other
.github/workflows/.java-version,.github/workflows/.java-version,ccf908bd1c8c9b8d627178526057a2626221b8d5,e0a79d3017f247ee877e128463bb7e9b691dab37,"Update dependency java to v24 (#555)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1 +1 @@
-22
+24","@@ -1 +1 @@
-22
+24",False,other
gradle/libs.versions.toml,gradle/libs.versions.toml,bbe7244576b25c29899ca89d96d296801aacb7c1,ccf908bd1c8c9b8d627178526057a2626221b8d5,"[Android Tools] Updated Android Tools to v31 (#548)

* Switched from 'force' to 'strictly' to facilitate upgrading gradle wrapper version

* [AGP] Updated Android Gradle Plugin to v31

* Migrate to version catalog (#549)

* Group AGP updates (#552)

* Update dependency java to v22 (#540)



---------

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <github@jakewharton.com>

* Fixed whitespace issue

---------

Co-authored-by: Zongle Wang <wangzongler@gmail.com>
Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -1,6 +1,6 @@
 [versions]
 agp = ""8.11.0""
-androidTools = ""30.0.0"" # Update this values in sync with agp.
+androidTools = ""31.10.0"" # Update this values in sync with agp.
 kotlin = ""2.2.0""
 autoService = ""1.1.1""
 minSdk = ""14""","@@ -1,6 +1,6 @@
 [versions]
 agp = ""8.11.0""
-androidTools = ""30.0.0"" # Update this values in sync with agp.
+androidTools = ""31.10.0"" # Update this values in sync with agp.
 kotlin = ""2.2.0""
 autoService = ""1.1.1""
 minSdk = ""14""",False,other
timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.kt,timber-lint/src/main/java/timber/lint/WrongTimberUsageDetector.kt,bbe7244576b25c29899ca89d96d296801aacb7c1,ccf908bd1c8c9b8d627178526057a2626221b8d5,"[Android Tools] Updated Android Tools to v31 (#548)

* Switched from 'force' to 'strictly' to facilitate upgrading gradle wrapper version

* [AGP] Updated Android Gradle Plugin to v31

* Migrate to version catalog (#549)

* Group AGP updates (#552)

* Update dependency java to v22 (#540)



---------

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <github@jakewharton.com>

* Fixed whitespace issue

---------

Co-authored-by: Zongle Wang <wangzongler@gmail.com>
Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -14,6 +14,7 @@ import com.intellij.psi.PsiMethod
 import com.android.tools.lint.client.api.JavaEvaluator
 import com.android.tools.lint.detector.api.LintFix
 import org.jetbrains.uast.UElement
+import com.intellij.psi.PsiTypes
 import org.jetbrains.uast.UMethod
 import org.jetbrains.uast.UExpression
 import com.android.tools.lint.detector.api.Incident
@@ -216,7 +217,7 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
 
       val type = getType(argument) ?: continue
       val last = formatType.last()
-      if (formatType.length >= 2 && formatType[formatType.length - 2].toLowerCase() == 't') {
+      if (formatType.length >= 2 && formatType[formatType.length - 2].lowercaseChar() == 't') {
         // Date time conversion.
         when (last) {
           'H', 'I', 'k', 'l', 'M', 'S', 'L', 'N', 'p', 'z', 'Z', 's', 'Q', // time
@@ -288,11 +289,11 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       val expressionType = literalExpression.type
       when {
         isString(expressionType!!) -> return String::class.java
-        expressionType === PsiType.INT -> return Integer.TYPE
-        expressionType === PsiType.FLOAT -> return java.lang.Float.TYPE
-        expressionType === PsiType.CHAR -> return Character.TYPE
-        expressionType === PsiType.BOOLEAN -> return java.lang.Boolean.TYPE
-        expressionType === PsiType.NULL -> return Any::class.java
+        expressionType === PsiTypes.intType() -> return Integer.TYPE
+        expressionType === PsiTypes.floatType() -> return java.lang.Float.TYPE
+        expressionType === PsiTypes.charType() -> return Character.TYPE
+        expressionType === PsiTypes.booleanType() -> return java.lang.Boolean.TYPE
+        expressionType === PsiTypes.nullType() -> return Any::class.java
       }
     }","@@ -14,6 +14,7 @@ import com.intellij.psi.PsiMethod
 import com.android.tools.lint.client.api.JavaEvaluator
 import com.android.tools.lint.detector.api.LintFix
 import org.jetbrains.uast.UElement
+import com.intellij.psi.PsiTypes
 import org.jetbrains.uast.UMethod
 import org.jetbrains.uast.UExpression
 import com.android.tools.lint.detector.api.Incident
@@ -216,7 +217,7 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
 
       val type = getType(argument) ?: continue
       val last = formatType.last()
-      if (formatType.length >= 2 && formatType[formatType.length - 2].toLowerCase() == 't') {
+      if (formatType.length >= 2 && formatType[formatType.length - 2].lowercaseChar() == 't') {
         // Date time conversion.
         when (last) {
           'H', 'I', 'k', 'l', 'M', 'S', 'L', 'N', 'p', 'z', 'Z', 's', 'Q', // time
@@ -288,11 +289,11 @@ class WrongTimberUsageDetector : Detector(), UastScanner {
       val expressionType = literalExpression.type
       when {
         isString(expressionType!!) -> return String::class.java
-        expressionType === PsiType.INT -> return Integer.TYPE
-        expressionType === PsiType.FLOAT -> return java.lang.Float.TYPE
-        expressionType === PsiType.CHAR -> return Character.TYPE
-        expressionType === PsiType.BOOLEAN -> return java.lang.Boolean.TYPE
-        expressionType === PsiType.NULL -> return Any::class.java
+        expressionType === PsiTypes.intType() -> return Integer.TYPE
+        expressionType === PsiTypes.floatType() -> return java.lang.Float.TYPE
+        expressionType === PsiTypes.charType() -> return Character.TYPE
+        expressionType === PsiTypes.booleanType() -> return java.lang.Boolean.TYPE
+        expressionType === PsiTypes.nullType() -> return Any::class.java
       }
     }",False,source
timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,timber-lint/src/test/java/timber/lint/WrongTimberUsageDetectorTest.kt,bbe7244576b25c29899ca89d96d296801aacb7c1,ccf908bd1c8c9b8d627178526057a2626221b8d5,"[Android Tools] Updated Android Tools to v31 (#548)

* Switched from 'force' to 'strictly' to facilitate upgrading gradle wrapper version

* [AGP] Updated Android Gradle Plugin to v31

* Migrate to version catalog (#549)

* Group AGP updates (#552)

* Update dependency java to v22 (#540)



---------

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <github@jakewharton.com>

* Fixed whitespace issue

---------

Co-authored-by: Zongle Wang <wangzongler@gmail.com>
Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -4,6 +4,7 @@ import com.android.tools.lint.checks.infrastructure.TestFiles.java
 import com.android.tools.lint.checks.infrastructure.TestFiles.kotlin
 import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
 import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
+import com.android.tools.lint.checks.infrastructure.TestMode
 import org.junit.Test
 import timber.lint.WrongTimberUsageDetector.Companion.issues
 
@@ -42,6 +43,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -92,6 +94,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -140,6 +143,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -188,6 +192,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -238,7 +243,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -282,10 +289,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        // Remove when AGP 7.1.0-alpha07 is out
-        // https://groups.google.com/g/lint-dev/c/BigCO8sMhKU
-        .allowCompilationErrors()
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.PARENTHESIZED, TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -329,6 +335,7 @@ class WrongTimberUsageDetectorTest {
                 |  private fun id(s: String): String { return s }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -355,6 +362,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin())
           // no kotlin equivalent, since nested assignments do not exist
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -386,6 +394,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -409,6 +418,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -430,6 +440,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -457,6 +468,7 @@ class WrongTimberUsageDetectorTest {
               |  }
               |}"""""".trimMargin()),
       )
+      .allowClassNameClashes(true)
       .issues(*issues)
       .run()
       .expectClean()
@@ -484,7 +496,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
@@ -526,6 +540,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -553,7 +568,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.PARENTHESIZED)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -590,7 +607,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.PARENTHESIZED)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -629,7 +648,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.PARENTHESIZED)
         .run()
         .expect(""""""
             |src/foo/Example.java:7: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -666,7 +687,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.PARENTHESIZED)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -695,6 +718,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -727,6 +751,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -759,6 +784,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -767,7 +793,7 @@ class WrongTimberUsageDetectorTest {
             |                    ~~~~~~
             |src/foo/Example.kt:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
             |     Timber.d(""%d"", ""arg1"")
-            |                     ~~~~
+            |                    ~~~~~~
             |2 errors, 0 warnings"""""".trimMargin())
   }
 
@@ -792,6 +818,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -822,6 +849,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
             manifest().minSdk(26)
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -847,6 +875,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -879,6 +908,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -911,6 +941,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -919,7 +950,7 @@ class WrongTimberUsageDetectorTest {
             |                               ~~~~~~
             |src/foo/Example.kt:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
             |     Timber.tag(""tag"").d(""%d"", ""arg1"")
-            |                                ~~~~
+            |                               ~~~~~~
             |2 errors, 0 warnings"""""".trimMargin())
   }
 
@@ -945,6 +976,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -989,7 +1021,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS, TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
@@ -1035,7 +1069,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1060,7 +1096,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1091,7 +1129,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1120,7 +1160,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1149,7 +1191,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1176,7 +1220,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS, TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
@@ -1220,7 +1266,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS, TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
@@ -1264,7 +1312,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1289,6 +1339,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -1314,6 +1365,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -1332,6 +1384,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
             // no kotlin equivalent, since primitive wrappers do not exist
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -1367,6 +1420,7 @@ class WrongTimberUsageDetectorTest {
                 |}
                 """""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()","@@ -4,6 +4,7 @@ import com.android.tools.lint.checks.infrastructure.TestFiles.java
 import com.android.tools.lint.checks.infrastructure.TestFiles.kotlin
 import com.android.tools.lint.checks.infrastructure.TestFiles.manifest
 import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
+import com.android.tools.lint.checks.infrastructure.TestMode
 import org.junit.Test
 import timber.lint.WrongTimberUsageDetector.Companion.issues
 
@@ -42,6 +43,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -92,6 +94,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -140,6 +143,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -188,6 +192,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -238,7 +243,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:5: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -282,10 +289,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
-        // Remove when AGP 7.1.0-alpha07 is out
-        // https://groups.google.com/g/lint-dev/c/BigCO8sMhKU
-        .allowCompilationErrors()
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.PARENTHESIZED, TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Using 'String#format' inside of 'Timber' [StringFormatInTimber]
@@ -329,6 +335,7 @@ class WrongTimberUsageDetectorTest {
                 |  private fun id(s: String): String { return s }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -355,6 +362,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin())
           // no kotlin equivalent, since nested assignments do not exist
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -386,6 +394,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -409,6 +418,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -430,6 +440,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -457,6 +468,7 @@ class WrongTimberUsageDetectorTest {
               |  }
               |}"""""".trimMargin()),
       )
+      .allowClassNameClashes(true)
       .issues(*issues)
       .run()
       .expectClean()
@@ -484,7 +496,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Throwable should be first argument [ThrowableNotAtBeginning]
@@ -526,6 +540,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -553,7 +568,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.PARENTHESIZED)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -590,7 +607,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.PARENTHESIZED)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -629,7 +648,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.PARENTHESIZED)
         .run()
         .expect(""""""
             |src/foo/Example.java:7: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -666,7 +687,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.PARENTHESIZED)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Replace String concatenation with Timber's string formatting [BinaryOperationInTimber]
@@ -695,6 +718,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -727,6 +751,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -759,6 +784,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -767,7 +793,7 @@ class WrongTimberUsageDetectorTest {
             |                    ~~~~~~
             |src/foo/Example.kt:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
             |     Timber.d(""%d"", ""arg1"")
-            |                     ~~~~
+            |                    ~~~~~~
             |2 errors, 0 warnings"""""".trimMargin())
   }
 
@@ -792,6 +818,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
                 manifest().minSdk(25)
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -822,6 +849,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
             manifest().minSdk(26)
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -847,6 +875,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -879,6 +908,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -911,6 +941,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -919,7 +950,7 @@ class WrongTimberUsageDetectorTest {
             |                               ~~~~~~
             |src/foo/Example.kt:5: Error: Wrong argument type for formatting argument '#1' in %d: conversion is 'd', received String (argument #2 in method call) [TimberArgTypes]
             |     Timber.tag(""tag"").d(""%d"", ""arg1"")
-            |                                ~~~~
+            |                               ~~~~~~
             |2 errors, 0 warnings"""""".trimMargin())
   }
 
@@ -945,6 +976,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expect(""""""
@@ -989,7 +1021,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS, TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]
@@ -1035,7 +1069,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1060,7 +1096,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1091,7 +1129,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1120,7 +1160,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1149,7 +1191,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1176,7 +1220,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS, TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
@@ -1220,7 +1266,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS, TestMode.WHITESPACE)
         .run()
         .expect(""""""
             |src/foo/Example.java:6: Warning: Use single-argument log method instead of null/empty message [TimberExceptionLogging]
@@ -1264,7 +1312,9 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
+        .skipTestModes(TestMode.REORDER_ARGUMENTS)
         .run()
         .expectClean()
   }
@@ -1289,6 +1339,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -1314,6 +1365,7 @@ class WrongTimberUsageDetectorTest {
                 |  }
                 |}"""""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -1332,6 +1384,7 @@ class WrongTimberUsageDetectorTest {
                 |}"""""".trimMargin()),
             // no kotlin equivalent, since primitive wrappers do not exist
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()
@@ -1367,6 +1420,7 @@ class WrongTimberUsageDetectorTest {
                 |}
                 """""".trimMargin())
         )
+        .allowClassNameClashes(true)
         .issues(*issues)
         .run()
         .expectClean()",False,test
timber-sample/src/main/AndroidManifest.xml,timber-sample/src/main/AndroidManifest.xml,bbe7244576b25c29899ca89d96d296801aacb7c1,ccf908bd1c8c9b8d627178526057a2626221b8d5,"[Android Tools] Updated Android Tools to v31 (#548)

* Switched from 'force' to 'strictly' to facilitate upgrading gradle wrapper version

* [AGP] Updated Android Gradle Plugin to v31

* Migrate to version catalog (#549)

* Group AGP updates (#552)

* Update dependency java to v22 (#540)



---------

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <github@jakewharton.com>

* Fixed whitespace issue

---------

Co-authored-by: Zongle Wang <wangzongler@gmail.com>
Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <github@jakewharton.com>","@@ -9,7 +9,6 @@
       android:name="".ExampleApp""
       tools:ignore=""GoogleAppIndexingWarning,MissingApplicationIcon"">
     <activity
-        android:label=""@string/app_name""
         android:name="".ui.DemoActivity""
         android:exported=""true"">
       <intent-filter>","@@ -9,7 +9,6 @@
       android:name="".ExampleApp""
       tools:ignore=""GoogleAppIndexingWarning,MissingApplicationIcon"">
     <activity
-        android:label=""@string/app_name""
         android:name="".ui.DemoActivity""
         android:exported=""true"">
       <intent-filter>",False,source
gradle/libs.versions.toml,gradle/libs.versions.toml,201c3c1becdfe7ebbc03330179e480ad8a82a0ae,bbe7244576b25c29899ca89d96d296801aacb7c1,"Update AGP to v31.11.0 (#553)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,6 +1,6 @@
 [versions]
 agp = ""8.11.0""
-androidTools = ""31.10.0"" # Update this values in sync with agp.
+androidTools = ""31.11.0"" # Update this values in sync with agp.
 kotlin = ""2.2.0""
 autoService = ""1.1.1""
 minSdk = ""14""","@@ -1,6 +1,6 @@
 [versions]
 agp = ""8.11.0""
-androidTools = ""31.10.0"" # Update this values in sync with agp.
+androidTools = ""31.11.0"" # Update this values in sync with agp.
 kotlin = ""2.2.0""
 autoService = ""1.1.1""
 minSdk = ""14""",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,512872622ed6464c2dcde5ce1831be95894b3182,201c3c1becdfe7ebbc03330179e480ad8a82a0ae,"Update dependency gradle to v8.14.3 (#557)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,6 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.2-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.3-bin.zip
 networkTimeout=10000
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME","@@ -1,6 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.2-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.3-bin.zip
 networkTimeout=10000
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME",False,other
timber/build.gradle,timber/build.gradle,77d9fdaea65a3cab686e44e9072298ede37fd14b,512872622ed6464c2dcde5ce1831be95894b3182,Move current Timber to androidMain and extract common API (#558),"@@ -1,10 +1,11 @@
+apply plugin: 'org.jetbrains.kotlin.multiplatform'
 apply plugin: 'com.android.library'
-apply plugin: 'org.jetbrains.kotlin.android'
 apply plugin: 'com.vanniktech.maven.publish'
 apply plugin: 'org.jetbrains.dokka' // Must be applied here for publish plugin.
 
 
 kotlin {
+  androidTarget()
   jvmToolchain(17)
 }","@@ -1,10 +1,11 @@
+apply plugin: 'org.jetbrains.kotlin.multiplatform'
 apply plugin: 'com.android.library'
-apply plugin: 'org.jetbrains.kotlin.android'
 apply plugin: 'com.vanniktech.maven.publish'
 apply plugin: 'org.jetbrains.dokka' // Must be applied here for publish plugin.
 
 
 kotlin {
+  androidTarget()
   jvmToolchain(17)
 }",False,other
timber/src/main/java/timber/log/Timber.kt,timber/src/androidMain/kotlin/timber/log/Timber.kt,77d9fdaea65a3cab686e44e9072298ede37fd14b,512872622ed6464c2dcde5ce1831be95894b3182,Move current Timber to androidMain and extract common API (#558),"@@ -11,13 +11,13 @@ import java.util.Collections.unmodifiableList
 import java.util.regex.Pattern
 
 /** Logging for lazy people. */
-class Timber private constructor() {
+actual class Timber actual private constructor() {
   init {
     throw AssertionError()
   }
 
   /** A facade for handling logging calls. Install instances via [`Timber.plant()`][.plant]. */
-  abstract class Tree {
+  actual abstract class Tree {
     @get:JvmSynthetic // Hide from public API.
     internal val explicitTag = ThreadLocal<String>()
 
@@ -32,116 +32,116 @@ class Timber private constructor() {
       }
 
     /** Log a verbose message with optional format args. */
-    open fun v(message: String?, vararg args: Any?) {
+    actual open fun v(message: String?, vararg args: Any?) {
       prepareLog(Log.VERBOSE, null, message, *args)
     }
 
     /** Log a verbose exception and a message with optional format args. */
-    open fun v(t: Throwable?, message: String?, vararg args: Any?) {
+    actual open fun v(t: Throwable?, message: String?, vararg args: Any?) {
       prepareLog(Log.VERBOSE, t, message, *args)
     }
 
     /** Log a verbose exception. */
-    open fun v(t: Throwable?) {
+    actual open fun v(t: Throwable?) {
       prepareLog(Log.VERBOSE, t, null)
     }
 
     /** Log a debug message with optional format args. */
-    open fun d(message: String?, vararg args: Any?) {
+    actual open fun d(message: String?, vararg args: Any?) {
       prepareLog(Log.DEBUG, null, message, *args)
     }
 
     /** Log a debug exception and a message with optional format args. */
-    open fun d(t: Throwable?, message: String?, vararg args: Any?) {
+    actual open fun d(t: Throwable?, message: String?, vararg args: Any?) {
       prepareLog(Log.DEBUG, t, message, *args)
     }
 
     /** Log a debug exception. */
-    open fun d(t: Throwable?) {
+    actual open fun d(t: Throwable?) {
       prepareLog(Log.DEBUG, t, null)
     }
 
     /** Log an info message with optional format args. */
-    open fun i(message: String?, vararg args: Any?) {
+    actual open fun i(message: String?, vararg args: Any?) {
       prepareLog(Log.INFO, null, message, *args)
     }
 
     /** Log an info exception and a message with optional format args. */
-    open fun i(t: Throwable?, message: String?, vararg args: Any?) {
+    actual open fun i(t: Throwable?, message: String?, vararg args: Any?) {
       prepareLog(Log.INFO, t, message, *args)
     }
 
     /** Log an info exception. */
-    open fun i(t: Throwable?) {
+    actual open fun i(t: Throwable?) {
       prepareLog(Log.INFO, t, null)
     }
 
     /** Log a warning message with optional format args. */
-    open fun w(message: String?, vararg args: Any?) {
+    actual open fun w(message: String?, vararg args: Any?) {
       prepareLog(Log.WARN, null, message, *args)
     }
 
     /** Log a warning exception and a message with optional format args. */
-    open fun w(t: Throwable?, message: String?, vararg args: Any?) {
+    actual open fun w(t: Throwable?, message: String?, vararg args: Any?) {
       prepareLog(Log.WARN, t, message, *args)
     }
 
     /** Log a warning exception. */
-    open fun w(t: Throwable?) {
+    actual open fun w(t: Throwable?) {
       prepareLog(Log.WARN, t, null)
     }
 
     /** Log an error message with optional format args. */
-    open fun e(message: String?, vararg args: Any?) {
+    actual open fun e(message: String?, vararg args: Any?) {
       prepareLog(Log.ERROR, null, message, *args)
     }
 
     /** Log an error exception and a message with optional format args. */
-    open fun e(t: Throwable?, message: String?, vararg args: Any?) {
+    actual open fun e(t: Throwable?, message: String?, vararg args: Any?) {
       prepareLog(Log.ERROR, t, message, *args)
     }
 
     /** Log an error exception. */
-    open fun e(t: Throwable?) {
+    actual open fun e(t: Throwable?) {
       prepareLog(Log.ERROR, t, null)
     }
 
     /** Log an assert message with optional format args. */
-    open fun wtf(message: String?, vararg args: Any?) {
+    actual open fun wtf(message: String?, vararg args: Any?) {
       prepareLog(Log.ASSERT, null, message, *args)
     }
 
     /** Log an assert exception and a message with optional format args. */
-    open fun wtf(t: Throwable?, message: String?, vararg args: Any?) {
+    actual open fun wtf(t: Throwable?, message: String?, vararg args: Any?) {
       prepareLog(Log.ASSERT, t, message, *args)
     }
 
     /** Log an assert exception. */
-    open fun wtf(t: Throwable?) {
+    actual open fun wtf(t: Throwable?) {
       prepareLog(Log.ASSERT, t, null)
     }
 
     /** Log at `priority` a message with optional format args. */
-    open fun log(priority: Int, message: String?, vararg args: Any?) {
+    actual open fun log(priority: Int, message: String?, vararg args: Any?) {
       prepareLog(priority, null, message, *args)
     }
 
     /** Log at `priority` an exception and a message with optional format args. */
-    open fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
+    actual open fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
       prepareLog(priority, t, message, *args)
     }
 
     /** Log at `priority` an exception. */
-    open fun log(priority: Int, t: Throwable?) {
+    actual open fun log(priority: Int, t: Throwable?) {
       prepareLog(priority, t, null)
     }
 
     /** Return whether a message at `priority` should be logged. */
     @Deprecated(""Use isLoggable(String, int)"", ReplaceWith(""this.isLoggable(null, priority)""))
-    protected open fun isLoggable(priority: Int) = true
+    protected open fun isLoggable(priority: Int): Boolean = true
 
     /** Return whether a message at `priority` or `tag` should be logged. */
-    protected open fun isLoggable(tag: String?, priority: Int) = isLoggable(priority)
+    actual protected open fun isLoggable(tag: String?, priority: Int): Boolean = isLoggable(priority)
 
     private fun prepareLog(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
       // Consume tag even when message is not loggable so that next message is correctly tagged.
@@ -169,7 +169,7 @@ class Timber private constructor() {
     }
 
     /** Formats a log message with optional arguments. */
-    protected open fun formatMessage(message: String, args: Array<out Any?>) = message.format(*args)
+    actual protected open fun formatMessage(message: String, args: Array<out Any?>): String = message.format(*args)
 
     private fun getStackTraceString(t: Throwable): String {
       // Don't replace this with Log.getStackTraceString() - it hides
@@ -189,14 +189,14 @@ class Timber private constructor() {
      * @param message Formatted log message.
      * @param t Accompanying exceptions. May be `null`.
      */
-    protected abstract fun log(priority: Int, tag: String?, message: String, t: Throwable?)
+    actual protected abstract fun log(priority: Int, tag: String?, message: String, t: Throwable?)
   }
 
   /** A [Tree] for debug builds. Automatically infers the tag from the calling class. */
   open class DebugTree : Tree() {
     private val fqcnIgnore = listOf(
         Timber::class.java.name,
-        Timber.Forest::class.java.name,
+        Forest::class.java.name,
         Tree::class.java.name,
         DebugTree::class.java.name
     )
@@ -271,7 +271,7 @@ class Timber private constructor() {
     }
   }
 
-  companion object Forest : Tree() {
+  actual companion object Forest : Tree() {
     /** Log a verbose message with optional format args. */
     @JvmStatic override fun v(@NonNls message: String?, vararg args: Any?) {
       treeArray.forEach { it.v(message, *args) }
@@ -394,7 +394,7 @@ class Timber private constructor() {
     open inline fun asTree(): Tree = this
 
     /** Set a one-time tag for use on the next logging call. */
-    @JvmStatic fun tag(tag: String): Tree {
+    @JvmStatic actual fun tag(tag: String): Tree {
       for (tree in treeArray) {
         tree.explicitTag.set(tag)
       }
@@ -402,7 +402,7 @@ class Timber private constructor() {
     }
 
     /** Add a new logging tree. */
-    @JvmStatic fun plant(tree: Tree) {
+    @JvmStatic actual fun plant(tree: Tree) {
       require(tree !== this) { ""Cannot plant Timber into itself."" }
       synchronized(trees) {
         trees.add(tree)
@@ -411,7 +411,7 @@ class Timber private constructor() {
     }
 
     /** Adds new logging trees. */
-    @JvmStatic fun plant(vararg trees: Tree) {
+    @JvmStatic actual fun plant(vararg trees: Tree) {
       for (tree in trees) {
         requireNotNull(tree) { ""trees contained null"" }
         require(tree !== this) { ""Cannot plant Timber into itself."" }
@@ -423,7 +423,7 @@ class Timber private constructor() {
     }
 
     /** Remove a planted tree. */
-    @JvmStatic fun uproot(tree: Tree) {
+    @JvmStatic actual fun uproot(tree: Tree) {
       synchronized(trees) {
         require(trees.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
         treeArray = trees.toTypedArray()
@@ -431,7 +431,7 @@ class Timber private constructor() {
     }
 
     /** Remove all planted trees. */
-    @JvmStatic fun uprootAll() {
+    @JvmStatic actual fun uprootAll() {
       synchronized(trees) {
         trees.clear()
         treeArray = emptyArray()
@@ -439,14 +439,14 @@ class Timber private constructor() {
     }
 
     /** Return a copy of all planted [trees][Tree]. */
-    @JvmStatic fun forest(): List<Tree> {
+    @JvmStatic actual fun forest(): List<Tree> {
       synchronized(trees) {
         return unmodifiableList(trees.toList())
       }
     }
 
     @get:[JvmStatic JvmName(""treeCount"")]
-    val treeCount get() = treeArray.size
+    actual val treeCount get() = treeArray.size
 
     // Both fields guarded by 'trees'.
     private val trees = ArrayList<Tree>()","@@ -0,0 +1,455 @@
+package timber.log
+
+import android.os.Build
+import android.util.Log
+import org.jetbrains.annotations.NonNls
+import java.io.PrintWriter
+import java.io.StringWriter
+import java.util.ArrayList
+import java.util.Collections
+import java.util.Collections.unmodifiableList
+import java.util.regex.Pattern
+
+/** Logging for lazy people. */
+actual class Timber actual private constructor() {
+  init {
+    throw AssertionError()
+  }
+
+  /** A facade for handling logging calls. Install instances via [`Timber.plant()`][.plant]. */
+  actual abstract class Tree {
+    @get:JvmSynthetic // Hide from public API.
+    internal val explicitTag = ThreadLocal<String>()
+
+    @get:JvmSynthetic // Hide from public API.
+    internal open val tag: String?
+      get() {
+        val tag = explicitTag.get()
+        if (tag != null) {
+          explicitTag.remove()
+        }
+        return tag
+      }
+
+    /** Log a verbose message with optional format args. */
+    actual open fun v(message: String?, vararg args: Any?) {
+      prepareLog(Log.VERBOSE, null, message, *args)
+    }
+
+    /** Log a verbose exception and a message with optional format args. */
+    actual open fun v(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.VERBOSE, t, message, *args)
+    }
+
+    /** Log a verbose exception. */
+    actual open fun v(t: Throwable?) {
+      prepareLog(Log.VERBOSE, t, null)
+    }
+
+    /** Log a debug message with optional format args. */
+    actual open fun d(message: String?, vararg args: Any?) {
+      prepareLog(Log.DEBUG, null, message, *args)
+    }
+
+    /** Log a debug exception and a message with optional format args. */
+    actual open fun d(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.DEBUG, t, message, *args)
+    }
+
+    /** Log a debug exception. */
+    actual open fun d(t: Throwable?) {
+      prepareLog(Log.DEBUG, t, null)
+    }
+
+    /** Log an info message with optional format args. */
+    actual open fun i(message: String?, vararg args: Any?) {
+      prepareLog(Log.INFO, null, message, *args)
+    }
+
+    /** Log an info exception and a message with optional format args. */
+    actual open fun i(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.INFO, t, message, *args)
+    }
+
+    /** Log an info exception. */
+    actual open fun i(t: Throwable?) {
+      prepareLog(Log.INFO, t, null)
+    }
+
+    /** Log a warning message with optional format args. */
+    actual open fun w(message: String?, vararg args: Any?) {
+      prepareLog(Log.WARN, null, message, *args)
+    }
+
+    /** Log a warning exception and a message with optional format args. */
+    actual open fun w(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.WARN, t, message, *args)
+    }
+
+    /** Log a warning exception. */
+    actual open fun w(t: Throwable?) {
+      prepareLog(Log.WARN, t, null)
+    }
+
+    /** Log an error message with optional format args. */
+    actual open fun e(message: String?, vararg args: Any?) {
+      prepareLog(Log.ERROR, null, message, *args)
+    }
+
+    /** Log an error exception and a message with optional format args. */
+    actual open fun e(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.ERROR, t, message, *args)
+    }
+
+    /** Log an error exception. */
+    actual open fun e(t: Throwable?) {
+      prepareLog(Log.ERROR, t, null)
+    }
+
+    /** Log an assert message with optional format args. */
+    actual open fun wtf(message: String?, vararg args: Any?) {
+      prepareLog(Log.ASSERT, null, message, *args)
+    }
+
+    /** Log an assert exception and a message with optional format args. */
+    actual open fun wtf(t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(Log.ASSERT, t, message, *args)
+    }
+
+    /** Log an assert exception. */
+    actual open fun wtf(t: Throwable?) {
+      prepareLog(Log.ASSERT, t, null)
+    }
+
+    /** Log at `priority` a message with optional format args. */
+    actual open fun log(priority: Int, message: String?, vararg args: Any?) {
+      prepareLog(priority, null, message, *args)
+    }
+
+    /** Log at `priority` an exception and a message with optional format args. */
+    actual open fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
+      prepareLog(priority, t, message, *args)
+    }
+
+    /** Log at `priority` an exception. */
+    actual open fun log(priority: Int, t: Throwable?) {
+      prepareLog(priority, t, null)
+    }
+
+    /** Return whether a message at `priority` should be logged. */
+    @Deprecated(""Use isLoggable(String, int)"", ReplaceWith(""this.isLoggable(null, priority)""))
+    protected open fun isLoggable(priority: Int): Boolean = true
+
+    /** Return whether a message at `priority` or `tag` should be logged. */
+    actual protected open fun isLoggable(tag: String?, priority: Int): Boolean = isLoggable(priority)
+
+    private fun prepareLog(priority: Int, t: Throwable?, message: String?, vararg args: Any?) {
+      // Consume tag even when message is not loggable so that next message is correctly tagged.
+      val tag = tag
+      if (!isLoggable(tag, priority)) {
+        return
+      }
+
+      var message = message
+      if (message.isNullOrEmpty()) {
+        if (t == null) {
+          return  // Swallow message if it's null and there's no throwable.
+        }
+        message = getStackTraceString(t)
+      } else {
+        if (args.isNotEmpty()) {
+          message = formatMessage(message, args)
+        }
+        if (t != null) {
+          message += ""\n"" + getStackTraceString(t)
+        }
+      }
+
+      log(priority, tag, message, t)
+    }
+
+    /** Formats a log message with optional arguments. */
+    actual protected open fun formatMessage(message: String, args: Array<out Any?>): String = message.format(*args)
+
+    private fun getStackTraceString(t: Throwable): String {
+      // Don't replace this with Log.getStackTraceString() - it hides
+      // UnknownHostException, which is not what we want.
+      val sw = StringWriter(256)
+      val pw = PrintWriter(sw, false)
+      t.printStackTrace(pw)
+      pw.flush()
+      return sw.toString()
+    }
+
+    /**
+     * Write a log message to its destination. Called for all level-specific methods by default.
+     *
+     * @param priority Log level. See [Log] for constants.
+     * @param tag Explicit or inferred tag. May be `null`.
+     * @param message Formatted log message.
+     * @param t Accompanying exceptions. May be `null`.
+     */
+    actual protected abstract fun log(priority: Int, tag: String?, message: String, t: Throwable?)
+  }
+
+  /** A [Tree] for debug builds. Automatically infers the tag from the calling class. */
+  open class DebugTree : Tree() {
+    private val fqcnIgnore = listOf(
+        Timber::class.java.name,
+        Forest::class.java.name,
+        Tree::class.java.name,
+        DebugTree::class.java.name
+    )
+
+    override val tag: String?
+      get() = super.tag ?: Throwable().stackTrace
+          .first { it.className !in fqcnIgnore }
+          .let(::createStackElementTag)
+
+    /**
+     * Extract the tag which should be used for the message from the `element`. By default
+     * this will use the class name without any anonymous class suffixes (e.g., `Foo$1`
+     * becomes `Foo`).
+     *
+     * Note: This will not be called if a [manual tag][.tag] was specified.
+    */
+    protected open fun createStackElementTag(element: StackTraceElement): String? {
+      var tag = element.className.substringAfterLast('.')
+      val m = ANONYMOUS_CLASS.matcher(tag)
+      if (m.find()) {
+        tag = m.replaceAll("""")
+      }
+      // Tag length limit was removed in API 26.
+      return if (tag.length <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= 26) {
+        tag
+      } else {
+        tag.substring(0, MAX_TAG_LENGTH)
+      }
+    }
+
+    /**
+     * Break up `message` into maximum-length chunks (if needed) and send to either
+     * [Log.println()][Log.println] or
+     * [Log.wtf()][Log.wtf] for logging.
+     *
+     * {@inheritDoc}
+    */
+    override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+      if (message.length < MAX_LOG_LENGTH) {
+        if (priority == Log.ASSERT) {
+          Log.wtf(tag, message)
+        } else {
+          Log.println(priority, tag, message)
+        }
+        return
+      }
+
+      // Split by line, then ensure each line can fit into Log's maximum length.
+      var i = 0
+      val length = message.length
+      while (i < length) {
+        var newline = message.indexOf('\n', i)
+        newline = if (newline != -1) newline else length
+        do {
+          val end = Math.min(newline, i + MAX_LOG_LENGTH)
+          val part = message.substring(i, end)
+          if (priority == Log.ASSERT) {
+            Log.wtf(tag, part)
+          } else {
+            Log.println(priority, tag, part)
+          }
+          i = end
+        } while (i < newline)
+        i++
+      }
+    }
+
+    companion object {
+      private const val MAX_LOG_LENGTH = 4000
+      private const val MAX_TAG_LENGTH = 23
+      private val ANONYMOUS_CLASS = Pattern.compile(""(\\$\\d+)+$"")
+    }
+  }
+
+  actual companion object Forest : Tree() {
+    /** Log a verbose message with optional format args. */
+    @JvmStatic override fun v(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.v(message, *args) }
+    }
+
+    /** Log a verbose exception and a message with optional format args. */
+    @JvmStatic override fun v(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.v(t, message, *args) }
+    }
+
+    /** Log a verbose exception. */
+    @JvmStatic override fun v(t: Throwable?) {
+      treeArray.forEach { it.v(t) }
+    }
+
+    /** Log a debug message with optional format args. */
+    @JvmStatic override fun d(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.d(message, *args) }
+    }
+
+    /** Log a debug exception and a message with optional format args. */
+    @JvmStatic override fun d(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.d(t, message, *args) }
+    }
+
+    /** Log a debug exception. */
+    @JvmStatic override fun d(t: Throwable?) {
+      treeArray.forEach { it.d(t) }
+    }
+
+    /** Log an info message with optional format args. */
+    @JvmStatic override fun i(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.i(message, *args) }
+    }
+
+    /** Log an info exception and a message with optional format args. */
+    @JvmStatic override fun i(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.i(t, message, *args) }
+    }
+
+    /** Log an info exception. */
+    @JvmStatic override fun i(t: Throwable?) {
+      treeArray.forEach { it.i(t) }
+    }
+
+    /** Log a warning message with optional format args. */
+    @JvmStatic override fun w(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.w(message, *args) }
+    }
+
+    /** Log a warning exception and a message with optional format args. */
+    @JvmStatic override fun w(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.w(t, message, *args) }
+    }
+
+    /** Log a warning exception. */
+    @JvmStatic override fun w(t: Throwable?) {
+      treeArray.forEach { it.w(t) }
+    }
+
+    /** Log an error message with optional format args. */
+    @JvmStatic override fun e(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.e(message, *args) }
+    }
+
+    /** Log an error exception and a message with optional format args. */
+    @JvmStatic override fun e(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.e(t, message, *args) }
+    }
+
+    /** Log an error exception. */
+    @JvmStatic override fun e(t: Throwable?) {
+      treeArray.forEach { it.e(t) }
+    }
+
+    /** Log an assert message with optional format args. */
+    @JvmStatic override fun wtf(@NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.wtf(message, *args) }
+    }
+
+    /** Log an assert exception and a message with optional format args. */
+    @JvmStatic override fun wtf(t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.wtf(t, message, *args) }
+    }
+
+    /** Log an assert exception. */
+    @JvmStatic override fun wtf(t: Throwable?) {
+      treeArray.forEach { it.wtf(t) }
+    }
+
+    /** Log at `priority` a message with optional format args. */
+    @JvmStatic override fun log(priority: Int, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.log(priority, message, *args) }
+    }
+
+    /** Log at `priority` an exception and a message with optional format args. */
+    @JvmStatic
+    override fun log(priority: Int, t: Throwable?, @NonNls message: String?, vararg args: Any?) {
+      treeArray.forEach { it.log(priority, t, message, *args) }
+    }
+
+    /** Log at `priority` an exception. */
+    @JvmStatic override fun log(priority: Int, t: Throwable?) {
+      treeArray.forEach { it.log(priority, t) }
+    }
+
+    override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
+      throw AssertionError() // Missing override for log method.
+    }
+
+    /**
+     * A view into Timber's planted trees as a tree itself. This can be used for injecting a logger
+     * instance rather than using static methods or to facilitate testing.
+    */
+    @Suppress(
+        ""NOTHING_TO_INLINE"", // Kotlin users should reference `Tree.Forest` directly.
+        ""NON_FINAL_MEMBER_IN_OBJECT"" // For japicmp check.
+    )
+    @JvmStatic
+    open inline fun asTree(): Tree = this
+
+    /** Set a one-time tag for use on the next logging call. */
+    @JvmStatic actual fun tag(tag: String): Tree {
+      for (tree in treeArray) {
+        tree.explicitTag.set(tag)
+      }
+      return this
+    }
+
+    /** Add a new logging tree. */
+    @JvmStatic actual fun plant(tree: Tree) {
+      require(tree !== this) { ""Cannot plant Timber into itself."" }
+      synchronized(trees) {
+        trees.add(tree)
+        treeArray = trees.toTypedArray()
+      }
+    }
+
+    /** Adds new logging trees. */
+    @JvmStatic actual fun plant(vararg trees: Tree) {
+      for (tree in trees) {
+        requireNotNull(tree) { ""trees contained null"" }
+        require(tree !== this) { ""Cannot plant Timber into itself."" }
+      }
+      synchronized(this.trees) {
+        Collections.addAll(this.trees, *trees)
+        treeArray = this.trees.toTypedArray()
+      }
+    }
+
+    /** Remove a planted tree. */
+    @JvmStatic actual fun uproot(tree: Tree) {
+      synchronized(trees) {
+        require(trees.remove(tree)) { ""Cannot uproot tree which is not planted: $tree"" }
+        treeArray = trees.toTypedArray()
+      }
+    }
+
+    /** Remove all planted trees. */
+    @JvmStatic actual fun uprootAll() {
+      synchronized(trees) {
+        trees.clear()
+        treeArray = emptyArray()
+      }
+    }
+
+    /** Return a copy of all planted [trees][Tree]. */
+    @JvmStatic actual fun forest(): List<Tree> {
+      synchronized(trees) {
+        return unmodifiableList(trees.toList())
+      }
+    }
+
+    @get:[JvmStatic JvmName(""treeCount"")]
+    actual val treeCount get() = treeArray.size
+
+    // Both fields guarded by 'trees'.
+    private val trees = ArrayList<Tree>()
+    @Volatile private var treeArray = emptyArray<Tree>()
+  }
+}",True,source
,timber/src/commonMain/kotlin/timber/log/Timber.kt,77d9fdaea65a3cab686e44e9072298ede37fd14b,512872622ed6464c2dcde5ce1831be95894b3182,Move current Timber to androidMain and extract common API (#558),"@@ -0,0 +1,111 @@
+package timber.log
+
+/** Logging for lazy people. */
+expect class Timber private constructor() {
+
+  /** A facade for handling logging calls. Install instances via [`Timber.plant()`][.plant]. */
+  abstract class Tree {
+
+    /** Log a verbose message with optional format args. */
+    open fun v(message: String?, vararg args: Any?)
+
+    /** Log a verbose exception and a message with optional format args. */
+    open fun v(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log a verbose exception. */
+    open fun v(t: Throwable?)
+
+    /** Log a debug message with optional format args. */
+    open fun d(message: String?, vararg args: Any?)
+
+    /** Log a debug exception and a message with optional format args. */
+    open fun d(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log a debug exception. */
+    open fun d(t: Throwable?)
+
+    /** Log an info message with optional format args. */
+    open fun i(message: String?, vararg args: Any?)
+
+    /** Log an info exception and a message with optional format args. */
+    open fun i(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log an info exception. */
+    open fun i(t: Throwable?)
+
+    /** Log a warning message with optional format args. */
+    open fun w(message: String?, vararg args: Any?)
+
+    /** Log a warning exception and a message with optional format args. */
+    open fun w(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log a warning exception. */
+    open fun w(t: Throwable?)
+
+    /** Log an error message with optional format args. */
+    open fun e(message: String?, vararg args: Any?)
+
+    /** Log an error exception and a message with optional format args. */
+    open fun e(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log an error exception. */
+    open fun e(t: Throwable?)
+
+    /** Log an assert message with optional format args. */
+    open fun wtf(message: String?, vararg args: Any?)
+
+    /** Log an assert exception and a message with optional format args. */
+    open fun wtf(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log an assert exception. */
+    open fun wtf(t: Throwable?)
+
+    /** Log at `priority` a message with optional format args. */
+    open fun log(priority: Int, message: String?, vararg args: Any?)
+
+    /** Log at `priority` an exception and a message with optional format args. */
+    open fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log at `priority` an exception. */
+    open fun log(priority: Int, t: Throwable?)
+
+    /** Return whether a message at `priority` or `tag` should be logged. */
+    protected open fun isLoggable(tag: String?, priority: Int): Boolean
+
+    /** Formats a log message with optional arguments. */
+    protected open fun formatMessage(message: String, args: Array<out Any?>): String
+
+    /**
+     * Write a log message to its destination. Called for all level-specific methods by default.
+     *
+     * @param priority Log level. See [Log] for constants.
+     * @param tag Explicit or inferred tag. May be `null`.
+     * @param message Formatted log message.
+     * @param t Accompanying exceptions. May be `null`.
+     */
+    protected abstract fun log(priority: Int, tag: String?, message: String, t: Throwable?)
+  }
+
+  companion object Forest : Tree {
+
+    /** Set a one-time tag for use on the next logging call. */
+    fun tag(tag: String): Tree
+
+    /** Add a new logging tree. */
+    fun plant(tree: Tree)
+
+    /** Adds new logging trees. */
+    fun plant(vararg trees: Tree)
+
+    /** Remove a planted tree. */
+    fun uproot(tree: Tree)
+
+    /** Remove all planted trees. */
+    fun uprootAll()
+
+    /** Return a copy of all planted [trees][Tree]. */
+    fun forest(): List<Tree>
+
+    val treeCount: Int
+  }
+}","@@ -0,0 +1,111 @@
+package timber.log
+
+/** Logging for lazy people. */
+expect class Timber private constructor() {
+
+  /** A facade for handling logging calls. Install instances via [`Timber.plant()`][.plant]. */
+  abstract class Tree {
+
+    /** Log a verbose message with optional format args. */
+    open fun v(message: String?, vararg args: Any?)
+
+    /** Log a verbose exception and a message with optional format args. */
+    open fun v(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log a verbose exception. */
+    open fun v(t: Throwable?)
+
+    /** Log a debug message with optional format args. */
+    open fun d(message: String?, vararg args: Any?)
+
+    /** Log a debug exception and a message with optional format args. */
+    open fun d(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log a debug exception. */
+    open fun d(t: Throwable?)
+
+    /** Log an info message with optional format args. */
+    open fun i(message: String?, vararg args: Any?)
+
+    /** Log an info exception and a message with optional format args. */
+    open fun i(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log an info exception. */
+    open fun i(t: Throwable?)
+
+    /** Log a warning message with optional format args. */
+    open fun w(message: String?, vararg args: Any?)
+
+    /** Log a warning exception and a message with optional format args. */
+    open fun w(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log a warning exception. */
+    open fun w(t: Throwable?)
+
+    /** Log an error message with optional format args. */
+    open fun e(message: String?, vararg args: Any?)
+
+    /** Log an error exception and a message with optional format args. */
+    open fun e(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log an error exception. */
+    open fun e(t: Throwable?)
+
+    /** Log an assert message with optional format args. */
+    open fun wtf(message: String?, vararg args: Any?)
+
+    /** Log an assert exception and a message with optional format args. */
+    open fun wtf(t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log an assert exception. */
+    open fun wtf(t: Throwable?)
+
+    /** Log at `priority` a message with optional format args. */
+    open fun log(priority: Int, message: String?, vararg args: Any?)
+
+    /** Log at `priority` an exception and a message with optional format args. */
+    open fun log(priority: Int, t: Throwable?, message: String?, vararg args: Any?)
+
+    /** Log at `priority` an exception. */
+    open fun log(priority: Int, t: Throwable?)
+
+    /** Return whether a message at `priority` or `tag` should be logged. */
+    protected open fun isLoggable(tag: String?, priority: Int): Boolean
+
+    /** Formats a log message with optional arguments. */
+    protected open fun formatMessage(message: String, args: Array<out Any?>): String
+
+    /**
+     * Write a log message to its destination. Called for all level-specific methods by default.
+     *
+     * @param priority Log level. See [Log] for constants.
+     * @param tag Explicit or inferred tag. May be `null`.
+     * @param message Formatted log message.
+     * @param t Accompanying exceptions. May be `null`.
+     */
+    protected abstract fun log(priority: Int, tag: String?, message: String, t: Throwable?)
+  }
+
+  companion object Forest : Tree {
+
+    /** Set a one-time tag for use on the next logging call. */
+    fun tag(tag: String): Tree
+
+    /** Add a new logging tree. */
+    fun plant(tree: Tree)
+
+    /** Adds new logging trees. */
+    fun plant(vararg trees: Tree)
+
+    /** Remove a planted tree. */
+    fun uproot(tree: Tree)
+
+    /** Remove all planted trees. */
+    fun uprootAll()
+
+    /** Return a copy of all planted [trees][Tree]. */
+    fun forest(): List<Tree>
+
+    val treeCount: Int
+  }
+}",False,source
gradle/libs.versions.toml,gradle/libs.versions.toml,d559be0b4013c00628e7d98bc72fcd71c1d37ef0,77d9fdaea65a3cab686e44e9072298ede37fd14b,"Update dependency org.jetbrains:annotations to v26 (#556)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -13,7 +13,7 @@ gradlePlugin-dokka = ""org.jetbrains.dokka:dokka-gradle-plugin:2.0.0""
 gradlePlugin-japicmp = ""me.champeau.gradle:japicmp-gradle-plugin:0.4.6""
 gradlePlugin-mavenPublish = ""com.vanniktech:gradle-maven-publish-plugin:0.33.0""
 
-annotations = ""org.jetbrains:annotations:20.1.0""
+annotations = ""org.jetbrains:annotations:26.0.2""
 auto-service = { module = ""com.google.auto.service:auto-service"", version.ref = ""autoService"" }
 auto-annotations = { module = ""com.google.auto.service:auto-service-annotations"", version.ref = ""autoService"" }","@@ -13,7 +13,7 @@ gradlePlugin-dokka = ""org.jetbrains.dokka:dokka-gradle-plugin:2.0.0""
 gradlePlugin-japicmp = ""me.champeau.gradle:japicmp-gradle-plugin:0.4.6""
 gradlePlugin-mavenPublish = ""com.vanniktech:gradle-maven-publish-plugin:0.33.0""
 
-annotations = ""org.jetbrains:annotations:20.1.0""
+annotations = ""org.jetbrains:annotations:26.0.2""
 auto-service = { module = ""com.google.auto.service:auto-service"", version.ref = ""autoService"" }
 auto-annotations = { module = ""com.google.auto.service:auto-service-annotations"", version.ref = ""autoService"" }",False,other
gradle/libs.versions.toml,gradle/libs.versions.toml,d86aaaaa64f0127a6eeae604da0cac2cd6c33b2b,d559be0b4013c00628e7d98bc72fcd71c1d37ef0,"Update AGP (#560)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,6 +1,6 @@
 [versions]
-agp = ""8.11.0""
-androidTools = ""31.11.0"" # Update this values in sync with agp.
+agp = ""8.11.1""
+androidTools = ""31.11.1"" # Update this values in sync with agp.
 kotlin = ""2.2.0""
 autoService = ""1.1.1""
 minSdk = ""14""","@@ -1,6 +1,6 @@
 [versions]
-agp = ""8.11.0""
-androidTools = ""31.11.0"" # Update this values in sync with agp.
+agp = ""8.11.1""
+androidTools = ""31.11.1"" # Update this values in sync with agp.
 kotlin = ""2.2.0""
 autoService = ""1.1.1""
 minSdk = ""14""",False,other
gradle.properties,gradle.properties,2163d941dd958ec7b6d1ce1843d7b6bcd35e448c,d86aaaaa64f0127a6eeae604da0cac2cd6c33b2b,"Update dependency com.vanniktech:gradle-maven-publish-plugin to v0.34.0 (#561)

* Update dependency com.vanniktech:gradle-maven-publish-plugin to v0.34.0

* Add publishing properties

---------

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <jw@squareup.com>","@@ -27,3 +27,7 @@ android.defaults.buildfeatures.aidl=false
 android.defaults.buildfeatures.renderscript=false
 android.defaults.buildfeatures.resvalues=false
 android.defaults.buildfeatures.shaders=false
+
+mavenCentralPublishing=true
+mavenCentralAutomaticPublishing=true
+signAllPublications=true","@@ -27,3 +27,7 @@ android.defaults.buildfeatures.aidl=false
 android.defaults.buildfeatures.renderscript=false
 android.defaults.buildfeatures.resvalues=false
 android.defaults.buildfeatures.shaders=false
+
+mavenCentralPublishing=true
+mavenCentralAutomaticPublishing=true
+signAllPublications=true",False,other
gradle/libs.versions.toml,gradle/libs.versions.toml,2163d941dd958ec7b6d1ce1843d7b6bcd35e448c,d86aaaaa64f0127a6eeae604da0cac2cd6c33b2b,"Update dependency com.vanniktech:gradle-maven-publish-plugin to v0.34.0 (#561)

* Update dependency com.vanniktech:gradle-maven-publish-plugin to v0.34.0

* Add publishing properties

---------

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>
Co-authored-by: Jake Wharton <jw@squareup.com>","@@ -11,7 +11,7 @@ gradlePlugin-android = { module = ""com.android.tools.build:gradle"", version.ref
 gradlePlugin-kotlin = { module = ""org.jetbrains.kotlin:kotlin-gradle-plugin"", version.ref = ""kotlin"" }
 gradlePlugin-dokka = ""org.jetbrains.dokka:dokka-gradle-plugin:2.0.0""
 gradlePlugin-japicmp = ""me.champeau.gradle:japicmp-gradle-plugin:0.4.6""
-gradlePlugin-mavenPublish = ""com.vanniktech:gradle-maven-publish-plugin:0.33.0""
+gradlePlugin-mavenPublish = ""com.vanniktech:gradle-maven-publish-plugin:0.34.0""
 
 annotations = ""org.jetbrains:annotations:26.0.2""
 auto-service = { module = ""com.google.auto.service:auto-service"", version.ref = ""autoService"" }","@@ -11,7 +11,7 @@ gradlePlugin-android = { module = ""com.android.tools.build:gradle"", version.ref
 gradlePlugin-kotlin = { module = ""org.jetbrains.kotlin:kotlin-gradle-plugin"", version.ref = ""kotlin"" }
 gradlePlugin-dokka = ""org.jetbrains.dokka:dokka-gradle-plugin:2.0.0""
 gradlePlugin-japicmp = ""me.champeau.gradle:japicmp-gradle-plugin:0.4.6""
-gradlePlugin-mavenPublish = ""com.vanniktech:gradle-maven-publish-plugin:0.33.0""
+gradlePlugin-mavenPublish = ""com.vanniktech:gradle-maven-publish-plugin:0.34.0""
 
 annotations = ""org.jetbrains:annotations:26.0.2""
 auto-service = { module = ""com.google.auto.service:auto-service"", version.ref = ""autoService"" }",False,other
gradle/libs.versions.toml,gradle/libs.versions.toml,507d14743070cc928e9511f30e5a25857a4a6c4a,2163d941dd958ec7b6d1ce1843d7b6bcd35e448c,"Update AGP (#562)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,6 +1,6 @@
 [versions]
-agp = ""8.11.1""
-androidTools = ""31.11.1"" # Update this values in sync with agp.
+agp = ""8.12.0""
+androidTools = ""31.12.0"" # Update this values in sync with agp.
 kotlin = ""2.2.0""
 autoService = ""1.1.1""
 minSdk = ""14""","@@ -1,6 +1,6 @@
 [versions]
-agp = ""8.11.1""
-androidTools = ""31.11.1"" # Update this values in sync with agp.
+agp = ""8.12.0""
+androidTools = ""31.12.0"" # Update this values in sync with agp.
 kotlin = ""2.2.0""
 autoService = ""1.1.1""
 minSdk = ""14""",False,other
gradle/wrapper/gradle-wrapper.properties,gradle/wrapper/gradle-wrapper.properties,0c03da217c441324925cc6620bdc2bfaa73f1213,507d14743070cc928e9511f30e5a25857a4a6c4a,"Update dependency gradle to v9 (#563)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,6 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-9.0.0-bin.zip
 networkTimeout=10000
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME","@@ -1,6 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-9.0.0-bin.zip
 networkTimeout=10000
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME",False,other
gradlew,gradlew,0c03da217c441324925cc6620bdc2bfaa73f1213,507d14743070cc928e9511f30e5a25857a4a6c4a,"Update dependency gradle to v9 (#563)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,7 +1,7 @@
 #!/bin/sh
 
 #
-# Copyright © 2015-2021 the original authors.
+# Copyright © 2015 the original authors.
 #
 # Licensed under the Apache License, Version 2.0 (the ""License"");
 # you may not use this file except in compliance with the License.","@@ -1,7 +1,7 @@
 #!/bin/sh
 
 #
-# Copyright © 2015-2021 the original authors.
+# Copyright © 2015 the original authors.
 #
 # Licensed under the Apache License, Version 2.0 (the ""License"");
 # you may not use this file except in compliance with the License.",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,54cf54f0f318e7f5367d304ddab905adf3335c58,0c03da217c441324925cc6620bdc2bfaa73f1213,Update publish stuff (#564),"@@ -29,8 +29,9 @@ jobs:
       - run: ./gradlew publish
         if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}
         env:
-          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
-          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
+          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_CENTRAL_USERNAME }}
+          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_CENTRAL_PASSWORD }}
+          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_PRIVATE_KEY }}
 
       - name: Deploy docs to website
         if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}","@@ -29,8 +29,9 @@ jobs:
       - run: ./gradlew publish
         if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}
         env:
-          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
-          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
+          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_CENTRAL_USERNAME }}
+          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_CENTRAL_PASSWORD }}
+          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_PRIVATE_KEY }}
 
       - name: Deploy docs to website
         if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,54cf54f0f318e7f5367d304ddab905adf3335c58,0c03da217c441324925cc6620bdc2bfaa73f1213,Update publish stuff (#564),"@@ -20,12 +20,11 @@ jobs:
           java-version-file: .github/workflows/.java-version
       - uses: gradle/actions/setup-gradle@v4
 
-# TODO!
-#      - run: ./gradlew -p mosaic publish
-#        env:
-#          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
-#          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
-#          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}
+      - run: ./gradlew -p mosaic publish
+        env:
+          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_CENTRAL_USERNAME }}
+          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_CENTRAL_PASSWORD }}
+          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_PRIVATE_KEY }}
 
       - name: Extract release notes
         id: release_notes","@@ -20,12 +20,11 @@ jobs:
           java-version-file: .github/workflows/.java-version
       - uses: gradle/actions/setup-gradle@v4
 
-# TODO!
-#      - run: ./gradlew -p mosaic publish
-#        env:
-#          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
-#          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
-#          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}
+      - run: ./gradlew -p mosaic publish
+        env:
+          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_CENTRAL_USERNAME }}
+          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_CENTRAL_PASSWORD }}
+          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_PRIVATE_KEY }}
 
       - name: Extract release notes
         id: release_notes",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,ef4d54d7b6fdd17b6643dda0d259c137764a57a2,54cf54f0f318e7f5367d304ddab905adf3335c58,"Update actions/checkout action to v5 (#566)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -17,7 +17,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v4
+      - uses: actions/checkout@v5
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'","@@ -17,7 +17,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v4
+      - uses: actions/checkout@v5
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,ef4d54d7b6fdd17b6643dda0d259c137764a57a2,54cf54f0f318e7f5367d304ddab905adf3335c58,"Update actions/checkout action to v5 (#566)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -13,7 +13,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v4
+      - uses: actions/checkout@v5
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'","@@ -13,7 +13,7 @@ jobs:
     runs-on: ubuntu-latest
 
     steps:
-      - uses: actions/checkout@v4
+      - uses: actions/checkout@v5
       - uses: actions/setup-java@v4
         with:
           distribution: 'zulu'",False,other
gradle/libs.versions.toml,gradle/libs.versions.toml,2a9ec3b73fe1085a531a92d1f7a837438e967804,ef4d54d7b6fdd17b6643dda0d259c137764a57a2,"Update dependency org.jetbrains.kotlin:kotlin-gradle-plugin to v2.2.10 (#567)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,7 +1,7 @@
 [versions]
 agp = ""8.12.0""
 androidTools = ""31.12.0"" # Update this values in sync with agp.
-kotlin = ""2.2.0""
+kotlin = ""2.2.10""
 autoService = ""1.1.1""
 minSdk = ""14""
 compileSdk = ""30""","@@ -1,7 +1,7 @@
 [versions]
 agp = ""8.12.0""
 androidTools = ""31.12.0"" # Update this values in sync with agp.
-kotlin = ""2.2.0""
+kotlin = ""2.2.10""
 autoService = ""1.1.1""
 minSdk = ""14""
 compileSdk = ""30""",False,other
gradle/libs.versions.toml,gradle/libs.versions.toml,edc8b30bdebcb78ac4c6612c82faef08e73037e0,2a9ec3b73fe1085a531a92d1f7a837438e967804,"Update AGP (#568)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,6 +1,6 @@
 [versions]
-agp = ""8.12.0""
-androidTools = ""31.12.0"" # Update this values in sync with agp.
+agp = ""8.12.1""
+androidTools = ""31.12.1"" # Update this values in sync with agp.
 kotlin = ""2.2.10""
 autoService = ""1.1.1""
 minSdk = ""14""","@@ -1,6 +1,6 @@
 [versions]
-agp = ""8.12.0""
-androidTools = ""31.12.0"" # Update this values in sync with agp.
+agp = ""8.12.1""
+androidTools = ""31.12.1"" # Update this values in sync with agp.
 kotlin = ""2.2.10""
 autoService = ""1.1.1""
 minSdk = ""14""",False,other
.github/workflows/build.yaml,.github/workflows/build.yaml,1fb2dceb318fe2161ef5c6b809647f89ff964e21,edc8b30bdebcb78ac4c6612c82faef08e73037e0,"Update actions/setup-java action to v5 (#569)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -18,7 +18,7 @@ jobs:
 
     steps:
       - uses: actions/checkout@v5
-      - uses: actions/setup-java@v4
+      - uses: actions/setup-java@v5
         with:
           distribution: 'zulu'
           java-version-file: .github/workflows/.java-version","@@ -18,7 +18,7 @@ jobs:
 
     steps:
       - uses: actions/checkout@v5
-      - uses: actions/setup-java@v4
+      - uses: actions/setup-java@v5
         with:
           distribution: 'zulu'
           java-version-file: .github/workflows/.java-version",False,other
.github/workflows/release.yaml,.github/workflows/release.yaml,1fb2dceb318fe2161ef5c6b809647f89ff964e21,edc8b30bdebcb78ac4c6612c82faef08e73037e0,"Update actions/setup-java action to v5 (#569)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -14,7 +14,7 @@ jobs:
 
     steps:
       - uses: actions/checkout@v5
-      - uses: actions/setup-java@v4
+      - uses: actions/setup-java@v5
         with:
           distribution: 'zulu'
           java-version-file: .github/workflows/.java-version","@@ -14,7 +14,7 @@ jobs:
 
     steps:
       - uses: actions/checkout@v5
-      - uses: actions/setup-java@v4
+      - uses: actions/setup-java@v5
         with:
           distribution: 'zulu'
           java-version-file: .github/workflows/.java-version",False,other
gradle/libs.versions.toml,gradle/libs.versions.toml,21566bfa99f5d06e7038471eb70970e713064f7e,1fb2dceb318fe2161ef5c6b809647f89ff964e21,compileSdk 36 (#570),"@@ -4,7 +4,7 @@ androidTools = ""31.12.1"" # Update this values in sync with agp.
 kotlin = ""2.2.10""
 autoService = ""1.1.1""
 minSdk = ""14""
-compileSdk = ""30""
+compileSdk = ""36""
 
 [libraries]
 gradlePlugin-android = { module = ""com.android.tools.build:gradle"", version.ref = ""agp"" }","@@ -4,7 +4,7 @@ androidTools = ""31.12.1"" # Update this values in sync with agp.
 kotlin = ""2.2.10""
 autoService = ""1.1.1""
 minSdk = ""14""
-compileSdk = ""30""
+compileSdk = ""36""
 
 [libraries]
 gradlePlugin-android = { module = ""com.android.tools.build:gradle"", version.ref = ""agp"" }",False,other
gradle/libs.versions.toml,gradle/libs.versions.toml,3315aacdd745d1a2aeb15d7c3946da67d4eeb27b,21566bfa99f5d06e7038471eb70970e713064f7e,"Update dependency org.robolectric:robolectric to v4.16 (#571)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -25,4 +25,4 @@ lint-tests = { module = ""com.android.tools.lint:lint-tests"", version.ref = ""andr
 junit = ""junit:junit:4.13.2""
 
 truth = ""com.google.truth:truth:1.4.4""
-robolectric = ""org.robolectric:robolectric:4.15.1""
+robolectric = ""org.robolectric:robolectric:4.16""","@@ -25,4 +25,4 @@ lint-tests = { module = ""com.android.tools.lint:lint-tests"", version.ref = ""andr
 junit = ""junit:junit:4.13.2""
 
 truth = ""com.google.truth:truth:1.4.4""
-robolectric = ""org.robolectric:robolectric:4.15.1""
+robolectric = ""org.robolectric:robolectric:4.16""",False,other
gradle/libs.versions.toml,gradle/libs.versions.toml,dce26f0800cf41af0773a536d229f712032b7915,3315aacdd745d1a2aeb15d7c3946da67d4eeb27b,"Update AGP (#573)

Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>","@@ -1,6 +1,6 @@
 [versions]
-agp = ""8.12.1""
-androidTools = ""31.12.1"" # Update this values in sync with agp.
+agp = ""8.12.2""
+androidTools = ""31.12.2"" # Update this values in sync with agp.
 kotlin = ""2.2.10""
 autoService = ""1.1.1""
 minSdk = ""14""","@@ -1,6 +1,6 @@
 [versions]
-agp = ""8.12.1""
-androidTools = ""31.12.1"" # Update this values in sync with agp.
+agp = ""8.12.2""
+androidTools = ""31.12.2"" # Update this values in sync with agp.
 kotlin = ""2.2.10""
 autoService = ""1.1.1""
 minSdk = ""14""",False,other
